
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017880  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009848  080179b8  080179b8  000279b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021200  08021200  0004e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  08021200  08021200  00031200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021208  08021208  0004e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08021208  08021208  00031208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08021210  08021210  00031210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0004e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000001f0  20000000  08021218  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000ba8  20008000  20008000  00058000  2**2
                  ALLOC
 11 .bss          00004b48  200001f0  200001f0  000501f0  2**2
                  ALLOC
 12 RAM1_region   00000000  20004d38  20004d38  0004e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0004e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20004d38  20004d38  000501f0  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0004e5d8  2**0
                  CONTENTS, READONLY
 16 .comment      000000b8  00000000  00000000  0004e602  2**0
                  CONTENTS, READONLY
 17 .debug_info   000852a1  00000000  00000000  0004e6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000e8de  00000000  00000000  000d395b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00024a3d  00000000  00000000  000e2239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000044a0  00000000  00000000  00106c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00003612  00000000  00000000  0010b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002fdfc  00000000  00000000  0010e72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0006b104  00000000  00000000  0013e526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000f3454  00000000  00000000  001a962a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000d50c  00000000  00000000  0029ca80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000079  00000000  00000000  002a9f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    00002da2  00000000  00000000  002aa005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_ranges 00000060  00000000  00000000  002acda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200001f0 	.word	0x200001f0
 8000154:	00000000 	.word	0x00000000
 8000158:	080179a0 	.word	0x080179a0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200001f4 	.word	0x200001f4
 8000174:	080179a0 	.word	0x080179a0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpun>:
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x10>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d10a      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__aeabi_dcmpun+0x20>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0001 	mov.w	r0, #1
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__gesf2>:
 800100c:	f04f 3cff 	mov.w	ip, #4294967295
 8001010:	e006      	b.n	8001020 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__lesf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	e002      	b.n	8001020 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__cmpsf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	bf18      	it	ne
 8001032:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001036:	d011      	beq.n	800105c <__cmpsf2+0x40>
 8001038:	b001      	add	sp, #4
 800103a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103e:	bf18      	it	ne
 8001040:	ea90 0f01 	teqne	r0, r1
 8001044:	bf58      	it	pl
 8001046:	ebb2 0003 	subspl.w	r0, r2, r3
 800104a:	bf88      	it	hi
 800104c:	17c8      	asrhi	r0, r1, #31
 800104e:	bf38      	it	cc
 8001050:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001054:	bf18      	it	ne
 8001056:	f040 0001 	orrne.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001060:	d102      	bne.n	8001068 <__cmpsf2+0x4c>
 8001062:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001066:	d105      	bne.n	8001074 <__cmpsf2+0x58>
 8001068:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800106c:	d1e4      	bne.n	8001038 <__cmpsf2+0x1c>
 800106e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001072:	d0e1      	beq.n	8001038 <__cmpsf2+0x1c>
 8001074:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <__aeabi_cfrcmple>:
 800107c:	4684      	mov	ip, r0
 800107e:	4608      	mov	r0, r1
 8001080:	4661      	mov	r1, ip
 8001082:	e7ff      	b.n	8001084 <__aeabi_cfcmpeq>

08001084 <__aeabi_cfcmpeq>:
 8001084:	b50f      	push	{r0, r1, r2, r3, lr}
 8001086:	f7ff ffc9 	bl	800101c <__cmpsf2>
 800108a:	2800      	cmp	r0, #0
 800108c:	bf48      	it	mi
 800108e:	f110 0f00 	cmnmi.w	r0, #0
 8001092:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001094 <__aeabi_fcmpeq>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff fff4 	bl	8001084 <__aeabi_cfcmpeq>
 800109c:	bf0c      	ite	eq
 800109e:	2001      	moveq	r0, #1
 80010a0:	2000      	movne	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmplt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffea 	bl	8001084 <__aeabi_cfcmpeq>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmple>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffe0 	bl	8001084 <__aeabi_cfcmpeq>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpge>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffd2 	bl	800107c <__aeabi_cfrcmple>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpgt>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffc8 	bl	800107c <__aeabi_cfrcmple>
 80010ec:	bf34      	ite	cc
 80010ee:	2001      	movcc	r0, #1
 80010f0:	2000      	movcs	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpun>:
 80010f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001100:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001104:	d102      	bne.n	800110c <__aeabi_fcmpun+0x14>
 8001106:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110a:	d108      	bne.n	800111e <__aeabi_fcmpun+0x26>
 800110c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001110:	d102      	bne.n	8001118 <__aeabi_fcmpun+0x20>
 8001112:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001116:	d102      	bne.n	800111e <__aeabi_fcmpun+0x26>
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	f04f 0001 	mov.w	r0, #1
 8001122:	4770      	bx	lr

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_f2uiz>:
 8001170:	0042      	lsls	r2, r0, #1
 8001172:	d20e      	bcs.n	8001192 <__aeabi_f2uiz+0x22>
 8001174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001178:	d30b      	bcc.n	8001192 <__aeabi_f2uiz+0x22>
 800117a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001182:	d409      	bmi.n	8001198 <__aeabi_f2uiz+0x28>
 8001184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	4770      	bx	lr
 8001192:	f04f 0000 	mov.w	r0, #0
 8001196:	4770      	bx	lr
 8001198:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800119c:	d101      	bne.n	80011a2 <__aeabi_f2uiz+0x32>
 800119e:	0242      	lsls	r2, r0, #9
 80011a0:	d102      	bne.n	80011a8 <__aeabi_f2uiz+0x38>
 80011a2:	f04f 30ff 	mov.w	r0, #4294967295
 80011a6:	4770      	bx	lr
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <__aeabi_uldivmod>:
 80011b0:	b953      	cbnz	r3, 80011c8 <__aeabi_uldivmod+0x18>
 80011b2:	b94a      	cbnz	r2, 80011c8 <__aeabi_uldivmod+0x18>
 80011b4:	2900      	cmp	r1, #0
 80011b6:	bf08      	it	eq
 80011b8:	2800      	cmpeq	r0, #0
 80011ba:	bf1c      	itt	ne
 80011bc:	f04f 31ff 	movne.w	r1, #4294967295
 80011c0:	f04f 30ff 	movne.w	r0, #4294967295
 80011c4:	f000 b970 	b.w	80014a8 <__aeabi_idiv0>
 80011c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80011cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011d0:	f000 f806 	bl	80011e0 <__udivmoddi4>
 80011d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011dc:	b004      	add	sp, #16
 80011de:	4770      	bx	lr

080011e0 <__udivmoddi4>:
 80011e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011e4:	9e08      	ldr	r6, [sp, #32]
 80011e6:	460d      	mov	r5, r1
 80011e8:	4604      	mov	r4, r0
 80011ea:	460f      	mov	r7, r1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d14a      	bne.n	8001286 <__udivmoddi4+0xa6>
 80011f0:	428a      	cmp	r2, r1
 80011f2:	4694      	mov	ip, r2
 80011f4:	d965      	bls.n	80012c2 <__udivmoddi4+0xe2>
 80011f6:	fab2 f382 	clz	r3, r2
 80011fa:	b143      	cbz	r3, 800120e <__udivmoddi4+0x2e>
 80011fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8001200:	f1c3 0220 	rsb	r2, r3, #32
 8001204:	409f      	lsls	r7, r3
 8001206:	fa20 f202 	lsr.w	r2, r0, r2
 800120a:	4317      	orrs	r7, r2
 800120c:	409c      	lsls	r4, r3
 800120e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001212:	fa1f f58c 	uxth.w	r5, ip
 8001216:	fbb7 f1fe 	udiv	r1, r7, lr
 800121a:	0c22      	lsrs	r2, r4, #16
 800121c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001220:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001224:	fb01 f005 	mul.w	r0, r1, r5
 8001228:	4290      	cmp	r0, r2
 800122a:	d90a      	bls.n	8001242 <__udivmoddi4+0x62>
 800122c:	eb1c 0202 	adds.w	r2, ip, r2
 8001230:	f101 37ff 	add.w	r7, r1, #4294967295
 8001234:	f080 811b 	bcs.w	800146e <__udivmoddi4+0x28e>
 8001238:	4290      	cmp	r0, r2
 800123a:	f240 8118 	bls.w	800146e <__udivmoddi4+0x28e>
 800123e:	3902      	subs	r1, #2
 8001240:	4462      	add	r2, ip
 8001242:	1a12      	subs	r2, r2, r0
 8001244:	b2a4      	uxth	r4, r4
 8001246:	fbb2 f0fe 	udiv	r0, r2, lr
 800124a:	fb0e 2210 	mls	r2, lr, r0, r2
 800124e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001252:	fb00 f505 	mul.w	r5, r0, r5
 8001256:	42a5      	cmp	r5, r4
 8001258:	d90a      	bls.n	8001270 <__udivmoddi4+0x90>
 800125a:	eb1c 0404 	adds.w	r4, ip, r4
 800125e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001262:	f080 8106 	bcs.w	8001472 <__udivmoddi4+0x292>
 8001266:	42a5      	cmp	r5, r4
 8001268:	f240 8103 	bls.w	8001472 <__udivmoddi4+0x292>
 800126c:	4464      	add	r4, ip
 800126e:	3802      	subs	r0, #2
 8001270:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001274:	1b64      	subs	r4, r4, r5
 8001276:	2100      	movs	r1, #0
 8001278:	b11e      	cbz	r6, 8001282 <__udivmoddi4+0xa2>
 800127a:	40dc      	lsrs	r4, r3
 800127c:	2300      	movs	r3, #0
 800127e:	e9c6 4300 	strd	r4, r3, [r6]
 8001282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001286:	428b      	cmp	r3, r1
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0xbc>
 800128a:	2e00      	cmp	r6, #0
 800128c:	f000 80ec 	beq.w	8001468 <__udivmoddi4+0x288>
 8001290:	2100      	movs	r1, #0
 8001292:	e9c6 0500 	strd	r0, r5, [r6]
 8001296:	4608      	mov	r0, r1
 8001298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800129c:	fab3 f183 	clz	r1, r3
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d149      	bne.n	8001338 <__udivmoddi4+0x158>
 80012a4:	42ab      	cmp	r3, r5
 80012a6:	d302      	bcc.n	80012ae <__udivmoddi4+0xce>
 80012a8:	4282      	cmp	r2, r0
 80012aa:	f200 80f7 	bhi.w	800149c <__udivmoddi4+0x2bc>
 80012ae:	1a84      	subs	r4, r0, r2
 80012b0:	eb65 0203 	sbc.w	r2, r5, r3
 80012b4:	2001      	movs	r0, #1
 80012b6:	4617      	mov	r7, r2
 80012b8:	2e00      	cmp	r6, #0
 80012ba:	d0e2      	beq.n	8001282 <__udivmoddi4+0xa2>
 80012bc:	e9c6 4700 	strd	r4, r7, [r6]
 80012c0:	e7df      	b.n	8001282 <__udivmoddi4+0xa2>
 80012c2:	b902      	cbnz	r2, 80012c6 <__udivmoddi4+0xe6>
 80012c4:	deff      	udf	#255	; 0xff
 80012c6:	fab2 f382 	clz	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f040 808f 	bne.w	80013ee <__udivmoddi4+0x20e>
 80012d0:	1a8a      	subs	r2, r1, r2
 80012d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012d6:	fa1f fe8c 	uxth.w	lr, ip
 80012da:	2101      	movs	r1, #1
 80012dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80012e0:	fb07 2015 	mls	r0, r7, r5, r2
 80012e4:	0c22      	lsrs	r2, r4, #16
 80012e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80012ea:	fb0e f005 	mul.w	r0, lr, r5
 80012ee:	4290      	cmp	r0, r2
 80012f0:	d908      	bls.n	8001304 <__udivmoddi4+0x124>
 80012f2:	eb1c 0202 	adds.w	r2, ip, r2
 80012f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80012fa:	d202      	bcs.n	8001302 <__udivmoddi4+0x122>
 80012fc:	4290      	cmp	r0, r2
 80012fe:	f200 80ca 	bhi.w	8001496 <__udivmoddi4+0x2b6>
 8001302:	4645      	mov	r5, r8
 8001304:	1a12      	subs	r2, r2, r0
 8001306:	b2a4      	uxth	r4, r4
 8001308:	fbb2 f0f7 	udiv	r0, r2, r7
 800130c:	fb07 2210 	mls	r2, r7, r0, r2
 8001310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001314:	fb0e fe00 	mul.w	lr, lr, r0
 8001318:	45a6      	cmp	lr, r4
 800131a:	d908      	bls.n	800132e <__udivmoddi4+0x14e>
 800131c:	eb1c 0404 	adds.w	r4, ip, r4
 8001320:	f100 32ff 	add.w	r2, r0, #4294967295
 8001324:	d202      	bcs.n	800132c <__udivmoddi4+0x14c>
 8001326:	45a6      	cmp	lr, r4
 8001328:	f200 80ba 	bhi.w	80014a0 <__udivmoddi4+0x2c0>
 800132c:	4610      	mov	r0, r2
 800132e:	eba4 040e 	sub.w	r4, r4, lr
 8001332:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001336:	e79f      	b.n	8001278 <__udivmoddi4+0x98>
 8001338:	f1c1 0720 	rsb	r7, r1, #32
 800133c:	408b      	lsls	r3, r1
 800133e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001342:	ea4c 0c03 	orr.w	ip, ip, r3
 8001346:	fa05 f401 	lsl.w	r4, r5, r1
 800134a:	fa20 f307 	lsr.w	r3, r0, r7
 800134e:	40fd      	lsrs	r5, r7
 8001350:	4323      	orrs	r3, r4
 8001352:	fa00 f901 	lsl.w	r9, r0, r1
 8001356:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800135a:	fa1f fe8c 	uxth.w	lr, ip
 800135e:	fbb5 f8f0 	udiv	r8, r5, r0
 8001362:	0c1c      	lsrs	r4, r3, #16
 8001364:	fb00 5518 	mls	r5, r0, r8, r5
 8001368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800136c:	fb08 f50e 	mul.w	r5, r8, lr
 8001370:	42a5      	cmp	r5, r4
 8001372:	fa02 f201 	lsl.w	r2, r2, r1
 8001376:	d90b      	bls.n	8001390 <__udivmoddi4+0x1b0>
 8001378:	eb1c 0404 	adds.w	r4, ip, r4
 800137c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001380:	f080 8087 	bcs.w	8001492 <__udivmoddi4+0x2b2>
 8001384:	42a5      	cmp	r5, r4
 8001386:	f240 8084 	bls.w	8001492 <__udivmoddi4+0x2b2>
 800138a:	f1a8 0802 	sub.w	r8, r8, #2
 800138e:	4464      	add	r4, ip
 8001390:	1b64      	subs	r4, r4, r5
 8001392:	b29d      	uxth	r5, r3
 8001394:	fbb4 f3f0 	udiv	r3, r4, r0
 8001398:	fb00 4413 	mls	r4, r0, r3, r4
 800139c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80013a4:	45a6      	cmp	lr, r4
 80013a6:	d908      	bls.n	80013ba <__udivmoddi4+0x1da>
 80013a8:	eb1c 0404 	adds.w	r4, ip, r4
 80013ac:	f103 30ff 	add.w	r0, r3, #4294967295
 80013b0:	d26b      	bcs.n	800148a <__udivmoddi4+0x2aa>
 80013b2:	45a6      	cmp	lr, r4
 80013b4:	d969      	bls.n	800148a <__udivmoddi4+0x2aa>
 80013b6:	3b02      	subs	r3, #2
 80013b8:	4464      	add	r4, ip
 80013ba:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013be:	fba0 8302 	umull	r8, r3, r0, r2
 80013c2:	eba4 040e 	sub.w	r4, r4, lr
 80013c6:	429c      	cmp	r4, r3
 80013c8:	46c6      	mov	lr, r8
 80013ca:	461d      	mov	r5, r3
 80013cc:	d355      	bcc.n	800147a <__udivmoddi4+0x29a>
 80013ce:	d052      	beq.n	8001476 <__udivmoddi4+0x296>
 80013d0:	b156      	cbz	r6, 80013e8 <__udivmoddi4+0x208>
 80013d2:	ebb9 030e 	subs.w	r3, r9, lr
 80013d6:	eb64 0405 	sbc.w	r4, r4, r5
 80013da:	fa04 f707 	lsl.w	r7, r4, r7
 80013de:	40cb      	lsrs	r3, r1
 80013e0:	40cc      	lsrs	r4, r1
 80013e2:	431f      	orrs	r7, r3
 80013e4:	e9c6 7400 	strd	r7, r4, [r6]
 80013e8:	2100      	movs	r1, #0
 80013ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ee:	f1c3 0120 	rsb	r1, r3, #32
 80013f2:	fa02 fc03 	lsl.w	ip, r2, r3
 80013f6:	fa20 f201 	lsr.w	r2, r0, r1
 80013fa:	fa25 f101 	lsr.w	r1, r5, r1
 80013fe:	409d      	lsls	r5, r3
 8001400:	432a      	orrs	r2, r5
 8001402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001406:	fa1f fe8c 	uxth.w	lr, ip
 800140a:	fbb1 f0f7 	udiv	r0, r1, r7
 800140e:	fb07 1510 	mls	r5, r7, r0, r1
 8001412:	0c11      	lsrs	r1, r2, #16
 8001414:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001418:	fb00 f50e 	mul.w	r5, r0, lr
 800141c:	428d      	cmp	r5, r1
 800141e:	fa04 f403 	lsl.w	r4, r4, r3
 8001422:	d908      	bls.n	8001436 <__udivmoddi4+0x256>
 8001424:	eb1c 0101 	adds.w	r1, ip, r1
 8001428:	f100 38ff 	add.w	r8, r0, #4294967295
 800142c:	d22f      	bcs.n	800148e <__udivmoddi4+0x2ae>
 800142e:	428d      	cmp	r5, r1
 8001430:	d92d      	bls.n	800148e <__udivmoddi4+0x2ae>
 8001432:	3802      	subs	r0, #2
 8001434:	4461      	add	r1, ip
 8001436:	1b49      	subs	r1, r1, r5
 8001438:	b292      	uxth	r2, r2
 800143a:	fbb1 f5f7 	udiv	r5, r1, r7
 800143e:	fb07 1115 	mls	r1, r7, r5, r1
 8001442:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001446:	fb05 f10e 	mul.w	r1, r5, lr
 800144a:	4291      	cmp	r1, r2
 800144c:	d908      	bls.n	8001460 <__udivmoddi4+0x280>
 800144e:	eb1c 0202 	adds.w	r2, ip, r2
 8001452:	f105 38ff 	add.w	r8, r5, #4294967295
 8001456:	d216      	bcs.n	8001486 <__udivmoddi4+0x2a6>
 8001458:	4291      	cmp	r1, r2
 800145a:	d914      	bls.n	8001486 <__udivmoddi4+0x2a6>
 800145c:	3d02      	subs	r5, #2
 800145e:	4462      	add	r2, ip
 8001460:	1a52      	subs	r2, r2, r1
 8001462:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001466:	e739      	b.n	80012dc <__udivmoddi4+0xfc>
 8001468:	4631      	mov	r1, r6
 800146a:	4630      	mov	r0, r6
 800146c:	e709      	b.n	8001282 <__udivmoddi4+0xa2>
 800146e:	4639      	mov	r1, r7
 8001470:	e6e7      	b.n	8001242 <__udivmoddi4+0x62>
 8001472:	4610      	mov	r0, r2
 8001474:	e6fc      	b.n	8001270 <__udivmoddi4+0x90>
 8001476:	45c1      	cmp	r9, r8
 8001478:	d2aa      	bcs.n	80013d0 <__udivmoddi4+0x1f0>
 800147a:	ebb8 0e02 	subs.w	lr, r8, r2
 800147e:	eb63 050c 	sbc.w	r5, r3, ip
 8001482:	3801      	subs	r0, #1
 8001484:	e7a4      	b.n	80013d0 <__udivmoddi4+0x1f0>
 8001486:	4645      	mov	r5, r8
 8001488:	e7ea      	b.n	8001460 <__udivmoddi4+0x280>
 800148a:	4603      	mov	r3, r0
 800148c:	e795      	b.n	80013ba <__udivmoddi4+0x1da>
 800148e:	4640      	mov	r0, r8
 8001490:	e7d1      	b.n	8001436 <__udivmoddi4+0x256>
 8001492:	46d0      	mov	r8, sl
 8001494:	e77c      	b.n	8001390 <__udivmoddi4+0x1b0>
 8001496:	3d02      	subs	r5, #2
 8001498:	4462      	add	r2, ip
 800149a:	e733      	b.n	8001304 <__udivmoddi4+0x124>
 800149c:	4608      	mov	r0, r1
 800149e:	e70b      	b.n	80012b8 <__udivmoddi4+0xd8>
 80014a0:	4464      	add	r4, ip
 80014a2:	3802      	subs	r0, #2
 80014a4:	e743      	b.n	800132e <__udivmoddi4+0x14e>
 80014a6:	bf00      	nop

080014a8 <__aeabi_idiv0>:
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop

080014ac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80014ac:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80014ae:	4813      	ldr	r0, [pc, #76]	; (80014fc <MX_ADC_Init+0x50>)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_ADC_Init+0x54>)
 80014b2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80014b8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014ba:	2300      	movs	r3, #0
 80014bc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014be:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014c0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c2:	2204      	movs	r2, #4
 80014c4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80014c6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80014c8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014ca:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 80014cc:	2201      	movs	r2, #1
 80014ce:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014d0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014d8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80014e2:	2207      	movs	r2, #7
 80014e4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80014e6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80014e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014ec:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014ee:	f004 faab 	bl	8005a48 <HAL_ADC_Init>
 80014f2:	b900      	cbnz	r0, 80014f6 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80014f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80014f6:	f000 fb42 	bl	8001b7e <Error_Handler>
}
 80014fa:	e7fb      	b.n	80014f4 <MX_ADC_Init+0x48>
 80014fc:	2000020c 	.word	0x2000020c
 8001500:	40012400 	.word	0x40012400

08001504 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001504:	6802      	ldr	r2, [r0, #0]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_ADC_MspInit+0x28>)
 8001508:	429a      	cmp	r2, r3
 800150a:	d000      	beq.n	800150e <HAL_ADC_MspInit+0xa>
 800150c:	4770      	bx	lr
{
 800150e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800151a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800151c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001522:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001524:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001526:	b002      	add	sp, #8
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40012400 	.word	0x40012400

08001530 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_ADC_MspDeInit+0x18>)
 8001534:	429a      	cmp	r2, r3
 8001536:	d000      	beq.n	800153a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001538:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800153a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800153e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001544:	6613      	str	r3, [r2, #96]	; 0x60
 8001546:	e7f7      	b.n	8001538 <HAL_ADC_MspDeInit+0x8>
 8001548:	40012400 	.word	0x40012400

0800154c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800154c:	b530      	push	{r4, r5, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001552:	2300      	movs	r3, #0
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 800155a:	f7ff ffa7 	bl	80014ac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <ADC_ReadChannels+0x6c>)
 8001560:	f004 feaa 	bl	80062b8 <HAL_ADCEx_Calibration_Start>
 8001564:	b9f8      	cbnz	r0, 80015a6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001566:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001568:	2300      	movs	r3, #0
 800156a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800156c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800156e:	a901      	add	r1, sp, #4
 8001570:	4811      	ldr	r0, [pc, #68]	; (80015b8 <ADC_ReadChannels+0x6c>)
 8001572:	f004 fbe3 	bl	8005d3c <HAL_ADC_ConfigChannel>
 8001576:	b9c8      	cbnz	r0, 80015ac <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001578:	480f      	ldr	r0, [pc, #60]	; (80015b8 <ADC_ReadChannels+0x6c>)
 800157a:	f004 fda1 	bl	80060c0 <HAL_ADC_Start>
 800157e:	b9c0      	cbnz	r0, 80015b2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001580:	4c0d      	ldr	r4, [pc, #52]	; (80015b8 <ADC_ReadChannels+0x6c>)
 8001582:	f04f 31ff 	mov.w	r1, #4294967295
 8001586:	4620      	mov	r0, r4
 8001588:	f004 fb76 	bl	8005c78 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800158c:	4620      	mov	r0, r4
 800158e:	f004 fe73 	bl	8006278 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001592:	4620      	mov	r0, r4
 8001594:	f004 fbcf 	bl	8005d36 <HAL_ADC_GetValue>
 8001598:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 800159a:	4620      	mov	r0, r4
 800159c:	f004 fe0c 	bl	80061b8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80015a0:	4628      	mov	r0, r5
 80015a2:	b005      	add	sp, #20
 80015a4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80015a6:	f000 faea 	bl	8001b7e <Error_Handler>
 80015aa:	e7dc      	b.n	8001566 <ADC_ReadChannels+0x1a>
    Error_Handler();
 80015ac:	f000 fae7 	bl	8001b7e <Error_Handler>
 80015b0:	e7e2      	b.n	8001578 <ADC_ReadChannels+0x2c>
    Error_Handler();
 80015b2:	f000 fae4 	bl	8001b7e <Error_Handler>
 80015b6:	e7e3      	b.n	8001580 <ADC_ReadChannels+0x34>
 80015b8:	2000020c 	.word	0x2000020c

080015bc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <SYS_InitMeasurement+0x8>)
 80015be:	4a02      	ldr	r2, [pc, #8]	; (80015c8 <SYS_InitMeasurement+0xc>)
 80015c0:	601a      	str	r2, [r3, #0]
}
 80015c2:	4770      	bx	lr
 80015c4:	2000020c 	.word	0x2000020c
 80015c8:	40012400 	.word	0x40012400

080015cc <SYS_GetBatteryLevel>:
{
 80015cc:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <SYS_GetBatteryLevel+0x38>)
 80015d0:	f7ff ffbc 	bl	800154c <ADC_ReadChannels>
  if (measuredLevel == 0)
 80015d4:	b1a0      	cbz	r0, 8001600 <SYS_GetBatteryLevel+0x34>
 80015d6:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <SYS_GetBatteryLevel+0x3c>)
 80015da:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 80015de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e2:	4290      	cmp	r0, r2
 80015e4:	d007      	beq.n	80015f6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80015e6:	f640 42e4 	movw	r2, #3300	; 0xce4
 80015ea:	fb02 f000 	mul.w	r0, r2, r0
 80015ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80015f2:	b280      	uxth	r0, r0
 80015f4:	e005      	b.n	8001602 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <SYS_GetBatteryLevel+0x40>)
 80015f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80015fc:	b280      	uxth	r0, r0
 80015fe:	e000      	b.n	8001602 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001600:	2000      	movs	r0, #0
}
 8001602:	bd08      	pop	{r3, pc}
 8001604:	b4002000 	.word	0xb4002000
 8001608:	1fff7500 	.word	0x1fff7500
 800160c:	004c08d8 	.word	0x004c08d8

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001610:	b500      	push	{lr}
 8001612:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800161a:	f042 0204 	orr.w	r2, r2, #4
 800161e:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001620:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001622:	f002 0204 	and.w	r2, r2, #4
 8001626:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001628:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800162a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800163a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2102      	movs	r1, #2
 8001640:	200f      	movs	r0, #15
 8001642:	f004 feeb 	bl	800641c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001646:	200f      	movs	r0, #15
 8001648:	f004 ff20 	bl	800648c <HAL_NVIC_EnableIRQ>

}
 800164c:	b003      	add	sp, #12
 800164e:	f85d fb04 	ldr.w	pc, [sp], #4

08001652 <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001652:	2300      	movs	r3, #0
 8001654:	e001      	b.n	800165a <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001656:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001658:	3308      	adds	r3, #8
 800165a:	428b      	cmp	r3, r1
 800165c:	d20a      	bcs.n	8001674 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 800165e:	6842      	ldr	r2, [r0, #4]
 8001660:	f8d0 c000 	ldr.w	ip, [r0]
 8001664:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001668:	bf08      	it	eq
 800166a:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 800166e:	d0f2      	beq.n	8001656 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001670:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 8001672:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001674:	2000      	movs	r0, #0
 8001676:	4770      	bx	lr

08001678 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001678:	b130      	cbz	r0, 8001688 <FLASH_IF_INT_Read+0x10>
{
 800167a:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 800167c:	b139      	cbz	r1, 800168e <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800167e:	b292      	uxth	r2, r2
 8001680:	f014 fba2 	bl	8015dc8 <UTIL_MEM_cpy_8>
  return ret_status;
 8001684:	2000      	movs	r0, #0
}
 8001686:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001688:	f06f 0005 	mvn.w	r0, #5
}
 800168c:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 800168e:	f06f 0005 	mvn.w	r0, #5
 8001692:	e7f8      	b.n	8001686 <FLASH_IF_INT_Read+0xe>

08001694 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001694:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001696:	f005 f9c9 	bl	8006a2c <HAL_FLASH_Unlock>
 800169a:	b978      	cbnz	r0, 80016bc <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <FLASH_IF_INT_Clear_Error+0x30>)
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80016a4:	619a      	str	r2, [r3, #24]
 80016a6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80016aa:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80016ac:	f005 f9d6 	bl	8006a5c <HAL_FLASH_Lock>
 80016b0:	b908      	cbnz	r0, 80016b6 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 80016b2:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 80016b4:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80016b6:	f06f 0004 	mvn.w	r0, #4
 80016ba:	e7fb      	b.n	80016b4 <FLASH_IF_INT_Clear_Error+0x20>
 80016bc:	f06f 0004 	mvn.w	r0, #4
 80016c0:	e7f8      	b.n	80016b4 <FLASH_IF_INT_Clear_Error+0x20>
 80016c2:	bf00      	nop
 80016c4:	58004000 	.word	0x58004000

080016c8 <FLASH_IF_INT_Erase>:
{
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d039      	beq.n	8001748 <FLASH_IF_INT_Erase+0x80>
 80016d4:	460e      	mov	r6, r1
 80016d6:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 80016d8:	f7ff ffdc 	bl	8001694 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80016dc:	4605      	mov	r5, r0
 80016de:	b110      	cbz	r0, 80016e6 <FLASH_IF_INT_Erase+0x1e>
}
 80016e0:	4628      	mov	r0, r5
 80016e2:	b004      	add	sp, #16
 80016e4:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80016e6:	f005 f9a1 	bl	8006a2c <HAL_FLASH_Unlock>
 80016ea:	bb80      	cbnz	r0, 800174e <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80016ec:	2302      	movs	r3, #2
 80016ee:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 80016f0:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80016f4:	4817      	ldr	r0, [pc, #92]	; (8001754 <FLASH_IF_INT_Erase+0x8c>)
 80016f6:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <FLASH_IF_INT_Erase+0x90>)
 80016fc:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 8001700:	fbb3 fcf1 	udiv	ip, r3, r1
 8001704:	fb01 331c 	mls	r3, r1, ip, r3
 8001708:	0adb      	lsrs	r3, r3, #11
 800170a:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 800170c:	19a1      	adds	r1, r4, r6
 800170e:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8001712:	3901      	subs	r1, #1
 8001714:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	; 0x5e0
 8001718:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 800171c:	fbb1 f0f2 	udiv	r0, r1, r2
 8001720:	fb02 1110 	mls	r1, r2, r0, r1
 8001724:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 8001728:	3301      	adds	r3, #1
 800172a:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 800172c:	a903      	add	r1, sp, #12
 800172e:	4668      	mov	r0, sp
 8001730:	f005 fa60 	bl	8006bf4 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8001734:	b118      	cbz	r0, 800173e <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001736:	2802      	cmp	r0, #2
 8001738:	d004      	beq.n	8001744 <FLASH_IF_INT_Erase+0x7c>
 800173a:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 800173e:	f005 f98d 	bl	8006a5c <HAL_FLASH_Lock>
 8001742:	e7cd      	b.n	80016e0 <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001744:	2501      	movs	r5, #1
 8001746:	e7fa      	b.n	800173e <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8001748:	f06f 0505 	mvn.w	r5, #5
 800174c:	e7c8      	b.n	80016e0 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 800174e:	f06f 0504 	mvn.w	r5, #4
 8001752:	e7c5      	b.n	80016e0 <FLASH_IF_INT_Erase+0x18>
 8001754:	1fff7000 	.word	0x1fff7000
 8001758:	03fffc00 	.word	0x03fffc00

0800175c <FLASH_IF_INT_Write>:
{
 800175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001760:	b089      	sub	sp, #36	; 0x24
 8001762:	9003      	str	r0, [sp, #12]
 8001764:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 8001766:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001768:	2800      	cmp	r0, #0
 800176a:	f000 80a9 	beq.w	80018c0 <FLASH_IF_INT_Write+0x164>
 800176e:	4683      	mov	fp, r0
 8001770:	2900      	cmp	r1, #0
 8001772:	f000 80a9 	beq.w	80018c8 <FLASH_IF_INT_Write+0x16c>
 8001776:	f012 0f07 	tst.w	r2, #7
 800177a:	f040 80a9 	bne.w	80018d0 <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800177e:	f010 0307 	ands.w	r3, r0, #7
 8001782:	9305      	str	r3, [sp, #20]
 8001784:	f040 80a8 	bne.w	80018d8 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001788:	f7ff ff84 	bl	8001694 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 800178c:	9002      	str	r0, [sp, #8]
 800178e:	b118      	cbz	r0, 8001798 <FLASH_IF_INT_Write+0x3c>
}
 8001790:	9802      	ldr	r0, [sp, #8]
 8001792:	b009      	add	sp, #36	; 0x24
 8001794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001798:	f005 f948 	bl	8006a2c <HAL_FLASH_Unlock>
 800179c:	2800      	cmp	r0, #0
 800179e:	f040 809f 	bne.w	80018e0 <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 80017a2:	9c03      	ldr	r4, [sp, #12]
 80017a4:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 80017a8:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <FLASH_IF_INT_Write+0x18c>)
 80017aa:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80017ae:	494f      	ldr	r1, [pc, #316]	; (80018ec <FLASH_IF_INT_Write+0x190>)
 80017b0:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 80017b4:	fbb2 f3f1 	udiv	r3, r2, r1
 80017b8:	fb01 2213 	mls	r2, r1, r3, r2
 80017bc:	0ad3      	lsrs	r3, r2, #11
 80017be:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80017c0:	9b04      	ldr	r3, [sp, #16]
 80017c2:	18e3      	adds	r3, r4, r3
 80017c4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80017c8:	3b01      	subs	r3, #1
 80017ca:	fbb3 f0f1 	udiv	r0, r3, r1
 80017ce:	fb01 3310 	mls	r3, r1, r0, r3
 80017d2:	0adb      	lsrs	r3, r3, #11
 80017d4:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 80017d8:	3301      	adds	r3, #1
 80017da:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d906      	bls.n	80017ee <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80017e0:	f3c4 090a 	ubfx	r9, r4, #0, #11
 80017e4:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 80017e8:	f8dd a018 	ldr.w	sl, [sp, #24]
 80017ec:	e02f      	b.n	800184e <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 80017ee:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80017f2:	e7f9      	b.n	80017e8 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 80017f4:	46c8      	mov	r8, r9
          current_source = uSource;
 80017f6:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 80017f8:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80017fa:	9d05      	ldr	r5, [sp, #20]
 80017fc:	4545      	cmp	r5, r8
 80017fe:	d215      	bcs.n	800182c <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001800:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001802:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001806:	4621      	mov	r1, r4
 8001808:	2001      	movs	r0, #1
 800180a:	f005 f96b 	bl	8006ae4 <HAL_FLASH_Program>
 800180e:	b950      	cbnz	r0, 8001826 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001810:	6820      	ldr	r0, [r4, #0]
 8001812:	6862      	ldr	r2, [r4, #4]
 8001814:	59e9      	ldr	r1, [r5, r7]
 8001816:	6873      	ldr	r3, [r6, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	bf08      	it	eq
 800181c:	4288      	cmpeq	r0, r1
 800181e:	d141      	bne.n	80018a4 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 8001820:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001822:	3508      	adds	r5, #8
 8001824:	e7ea      	b.n	80017fc <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 8001826:	f06f 0303 	mvn.w	r3, #3
 800182a:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 800182c:	9b02      	ldr	r3, [sp, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d13f      	bne.n	80018b2 <FLASH_IF_INT_Write+0x156>
        uDest += length;
 8001832:	44cb      	add	fp, r9
        uSource += length;
 8001834:	9b01      	ldr	r3, [sp, #4]
 8001836:	444b      	add	r3, r9
 8001838:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 800183a:	9b04      	ldr	r3, [sp, #16]
 800183c:	eba3 0909 	sub.w	r9, r3, r9
 8001840:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 8001844:	bf28      	it	cs
 8001846:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800184a:	f10a 0a01 	add.w	sl, sl, #1
 800184e:	9b06      	ldr	r3, [sp, #24]
 8001850:	9a07      	ldr	r2, [sp, #28]
 8001852:	4413      	add	r3, r2
 8001854:	4553      	cmp	r3, sl
 8001856:	d92c      	bls.n	80018b2 <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001858:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 800185c:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800185e:	4649      	mov	r1, r9
 8001860:	9803      	ldr	r0, [sp, #12]
 8001862:	f7ff fef6 	bl	8001652 <FLASH_IF_INT_IsEmpty>
 8001866:	2800      	cmp	r0, #0
 8001868:	d0c4      	beq.n	80017f4 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <FLASH_IF_INT_Write+0x194>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	b1e8      	cbz	r0, 80018ac <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001874:	4621      	mov	r1, r4
 8001876:	f7ff feff 	bl	8001678 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <FLASH_IF_INT_Write+0x194>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f3cb 000a 	ubfx	r0, fp, #0, #11
 8001882:	fa1f f289 	uxth.w	r2, r9
 8001886:	9901      	ldr	r1, [sp, #4]
 8001888:	4418      	add	r0, r3
 800188a:	f014 fa9d 	bl	8015dc8 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800188e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff ff18 	bl	80016c8 <FLASH_IF_INT_Erase>
 8001898:	b970      	cbnz	r0, 80018b8 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <FLASH_IF_INT_Write+0x194>)
 800189c:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800189e:	f44f 6800 	mov.w	r8, #2048	; 0x800
 80018a2:	e7aa      	b.n	80017fa <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 80018a4:	f06f 0303 	mvn.w	r3, #3
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	e7bf      	b.n	800182c <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 80018ac:	f06f 0305 	mvn.w	r3, #5
 80018b0:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 80018b2:	f005 f8d3 	bl	8006a5c <HAL_FLASH_Lock>
 80018b6:	e76b      	b.n	8001790 <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 80018b8:	f06f 0301 	mvn.w	r3, #1
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	e7f8      	b.n	80018b2 <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 80018c0:	f06f 0305 	mvn.w	r3, #5
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	e763      	b.n	8001790 <FLASH_IF_INT_Write+0x34>
 80018c8:	f06f 0305 	mvn.w	r3, #5
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	e75f      	b.n	8001790 <FLASH_IF_INT_Write+0x34>
 80018d0:	f06f 0305 	mvn.w	r3, #5
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	e75b      	b.n	8001790 <FLASH_IF_INT_Write+0x34>
 80018d8:	f06f 0305 	mvn.w	r3, #5
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	e757      	b.n	8001790 <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 80018e0:	f06f 0304 	mvn.w	r3, #4
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	e753      	b.n	8001790 <FLASH_IF_INT_Write+0x34>
 80018e8:	1fff7000 	.word	0x1fff7000
 80018ec:	03fffc00 	.word	0x03fffc00
 80018f0:	20000270 	.word	0x20000270

080018f4 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80018f4:	4b01      	ldr	r3, [pc, #4]	; (80018fc <FLASH_IF_Init+0x8>)
 80018f6:	6018      	str	r0, [r3, #0]
}
 80018f8:	2000      	movs	r0, #0
 80018fa:	4770      	bx	lr
 80018fc:	20000270 	.word	0x20000270

08001900 <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001900:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001904:	d30e      	bcc.n	8001924 <FLASH_IF_Write+0x24>
{
 8001906:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <FLASH_IF_Write+0x30>)
 800190a:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <FLASH_IF_Write+0x34>)
 8001910:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001914:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001918:	3b01      	subs	r3, #1
 800191a:	4298      	cmp	r0, r3
 800191c:	d805      	bhi.n	800192a <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800191e:	f7ff ff1d 	bl	800175c <FLASH_IF_INT_Write>
}
 8001922:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001928:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800192a:	f04f 30ff 	mov.w	r0, #4294967295
 800192e:	e7f8      	b.n	8001922 <FLASH_IF_Write+0x22>
 8001930:	1fff7000 	.word	0x1fff7000
 8001934:	03fffc00 	.word	0x03fffc00

08001938 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001938:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800193c:	d30e      	bcc.n	800195c <FLASH_IF_Read+0x24>
{
 800193e:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <FLASH_IF_Read+0x30>)
 8001942:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <FLASH_IF_Read+0x34>)
 8001948:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 800194c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001950:	3b01      	subs	r3, #1
 8001952:	4299      	cmp	r1, r3
 8001954:	d805      	bhi.n	8001962 <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001956:	f7ff fe8f 	bl	8001678 <FLASH_IF_INT_Read>
}
 800195a:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001960:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001962:	f04f 30ff 	mov.w	r0, #4294967295
 8001966:	e7f8      	b.n	800195a <FLASH_IF_Read+0x22>
 8001968:	1fff7000 	.word	0x1fff7000
 800196c:	03fffc00 	.word	0x03fffc00

08001970 <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001970:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001974:	d30e      	bcc.n	8001994 <FLASH_IF_Erase+0x24>
{
 8001976:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <FLASH_IF_Erase+0x30>)
 800197a:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <FLASH_IF_Erase+0x34>)
 8001980:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001984:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001988:	3b01      	subs	r3, #1
 800198a:	4298      	cmp	r0, r3
 800198c:	d805      	bhi.n	800199a <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800198e:	f7ff fe9b 	bl	80016c8 <FLASH_IF_INT_Erase>
}
 8001992:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001998:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800199a:	f04f 30ff 	mov.w	r0, #4294967295
 800199e:	e7f8      	b.n	8001992 <FLASH_IF_Erase+0x22>
 80019a0:	1fff7000 	.word	0x1fff7000
 80019a4:	03fffc00 	.word	0x03fffc00

080019a8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80019a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019ac:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	2400      	movs	r4, #0
 80019b0:	9405      	str	r4, [sp, #20]
 80019b2:	9406      	str	r4, [sp, #24]
 80019b4:	9407      	str	r4, [sp, #28]
 80019b6:	9408      	str	r4, [sp, #32]
 80019b8:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019c0:	f042 0204 	orr.w	r2, r2, #4
 80019c4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019c8:	f002 0204 	and.w	r2, r2, #4
 80019cc:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80019ce:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019d2:	f042 0202 	orr.w	r2, r2, #2
 80019d6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019da:	f002 0202 	and.w	r2, r2, #2
 80019de:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80019e0:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019e4:	f042 0201 	orr.w	r2, r2, #1
 80019e8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ec:	f002 0201 	and.w	r2, r2, #1
 80019f0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80019f2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019fa:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a04:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|PROB1_Pin|PROB2_Pin|LED2_Pin
 8001a06:	4d34      	ldr	r5, [pc, #208]	; (8001ad8 <MX_GPIO_Init+0x130>)
 8001a08:	4622      	mov	r2, r4
 8001a0a:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f005 fa80 	bl	8006f14 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC6 PC13
                           PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_13
 8001a14:	f242 0347 	movw	r3, #8263	; 0x2047
 8001a18:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1a:	2703      	movs	r7, #3
 8001a1c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a20:	a905      	add	r1, sp, #20
 8001a22:	482e      	ldr	r0, [pc, #184]	; (8001adc <MX_GPIO_Init+0x134>)
 8001a24:	f005 f926 	bl	8006c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB10 PB1 PB14
                           PB7 PB8 PB4 PB5
                           PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_14
 8001a28:	f244 53fa 	movw	r3, #17914	; 0x45fa
 8001a2c:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a2e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	a905      	add	r1, sp, #20
 8001a34:	4628      	mov	r0, r5
 8001a36:	f005 f91d 	bl	8006c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA7 PA4 PA5
                           PA8 PA9 PA10 PA6
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_5
 8001a3a:	f248 73f2 	movw	r3, #34802	; 0x87f2
 8001a3e:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a40:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	a905      	add	r1, sp, #20
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f005 f913 	bl	8006c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8001a4e:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8001a52:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2601      	movs	r6, #1
 8001a56:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	a905      	add	r1, sp, #20
 8001a60:	4628      	mov	r0, r5
 8001a62:	f005 f907 	bl	8006c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a66:	f04f 0808 	mov.w	r8, #8
 8001a6a:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a72:	a905      	add	r1, sp, #20
 8001a74:	481a      	ldr	r0, [pc, #104]	; (8001ae0 <MX_GPIO_Init+0x138>)
 8001a76:	f005 f8fd 	bl	8006c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB1_Pin|PROB2_Pin;
 8001a7a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a7e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	a905      	add	r1, sp, #20
 8001a88:	4628      	mov	r0, r5
 8001a8a:	f005 f8f3 	bl	8006c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001a8e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a90:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 8001a94:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a96:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001a98:	a905      	add	r1, sp, #20
 8001a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9e:	f005 f8e9 	bl	8006c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCELERO_GYRO_INT_Pin;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aa6:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(ACCELERO_GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	a905      	add	r1, sp, #20
 8001aac:	4628      	mov	r0, r5
 8001aae:	f005 f8e1 	bl	8006c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	2006      	movs	r0, #6
 8001ab8:	f004 fcb0 	bl	800641c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001abc:	2006      	movs	r0, #6
 8001abe:	f004 fce5 	bl	800648c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ac2:	4622      	mov	r2, r4
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	4640      	mov	r0, r8
 8001ac8:	f004 fca8 	bl	800641c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001acc:	4640      	mov	r0, r8
 8001ace:	f004 fcdd 	bl	800648c <HAL_NVIC_EnableIRQ>

}
 8001ad2:	b00a      	add	sp, #40	; 0x28
 8001ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	48001c00 	.word	0x48001c00

08001ae4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001ae4:	b508      	push	{r3, lr}
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001ae6:	480a      	ldr	r0, [pc, #40]	; (8001b10 <MX_LPTIM1_Init+0x2c>)
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <MX_LPTIM1_Init+0x30>)
 8001aea:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001aec:	2300      	movs	r3, #0
 8001aee:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001af0:	6083      	str	r3, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af6:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001af8:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001afa:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001afc:	6283      	str	r3, [r0, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001afe:	62c3      	str	r3, [r0, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001b00:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001b02:	f006 f855 	bl	8007bb0 <HAL_LPTIM_Init>
 8001b06:	b900      	cbnz	r0, 8001b0a <MX_LPTIM1_Init+0x26>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001b08:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b0a:	f000 f838 	bl	8001b7e <Error_Handler>
}
 8001b0e:	e7fb      	b.n	8001b08 <MX_LPTIM1_Init+0x24>
 8001b10:	20000274 	.word	0x20000274
 8001b14:	40007c00 	.word	0x40007c00

08001b18 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001b18:	b510      	push	{r4, lr}
 8001b1a:	b090      	sub	sp, #64	; 0x40
 8001b1c:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b1e:	2238      	movs	r2, #56	; 0x38
 8001b20:	2100      	movs	r1, #0
 8001b22:	a802      	add	r0, sp, #8
 8001b24:	f015 fd02 	bl	801752c <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_LPTIM_MspInit+0x60>)
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_LPTIM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001b30:	b010      	add	sp, #64	; 0x40
 8001b32:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b38:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001b3a:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8001b3e:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b40:	a802      	add	r0, sp, #8
 8001b42:	f007 f849 	bl	8008bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	b998      	cbnz	r0, 8001b70 <HAL_LPTIM_MspInit+0x58>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b52:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b5a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b5c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4611      	mov	r1, r2
 8001b62:	2027      	movs	r0, #39	; 0x27
 8001b64:	f004 fc5a 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001b68:	2027      	movs	r0, #39	; 0x27
 8001b6a:	f004 fc8f 	bl	800648c <HAL_NVIC_EnableIRQ>
}
 8001b6e:	e7df      	b.n	8001b30 <HAL_LPTIM_MspInit+0x18>
      Error_Handler();
 8001b70:	f000 f805 	bl	8001b7e <Error_Handler>
 8001b74:	e7e8      	b.n	8001b48 <HAL_LPTIM_MspInit+0x30>
 8001b76:	bf00      	nop
 8001b78:	40007c00 	.word	0x40007c00

08001b7c <HAL_LPTIM_CompareMatchCallback>:

/* USER CODE BEGIN 4 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
  /* Timeout was reached, toggle LED2 */
}
 8001b7c:	4770      	bx	lr

08001b7e <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <Error_Handler+0x2>

08001b82 <SystemClock_Config>:
{
 8001b82:	b510      	push	{r4, lr}
 8001b84:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b86:	2248      	movs	r2, #72	; 0x48
 8001b88:	2100      	movs	r1, #0
 8001b8a:	a808      	add	r0, sp, #32
 8001b8c:	f015 fcce 	bl	801752c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	2400      	movs	r4, #0
 8001b92:	9401      	str	r4, [sp, #4]
 8001b94:	9402      	str	r4, [sp, #8]
 8001b96:	9403      	str	r4, [sp, #12]
 8001b98:	9404      	str	r4, [sp, #16]
 8001b9a:	9405      	str	r4, [sp, #20]
 8001b9c:	9406      	str	r4, [sp, #24]
 8001b9e:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001ba0:	f006 f8e2 	bl	8007d68 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001bac:	f023 0318 	bic.w	r3, r3, #24
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bb8:	6813      	ldr	r3, [r2, #0]
 8001bba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001bce:	2324      	movs	r3, #36	; 0x24
 8001bd0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bd2:	2381      	movs	r3, #129	; 0x81
 8001bd4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001bda:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001bdc:	23b0      	movs	r3, #176	; 0xb0
 8001bde:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001be0:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be2:	a808      	add	r0, sp, #32
 8001be4:	f006 fa5a 	bl	800809c <HAL_RCC_OscConfig>
 8001be8:	b970      	cbnz	r0, 8001c08 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001bea:	234f      	movs	r3, #79	; 0x4f
 8001bec:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bf4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001bf8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	a801      	add	r0, sp, #4
 8001bfe:	f006 fd7f 	bl	8008700 <HAL_RCC_ClockConfig>
 8001c02:	b918      	cbnz	r0, 8001c0c <SystemClock_Config+0x8a>
}
 8001c04:	b01a      	add	sp, #104	; 0x68
 8001c06:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001c08:	f7ff ffb9 	bl	8001b7e <Error_Handler>
    Error_Handler();
 8001c0c:	f7ff ffb7 	bl	8001b7e <Error_Handler>

08001c10 <main>:
{
 8001c10:	b508      	push	{r3, lr}
  HAL_Init();
 8001c12:	f003 fe6d 	bl	80058f0 <HAL_Init>
  SystemClock_Config();
 8001c16:	f7ff ffb4 	bl	8001b82 <SystemClock_Config>
  MX_GPIO_Init();
 8001c1a:	f7ff fec5 	bl	80019a8 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001c1e:	f001 f833 	bl	8002c88 <MX_LoRaWAN_Init>
  MX_LPTIM1_Init();
 8001c22:	f7ff ff5f 	bl	8001ae4 <MX_LPTIM1_Init>
  if (HAL_LPTIM_TimeOut_Start_IT(&hlptim1, LPTIM1_PERIOD, LPTIM1_TIMEOUT) != HAL_OK)
 8001c26:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001c2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <main+0x34>)
 8001c30:	f006 f834 	bl	8007c9c <HAL_LPTIM_TimeOut_Start_IT>
 8001c34:	b108      	cbz	r0, 8001c3a <main+0x2a>
      Error_Handler();
 8001c36:	f7ff ffa2 	bl	8001b7e <Error_Handler>
  Init_Sensors();
 8001c3a:	f000 fd37 	bl	80026ac <Init_Sensors>
    MX_LoRaWAN_Process();
 8001c3e:	f001 f829 	bl	8002c94 <MX_LoRaWAN_Process>
  while (1)
 8001c42:	e7fc      	b.n	8001c3e <main+0x2e>
 8001c44:	20000274 	.word	0x20000274

08001c48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c48:	b500      	push	{lr}
 8001c4a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001c4c:	222c      	movs	r2, #44	; 0x2c
 8001c4e:	2100      	movs	r1, #0
 8001c50:	a801      	add	r0, sp, #4
 8001c52:	f015 fc6b 	bl	801752c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c56:	4819      	ldr	r0, [pc, #100]	; (8001cbc <MX_RTC_Init+0x74>)
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_RTC_Init+0x78>)
 8001c5a:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001c5c:	231f      	movs	r3, #31
 8001c5e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c64:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c66:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c6c:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001c6e:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c74:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c76:	f007 fd3b 	bl	80096f0 <HAL_RTC_Init>
 8001c7a:	b9a8      	cbnz	r0, 8001ca8 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001c7c:	480f      	ldr	r0, [pc, #60]	; (8001cbc <MX_RTC_Init+0x74>)
 8001c7e:	f007 fe79 	bl	8009974 <HAL_RTCEx_SetSSRU_IT>
 8001c82:	b9a0      	cbnz	r0, 8001cae <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c84:	2200      	movs	r2, #0
 8001c86:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c88:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c8a:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c90:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c96:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001c98:	a901      	add	r1, sp, #4
 8001c9a:	4808      	ldr	r0, [pc, #32]	; (8001cbc <MX_RTC_Init+0x74>)
 8001c9c:	f007 fd8e 	bl	80097bc <HAL_RTC_SetAlarm_IT>
 8001ca0:	b940      	cbnz	r0, 8001cb4 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ca2:	b00d      	add	sp, #52	; 0x34
 8001ca4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001ca8:	f7ff ff69 	bl	8001b7e <Error_Handler>
 8001cac:	e7e6      	b.n	8001c7c <MX_RTC_Init+0x34>
    Error_Handler();
 8001cae:	f7ff ff66 	bl	8001b7e <Error_Handler>
 8001cb2:	e7e7      	b.n	8001c84 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001cb4:	f7ff ff63 	bl	8001b7e <Error_Handler>
}
 8001cb8:	e7f3      	b.n	8001ca2 <MX_RTC_Init+0x5a>
 8001cba:	bf00      	nop
 8001cbc:	200002b0 	.word	0x200002b0
 8001cc0:	40002800 	.word	0x40002800

08001cc4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	b090      	sub	sp, #64	; 0x40
 8001cc8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cca:	2238      	movs	r2, #56	; 0x38
 8001ccc:	2100      	movs	r1, #0
 8001cce:	a802      	add	r0, sp, #8
 8001cd0:	f015 fc2c 	bl	801752c <memset>
  if(rtcHandle->Instance==RTC)
 8001cd4:	6822      	ldr	r2, [r4, #0]
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_RTC_MspInit+0x7c>)
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001cdc:	b010      	add	sp, #64	; 0x40
 8001cde:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce4:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cea:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cec:	a802      	add	r0, sp, #8
 8001cee:	f006 ff73 	bl	8008bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001cf2:	bb08      	cbnz	r0, 8001d38 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001cfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d0a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d12:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d14:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	4611      	mov	r1, r2
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f004 fb7e 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001d20:	2002      	movs	r0, #2
 8001d22:	f004 fbb3 	bl	800648c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	4611      	mov	r1, r2
 8001d2a:	202a      	movs	r0, #42	; 0x2a
 8001d2c:	f004 fb76 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d30:	202a      	movs	r0, #42	; 0x2a
 8001d32:	f004 fbab 	bl	800648c <HAL_NVIC_EnableIRQ>
}
 8001d36:	e7d1      	b.n	8001cdc <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001d38:	f7ff ff21 	bl	8001b7e <Error_Handler>
 8001d3c:	e7da      	b.n	8001cf4 <HAL_RTC_MspInit+0x30>
 8001d3e:	bf00      	nop
 8001d40:	40002800 	.word	0x40002800

08001d44 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001d44:	4770      	bx	lr

08001d46 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001d46:	4770      	bx	lr

08001d48 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001d48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001d4a:	f003 fde7 	bl	800591c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <PWR_EnterStopMode+0x14>)
 8001d52:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001d56:	f006 f86b 	bl	8007e30 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001d5a:	bd08      	pop	{r3, pc}
 8001d5c:	58000400 	.word	0x58000400

08001d60 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001d60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001d62:	f003 fde2 	bl	800592a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001d66:	bd08      	pop	{r3, pc}

08001d68 <PWR_ExitStopMode>:
{
 8001d68:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001d6a:	f003 fdde 	bl	800592a <HAL_ResumeTick>
  vcom_Resume();
 8001d6e:	f000 fc4f 	bl	8002610 <vcom_Resume>
}
 8001d72:	bd08      	pop	{r3, pc}

08001d74 <PWR_EnterSleepMode>:
{
 8001d74:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001d76:	f003 fdd1 	bl	800591c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f005 fffb 	bl	8007d78 <HAL_PWR_EnterSLEEPMode>
}
 8001d82:	bd08      	pop	{r3, pc}

08001d84 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d84:	4770      	bx	lr

08001d86 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <NMI_Handler>

08001d88 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <HardFault_Handler>

08001d8a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <MemManage_Handler>

08001d8c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <BusFault_Handler>

08001d8e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <UsageFault_Handler>

08001d90 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d90:	4770      	bx	lr

08001d92 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d92:	4770      	bx	lr

08001d94 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d94:	4770      	bx	lr

08001d96 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d96:	4770      	bx	lr

08001d98 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001d98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001d9a:	4802      	ldr	r0, [pc, #8]	; (8001da4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001d9c:	f007 fe16 	bl	80099cc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001da0:	bd08      	pop	{r3, pc}
 8001da2:	bf00      	nop
 8001da4:	200002b0 	.word	0x200002b0

08001da8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001da8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001daa:	2001      	movs	r0, #1
 8001dac:	f005 f8dc 	bl	8006f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001db0:	bd08      	pop	{r3, pc}

08001db2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line 2 Interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001db2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_GYRO_INT_Pin);
 8001db4:	2004      	movs	r0, #4
 8001db6:	f005 f8d7 	bl	8006f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001dba:	bd08      	pop	{r3, pc}

08001dbc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001dbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001dbe:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DMA1_Channel5_IRQHandler+0xc>)
 8001dc0:	f004 fd82 	bl	80068c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001dc4:	bd08      	pop	{r3, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000310 	.word	0x20000310

08001dcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dce:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <USART2_IRQHandler+0xc>)
 8001dd0:	f008 faba 	bl	800a348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dd4:	bd08      	pop	{r3, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000370 	.word	0x20000370

08001ddc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001ddc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001dde:	4802      	ldr	r0, [pc, #8]	; (8001de8 <LPTIM1_IRQHandler+0xc>)
 8001de0:	f005 fd2c 	bl	800783c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001de4:	bd08      	pop	{r3, pc}
 8001de6:	bf00      	nop
 8001de8:	20000274 	.word	0x20000274

08001dec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001dec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001dee:	4802      	ldr	r0, [pc, #8]	; (8001df8 <RTC_Alarm_IRQHandler+0xc>)
 8001df0:	f007 fbf8 	bl	80095e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001df4:	bd08      	pop	{r3, pc}
 8001df6:	bf00      	nop
 8001df8:	200002b0 	.word	0x200002b0

08001dfc <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001dfe:	4802      	ldr	r0, [pc, #8]	; (8001e08 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001e00:	f008 f898 	bl	8009f34 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e04:	bd08      	pop	{r3, pc}
 8001e06:	bf00      	nop
 8001e08:	200002e8 	.word	0x200002e8

08001e0c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e0c:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_SUBGHZ_Init+0x18>)
 8001e10:	2308      	movs	r3, #8
 8001e12:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e14:	f007 fe10 	bl	8009a38 <HAL_SUBGHZ_Init>
 8001e18:	b900      	cbnz	r0, 8001e1c <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e1a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e1c:	f7ff feaf 	bl	8001b7e <Error_Handler>
}
 8001e20:	e7fb      	b.n	8001e1a <MX_SUBGHZ_Init+0xe>
 8001e22:	bf00      	nop
 8001e24:	200002e8 	.word	0x200002e8

08001e28 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e28:	b500      	push	{lr}
 8001e2a:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e40:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	4611      	mov	r1, r2
 8001e46:	2032      	movs	r0, #50	; 0x32
 8001e48:	f004 fae8 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e4c:	2032      	movs	r0, #50	; 0x32
 8001e4e:	f004 fb1d 	bl	800648c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001e52:	b003      	add	sp, #12
 8001e54:	f85d fb04 	ldr.w	pc, [sp], #4

08001e58 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001e58:	b40c      	push	{r2, r3}
 8001e5a:	b500      	push	{lr}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	ab04      	add	r3, sp, #16
 8001e60:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001e64:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001e66:	f014 fb89 	bl	801657c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001e6a:	b003      	add	sp, #12
 8001e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e70:	b002      	add	sp, #8
 8001e72:	4770      	bx	lr

08001e74 <TimestampNow>:
{
 8001e74:	b530      	push	{r4, r5, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	4604      	mov	r4, r0
 8001e7a:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001e7c:	a802      	add	r0, sp, #8
 8001e7e:	f014 f8f1 	bl	8016064 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001e82:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	9b02      	ldr	r3, [sp, #8]
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <TimestampNow+0x2c>)
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff ffe2 	bl	8001e58 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7fe f96f 	bl	8000178 <strlen>
 8001e9a:	8028      	strh	r0, [r5, #0]
}
 8001e9c:	b005      	add	sp, #20
 8001e9e:	bd30      	pop	{r4, r5, pc}
 8001ea0:	08017a4c 	.word	0x08017a4c

08001ea4 <SystemApp_Init>:
{
 8001ea4:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eaa:	6893      	ldr	r3, [r2, #8]
 8001eac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001eb0:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001eb2:	f014 f95b 	bl	801616c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001eb6:	2401      	movs	r4, #1
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <SystemApp_Init+0x4c>)
 8001eba:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001ebc:	f000 f8bc 	bl	8002038 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001ec0:	f013 fdf8 	bl	8015ab4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001ec4:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <SystemApp_Init+0x50>)
 8001ec6:	f013 fe0f 	bl	8015ae8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <SystemApp_Init+0x54>)
 8001ecc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ed0:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f013 fe0e 	bl	8015af4 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001ed8:	f7ff fb70 	bl	80015bc <SYS_InitMeasurement>
  EnvSensors_Init();
 8001edc:	f000 f91a 	bl	8002114 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001ee0:	f013 ff18 	bl	8015d14 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f013 ff34 	bl	8015d54 <UTIL_LPM_SetOffMode>
}
 8001eec:	bd10      	pop	{r4, pc}
 8001eee:	bf00      	nop
 8001ef0:	200002f4 	.word	0x200002f4
 8001ef4:	08001e75 	.word	0x08001e75
 8001ef8:	58004000 	.word	0x58004000

08001efc <UTIL_SEQ_Idle>:
{
 8001efc:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001efe:	f013 ff3f 	bl	8015d80 <UTIL_LPM_EnterLowPower>
}
 8001f02:	bd08      	pop	{r3, pc}

08001f04 <GetBatteryLevel>:
{
 8001f04:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f06:	f7ff fb61 	bl	80015cc <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001f0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f0e:	4298      	cmp	r0, r3
 8001f10:	d80d      	bhi.n	8001f2e <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001f12:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001f16:	d30c      	bcc.n	8001f32 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001f18:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001f1c:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001f20:	0040      	lsls	r0, r0, #1
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <GetBatteryLevel+0x34>)
 8001f24:	fba3 3000 	umull	r3, r0, r3, r0
 8001f28:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001f2c:	e000      	b.n	8001f30 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001f2e:	20fe      	movs	r0, #254	; 0xfe
}
 8001f30:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001f32:	2000      	movs	r0, #0
 8001f34:	e7fc      	b.n	8001f30 <GetBatteryLevel+0x2c>
 8001f36:	bf00      	nop
 8001f38:	1b4e81b5 	.word	0x1b4e81b5

08001f3c <GetTemperatureLevel>:
{
 8001f3c:	b500      	push	{lr}
 8001f3e:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001f40:	4668      	mov	r0, sp
 8001f42:	f000 f8c5 	bl	80020d0 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001f46:	9801      	ldr	r0, [sp, #4]
 8001f48:	f7ff f8ec 	bl	8001124 <__aeabi_f2iz>
}
 8001f4c:	b200      	sxth	r0, r0
 8001f4e:	b007      	add	sp, #28
 8001f50:	f85d fb04 	ldr.w	pc, [sp], #4

08001f54 <GetUniqueId>:
{
 8001f54:	b538      	push	{r3, r4, r5, lr}
 8001f56:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <GetUniqueId+0x68>)
 8001f5a:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f62:	d013      	beq.n	8001f8c <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001f64:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001f66:	0a1a      	lsrs	r2, r3, #8
 8001f68:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001f6a:	0c1a      	lsrs	r2, r3, #16
 8001f6c:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001f6e:	0e1b      	lsrs	r3, r3, #24
 8001f70:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <GetUniqueId+0x68>)
 8001f74:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001f78:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001f7a:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001f7e:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001f80:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001f82:	0c1a      	lsrs	r2, r3, #16
 8001f84:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001f86:	0e1b      	lsrs	r3, r3, #24
 8001f88:	7003      	strb	r3, [r0, #0]
}
 8001f8a:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001f8c:	f003 fcd4 	bl	8005938 <HAL_GetUIDw0>
 8001f90:	4605      	mov	r5, r0
 8001f92:	f003 fcdd 	bl	8005950 <HAL_GetUIDw2>
 8001f96:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001f98:	f003 fcd4 	bl	8005944 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001f9c:	0e2b      	lsrs	r3, r5, #24
 8001f9e:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001fa0:	0c2b      	lsrs	r3, r5, #16
 8001fa2:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001fa4:	0a2b      	lsrs	r3, r5, #8
 8001fa6:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001fa8:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001faa:	0e03      	lsrs	r3, r0, #24
 8001fac:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001fae:	0c03      	lsrs	r3, r0, #16
 8001fb0:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001fb2:	0a03      	lsrs	r3, r0, #8
 8001fb4:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001fb6:	7020      	strb	r0, [r4, #0]
 8001fb8:	e7e7      	b.n	8001f8a <GetUniqueId+0x36>
 8001fba:	bf00      	nop
 8001fbc:	1fff7000 	.word	0x1fff7000

08001fc0 <GetDevAddr>:
{
 8001fc0:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <GetDevAddr+0x2c>)
 8001fc4:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001fc8:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d000      	beq.n	8001fd2 <GetDevAddr+0x12>
}
 8001fd0:	bd38      	pop	{r3, r4, r5, pc}
 8001fd2:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001fd4:	f003 fcb0 	bl	8005938 <HAL_GetUIDw0>
 8001fd8:	4605      	mov	r5, r0
 8001fda:	f003 fcb3 	bl	8005944 <HAL_GetUIDw1>
 8001fde:	4045      	eors	r5, r0
 8001fe0:	f003 fcb6 	bl	8005950 <HAL_GetUIDw2>
 8001fe4:	4045      	eors	r5, r0
 8001fe6:	6025      	str	r5, [r4, #0]
}
 8001fe8:	e7f2      	b.n	8001fd0 <GetDevAddr+0x10>
 8001fea:	bf00      	nop
 8001fec:	1fff7000 	.word	0x1fff7000

08001ff0 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001ff0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f013 fe97 	bl	8015d28 <UTIL_LPM_SetStopMode>
}
 8001ffa:	bd08      	pop	{r3, pc}

08001ffc <UTIL_ADV_TRACE_PostSendHook>:
{
 8001ffc:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001ffe:	2100      	movs	r1, #0
 8002000:	2002      	movs	r0, #2
 8002002:	f013 fe91 	bl	8015d28 <UTIL_LPM_SetStopMode>
}
 8002006:	bd08      	pop	{r3, pc}

08002008 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002008:	2000      	movs	r0, #0
 800200a:	4770      	bx	lr

0800200c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800200c:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_GetTick+0x14>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b90b      	cbnz	r3, 8002018 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8002014:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8002016:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8002018:	f000 f8c4 	bl	80021a4 <TIMER_IF_GetTimerValue>
 800201c:	e7fb      	b.n	8002016 <HAL_GetTick+0xa>
 800201e:	bf00      	nop
 8002020:	200002f4 	.word	0x200002f4

08002024 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002024:	b500      	push	{lr}
 8002026:	b083      	sub	sp, #12
 8002028:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800202a:	9801      	ldr	r0, [sp, #4]
 800202c:	f000 f9a0 	bl	8002370 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002030:	b003      	add	sp, #12
 8002032:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002038 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800203c:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <DBG_Init+0x90>)
 800203e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 800204a:	f003 fc87 	bl	800595c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800204e:	f003 fc8d 	bl	800596c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002052:	f003 fc93 	bl	800597c <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002056:	2400      	movs	r4, #0
 8002058:	9403      	str	r4, [sp, #12]
 800205a:	9404      	str	r4, [sp, #16]
 800205c:	9405      	str	r4, [sp, #20]
 800205e:	9406      	str	r4, [sp, #24]
 8002060:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002070:	f042 0202 	orr.w	r2, r2, #2
 8002074:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002078:	f002 0202 	and.w	r2, r2, #2
 800207c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800207e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002080:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002082:	f042 0202 	orr.w	r2, r2, #2
 8002086:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002090:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002092:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8002096:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002098:	4d0c      	ldr	r5, [pc, #48]	; (80020cc <DBG_Init+0x94>)
 800209a:	a903      	add	r1, sp, #12
 800209c:	4628      	mov	r0, r5
 800209e:	f004 fde9 	bl	8006c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80020a2:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80020a6:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80020a8:	a903      	add	r1, sp, #12
 80020aa:	4628      	mov	r0, r5
 80020ac:	f004 fde2 	bl	8006c74 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80020b0:	4622      	mov	r2, r4
 80020b2:	4639      	mov	r1, r7
 80020b4:	4628      	mov	r0, r5
 80020b6:	f004 ff2d 	bl	8006f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80020ba:	4622      	mov	r2, r4
 80020bc:	4631      	mov	r1, r6
 80020be:	4628      	mov	r0, r5
 80020c0:	f004 ff28 	bl	8006f14 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80020c4:	b009      	add	sp, #36	; 0x24
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c8:	58000800 	.word	0x58000800
 80020cc:	48000400 	.word	0x48000400

080020d0 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80020d0:	b510      	push	{r4, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	4604      	mov	r4, r0
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <EnvSensors_Read+0x30>)
 80020d8:	9301      	str	r3, [sp, #4]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;

#if defined (SENSOR_ENABLED) && (SENSOR_ENABLED == 1)
  BSP_ENV_SENSOR_GetValue(ENV_SENSOR_STTS22H_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
 80020da:	aa01      	add	r2, sp, #4
 80020dc:	2101      	movs	r1, #1
 80020de:	2000      	movs	r0, #0
 80020e0:	f001 fe28 	bl	8003d34 <BSP_ENV_SENSOR_GetValue>
//  BSP_ENV_SENSOR_GetValue(ENV_SENSOR_ILPS22QS_0, ENV_PRESSURE, &PRESSURE_Value);
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <EnvSensors_Read+0x34>)
 80020e6:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80020e8:	9b01      	ldr	r3, [sp, #4]
 80020ea:	6063      	str	r3, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <EnvSensors_Read+0x38>)
 80020ee:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <EnvSensors_Read+0x3c>)
 80020f2:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <EnvSensors_Read+0x40>)
 80020f6:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 80020f8:	2000      	movs	r0, #0
 80020fa:	b002      	add	sp, #8
 80020fc:	bd10      	pop	{r4, pc}
 80020fe:	bf00      	nop
 8002100:	41900000 	.word	0x41900000
 8002104:	42480000 	.word	0x42480000
 8002108:	447a0000 	.word	0x447a0000
 800210c:	003e090d 	.word	0x003e090d
 8002110:	000503ab 	.word	0x000503ab

08002114 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002114:	b510      	push	{r4, lr}
  int32_t ret = 0;
  /* USER CODE BEGIN EnvSensors_Init */
#if defined (SENSOR_ENABLED) && (SENSOR_ENABLED == 1)
  /* Temperature sensor */
  ret = BSP_ENV_SENSOR_Init(ENV_SENSOR_STTS22H_0, ENV_TEMPERATURE);
 8002116:	2101      	movs	r1, #1
 8002118:	2000      	movs	r0, #0
 800211a:	f001 fd69 	bl	8003bf0 <BSP_ENV_SENSOR_Init>
  if (ret != BSP_ERROR_NONE)
 800211e:	b960      	cbnz	r0, 800213a <EnvSensors_Init+0x26>
  {
    Error_Handler();
  }
  ret = BSP_ENV_SENSOR_Enable(ENV_SENSOR_STTS22H_0, ENV_TEMPERATURE);
 8002120:	2101      	movs	r1, #1
 8002122:	2000      	movs	r0, #0
 8002124:	f001 fdde 	bl	8003ce4 <BSP_ENV_SENSOR_Enable>
  if (ret != BSP_ERROR_NONE)
 8002128:	b950      	cbnz	r0, 8002140 <EnvSensors_Init+0x2c>
  {
    Error_Handler();
  }
  ret = BSP_ENV_SENSOR_GetCapabilities(ENV_SENSOR_STTS22H_0, &EnvCapabilities);
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <EnvSensors_Init+0x38>)
 800212c:	2000      	movs	r0, #0
 800212e:	f001 fdc1 	bl	8003cb4 <BSP_ENV_SENSOR_GetCapabilities>
  if (ret != BSP_ERROR_NONE)
 8002132:	4604      	mov	r4, r0
 8002134:	b938      	cbnz	r0, 8002146 <EnvSensors_Init+0x32>
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002136:	4620      	mov	r0, r4
 8002138:	bd10      	pop	{r4, pc}
    Error_Handler();
 800213a:	f7ff fd20 	bl	8001b7e <Error_Handler>
 800213e:	e7ef      	b.n	8002120 <EnvSensors_Init+0xc>
    Error_Handler();
 8002140:	f7ff fd1d 	bl	8001b7e <Error_Handler>
 8002144:	e7f1      	b.n	800212a <EnvSensors_Init+0x16>
    Error_Handler();
 8002146:	f7ff fd1a 	bl	8001b7e <Error_Handler>
  return ret;
 800214a:	e7f4      	b.n	8002136 <EnvSensors_Init+0x22>
 800214c:	200002f8 	.word	0x200002f8

08002150 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <TIMER_IF_SetTimerContext+0x1c>)
 8002152:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002154:	e001      	b.n	800215a <TIMER_IF_SetTimerContext+0xa>
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <TIMER_IF_SetTimerContext+0x1c>)
 8002158:	6898      	ldr	r0, [r3, #8]
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <TIMER_IF_SetTimerContext+0x1c>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	4283      	cmp	r3, r0
 8002160:	d1f9      	bne.n	8002156 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8002162:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8002164:	4b02      	ldr	r3, [pc, #8]	; (8002170 <TIMER_IF_SetTimerContext+0x20>)
 8002166:	6018      	str	r0, [r3, #0]
}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40002800 	.word	0x40002800
 8002170:	2000030c 	.word	0x2000030c

08002174 <TIMER_IF_GetTimerContext>:
}
 8002174:	4b01      	ldr	r3, [pc, #4]	; (800217c <TIMER_IF_GetTimerContext+0x8>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000030c 	.word	0x2000030c

08002180 <TIMER_IF_GetTimerElapsedTime>:
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002182:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002184:	e001      	b.n	800218a <TIMER_IF_GetTimerElapsedTime+0xa>
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002188:	6898      	ldr	r0, [r3, #8]
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	4283      	cmp	r3, r0
 8002190:	d1f9      	bne.n	8002186 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8002192:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	1ac0      	subs	r0, r0, r3
 800219a:	4770      	bx	lr
 800219c:	40002800 	.word	0x40002800
 80021a0:	2000030c 	.word	0x2000030c

080021a4 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <TIMER_IF_GetTimerValue+0x20>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b153      	cbz	r3, 80021c0 <TIMER_IF_GetTimerValue+0x1c>
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <TIMER_IF_GetTimerValue+0x24>)
 80021ac:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80021ae:	e001      	b.n	80021b4 <TIMER_IF_GetTimerValue+0x10>
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <TIMER_IF_GetTimerValue+0x24>)
 80021b2:	6898      	ldr	r0, [r3, #8]
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <TIMER_IF_GetTimerValue+0x24>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4283      	cmp	r3, r0
 80021ba:	d1f9      	bne.n	80021b0 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 80021bc:	43c0      	mvns	r0, r0
 80021be:	4770      	bx	lr
  uint32_t ret = 0;
 80021c0:	2000      	movs	r0, #0
}
 80021c2:	4770      	bx	lr
 80021c4:	20000308 	.word	0x20000308
 80021c8:	40002800 	.word	0x40002800

080021cc <TIMER_IF_GetMinimumTimeout>:
}
 80021cc:	2003      	movs	r0, #3
 80021ce:	4770      	bx	lr

080021d0 <TIMER_IF_Convert_ms2Tick>:
{
 80021d0:	b508      	push	{r3, lr}
 80021d2:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80021d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021d8:	2300      	movs	r3, #0
 80021da:	0280      	lsls	r0, r0, #10
 80021dc:	0d89      	lsrs	r1, r1, #22
 80021de:	f7fe ffe7 	bl	80011b0 <__aeabi_uldivmod>
}
 80021e2:	bd08      	pop	{r3, pc}

080021e4 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80021e4:	0ec2      	lsrs	r2, r0, #27
 80021e6:	0143      	lsls	r3, r0, #5
 80021e8:	1a1b      	subs	r3, r3, r0
 80021ea:	f162 0200 	sbc.w	r2, r2, #0
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	181b      	adds	r3, r3, r0
 80021f8:	f142 0000 	adc.w	r0, r2, #0
 80021fc:	00c0      	lsls	r0, r0, #3
 80021fe:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002202:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8002206:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 800220a:	4770      	bx	lr

0800220c <TIMER_IF_StopTimer>:
{
 800220c:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <TIMER_IF_StopTimer+0x20>)
 8002210:	2201      	movs	r2, #1
 8002212:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002214:	4c06      	ldr	r4, [pc, #24]	; (8002230 <TIMER_IF_StopTimer+0x24>)
 8002216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800221a:	4620      	mov	r0, r4
 800221c:	f007 f9a2 	bl	8009564 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
 8002224:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002226:	2000      	movs	r0, #0
 8002228:	bd10      	pop	{r4, pc}
 800222a:	bf00      	nop
 800222c:	40002800 	.word	0x40002800
 8002230:	200002b0 	.word	0x200002b0

08002234 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8002234:	b508      	push	{r3, lr}
 8002236:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002238:	2102      	movs	r1, #2
 800223a:	4802      	ldr	r0, [pc, #8]	; (8002244 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 800223c:	f007 fbdb 	bl	80099f6 <HAL_RTCEx_BKUPWrite>
}
 8002240:	bd08      	pop	{r3, pc}
 8002242:	bf00      	nop
 8002244:	200002b0 	.word	0x200002b0

08002248 <TIMER_IF_Init>:
{
 8002248:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <TIMER_IF_Init+0x40>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b10b      	cbz	r3, 8002254 <TIMER_IF_Init+0xc>
}
 8002250:	2000      	movs	r0, #0
 8002252:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002254:	4c0d      	ldr	r4, [pc, #52]	; (800228c <TIMER_IF_Init+0x44>)
 8002256:	f04f 35ff 	mov.w	r5, #4294967295
 800225a:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 800225c:	f7ff fcf4 	bl	8001c48 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8002260:	f7ff ffd4 	bl	800220c <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002268:	4620      	mov	r0, r4
 800226a:	f007 f97b 	bl	8009564 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800226e:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002270:	4620      	mov	r0, r4
 8002272:	f007 fb5f 	bl	8009934 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff ffdc 	bl	8002234 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 800227c:	f7ff ff68 	bl	8002150 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8002280:	4b01      	ldr	r3, [pc, #4]	; (8002288 <TIMER_IF_Init+0x40>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e7e3      	b.n	8002250 <TIMER_IF_Init+0x8>
 8002288:	20000308 	.word	0x20000308
 800228c:	200002b0 	.word	0x200002b0

08002290 <TIMER_IF_BkUp_Write_Seconds>:
{
 8002290:	b508      	push	{r3, lr}
 8002292:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002294:	2100      	movs	r1, #0
 8002296:	4802      	ldr	r0, [pc, #8]	; (80022a0 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8002298:	f007 fbad 	bl	80099f6 <HAL_RTCEx_BKUPWrite>
}
 800229c:	bd08      	pop	{r3, pc}
 800229e:	bf00      	nop
 80022a0:	200002b0 	.word	0x200002b0

080022a4 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80022a4:	b508      	push	{r3, lr}
 80022a6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80022a8:	2101      	movs	r1, #1
 80022aa:	4802      	ldr	r0, [pc, #8]	; (80022b4 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80022ac:	f007 fba3 	bl	80099f6 <HAL_RTCEx_BKUPWrite>
}
 80022b0:	bd08      	pop	{r3, pc}
 80022b2:	bf00      	nop
 80022b4:	200002b0 	.word	0x200002b0

080022b8 <TIMER_IF_StartTimer>:
{
 80022b8:	b510      	push	{r4, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80022be:	222c      	movs	r2, #44	; 0x2c
 80022c0:	2100      	movs	r1, #0
 80022c2:	a801      	add	r0, sp, #4
 80022c4:	f015 f932 	bl	801752c <memset>
  TIMER_IF_StopTimer();
 80022c8:	f7ff ffa0 	bl	800220c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <TIMER_IF_StartTimer+0x48>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80022d2:	2300      	movs	r3, #0
 80022d4:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80022d6:	43e4      	mvns	r4, r4
 80022d8:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022da:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80022dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022e0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80022e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022e8:	2201      	movs	r2, #1
 80022ea:	a901      	add	r1, sp, #4
 80022ec:	4805      	ldr	r0, [pc, #20]	; (8002304 <TIMER_IF_StartTimer+0x4c>)
 80022ee:	f007 fa65 	bl	80097bc <HAL_RTC_SetAlarm_IT>
 80022f2:	b910      	cbnz	r0, 80022fa <TIMER_IF_StartTimer+0x42>
}
 80022f4:	2000      	movs	r0, #0
 80022f6:	b00c      	add	sp, #48	; 0x30
 80022f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80022fa:	f7ff fc40 	bl	8001b7e <Error_Handler>
 80022fe:	e7f9      	b.n	80022f4 <TIMER_IF_StartTimer+0x3c>
 8002300:	2000030c 	.word	0x2000030c
 8002304:	200002b0 	.word	0x200002b0

08002308 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002308:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800230a:	2102      	movs	r1, #2
 800230c:	4801      	ldr	r0, [pc, #4]	; (8002314 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800230e:	f007 fb79 	bl	8009a04 <HAL_RTCEx_BKUPRead>
}
 8002312:	bd08      	pop	{r3, pc}
 8002314:	200002b0 	.word	0x200002b0

08002318 <TIMER_IF_GetTime>:
{
 8002318:	b538      	push	{r3, r4, r5, lr}
 800231a:	4605      	mov	r5, r0
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <TIMER_IF_GetTime+0x34>)
 800231e:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002320:	e001      	b.n	8002326 <TIMER_IF_GetTime+0xe>
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <TIMER_IF_GetTime+0x34>)
 8002324:	689c      	ldr	r4, [r3, #8]
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <TIMER_IF_GetTime+0x34>)
 8002328:	6892      	ldr	r2, [r2, #8]
 800232a:	42a2      	cmp	r2, r4
 800232c:	d1f9      	bne.n	8002322 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 800232e:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002330:	f7ff ffea 	bl	8002308 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002334:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002336:	0aa4      	lsrs	r4, r4, #10
 8002338:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800233c:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002340:	f7ff ff50 	bl	80021e4 <TIMER_IF_Convert_Tick2ms>
 8002344:	8028      	strh	r0, [r5, #0]
}
 8002346:	4620      	mov	r0, r4
 8002348:	bd38      	pop	{r3, r4, r5, pc}
 800234a:	bf00      	nop
 800234c:	40002800 	.word	0x40002800

08002350 <TIMER_IF_BkUp_Read_Seconds>:
{
 8002350:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002352:	2100      	movs	r1, #0
 8002354:	4801      	ldr	r0, [pc, #4]	; (800235c <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002356:	f007 fb55 	bl	8009a04 <HAL_RTCEx_BKUPRead>
}
 800235a:	bd08      	pop	{r3, pc}
 800235c:	200002b0 	.word	0x200002b0

08002360 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8002360:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002362:	2101      	movs	r1, #1
 8002364:	4801      	ldr	r0, [pc, #4]	; (800236c <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002366:	f007 fb4d 	bl	8009a04 <HAL_RTCEx_BKUPRead>
}
 800236a:	bd08      	pop	{r3, pc}
 800236c:	200002b0 	.word	0x200002b0

08002370 <TIMER_IF_DelayMs>:
{
 8002370:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002372:	f7ff ff2d 	bl	80021d0 <TIMER_IF_Convert_ms2Tick>
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <TIMER_IF_DelayMs+0x3c>)
 8002378:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800237a:	e001      	b.n	8002380 <TIMER_IF_DelayMs+0x10>
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <TIMER_IF_DelayMs+0x3c>)
 800237e:	6899      	ldr	r1, [r3, #8]
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <TIMER_IF_DelayMs+0x3c>)
 8002382:	6892      	ldr	r2, [r2, #8]
 8002384:	428a      	cmp	r2, r1
 8002386:	d1f9      	bne.n	800237c <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8002388:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800238a:	e00a      	b.n	80023a2 <TIMER_IF_DelayMs+0x32>
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <TIMER_IF_DelayMs+0x3c>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <TIMER_IF_DelayMs+0x3c>)
 8002392:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002394:	429a      	cmp	r2, r3
 8002396:	d1f9      	bne.n	800238c <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8002398:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800239a:	1a5b      	subs	r3, r3, r1
 800239c:	4283      	cmp	r3, r0
 800239e:	d203      	bcs.n	80023a8 <TIMER_IF_DelayMs+0x38>
    __NOP();
 80023a0:	bf00      	nop
 80023a2:	4b02      	ldr	r3, [pc, #8]	; (80023ac <TIMER_IF_DelayMs+0x3c>)
 80023a4:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80023a6:	e7f3      	b.n	8002390 <TIMER_IF_DelayMs+0x20>
}
 80023a8:	bd08      	pop	{r3, pc}
 80023aa:	bf00      	nop
 80023ac:	40002800 	.word	0x40002800

080023b0 <HAL_RTC_AlarmAEventCallback>:
{
 80023b0:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80023b2:	f013 ffff 	bl	80163b4 <UTIL_TIMER_IRQ_Handler>
}
 80023b6:	bd08      	pop	{r3, pc}

080023b8 <HAL_RTCEx_SSRUEventCallback>:
{
 80023b8:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80023ba:	f7ff ffa5 	bl	8002308 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80023be:	3001      	adds	r0, #1
 80023c0:	f7ff ff38 	bl	8002234 <TIMER_IF_BkUp_Write_MSBticks>
}
 80023c4:	bd08      	pop	{r3, pc}
	...

080023c8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023c8:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023ca:	4817      	ldr	r0, [pc, #92]	; (8002428 <MX_USART2_UART_Init+0x60>)
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <MX_USART2_UART_Init+0x64>)
 80023ce:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80023d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80023d4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023d6:	2300      	movs	r3, #0
 80023d8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023da:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023dc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023de:	220c      	movs	r2, #12
 80023e0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023e6:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023e8:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ec:	f008 fe66 	bl	800b0bc <HAL_UART_Init>
 80023f0:	b970      	cbnz	r0, 8002410 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023f2:	2100      	movs	r1, #0
 80023f4:	480c      	ldr	r0, [pc, #48]	; (8002428 <MX_USART2_UART_Init+0x60>)
 80023f6:	f009 f816 	bl	800b426 <HAL_UARTEx_SetTxFifoThreshold>
 80023fa:	b960      	cbnz	r0, 8002416 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023fc:	2100      	movs	r1, #0
 80023fe:	480a      	ldr	r0, [pc, #40]	; (8002428 <MX_USART2_UART_Init+0x60>)
 8002400:	f009 f836 	bl	800b470 <HAL_UARTEx_SetRxFifoThreshold>
 8002404:	b950      	cbnz	r0, 800241c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002406:	4808      	ldr	r0, [pc, #32]	; (8002428 <MX_USART2_UART_Init+0x60>)
 8002408:	f008 ffe9 	bl	800b3de <HAL_UARTEx_EnableFifoMode>
 800240c:	b948      	cbnz	r0, 8002422 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800240e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002410:	f7ff fbb5 	bl	8001b7e <Error_Handler>
 8002414:	e7ed      	b.n	80023f2 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002416:	f7ff fbb2 	bl	8001b7e <Error_Handler>
 800241a:	e7ef      	b.n	80023fc <MX_USART2_UART_Init+0x34>
    Error_Handler();
 800241c:	f7ff fbaf 	bl	8001b7e <Error_Handler>
 8002420:	e7f1      	b.n	8002406 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002422:	f7ff fbac 	bl	8001b7e <Error_Handler>
}
 8002426:	e7f2      	b.n	800240e <MX_USART2_UART_Init+0x46>
 8002428:	20000370 	.word	0x20000370
 800242c:	40004400 	.word	0x40004400

08002430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002430:	b530      	push	{r4, r5, lr}
 8002432:	b097      	sub	sp, #92	; 0x5c
 8002434:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002436:	2100      	movs	r1, #0
 8002438:	9111      	str	r1, [sp, #68]	; 0x44
 800243a:	9112      	str	r1, [sp, #72]	; 0x48
 800243c:	9113      	str	r1, [sp, #76]	; 0x4c
 800243e:	9114      	str	r1, [sp, #80]	; 0x50
 8002440:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002442:	2238      	movs	r2, #56	; 0x38
 8002444:	a803      	add	r0, sp, #12
 8002446:	f015 f871 	bl	801752c <memset>
  if(uartHandle->Instance==USART2)
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_UART_MspInit+0xd4>)
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002452:	b017      	add	sp, #92	; 0x5c
 8002454:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002456:	2302      	movs	r3, #2
 8002458:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_UART_MspInit+0xd8>)
 800245c:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245e:	a803      	add	r0, sp, #12
 8002460:	f006 fbba 	bl	8008bd8 <HAL_RCCEx_PeriphCLKConfig>
 8002464:	2800      	cmp	r0, #0
 8002466:	d144      	bne.n	80024f2 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800246e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002472:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002474:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002476:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800247a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800247c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800247e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800248e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002490:	230c      	movs	r3, #12
 8002492:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2500      	movs	r5, #0
 800249a:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024a0:	2307      	movs	r3, #7
 80024a2:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a4:	a911      	add	r1, sp, #68	; 0x44
 80024a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024aa:	f004 fbe3 	bl	8006c74 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80024ae:	4817      	ldr	r0, [pc, #92]	; (800250c <HAL_UART_MspInit+0xdc>)
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_UART_MspInit+0xe0>)
 80024b2:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80024b4:	2314      	movs	r3, #20
 80024b6:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024b8:	2310      	movs	r3, #16
 80024ba:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024bc:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c2:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024c4:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024c6:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024c8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024ca:	f004 f86f 	bl	80065ac <HAL_DMA_Init>
 80024ce:	b998      	cbnz	r0, 80024f8 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80024d0:	2110      	movs	r1, #16
 80024d2:	480e      	ldr	r0, [pc, #56]	; (800250c <HAL_UART_MspInit+0xdc>)
 80024d4:	f004 fa6c 	bl	80069b0 <HAL_DMA_ConfigChannelAttributes>
 80024d8:	b988      	cbnz	r0, 80024fe <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_UART_MspInit+0xdc>)
 80024dc:	67e3      	str	r3, [r4, #124]	; 0x7c
 80024de:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2102      	movs	r1, #2
 80024e4:	2025      	movs	r0, #37	; 0x25
 80024e6:	f003 ff99 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024ea:	2025      	movs	r0, #37	; 0x25
 80024ec:	f003 ffce 	bl	800648c <HAL_NVIC_EnableIRQ>
}
 80024f0:	e7af      	b.n	8002452 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80024f2:	f7ff fb44 	bl	8001b7e <Error_Handler>
 80024f6:	e7b7      	b.n	8002468 <HAL_UART_MspInit+0x38>
      Error_Handler();
 80024f8:	f7ff fb41 	bl	8001b7e <Error_Handler>
 80024fc:	e7e8      	b.n	80024d0 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 80024fe:	f7ff fb3e 	bl	8001b7e <Error_Handler>
 8002502:	e7ea      	b.n	80024da <HAL_UART_MspInit+0xaa>
 8002504:	40004400 	.word	0x40004400
 8002508:	000c0004 	.word	0x000c0004
 800250c:	20000310 	.word	0x20000310
 8002510:	40020058 	.word	0x40020058

08002514 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002514:	6802      	ldr	r2, [r0, #0]
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_UART_MspDeInit+0x34>)
 8002518:	429a      	cmp	r2, r3
 800251a:	d000      	beq.n	800251e <HAL_UART_MspDeInit+0xa>
 800251c:	4770      	bx	lr
{
 800251e:	b510      	push	{r4, lr}
 8002520:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002526:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002528:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800252c:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800252e:	210c      	movs	r1, #12
 8002530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002534:	f004 fc70 	bl	8006e18 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002538:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800253a:	f004 f8a9 	bl	8006690 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800253e:	2025      	movs	r0, #37	; 0x25
 8002540:	f003 ffb2 	bl	80064a8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002544:	bd10      	pop	{r4, pc}
 8002546:	bf00      	nop
 8002548:	40004400 	.word	0x40004400

0800254c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800254c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <vcom_Init+0x20>)
 8002550:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002552:	f7ff f85d 	bl	8001610 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002556:	f7ff ff37 	bl	80023c8 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <vcom_Init+0x24>)
 800255c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002560:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002564:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002568:	2000      	movs	r0, #0
 800256a:	bd08      	pop	{r3, pc}
 800256c:	20000408 	.word	0x20000408
 8002570:	58000800 	.word	0x58000800

08002574 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002574:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800257c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002584:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002588:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800258a:	4804      	ldr	r0, [pc, #16]	; (800259c <vcom_DeInit+0x28>)
 800258c:	f7ff ffc2 	bl	8002514 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002590:	200f      	movs	r0, #15
 8002592:	f003 ff89 	bl	80064a8 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002596:	2000      	movs	r0, #0
 8002598:	bd08      	pop	{r3, pc}
 800259a:	bf00      	nop
 800259c:	20000370 	.word	0x20000370

080025a0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80025a0:	b508      	push	{r3, lr}
 80025a2:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80025a4:	4601      	mov	r1, r0
 80025a6:	4802      	ldr	r0, [pc, #8]	; (80025b0 <vcom_Trace_DMA+0x10>)
 80025a8:	f007 fe0a 	bl	800a1c0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80025ac:	2000      	movs	r0, #0
 80025ae:	bd08      	pop	{r3, pc}
 80025b0:	20000370 	.word	0x20000370

080025b4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80025b4:	b510      	push	{r4, lr}
 80025b6:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <vcom_ReceiveInit+0x50>)
 80025ba:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80025bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025c0:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80025c2:	ab02      	add	r3, sp, #8
 80025c4:	e913 0006 	ldmdb	r3, {r1, r2}
 80025c8:	480f      	ldr	r0, [pc, #60]	; (8002608 <vcom_ReceiveInit+0x54>)
 80025ca:	f008 feb0 	bl	800b32e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <vcom_ReceiveInit+0x54>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80025d8:	d1f9      	bne.n	80025ce <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80025e0:	d0fb      	beq.n	80025da <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80025e8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80025ea:	4c07      	ldr	r4, [pc, #28]	; (8002608 <vcom_ReceiveInit+0x54>)
 80025ec:	4620      	mov	r0, r4
 80025ee:	f008 fedf 	bl	800b3b0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80025f2:	2201      	movs	r2, #1
 80025f4:	4905      	ldr	r1, [pc, #20]	; (800260c <vcom_ReceiveInit+0x58>)
 80025f6:	4620      	mov	r0, r4
 80025f8:	f008 fe32 	bl	800b260 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80025fc:	2000      	movs	r0, #0
 80025fe:	b002      	add	sp, #8
 8002600:	bd10      	pop	{r4, pc}
 8002602:	bf00      	nop
 8002604:	20000404 	.word	0x20000404
 8002608:	20000370 	.word	0x20000370
 800260c:	2000040c 	.word	0x2000040c

08002610 <vcom_Resume>:

void vcom_Resume(void)
{
 8002610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002612:	4807      	ldr	r0, [pc, #28]	; (8002630 <vcom_Resume+0x20>)
 8002614:	f008 fd52 	bl	800b0bc <HAL_UART_Init>
 8002618:	b920      	cbnz	r0, 8002624 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800261a:	4806      	ldr	r0, [pc, #24]	; (8002634 <vcom_Resume+0x24>)
 800261c:	f003 ffc6 	bl	80065ac <HAL_DMA_Init>
 8002620:	b918      	cbnz	r0, 800262a <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002622:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002624:	f7ff faab 	bl	8001b7e <Error_Handler>
 8002628:	e7f7      	b.n	800261a <vcom_Resume+0xa>
    Error_Handler();
 800262a:	f7ff faa8 	bl	8001b7e <Error_Handler>
}
 800262e:	e7f8      	b.n	8002622 <vcom_Resume+0x12>
 8002630:	20000370 	.word	0x20000370
 8002634:	20000310 	.word	0x20000310

08002638 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002638:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800263a:	6802      	ldr	r2, [r0, #0]
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <HAL_UART_TxCpltCallback+0x18>)
 800263e:	429a      	cmp	r2, r3
 8002640:	d000      	beq.n	8002644 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002642:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_UART_TxCpltCallback+0x1c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2000      	movs	r0, #0
 800264a:	4798      	blx	r3
}
 800264c:	e7f9      	b.n	8002642 <HAL_UART_TxCpltCallback+0xa>
 800264e:	bf00      	nop
 8002650:	40004400 	.word	0x40004400
 8002654:	20000408 	.word	0x20000408

08002658 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002658:	6802      	ldr	r2, [r0, #0]
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_UART_RxCpltCallback+0x2c>)
 800265c:	429a      	cmp	r2, r3
 800265e:	d000      	beq.n	8002662 <HAL_UART_RxCpltCallback+0xa>
 8002660:	4770      	bx	lr
{
 8002662:	b510      	push	{r4, lr}
 8002664:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_UART_RxCpltCallback+0x30>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b12b      	cbz	r3, 8002678 <HAL_UART_RxCpltCallback+0x20>
 800266c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002670:	b912      	cbnz	r2, 8002678 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002672:	2101      	movs	r1, #1
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <HAL_UART_RxCpltCallback+0x34>)
 8002676:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002678:	2201      	movs	r2, #1
 800267a:	4904      	ldr	r1, [pc, #16]	; (800268c <HAL_UART_RxCpltCallback+0x34>)
 800267c:	4620      	mov	r0, r4
 800267e:	f008 fdef 	bl	800b260 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002682:	bd10      	pop	{r4, pc}
 8002684:	40004400 	.word	0x40004400
 8002688:	20000404 	.word	0x20000404
 800268c:	2000040c 	.word	0x2000040c

08002690 <Accelero_Sensor_Handler>:
	BSP_SENSOR_GYR_GetOrientation(gyro_orientation);

}

void Accelero_Sensor_Handler()
{
 8002690:	b508      	push	{r3, lr}
    if (UseOfflineData == 1)
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <Accelero_Sensor_Handler+0x14>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d100      	bne.n	800269c <Accelero_Sensor_Handler+0xc>
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
    }

}
 800269a:	bd08      	pop	{r3, pc}
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <Accelero_Sensor_Handler+0x18>)
 800269e:	f002 ffa6 	bl	80055ee <BSP_SENSOR_ACC_GetAxes>
}
 80026a2:	e7fa      	b.n	800269a <Accelero_Sensor_Handler+0xa>
 80026a4:	20000430 	.word	0x20000430
 80026a8:	20000410 	.word	0x20000410

080026ac <Init_Sensors>:

}


void Init_Sensors(void)
{
 80026ac:	b538      	push	{r3, r4, r5, lr}
	acc_mems.status = ARM_MATH_SUCCESS;
 80026ae:	4d0f      	ldr	r5, [pc, #60]	; (80026ec <Init_Sensors+0x40>)
 80026b0:	2400      	movs	r4, #0
 80026b2:	f885 4800 	strb.w	r4, [r5, #2048]	; 0x800
	arm_cfft_radix4_init_f32(&FFThandler, FFT_BUFFER_SIZE/2, FFT_INVERSE_FLAG, FFT_Normal_OUTPUT_FLAG);
 80026b6:	2301      	movs	r3, #1
 80026b8:	4622      	mov	r2, r4
 80026ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026be:	480c      	ldr	r0, [pc, #48]	; (80026f0 <Init_Sensors+0x44>)
 80026c0:	f014 f88e 	bl	80167e0 <arm_cfft_radix4_init_f32>
	//arm_cfft_radix4_init_f32(&FFThandler, FFT_LENGTH, FFT_INVERSE_FLAG, FFT_Normal_OUTPUT_FLAG);

	(void)IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO);
 80026c4:	2102      	movs	r1, #2
 80026c6:	4620      	mov	r0, r4
 80026c8:	f003 f82a 	bl	8005720 <IKS02A1_MOTION_SENSOR_Init>
//	(void)IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_GYRO);

	(void)IKS02A1_MOTION_SENSOR_SetOutputDataRate(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO, ACC_ODR);
 80026cc:	f04f 4289 	mov.w	r2, #1149239296	; 0x44800000
 80026d0:	2102      	movs	r1, #2
 80026d2:	4620      	mov	r0, r4
 80026d4:	f003 f8b2 	bl	800583c <IKS02A1_MOTION_SENSOR_SetOutputDataRate>
	(void)IKS02A1_MOTION_SENSOR_SetFullScale(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO, ACC_FS);
 80026d8:	2204      	movs	r2, #4
 80026da:	2102      	movs	r1, #2
 80026dc:	4620      	mov	r0, r4
 80026de:	f003 f8d9 	bl	8005894 <IKS02A1_MOTION_SENSOR_SetFullScale>
	Accelero_Sensor_Handler();
 80026e2:	f7ff ffd5 	bl	8002690 <Accelero_Sensor_Handler>
	acc_mems.index_afft=0;
 80026e6:	f8a5 4864 	strh.w	r4, [r5, #2148]	; 0x864

//	arm_rfft_fast_init_f32(&FFThandler, Acc_bufffer_size);
}
 80026ea:	bd38      	pop	{r3, r4, r5, pc}
 80026ec:	20002434 	.word	0x20002434
 80026f0:	2000041c 	.word	0x2000041c

080026f4 <calculateMagnitude>:
	acc_mems.req_cmd=1;
	acc_mems.index_buff=0;
	acc_mems.index=0;
}

void calculateMagnitude(const float32_t *complexSignal, float32_t *magnitude, uint32_t length) {
 80026f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026f8:	4606      	mov	r6, r0
 80026fa:	4688      	mov	r8, r1
 80026fc:	4617      	mov	r7, r2
    // Calculate the magnitude of the complex signal
    for (uint32_t i = 0; i < length; i++) {
 80026fe:	2400      	movs	r4, #0
 8002700:	e016      	b.n	8002730 <calculateMagnitude+0x3c>
        float32_t real = complexSignal[2 * i];
 8002702:	00e3      	lsls	r3, r4, #3
 8002704:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
        float32_t imag = complexSignal[2 * i + 1];
 8002708:	3304      	adds	r3, #4
 800270a:	f856 9003 	ldr.w	r9, [r6, r3]
        magnitude[i] = sqrtf(real * real + imag * imag);
 800270e:	4601      	mov	r1, r0
 8002710:	f7fe fb2c 	bl	8000d6c <__aeabi_fmul>
 8002714:	4605      	mov	r5, r0
 8002716:	4649      	mov	r1, r9
 8002718:	4648      	mov	r0, r9
 800271a:	f7fe fb27 	bl	8000d6c <__aeabi_fmul>
 800271e:	4601      	mov	r1, r0
 8002720:	4628      	mov	r0, r5
 8002722:	f7fe fa1b 	bl	8000b5c <__addsf3>
 8002726:	f014 ff57 	bl	80175d8 <sqrtf>
 800272a:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
    for (uint32_t i = 0; i < length; i++) {
 800272e:	3401      	adds	r4, #1
 8002730:	42bc      	cmp	r4, r7
 8002732:	d3e6      	bcc.n	8002702 <calculateMagnitude+0xe>
    }
}
 8002734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002738 <Process_FFT_Input_buffer>:
//		acc_mems.index_buff=512;
	}
}

void Process_FFT_Input_buffer(type_acc *mems,MOTION_SENSOR_Axes_t *axes, uint8_t axis)
{
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273a:	4607      	mov	r7, r0
 800273c:	460d      	mov	r5, r1
 800273e:	4616      	mov	r6, r2
	uint16_t index_fft;
	for(index_fft=0;index_fft<FFT_BUFFER_SIZE;index_fft+=2)
 8002740:	2400      	movs	r4, #0
 8002742:	e011      	b.n	8002768 <Process_FFT_Input_buffer+0x30>
	{
		switch(axis)
		{
		case 0: //x
			mems->aFFT_Input_f32[index_fft]=(float32_t)(axes)->x/1000;
 8002744:	6828      	ldr	r0, [r5, #0]
 8002746:	f7fe fabd 	bl	8000cc4 <__aeabi_i2f>
 800274a:	4916      	ldr	r1, [pc, #88]	; (80027a4 <Process_FFT_Input_buffer+0x6c>)
 800274c:	f7fe fbc2 	bl	8000ed4 <__aeabi_fdiv>
 8002750:	f504 63c0 	add.w	r3, r4, #1536	; 0x600
 8002754:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
		default:
		case 2: //z
			mems->aFFT_Input_f32[index_fft]=(float32_t)(axes)->z/1000;
			break;
		}
		mems->aFFT_Input_f32[index_fft+1]=0;
 8002758:	f204 6301 	addw	r3, r4, #1537	; 0x601
 800275c:	2200      	movs	r2, #0
 800275e:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
		axes++;
 8002762:	350c      	adds	r5, #12
	for(index_fft=0;index_fft<FFT_BUFFER_SIZE;index_fft+=2)
 8002764:	3402      	adds	r4, #2
 8002766:	b2a4      	uxth	r4, r4
 8002768:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800276c:	d219      	bcs.n	80027a2 <Process_FFT_Input_buffer+0x6a>
		switch(axis)
 800276e:	2e00      	cmp	r6, #0
 8002770:	d0e8      	beq.n	8002744 <Process_FFT_Input_buffer+0xc>
 8002772:	2e01      	cmp	r6, #1
 8002774:	d00a      	beq.n	800278c <Process_FFT_Input_buffer+0x54>
			mems->aFFT_Input_f32[index_fft]=(float32_t)(axes)->z/1000;
 8002776:	68a8      	ldr	r0, [r5, #8]
 8002778:	f7fe faa4 	bl	8000cc4 <__aeabi_i2f>
 800277c:	4909      	ldr	r1, [pc, #36]	; (80027a4 <Process_FFT_Input_buffer+0x6c>)
 800277e:	f7fe fba9 	bl	8000ed4 <__aeabi_fdiv>
 8002782:	f504 63c0 	add.w	r3, r4, #1536	; 0x600
 8002786:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
			break;
 800278a:	e7e5      	b.n	8002758 <Process_FFT_Input_buffer+0x20>
			mems->aFFT_Input_f32[index_fft]=(float32_t)(axes)->y/1000;
 800278c:	6868      	ldr	r0, [r5, #4]
 800278e:	f7fe fa99 	bl	8000cc4 <__aeabi_i2f>
 8002792:	4904      	ldr	r1, [pc, #16]	; (80027a4 <Process_FFT_Input_buffer+0x6c>)
 8002794:	f7fe fb9e 	bl	8000ed4 <__aeabi_fdiv>
 8002798:	f504 63c0 	add.w	r3, r4, #1536	; 0x600
 800279c:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
			break;
 80027a0:	e7da      	b.n	8002758 <Process_FFT_Input_buffer+0x20>
	}

}
 80027a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a4:	447a0000 	.word	0x447a0000

080027a8 <Cal_Rms_value>:

void Cal_Rms_value(type_rms *dataRms,MOTION_SENSOR_Axes_t *axes,int16_t sample_size)
{
 80027a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ac:	4604      	mov	r4, r0
 80027ae:	4689      	mov	r9, r1
 80027b0:	4692      	mov	sl, r2
	int inx=0;
	float axis_x=0,axis_y=0,axis_z=0;
	dataRms->Sum_sqrt_X=0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	6003      	str	r3, [r0, #0]
	dataRms->Sum_sqrt_Y=0;
 80027b6:	6043      	str	r3, [r0, #4]
	dataRms->Sum_sqrt_Z=0;
 80027b8:	6083      	str	r3, [r0, #8]
	for(inx=0;inx<sample_size;inx++)
 80027ba:	2500      	movs	r5, #0
 80027bc:	e035      	b.n	800282a <Cal_Rms_value+0x82>
	{
		axis_x=(float)(axes+inx)->x/1000;
 80027be:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80027c2:	eb09 0683 	add.w	r6, r9, r3, lsl #2
 80027c6:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 80027ca:	f7fe fa7b 	bl	8000cc4 <__aeabi_i2f>
 80027ce:	492c      	ldr	r1, [pc, #176]	; (8002880 <Cal_Rms_value+0xd8>)
 80027d0:	f7fe fb80 	bl	8000ed4 <__aeabi_fdiv>
 80027d4:	4680      	mov	r8, r0
		axis_y=(float)(axes+inx)->y/1000;
 80027d6:	6870      	ldr	r0, [r6, #4]
 80027d8:	f7fe fa74 	bl	8000cc4 <__aeabi_i2f>
 80027dc:	4928      	ldr	r1, [pc, #160]	; (8002880 <Cal_Rms_value+0xd8>)
 80027de:	f7fe fb79 	bl	8000ed4 <__aeabi_fdiv>
 80027e2:	4607      	mov	r7, r0
		axis_z=(float)(axes+inx)->z/1000;
 80027e4:	68b0      	ldr	r0, [r6, #8]
 80027e6:	f7fe fa6d 	bl	8000cc4 <__aeabi_i2f>
 80027ea:	4925      	ldr	r1, [pc, #148]	; (8002880 <Cal_Rms_value+0xd8>)
 80027ec:	f7fe fb72 	bl	8000ed4 <__aeabi_fdiv>
 80027f0:	4606      	mov	r6, r0
		dataRms->Sum_sqrt_X+=axis_x*axis_x;
 80027f2:	4641      	mov	r1, r8
 80027f4:	4640      	mov	r0, r8
 80027f6:	f7fe fab9 	bl	8000d6c <__aeabi_fmul>
 80027fa:	4601      	mov	r1, r0
 80027fc:	6820      	ldr	r0, [r4, #0]
 80027fe:	f7fe f9ad 	bl	8000b5c <__addsf3>
 8002802:	6020      	str	r0, [r4, #0]
		dataRms->Sum_sqrt_Y+=axis_y*axis_y;
 8002804:	4639      	mov	r1, r7
 8002806:	4638      	mov	r0, r7
 8002808:	f7fe fab0 	bl	8000d6c <__aeabi_fmul>
 800280c:	4601      	mov	r1, r0
 800280e:	6860      	ldr	r0, [r4, #4]
 8002810:	f7fe f9a4 	bl	8000b5c <__addsf3>
 8002814:	6060      	str	r0, [r4, #4]
		dataRms->Sum_sqrt_Z+=axis_z*axis_z;
 8002816:	4631      	mov	r1, r6
 8002818:	4630      	mov	r0, r6
 800281a:	f7fe faa7 	bl	8000d6c <__aeabi_fmul>
 800281e:	4601      	mov	r1, r0
 8002820:	68a0      	ldr	r0, [r4, #8]
 8002822:	f7fe f99b 	bl	8000b5c <__addsf3>
 8002826:	60a0      	str	r0, [r4, #8]
	for(inx=0;inx<sample_size;inx++)
 8002828:	3501      	adds	r5, #1
 800282a:	45aa      	cmp	sl, r5
 800282c:	dcc7      	bgt.n	80027be <Cal_Rms_value+0x16>
	}
	dataRms->x=sqrt(dataRms->Sum_sqrt_X/sample_size);
 800282e:	6826      	ldr	r6, [r4, #0]
 8002830:	4650      	mov	r0, sl
 8002832:	f7fe fa47 	bl	8000cc4 <__aeabi_i2f>
 8002836:	4605      	mov	r5, r0
 8002838:	4601      	mov	r1, r0
 800283a:	4630      	mov	r0, r6
 800283c:	f7fe fb4a 	bl	8000ed4 <__aeabi_fdiv>
 8002840:	f7fd fe06 	bl	8000450 <__aeabi_f2d>
 8002844:	f014 fea4 	bl	8017590 <sqrt>
 8002848:	f7fe f932 	bl	8000ab0 <__aeabi_d2f>
 800284c:	60e0      	str	r0, [r4, #12]
	dataRms->y=sqrt(dataRms->Sum_sqrt_Y/sample_size);
 800284e:	4629      	mov	r1, r5
 8002850:	6860      	ldr	r0, [r4, #4]
 8002852:	f7fe fb3f 	bl	8000ed4 <__aeabi_fdiv>
 8002856:	f7fd fdfb 	bl	8000450 <__aeabi_f2d>
 800285a:	f014 fe99 	bl	8017590 <sqrt>
 800285e:	f7fe f927 	bl	8000ab0 <__aeabi_d2f>
 8002862:	6120      	str	r0, [r4, #16]
	dataRms->z=sqrt(dataRms->Sum_sqrt_Z/sample_size);
 8002864:	4629      	mov	r1, r5
 8002866:	68a0      	ldr	r0, [r4, #8]
 8002868:	f7fe fb34 	bl	8000ed4 <__aeabi_fdiv>
 800286c:	f7fd fdf0 	bl	8000450 <__aeabi_f2d>
 8002870:	f014 fe8e 	bl	8017590 <sqrt>
 8002874:	f7fe f91c 	bl	8000ab0 <__aeabi_d2f>
 8002878:	6160      	str	r0, [r4, #20]

}
 800287a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800287e:	bf00      	nop
 8002880:	447a0000 	.word	0x447a0000

08002884 <Cal_Rms_velocity>:

void Cal_Rms_velocity(type_rms *dataRms, MOTION_SENSOR_Axes_t *axes, int16_t sample_size) {
 8002884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002888:	b087      	sub	sp, #28
 800288a:	4604      	mov	r4, r0
 800288c:	4688      	mov	r8, r1
 800288e:	9202      	str	r2, [sp, #8]
    float prev_velocity_x = 0, prev_velocity_y = 0, prev_velocity_z = 0;
//    float axis_x, axis_y, axis_z;
    float delta_acc_x, delta_acc_y, delta_acc_z;
    //float time_interval = 1.0f / ACC_ODR; // Time interval between samples
    float time_interval = 1.0f / 1365.33334; // Time interval between samples
    dataRms->Sum_sqrt_X = 0;
 8002890:	2600      	movs	r6, #0
 8002892:	6006      	str	r6, [r0, #0]
    dataRms->Sum_sqrt_Y = 0;
 8002894:	6046      	str	r6, [r0, #4]
    dataRms->Sum_sqrt_Z = 0;
 8002896:	6086      	str	r6, [r0, #8]
    float prev_velocity_x = 0, prev_velocity_y = 0, prev_velocity_z = 0;
 8002898:	9605      	str	r6, [sp, #20]
 800289a:	9604      	str	r6, [sp, #16]
 800289c:	9603      	str	r6, [sp, #12]
    float velocity_x = 0, velocity_y = 0, velocity_z = 0;
 800289e:	9601      	str	r6, [sp, #4]
 80028a0:	9600      	str	r6, [sp, #0]

    for (inx = 1; inx < sample_size; inx++) {
 80028a2:	2701      	movs	r7, #1
 80028a4:	e01b      	b.n	80028de <Cal_Rms_velocity+0x5a>
            velocity_z = prev_velocity_z + delta_acc_z * time_interval;
            prev_velocity_z = velocity_z;
        }

        // Sum of squares for RMS calculation
        dataRms->Sum_sqrt_X += velocity_x * velocity_x;
 80028a6:	4631      	mov	r1, r6
 80028a8:	4630      	mov	r0, r6
 80028aa:	f7fe fa5f 	bl	8000d6c <__aeabi_fmul>
 80028ae:	4601      	mov	r1, r0
 80028b0:	6820      	ldr	r0, [r4, #0]
 80028b2:	f7fe f953 	bl	8000b5c <__addsf3>
 80028b6:	6020      	str	r0, [r4, #0]
        dataRms->Sum_sqrt_Y += velocity_y * velocity_y;
 80028b8:	9900      	ldr	r1, [sp, #0]
 80028ba:	4608      	mov	r0, r1
 80028bc:	f7fe fa56 	bl	8000d6c <__aeabi_fmul>
 80028c0:	4601      	mov	r1, r0
 80028c2:	6860      	ldr	r0, [r4, #4]
 80028c4:	f7fe f94a 	bl	8000b5c <__addsf3>
 80028c8:	6060      	str	r0, [r4, #4]
        dataRms->Sum_sqrt_Z += velocity_z * velocity_z;
 80028ca:	9901      	ldr	r1, [sp, #4]
 80028cc:	4608      	mov	r0, r1
 80028ce:	f7fe fa4d 	bl	8000d6c <__aeabi_fmul>
 80028d2:	4601      	mov	r1, r0
 80028d4:	68a0      	ldr	r0, [r4, #8]
 80028d6:	f7fe f941 	bl	8000b5c <__addsf3>
 80028da:	60a0      	str	r0, [r4, #8]
    for (inx = 1; inx < sample_size; inx++) {
 80028dc:	3701      	adds	r7, #1
 80028de:	9b02      	ldr	r3, [sp, #8]
 80028e0:	42bb      	cmp	r3, r7
 80028e2:	dd6e      	ble.n	80029c2 <Cal_Rms_velocity+0x13e>
        delta_acc_x = (axes+inx)->x - (axes+inx-1)->x;
 80028e4:	eb07 0547 	add.w	r5, r7, r7, lsl #1
 80028e8:	00ab      	lsls	r3, r5, #2
 80028ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80028ee:	f858 0003 	ldr.w	r0, [r8, r3]
 80028f2:	3b0c      	subs	r3, #12
 80028f4:	eb08 0b03 	add.w	fp, r8, r3
 80028f8:	f858 3003 	ldr.w	r3, [r8, r3]
 80028fc:	1ac0      	subs	r0, r0, r3
 80028fe:	f7fe f9e1 	bl	8000cc4 <__aeabi_i2f>
 8002902:	4682      	mov	sl, r0
        delta_acc_y = (axes+inx)->y - (axes+inx-1)->y;
 8002904:	6868      	ldr	r0, [r5, #4]
 8002906:	f8db 3004 	ldr.w	r3, [fp, #4]
 800290a:	1ac0      	subs	r0, r0, r3
 800290c:	f7fe f9da 	bl	8000cc4 <__aeabi_i2f>
 8002910:	4681      	mov	r9, r0
        delta_acc_z = (axes+inx)->z - (axes+inx-1)->z;
 8002912:	68a8      	ldr	r0, [r5, #8]
 8002914:	f8db 3008 	ldr.w	r3, [fp, #8]
 8002918:	1ac0      	subs	r0, r0, r3
 800291a:	f7fe f9d3 	bl	8000cc4 <__aeabi_i2f>
 800291e:	4605      	mov	r5, r0
        delta_acc_x /=1000.0f;
 8002920:	493c      	ldr	r1, [pc, #240]	; (8002a14 <Cal_Rms_velocity+0x190>)
 8002922:	4650      	mov	r0, sl
 8002924:	f7fe fad6 	bl	8000ed4 <__aeabi_fdiv>
 8002928:	4682      	mov	sl, r0
        delta_acc_y /=1000.0f;
 800292a:	493a      	ldr	r1, [pc, #232]	; (8002a14 <Cal_Rms_velocity+0x190>)
 800292c:	4648      	mov	r0, r9
 800292e:	f7fe fad1 	bl	8000ed4 <__aeabi_fdiv>
 8002932:	4681      	mov	r9, r0
        delta_acc_z /=1000.0f;
 8002934:	4937      	ldr	r1, [pc, #220]	; (8002a14 <Cal_Rms_velocity+0x190>)
 8002936:	4628      	mov	r0, r5
 8002938:	f7fe facc 	bl	8000ed4 <__aeabi_fdiv>
 800293c:	4605      	mov	r5, r0
        delta_acc_x *= GRAVITATIONAL_ACCELERATION;
 800293e:	4936      	ldr	r1, [pc, #216]	; (8002a18 <Cal_Rms_velocity+0x194>)
 8002940:	4650      	mov	r0, sl
 8002942:	f7fe fa13 	bl	8000d6c <__aeabi_fmul>
 8002946:	4682      	mov	sl, r0
        delta_acc_y *= GRAVITATIONAL_ACCELERATION;
 8002948:	4933      	ldr	r1, [pc, #204]	; (8002a18 <Cal_Rms_velocity+0x194>)
 800294a:	4648      	mov	r0, r9
 800294c:	f7fe fa0e 	bl	8000d6c <__aeabi_fmul>
 8002950:	4681      	mov	r9, r0
        delta_acc_z *= GRAVITATIONAL_ACCELERATION;
 8002952:	4931      	ldr	r1, [pc, #196]	; (8002a18 <Cal_Rms_velocity+0x194>)
 8002954:	4628      	mov	r0, r5
 8002956:	f7fe fa09 	bl	8000d6c <__aeabi_fmul>
 800295a:	4605      	mov	r5, r0
        if (fabs(delta_acc_x) > NOISE_THRESHOLD) {
 800295c:	f02a 4000 	bic.w	r0, sl, #2147483648	; 0x80000000
 8002960:	492e      	ldr	r1, [pc, #184]	; (8002a1c <Cal_Rms_velocity+0x198>)
 8002962:	f7fe fbbf 	bl	80010e4 <__aeabi_fcmpgt>
 8002966:	b148      	cbz	r0, 800297c <Cal_Rms_velocity+0xf8>
            velocity_x = prev_velocity_x + delta_acc_x * time_interval;
 8002968:	f04f 5169 	mov.w	r1, #977272832	; 0x3a400000
 800296c:	4650      	mov	r0, sl
 800296e:	f7fe f9fd 	bl	8000d6c <__aeabi_fmul>
 8002972:	9903      	ldr	r1, [sp, #12]
 8002974:	f7fe f8f2 	bl	8000b5c <__addsf3>
 8002978:	4606      	mov	r6, r0
            prev_velocity_x = velocity_x;
 800297a:	9003      	str	r0, [sp, #12]
        if (fabs(delta_acc_y) > NOISE_THRESHOLD) {
 800297c:	f029 4000 	bic.w	r0, r9, #2147483648	; 0x80000000
 8002980:	4926      	ldr	r1, [pc, #152]	; (8002a1c <Cal_Rms_velocity+0x198>)
 8002982:	f7fe fbaf 	bl	80010e4 <__aeabi_fcmpgt>
 8002986:	b148      	cbz	r0, 800299c <Cal_Rms_velocity+0x118>
            velocity_y = prev_velocity_y + delta_acc_y * time_interval;
 8002988:	f04f 5169 	mov.w	r1, #977272832	; 0x3a400000
 800298c:	4648      	mov	r0, r9
 800298e:	f7fe f9ed 	bl	8000d6c <__aeabi_fmul>
 8002992:	9904      	ldr	r1, [sp, #16]
 8002994:	f7fe f8e2 	bl	8000b5c <__addsf3>
 8002998:	9000      	str	r0, [sp, #0]
            prev_velocity_y = velocity_y;
 800299a:	9004      	str	r0, [sp, #16]
        if (fabs(delta_acc_z) > NOISE_THRESHOLD) {
 800299c:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80029a0:	491e      	ldr	r1, [pc, #120]	; (8002a1c <Cal_Rms_velocity+0x198>)
 80029a2:	f7fe fb9f 	bl	80010e4 <__aeabi_fcmpgt>
 80029a6:	2800      	cmp	r0, #0
 80029a8:	f43f af7d 	beq.w	80028a6 <Cal_Rms_velocity+0x22>
            velocity_z = prev_velocity_z + delta_acc_z * time_interval;
 80029ac:	f04f 5169 	mov.w	r1, #977272832	; 0x3a400000
 80029b0:	4628      	mov	r0, r5
 80029b2:	f7fe f9db 	bl	8000d6c <__aeabi_fmul>
 80029b6:	9905      	ldr	r1, [sp, #20]
 80029b8:	f7fe f8d0 	bl	8000b5c <__addsf3>
 80029bc:	9001      	str	r0, [sp, #4]
            prev_velocity_z = velocity_z;
 80029be:	9005      	str	r0, [sp, #20]
 80029c0:	e771      	b.n	80028a6 <Cal_Rms_velocity+0x22>
    }

    // Calculate RMS velocity
    dataRms->x = sqrt(dataRms->Sum_sqrt_X / (sample_size - 1));
 80029c2:	6826      	ldr	r6, [r4, #0]
 80029c4:	1e58      	subs	r0, r3, #1
 80029c6:	f7fe f97d 	bl	8000cc4 <__aeabi_i2f>
 80029ca:	4605      	mov	r5, r0
 80029cc:	4601      	mov	r1, r0
 80029ce:	4630      	mov	r0, r6
 80029d0:	f7fe fa80 	bl	8000ed4 <__aeabi_fdiv>
 80029d4:	f7fd fd3c 	bl	8000450 <__aeabi_f2d>
 80029d8:	f014 fdda 	bl	8017590 <sqrt>
 80029dc:	f7fe f868 	bl	8000ab0 <__aeabi_d2f>
 80029e0:	60e0      	str	r0, [r4, #12]
    dataRms->y = sqrt(dataRms->Sum_sqrt_Y / (sample_size - 1));
 80029e2:	4629      	mov	r1, r5
 80029e4:	6860      	ldr	r0, [r4, #4]
 80029e6:	f7fe fa75 	bl	8000ed4 <__aeabi_fdiv>
 80029ea:	f7fd fd31 	bl	8000450 <__aeabi_f2d>
 80029ee:	f014 fdcf 	bl	8017590 <sqrt>
 80029f2:	f7fe f85d 	bl	8000ab0 <__aeabi_d2f>
 80029f6:	6120      	str	r0, [r4, #16]
    dataRms->z = sqrt(dataRms->Sum_sqrt_Z / (sample_size - 1));
 80029f8:	4629      	mov	r1, r5
 80029fa:	68a0      	ldr	r0, [r4, #8]
 80029fc:	f7fe fa6a 	bl	8000ed4 <__aeabi_fdiv>
 8002a00:	f7fd fd26 	bl	8000450 <__aeabi_f2d>
 8002a04:	f014 fdc4 	bl	8017590 <sqrt>
 8002a08:	f7fe f852 	bl	8000ab0 <__aeabi_d2f>
 8002a0c:	6160      	str	r0, [r4, #20]
}
 8002a0e:	b007      	add	sp, #28
 8002a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a14:	447a0000 	.word	0x447a0000
 8002a18:	411ce80a 	.word	0x411ce80a
 8002a1c:	3c23d70a 	.word	0x3c23d70a

08002a20 <Mems_get_sampling_handler>:
{
 8002a20:	b538      	push	{r3, r4, r5, lr}
	if(!acc_mems.req_cmd)
 8002a22:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <Mems_get_sampling_handler+0xc0>)
 8002a24:	f893 3866 	ldrb.w	r3, [r3, #2150]	; 0x866
 8002a28:	b903      	cbnz	r3, 8002a2c <Mems_get_sampling_handler+0xc>
}
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
	Accelero_Sensor_Handler();
 8002a2c:	f7ff fe30 	bl	8002690 <Accelero_Sensor_Handler>
	if(acc_mems.index<3)
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <Mems_get_sampling_handler+0xc0>)
 8002a32:	f8b3 3860 	ldrh.w	r3, [r3, #2144]	; 0x860
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d91c      	bls.n	8002a74 <Mems_get_sampling_handler+0x54>
	if(acc_mems.index_buff<Acc_bufffer_size)
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <Mems_get_sampling_handler+0xc0>)
 8002a3c:	f8b3 2862 	ldrh.w	r2, [r3, #2146]	; 0x862
 8002a40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002a44:	d21b      	bcs.n	8002a7e <Mems_get_sampling_handler+0x5e>
		acc_mems.AccValue[acc_mems.index_buff].x=AccValue.x;
 8002a46:	4927      	ldr	r1, [pc, #156]	; (8002ae4 <Mems_get_sampling_handler+0xc4>)
 8002a48:	680d      	ldr	r5, [r1, #0]
 8002a4a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002a4e:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8002a52:	00a0      	lsls	r0, r4, #2
 8002a54:	181c      	adds	r4, r3, r0
 8002a56:	501d      	str	r5, [r3, r0]
		acc_mems.AccValue[acc_mems.index_buff].y=AccValue.y;
 8002a58:	6848      	ldr	r0, [r1, #4]
 8002a5a:	6060      	str	r0, [r4, #4]
		acc_mems.AccValue[acc_mems.index_buff].z=AccValue.z;
 8002a5c:	688c      	ldr	r4, [r1, #8]
 8002a5e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8002a62:	0081      	lsls	r1, r0, #2
 8002a64:	4419      	add	r1, r3
 8002a66:	608c      	str	r4, [r1, #8]
		acc_mems.index_buff+=1;
 8002a68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002a6c:	3201      	adds	r2, #1
 8002a6e:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
 8002a72:	e7da      	b.n	8002a2a <Mems_get_sampling_handler+0xa>
		acc_mems.index++;
 8002a74:	3301      	adds	r3, #1
 8002a76:	4a1a      	ldr	r2, [pc, #104]	; (8002ae0 <Mems_get_sampling_handler+0xc0>)
 8002a78:	f8a2 3860 	strh.w	r3, [r2, #2144]	; 0x860
		return;
 8002a7c:	e7d5      	b.n	8002a2a <Mems_get_sampling_handler+0xa>
		Cal_Rms_value(&acc_mems.rms_acc,acc_mems.AccValue,acc_mems.index_buff);
 8002a7e:	4c1a      	ldr	r4, [pc, #104]	; (8002ae8 <Mems_get_sampling_handler+0xc8>)
 8002a80:	b212      	sxth	r2, r2
 8002a82:	4621      	mov	r1, r4
 8002a84:	4819      	ldr	r0, [pc, #100]	; (8002aec <Mems_get_sampling_handler+0xcc>)
 8002a86:	f7ff fe8f 	bl	80027a8 <Cal_Rms_value>
		Cal_Rms_velocity(&acc_mems.rms_vel, acc_mems.AccValue, acc_mems.index_buff);
 8002a8a:	f504 5500 	add.w	r5, r4, #8192	; 0x2000
 8002a8e:	f9b5 2862 	ldrsh.w	r2, [r5, #2146]	; 0x862
 8002a92:	4621      	mov	r1, r4
 8002a94:	f605 0044 	addw	r0, r5, #2116	; 0x844
 8002a98:	f7ff fef4 	bl	8002884 <Cal_Rms_velocity>
		Process_FFT_Input_buffer(&acc_mems,acc_mems.AccValue,2);
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f7ff fe49 	bl	8002738 <Process_FFT_Input_buffer>
		arm_cfft_radix4_f32(&FFThandler, acc_mems.aFFT_Input_f32);
 8002aa6:	f504 54c0 	add.w	r4, r4, #6144	; 0x1800
 8002aaa:	4621      	mov	r1, r4
 8002aac:	4810      	ldr	r0, [pc, #64]	; (8002af0 <Mems_get_sampling_handler+0xd0>)
 8002aae:	f014 fcb7 	bl	8017420 <arm_cfft_radix4_f32>
		calculateMagnitude(acc_mems.aFFT_Input_f32, acc_mems.aFFT_Output_f32, FFT_LENGTH);
 8002ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7ff fe1b 	bl	80026f4 <calculateMagnitude>
		acc_mems.aFFT_Output_f32[0]=0;
 8002abe:	2400      	movs	r4, #0
 8002ac0:	602c      	str	r4, [r5, #0]
		arm_max_f32(acc_mems.aFFT_Output_f32, FFT_LENGTH, &acc_mems.maxValue, &acc_mems.maxIndex);
 8002ac2:	f605 0308 	addw	r3, r5, #2056	; 0x808
 8002ac6:	1f1a      	subs	r2, r3, #4
 8002ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002acc:	4628      	mov	r0, r5
 8002ace:	f013 fe19 	bl	8016704 <arm_max_f32>
		acc_mems.maxValue=0;
 8002ad2:	f8c5 4804 	str.w	r4, [r5, #2052]	; 0x804
		acc_mems.req_cmd=0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f885 3866 	strb.w	r3, [r5, #2150]	; 0x866
 8002adc:	e7a5      	b.n	8002a2a <Mems_get_sampling_handler+0xa>
 8002ade:	bf00      	nop
 8002ae0:	20002434 	.word	0x20002434
 8002ae4:	20000410 	.word	0x20000410
 8002ae8:	20000434 	.word	0x20000434
 8002aec:	20002c40 	.word	0x20002c40
 8002af0:	2000041c 	.word	0x2000041c

08002af4 <CayenneLppReset>:
  /* USER CODE END CayenneLppCursor */
}

void CayenneLppReset(void)
{
  CayenneLppCursor = 0;
 8002af4:	4b01      	ldr	r3, [pc, #4]	; (8002afc <CayenneLppReset+0x8>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CayenneLppReset */

  /* USER CODE END CayenneLppReset */
}
 8002afa:	4770      	bx	lr
 8002afc:	20002d8e 	.word	0x20002d8e

08002b00 <CayenneLppGetSize>:
{
  /* USER CODE BEGIN CayenneLppGetSize */

  /* USER CODE END CayenneLppGetSize */
  return CayenneLppCursor;
}
 8002b00:	4b01      	ldr	r3, [pc, #4]	; (8002b08 <CayenneLppGetSize+0x8>)
 8002b02:	7818      	ldrb	r0, [r3, #0]
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20002d8e 	.word	0x20002d8e

08002b0c <CayenneLppCopy>:
  /* USER CODE END CayenneLppGetBuffer */
  return CayenneLppBuffer;
}

uint8_t CayenneLppCopy(uint8_t *dst)
{
 8002b0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CayenneLppCopy_1 */

  /* USER CODE END CayenneLppCopy_1 */
  UTIL_MEM_cpy_8(dst, CayenneLppBuffer, CayenneLppCursor);
 8002b0e:	4c03      	ldr	r4, [pc, #12]	; (8002b1c <CayenneLppCopy+0x10>)
 8002b10:	7822      	ldrb	r2, [r4, #0]
 8002b12:	4903      	ldr	r1, [pc, #12]	; (8002b20 <CayenneLppCopy+0x14>)
 8002b14:	f013 f958 	bl	8015dc8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN CayenneLppCopy_2 */

  /* USER CODE END CayenneLppCopy_2 */
  return CayenneLppCursor;
}
 8002b18:	7820      	ldrb	r0, [r4, #0]
 8002b1a:	bd10      	pop	{r4, pc}
 8002b1c:	20002d8e 	.word	0x20002d8e
 8002b20:	20002c9c 	.word	0x20002c9c

08002b24 <CayenneLppAddDigitalInput>:
uint8_t CayenneLppAddDigitalInput(uint8_t channel, uint8_t value)
{
  /* USER CODE BEGIN CayenneLppAddDigitalInput_1 */

  /* USER CODE END CayenneLppAddDigitalInput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_INPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <CayenneLppAddDigitalInput+0x30>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2bef      	cmp	r3, #239	; 0xef
 8002b2a:	d811      	bhi.n	8002b50 <CayenneLppAddDigitalInput+0x2c>
{
 8002b2c:	b430      	push	{r4, r5}
  {
    return 0;
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	4d08      	ldr	r5, [pc, #32]	; (8002b54 <CayenneLppAddDigitalInput+0x30>)
 8002b34:	702a      	strb	r2, [r5, #0]
 8002b36:	4c08      	ldr	r4, [pc, #32]	; (8002b58 <CayenneLppAddDigitalInput+0x34>)
 8002b38:	54e0      	strb	r0, [r4, r3]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_INPUT;
 8002b3a:	1c53      	adds	r3, r2, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	702b      	strb	r3, [r5, #0]
 8002b40:	2000      	movs	r0, #0
 8002b42:	54a0      	strb	r0, [r4, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 8002b44:	1c58      	adds	r0, r3, #1
 8002b46:	b2c0      	uxtb	r0, r0
 8002b48:	7028      	strb	r0, [r5, #0]
 8002b4a:	54e1      	strb	r1, [r4, r3]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_2 */

  /* USER CODE END CayenneLppAddDigitalInput_2 */
  return CayenneLppCursor;
}
 8002b4c:	bc30      	pop	{r4, r5}
 8002b4e:	4770      	bx	lr
    return 0;
 8002b50:	2000      	movs	r0, #0
}
 8002b52:	4770      	bx	lr
 8002b54:	20002d8e 	.word	0x20002d8e
 8002b58:	20002c9c 	.word	0x20002c9c

08002b5c <CayenneLppAddDigitalOutput>:
uint8_t CayenneLppAddDigitalOutput(uint8_t channel, uint8_t value)
{
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_1 */

  /* USER CODE END CayenneLppAddDigitalOutput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_OUTPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <CayenneLppAddDigitalOutput+0x30>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2bef      	cmp	r3, #239	; 0xef
 8002b62:	d811      	bhi.n	8002b88 <CayenneLppAddDigitalOutput+0x2c>
{
 8002b64:	b430      	push	{r4, r5}
  {
    return 0;
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	4d08      	ldr	r5, [pc, #32]	; (8002b8c <CayenneLppAddDigitalOutput+0x30>)
 8002b6c:	702a      	strb	r2, [r5, #0]
 8002b6e:	4c08      	ldr	r4, [pc, #32]	; (8002b90 <CayenneLppAddDigitalOutput+0x34>)
 8002b70:	54e0      	strb	r0, [r4, r3]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_OUTPUT;
 8002b72:	1c53      	adds	r3, r2, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	702b      	strb	r3, [r5, #0]
 8002b78:	2001      	movs	r0, #1
 8002b7a:	54a0      	strb	r0, [r4, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 8002b7c:	1818      	adds	r0, r3, r0
 8002b7e:	b2c0      	uxtb	r0, r0
 8002b80:	7028      	strb	r0, [r5, #0]
 8002b82:	54e1      	strb	r1, [r4, r3]
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_2 */

  /* USER CODE END CayenneLppAddDigitalOutput_2 */
  return CayenneLppCursor;
}
 8002b84:	bc30      	pop	{r4, r5}
 8002b86:	4770      	bx	lr
    return 0;
 8002b88:	2000      	movs	r0, #0
}
 8002b8a:	4770      	bx	lr
 8002b8c:	20002d8e 	.word	0x20002d8e
 8002b90:	20002c9c 	.word	0x20002c9c

08002b94 <CayenneLppAddTemperature>:
  /* USER CODE END CayenneLppAddPresence_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddTemperature(uint8_t channel, float celsius)
{
 8002b94:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN CayenneLppAddTemperature_1 */

  /* USER CODE END CayenneLppAddTemperature_1 */
  if ((CayenneLppCursor + LPP_TEMPERATURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <CayenneLppAddTemperature+0x4c>)
 8002b98:	781d      	ldrb	r5, [r3, #0]
 8002b9a:	2dee      	cmp	r5, #238	; 0xee
 8002b9c:	d81e      	bhi.n	8002bdc <CayenneLppAddTemperature+0x48>
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	4608      	mov	r0, r1
  {
    return 0;
  }
  int16_t val = (int16_t)(celsius * 10);
 8002ba2:	4910      	ldr	r1, [pc, #64]	; (8002be4 <CayenneLppAddTemperature+0x50>)
 8002ba4:	f7fe f8e2 	bl	8000d6c <__aeabi_fmul>
 8002ba8:	f7fe fabc 	bl	8001124 <__aeabi_f2iz>
 8002bac:	4684      	mov	ip, r0
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 8002bae:	1c6a      	adds	r2, r5, #1
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	4e0b      	ldr	r6, [pc, #44]	; (8002be0 <CayenneLppAddTemperature+0x4c>)
 8002bb4:	7032      	strb	r2, [r6, #0]
 8002bb6:	490c      	ldr	r1, [pc, #48]	; (8002be8 <CayenneLppAddTemperature+0x54>)
 8002bb8:	554c      	strb	r4, [r1, r5]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_TEMPERATURE;
 8002bba:	1c53      	adds	r3, r2, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	7033      	strb	r3, [r6, #0]
 8002bc0:	2067      	movs	r0, #103	; 0x67
 8002bc2:	5488      	strb	r0, [r1, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	7032      	strb	r2, [r6, #0]
 8002bca:	f34c 2007 	sbfx	r0, ip, #8, #8
 8002bce:	54c8      	strb	r0, [r1, r3]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 8002bd0:	1c53      	adds	r3, r2, #1
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	7030      	strb	r0, [r6, #0]
 8002bd6:	f801 c002 	strb.w	ip, [r1, r2]
  /* USER CODE BEGIN CayenneLppAddTemperature_2 */

  /* USER CODE END CayenneLppAddTemperature_2 */
  return CayenneLppCursor;
}
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8002bdc:	2000      	movs	r0, #0
 8002bde:	e7fc      	b.n	8002bda <CayenneLppAddTemperature+0x46>
 8002be0:	20002d8e 	.word	0x20002d8e
 8002be4:	41200000 	.word	0x41200000
 8002be8:	20002c9c 	.word	0x20002c9c

08002bec <CayenneLppAddRelativeHumidity>:

uint8_t CayenneLppAddRelativeHumidity(uint8_t channel, float rh)
{
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_1 */

  /* USER CODE END CayenneLppAddRelativeHumidity_1 */
  if ((CayenneLppCursor + LPP_RELATIVE_HUMIDITY_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <CayenneLppAddRelativeHumidity+0x3c>)
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	2aef      	cmp	r2, #239	; 0xef
 8002bf4:	d815      	bhi.n	8002c22 <CayenneLppAddRelativeHumidity+0x36>
  {
    return 0;
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 8002bf6:	1c53      	adds	r3, r2, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	4f0b      	ldr	r7, [pc, #44]	; (8002c28 <CayenneLppAddRelativeHumidity+0x3c>)
 8002bfc:	703b      	strb	r3, [r7, #0]
 8002bfe:	4e0b      	ldr	r6, [pc, #44]	; (8002c2c <CayenneLppAddRelativeHumidity+0x40>)
 8002c00:	54b0      	strb	r0, [r6, r2]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_RELATIVE_HUMIDITY;
 8002c02:	1c5d      	adds	r5, r3, #1
 8002c04:	b2ed      	uxtb	r5, r5
 8002c06:	703d      	strb	r5, [r7, #0]
 8002c08:	2268      	movs	r2, #104	; 0x68
 8002c0a:	54f2      	strb	r2, [r6, r3]
  CayenneLppBuffer[CayenneLppCursor++] = (uint8_t)(rh * 2);
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	f7fd ffa5 	bl	8000b5c <__addsf3>
 8002c12:	1c6c      	adds	r4, r5, #1
 8002c14:	b2e4      	uxtb	r4, r4
 8002c16:	703c      	strb	r4, [r7, #0]
 8002c18:	f7fe faaa 	bl	8001170 <__aeabi_f2uiz>
 8002c1c:	5570      	strb	r0, [r6, r5]
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_2 */

  /* USER CODE END CayenneLppAddRelativeHumidity_2 */
  return CayenneLppCursor;
}
 8002c1e:	4620      	mov	r0, r4
 8002c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 8002c22:	2400      	movs	r4, #0
 8002c24:	e7fb      	b.n	8002c1e <CayenneLppAddRelativeHumidity+0x32>
 8002c26:	bf00      	nop
 8002c28:	20002d8e 	.word	0x20002d8e
 8002c2c:	20002c9c 	.word	0x20002c9c

08002c30 <CayenneLppAddBarometricPressure>:
  /* USER CODE END CayenneLppAddAccelerometer_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddBarometricPressure(uint8_t channel, float hpa)
{
 8002c30:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_1 */

  /* USER CODE END CayenneLppAddBarometricPressure_1 */
  if ((CayenneLppCursor + LPP_BAROMETRIC_PRESSURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <CayenneLppAddBarometricPressure+0x4c>)
 8002c34:	781d      	ldrb	r5, [r3, #0]
 8002c36:	2dee      	cmp	r5, #238	; 0xee
 8002c38:	d81e      	bhi.n	8002c78 <CayenneLppAddBarometricPressure+0x48>
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	4608      	mov	r0, r1
  {
    return 0;
  }
  int16_t val = (int16_t)(hpa * 10);
 8002c3e:	4910      	ldr	r1, [pc, #64]	; (8002c80 <CayenneLppAddBarometricPressure+0x50>)
 8002c40:	f7fe f894 	bl	8000d6c <__aeabi_fmul>
 8002c44:	f7fe fa6e 	bl	8001124 <__aeabi_f2iz>
 8002c48:	4684      	mov	ip, r0

  CayenneLppBuffer[CayenneLppCursor++] = channel;
 8002c4a:	1c6a      	adds	r2, r5, #1
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	4e0b      	ldr	r6, [pc, #44]	; (8002c7c <CayenneLppAddBarometricPressure+0x4c>)
 8002c50:	7032      	strb	r2, [r6, #0]
 8002c52:	490c      	ldr	r1, [pc, #48]	; (8002c84 <CayenneLppAddBarometricPressure+0x54>)
 8002c54:	554c      	strb	r4, [r1, r5]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_BAROMETRIC_PRESSURE;
 8002c56:	1c53      	adds	r3, r2, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	7033      	strb	r3, [r6, #0]
 8002c5c:	2073      	movs	r0, #115	; 0x73
 8002c5e:	5488      	strb	r0, [r1, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	7032      	strb	r2, [r6, #0]
 8002c66:	f34c 2007 	sbfx	r0, ip, #8, #8
 8002c6a:	54c8      	strb	r0, [r1, r3]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 8002c6c:	1c53      	adds	r3, r2, #1
 8002c6e:	b2d8      	uxtb	r0, r3
 8002c70:	7030      	strb	r0, [r6, #0]
 8002c72:	f801 c002 	strb.w	ip, [r1, r2]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_2 */

  /* USER CODE END CayenneLppAddBarometricPressure_2 */
  return CayenneLppCursor;
}
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e7fc      	b.n	8002c76 <CayenneLppAddBarometricPressure+0x46>
 8002c7c:	20002d8e 	.word	0x20002d8e
 8002c80:	41200000 	.word	0x41200000
 8002c84:	20002c9c 	.word	0x20002c9c

08002c88 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002c88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002c8a:	f7ff f90b 	bl	8001ea4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002c8e:	f000 fb75 	bl	800337c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002c92:	bd08      	pop	{r3, pc}

08002c94 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002c94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002c96:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9a:	f013 f8dd 	bl	8015e58 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002c9e:	bd08      	pop	{r3, pc}

08002ca0 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8002ca0:	4770      	bx	lr
	...

08002ca4 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002ca4:	4b01      	ldr	r3, [pc, #4]	; (8002cac <OnTxFrameCtrlChanged+0x8>)
 8002ca6:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000058 	.word	0x20000058

08002cb0 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002cb0:	4b01      	ldr	r3, [pc, #4]	; (8002cb8 <OnPingSlotPeriodicityChanged+0x8>)
 8002cb2:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000058 	.word	0x20000058

08002cbc <OnBeaconStatusChange>:
  if (params != NULL)
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d03f      	beq.n	8002d40 <OnBeaconStatusChange+0x84>
{
 8002cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc4:	b08c      	sub	sp, #48	; 0x30
 8002cc6:	4603      	mov	r3, r0
    switch (params->State)
 8002cc8:	7842      	ldrb	r2, [r0, #1]
 8002cca:	2a02      	cmp	r2, #2
 8002ccc:	d00a      	beq.n	8002ce4 <OnBeaconStatusChange+0x28>
 8002cce:	2a03      	cmp	r2, #3
 8002cd0:	d02f      	beq.n	8002d32 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <OnBeaconStatusChange+0x88>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	2002      	movs	r0, #2
 8002cda:	f012 ff5f 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 8002cde:	b00c      	add	sp, #48	; 0x30
 8002ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002ce4:	7c02      	ldrb	r2, [r0, #16]
 8002ce6:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002cea:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002cee:	7d9c      	ldrb	r4, [r3, #22]
 8002cf0:	7ddd      	ldrb	r5, [r3, #23]
 8002cf2:	7e1e      	ldrb	r6, [r3, #24]
 8002cf4:	7e5f      	ldrb	r7, [r3, #25]
 8002cf6:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8002cfa:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002cfe:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002d02:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002d06:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002d0a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002d0e:	9708      	str	r7, [sp, #32]
 8002d10:	9607      	str	r6, [sp, #28]
 8002d12:	9506      	str	r5, [sp, #24]
 8002d14:	9405      	str	r4, [sp, #20]
 8002d16:	685c      	ldr	r4, [r3, #4]
 8002d18:	9404      	str	r4, [sp, #16]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	9303      	str	r3, [sp, #12]
 8002d1e:	9002      	str	r0, [sp, #8]
 8002d20:	9101      	str	r1, [sp, #4]
 8002d22:	9200      	str	r2, [sp, #0]
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <OnBeaconStatusChange+0x8c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	4611      	mov	r1, r2
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	f012 ff36 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002d30:	e7d5      	b.n	8002cde <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <OnBeaconStatusChange+0x90>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	4611      	mov	r1, r2
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f012 ff2f 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 8002d3e:	e7ce      	b.n	8002cde <OnBeaconStatusChange+0x22>
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	08017aa8 	.word	0x08017aa8
 8002d48:	08017ac0 	.word	0x08017ac0
 8002d4c:	08017b34 	.word	0x08017b34

08002d50 <OnClassChange>:
{
 8002d50:	b500      	push	{lr}
 8002d52:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <OnClassChange+0x1c>)
 8002d56:	5c1b      	ldrb	r3, [r3, r0]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <OnClassChange+0x20>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4611      	mov	r1, r2
 8002d60:	2002      	movs	r0, #2
 8002d62:	f012 ff1b 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 8002d66:	b003      	add	sp, #12
 8002d68:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d6c:	08017b70 	.word	0x08017b70
 8002d70:	08017b54 	.word	0x08017b54

08002d74 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8002d74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8002d76:	2801      	cmp	r0, #1
 8002d78:	d006      	beq.n	8002d88 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8002d7a:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <OnNvmDataChange+0x24>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4611      	mov	r1, r2
 8002d80:	2002      	movs	r0, #2
 8002d82:	f012 ff0b 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8002d86:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <OnNvmDataChange+0x28>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	2002      	movs	r0, #2
 8002d90:	f012 ff04 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
 8002d94:	e7f7      	b.n	8002d86 <OnNvmDataChange+0x12>
 8002d96:	bf00      	nop
 8002d98:	08017b88 	.word	0x08017b88
 8002d9c:	08017b74 	.word	0x08017b74

08002da0 <Req_sensor_value>:
{
 8002da0:	b508      	push	{r3, lr}
	UTIL_SEQ_SetTask((1 << CFG_SEQ_TASK_ReqSensor), CFG_SEQ_Prio_0);
 8002da2:	2100      	movs	r1, #0
 8002da4:	2010      	movs	r0, #16
 8002da6:	f013 f823 	bl	8015df0 <UTIL_SEQ_SetTask>
	if(acc_mems.req_cmd)
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <Req_sensor_value+0x1c>)
 8002dac:	f893 3866 	ldrb.w	r3, [r3, #2150]	; 0x866
 8002db0:	b903      	cbnz	r3, 8002db4 <Req_sensor_value+0x14>
}
 8002db2:	bd08      	pop	{r3, pc}
		UTIL_TIMER_Start(&Req_sensor_Timer);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <Req_sensor_value+0x20>)
 8002db6:	f013 fa9d 	bl	80162f4 <UTIL_TIMER_Start>
}
 8002dba:	e7fa      	b.n	8002db2 <Req_sensor_value+0x12>
 8002dbc:	20002434 	.word	0x20002434
 8002dc0:	20002e9c 	.word	0x20002e9c

08002dc4 <OnTxTimerEvent>:
{
 8002dc4:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2002      	movs	r0, #2
 8002dca:	f013 f811 	bl	8015df0 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8002dce:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <OnTxTimerEvent+0x14>)
 8002dd0:	f013 fa90 	bl	80162f4 <UTIL_TIMER_Start>
}
 8002dd4:	bd08      	pop	{r3, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20002efc 	.word	0x20002efc

08002ddc <OnMacProcessNotify>:
{
 8002ddc:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002dde:	2100      	movs	r1, #0
 8002de0:	2001      	movs	r0, #1
 8002de2:	f013 f805 	bl	8015df0 <UTIL_SEQ_SetTask>
}
 8002de6:	bd08      	pop	{r3, pc}

08002de8 <OnSystemReset>:
{
 8002de8:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002dea:	f009 f81f 	bl	800be2c <LmHandlerHalt>
 8002dee:	b100      	cbz	r0, 8002df2 <OnSystemReset+0xa>
}
 8002df0:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002df2:	f008 fcd9 	bl	800b7a8 <LmHandlerJoinStatus>
 8002df6:	2801      	cmp	r0, #1
 8002df8:	d1fa      	bne.n	8002df0 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dfa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002dfe:	4905      	ldr	r1, [pc, #20]	; (8002e14 <OnSystemReset+0x2c>)
 8002e00:	68ca      	ldr	r2, [r1, #12]
 8002e02:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <OnSystemReset+0x30>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60cb      	str	r3, [r1, #12]
 8002e0c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002e10:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002e12:	e7fd      	b.n	8002e10 <OnSystemReset+0x28>
 8002e14:	e000ed00 	.word	0xe000ed00
 8002e18:	05fa0004 	.word	0x05fa0004

08002e1c <OnTxPeriodicityChanged>:
{
 8002e1c:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <OnTxPeriodicityChanged+0x28>)
 8002e20:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002e22:	b910      	cbnz	r0, 8002e2a <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002e24:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e28:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002e2a:	4c07      	ldr	r4, [pc, #28]	; (8002e48 <OnTxPeriodicityChanged+0x2c>)
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f013 fa07 	bl	8016240 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <OnTxPeriodicityChanged+0x28>)
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	4620      	mov	r0, r4
 8002e38:	f013 faa2 	bl	8016380 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f013 fa59 	bl	80162f4 <UTIL_TIMER_Start>
}
 8002e42:	bd10      	pop	{r4, pc}
 8002e44:	20000070 	.word	0x20000070
 8002e48:	20002efc 	.word	0x20002efc

08002e4c <OnTxData>:
  if ((params != NULL))
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d042      	beq.n	8002ed6 <OnTxData+0x8a>
{
 8002e50:	b510      	push	{r4, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8002e56:	7803      	ldrb	r3, [r0, #0]
 8002e58:	b90b      	cbnz	r3, 8002e5e <OnTxData+0x12>
}
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e64:	481c      	ldr	r0, [pc, #112]	; (8002ed8 <OnTxData+0x8c>)
 8002e66:	f004 f855 	bl	8006f14 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8002e6a:	481c      	ldr	r0, [pc, #112]	; (8002edc <OnTxData+0x90>)
 8002e6c:	f013 fa42 	bl	80162f4 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <OnTxData+0x94>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	4611      	mov	r1, r2
 8002e76:	2002      	movs	r0, #2
 8002e78:	f012 fe90 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8002e7c:	7c23      	ldrb	r3, [r4, #16]
 8002e7e:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8002e82:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8002e86:	9103      	str	r1, [sp, #12]
 8002e88:	9202      	str	r2, [sp, #8]
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	68e3      	ldr	r3, [r4, #12]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <OnTxData+0x98>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	4611      	mov	r1, r2
 8002e96:	2003      	movs	r0, #3
 8002e98:	f012 fe80 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <OnTxData+0x9c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	2003      	movs	r0, #3
 8002ea4:	f012 fe7a 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002ea8:	7a23      	ldrb	r3, [r4, #8]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d10c      	bne.n	8002ec8 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8002eae:	7a63      	ldrb	r3, [r4, #9]
 8002eb0:	b143      	cbz	r3, 8002ec4 <OnTxData+0x78>
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <OnTxData+0xa0>)
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <OnTxData+0xa4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4611      	mov	r1, r2
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	f012 fe6d 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
 8002ec2:	e7ca      	b.n	8002e5a <OnTxData+0xe>
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <OnTxData+0xa8>)
 8002ec6:	e7f5      	b.n	8002eb4 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <OnTxData+0xac>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4611      	mov	r1, r2
 8002ece:	2003      	movs	r0, #3
 8002ed0:	f012 fe64 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 8002ed4:	e7c1      	b.n	8002e5a <OnTxData+0xe>
 8002ed6:	4770      	bx	lr
 8002ed8:	48000400 	.word	0x48000400
 8002edc:	20002ee4 	.word	0x20002ee4
 8002ee0:	08017ba8 	.word	0x08017ba8
 8002ee4:	08017bdc 	.word	0x08017bdc
 8002ee8:	08017c10 	.word	0x08017c10
 8002eec:	08017b9c 	.word	0x08017b9c
 8002ef0:	08017c20 	.word	0x08017c20
 8002ef4:	08017ba0 	.word	0x08017ba0
 8002ef8:	08017c34 	.word	0x08017c34

08002efc <OnJoinRequest>:
  if (joinParams != NULL)
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d039      	beq.n	8002f74 <OnJoinRequest+0x78>
{
 8002f00:	b510      	push	{r4, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002f06:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8002f0a:	b9fb      	cbnz	r3, 8002f4c <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002f0c:	481a      	ldr	r0, [pc, #104]	; (8002f78 <OnJoinRequest+0x7c>)
 8002f0e:	f013 f997 	bl	8016240 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002f12:	2200      	movs	r2, #0
 8002f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f18:	4818      	ldr	r0, [pc, #96]	; (8002f7c <OnJoinRequest+0x80>)
 8002f1a:	f003 fffb 	bl	8006f14 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <OnJoinRequest+0x84>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	4611      	mov	r1, r2
 8002f24:	2002      	movs	r0, #2
 8002f26:	f012 fe39 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002f2a:	79e3      	ldrb	r3, [r4, #7]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d006      	beq.n	8002f3e <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <OnJoinRequest+0x88>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	4611      	mov	r1, r2
 8002f36:	2002      	movs	r0, #2
 8002f38:	f012 fe30 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
 8002f3c:	e00c      	b.n	8002f58 <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <OnJoinRequest+0x8c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	4611      	mov	r1, r2
 8002f44:	2002      	movs	r0, #2
 8002f46:	f012 fe29 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
 8002f4a:	e005      	b.n	8002f58 <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <OnJoinRequest+0x90>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4611      	mov	r1, r2
 8002f52:	2002      	movs	r0, #2
 8002f54:	f012 fe22 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 8002f58:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002f5c:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002f60:	9201      	str	r2, [sp, #4]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <OnJoinRequest+0x94>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	4611      	mov	r1, r2
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	f012 fe16 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 8002f70:	b002      	add	sp, #8
 8002f72:	bd10      	pop	{r4, pc}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20002e84 	.word	0x20002e84
 8002f7c:	48000400 	.word	0x48000400
 8002f80:	08017c44 	.word	0x08017c44
 8002f84:	08017c7c 	.word	0x08017c7c
 8002f88:	08017c5c 	.word	0x08017c5c
 8002f8c:	08017c9c 	.word	0x08017c9c
 8002f90:	08017cb8 	.word	0x08017cb8

08002f94 <OnStopJoinTimerEvent>:
{
 8002f94:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <OnStopJoinTimerEvent+0x3c>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d013      	beq.n	8002fc6 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002f9e:	4c0d      	ldr	r4, [pc, #52]	; (8002fd4 <OnStopJoinTimerEvent+0x40>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f003 ffb4 	bl	8006f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002fac:	2200      	movs	r2, #0
 8002fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f003 ffae 	bl	8006f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f003 ffa8 	bl	8006f14 <HAL_GPIO_WritePin>
}
 8002fc4:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	2008      	movs	r0, #8
 8002fca:	f012 ff11 	bl	8015df0 <UTIL_SEQ_SetTask>
 8002fce:	e7e6      	b.n	8002f9e <OnStopJoinTimerEvent+0xa>
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	48000400 	.word	0x48000400

08002fd8 <OnRxTimerLedEvent>:
{
 8002fd8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fe0:	4801      	ldr	r0, [pc, #4]	; (8002fe8 <OnRxTimerLedEvent+0x10>)
 8002fe2:	f003 ff97 	bl	8006f14 <HAL_GPIO_WritePin>
}
 8002fe6:	bd08      	pop	{r3, pc}
 8002fe8:	48000400 	.word	0x48000400

08002fec <OnTxTimerLedEvent>:
{
 8002fec:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <OnTxTimerLedEvent+0x10>)
 8002ff6:	f003 ff8d 	bl	8006f14 <HAL_GPIO_WritePin>
}
 8002ffa:	bd08      	pop	{r3, pc}
 8002ffc:	48000400 	.word	0x48000400

08003000 <OnRxData>:
  if (params != NULL)
 8003000:	2900      	cmp	r1, #0
 8003002:	d06e      	beq.n	80030e2 <OnRxData+0xe2>
{
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	4604      	mov	r4, r0
 800300a:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800300c:	2201      	movs	r2, #1
 800300e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003012:	4834      	ldr	r0, [pc, #208]	; (80030e4 <OnRxData+0xe4>)
 8003014:	f003 ff7e 	bl	8006f14 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8003018:	4833      	ldr	r0, [pc, #204]	; (80030e8 <OnRxData+0xe8>)
 800301a:	f013 f96b 	bl	80162f4 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800301e:	782e      	ldrb	r6, [r5, #0]
 8003020:	2e00      	cmp	r6, #0
 8003022:	d042      	beq.n	80030aa <OnRxData+0xaa>
      if (appData != NULL)
 8003024:	2c00      	cmp	r4, #0
 8003026:	d03f      	beq.n	80030a8 <OnRxData+0xa8>
        RxPort = appData->Port;
 8003028:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800302a:	6863      	ldr	r3, [r4, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d03c      	beq.n	80030aa <OnRxData+0xaa>
          switch (appData->Port)
 8003030:	2e02      	cmp	r6, #2
 8003032:	d016      	beq.n	8003062 <OnRxData+0x62>
 8003034:	2e03      	cmp	r6, #3
 8003036:	d138      	bne.n	80030aa <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8003038:	7862      	ldrb	r2, [r4, #1]
 800303a:	2a01      	cmp	r2, #1
 800303c:	d135      	bne.n	80030aa <OnRxData+0xaa>
                switch (appData->Buffer[0])
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d006      	beq.n	8003052 <OnRxData+0x52>
 8003044:	2b02      	cmp	r3, #2
 8003046:	d008      	beq.n	800305a <OnRxData+0x5a>
 8003048:	bb7b      	cbnz	r3, 80030aa <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800304a:	2000      	movs	r0, #0
 800304c:	f008 fc7e 	bl	800b94c <LmHandlerRequestClass>
                    break;
 8003050:	e02b      	b.n	80030aa <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8003052:	2001      	movs	r0, #1
 8003054:	f008 fc7a 	bl	800b94c <LmHandlerRequestClass>
                    break;
 8003058:	e027      	b.n	80030aa <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800305a:	2002      	movs	r0, #2
 800305c:	f008 fc76 	bl	800b94c <LmHandlerRequestClass>
                    break;
 8003060:	e023      	b.n	80030aa <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8003062:	7862      	ldrb	r2, [r4, #1]
 8003064:	2a01      	cmp	r2, #1
 8003066:	d120      	bne.n	80030aa <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <OnRxData+0xec>)
 8003070:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8003072:	b963      	cbnz	r3, 800308e <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <OnRxData+0xf0>)
 8003076:	2200      	movs	r2, #0
 8003078:	4611      	mov	r1, r2
 800307a:	2003      	movs	r0, #3
 800307c:	f012 fd8e 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8003080:	2200      	movs	r2, #0
 8003082:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003086:	4817      	ldr	r0, [pc, #92]	; (80030e4 <OnRxData+0xe4>)
 8003088:	f003 ff44 	bl	8006f14 <HAL_GPIO_WritePin>
 800308c:	e00d      	b.n	80030aa <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <OnRxData+0xf4>)
 8003090:	2200      	movs	r2, #0
 8003092:	4611      	mov	r1, r2
 8003094:	2003      	movs	r0, #3
 8003096:	f012 fd81 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 800309a:	2201      	movs	r2, #1
 800309c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030a0:	4810      	ldr	r0, [pc, #64]	; (80030e4 <OnRxData+0xe4>)
 80030a2:	f003 ff37 	bl	8006f14 <HAL_GPIO_WritePin>
 80030a6:	e000      	b.n	80030aa <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80030a8:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80030aa:	7c2b      	ldrb	r3, [r5, #16]
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d901      	bls.n	80030b4 <OnRxData+0xb4>
}
 80030b0:	b006      	add	sp, #24
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80030b4:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80030b8:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80030bc:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80030c0:	9005      	str	r0, [sp, #20]
 80030c2:	9104      	str	r1, [sp, #16]
 80030c4:	490c      	ldr	r1, [pc, #48]	; (80030f8 <OnRxData+0xf8>)
 80030c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030ca:	9303      	str	r3, [sp, #12]
 80030cc:	9202      	str	r2, [sp, #8]
 80030ce:	9601      	str	r6, [sp, #4]
 80030d0:	68eb      	ldr	r3, [r5, #12]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <OnRxData+0xfc>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	4611      	mov	r1, r2
 80030da:	2003      	movs	r0, #3
 80030dc:	f012 fd5e 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 80030e0:	e7e6      	b.n	80030b0 <OnRxData+0xb0>
 80030e2:	4770      	bx	lr
 80030e4:	48000400 	.word	0x48000400
 80030e8:	20002eb4 	.word	0x20002eb4
 80030ec:	20002e82 	.word	0x20002e82
 80030f0:	08017ce4 	.word	0x08017ce4
 80030f4:	08017cf0 	.word	0x08017cf0
 80030f8:	08017ee4 	.word	0x08017ee4
 80030fc:	08017cfc 	.word	0x08017cfc

08003100 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	4604      	mov	r4, r0
 8003104:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8003106:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800310a:	4805      	ldr	r0, [pc, #20]	; (8003120 <OnStoreContextRequest+0x20>)
 800310c:	f7fe fc30 	bl	8001970 <FLASH_IF_Erase>
 8003110:	b100      	cbz	r0, 8003114 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8003112:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8003114:	462a      	mov	r2, r5
 8003116:	4621      	mov	r1, r4
 8003118:	4801      	ldr	r0, [pc, #4]	; (8003120 <OnStoreContextRequest+0x20>)
 800311a:	f7fe fbf1 	bl	8001900 <FLASH_IF_Write>
}
 800311e:	e7f8      	b.n	8003112 <OnStoreContextRequest+0x12>
 8003120:	0803f000 	.word	0x0803f000

08003124 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8003124:	b508      	push	{r3, lr}
 8003126:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8003128:	4901      	ldr	r1, [pc, #4]	; (8003130 <OnRestoreContextRequest+0xc>)
 800312a:	f7fe fc05 	bl	8001938 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800312e:	bd08      	pop	{r3, pc}
 8003130:	0803f000 	.word	0x0803f000

08003134 <StopJoin>:
{
 8003134:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8003136:	4c1e      	ldr	r4, [pc, #120]	; (80031b0 <StopJoin+0x7c>)
 8003138:	2201      	movs	r2, #1
 800313a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800313e:	4620      	mov	r0, r4
 8003140:	f003 fee8 	bl	8006f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8003144:	2201      	movs	r2, #1
 8003146:	f44f 7100 	mov.w	r1, #512	; 0x200
 800314a:	4620      	mov	r0, r4
 800314c:	f003 fee2 	bl	8006f14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8003150:	2201      	movs	r2, #1
 8003152:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003156:	4620      	mov	r0, r4
 8003158:	f003 fedc 	bl	8006f14 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 800315c:	4815      	ldr	r0, [pc, #84]	; (80031b4 <StopJoin+0x80>)
 800315e:	f013 f86f 	bl	8016240 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8003162:	f008 fe5b 	bl	800be1c <LmHandlerStop>
 8003166:	b148      	cbz	r0, 800317c <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <StopJoin+0x84>)
 800316a:	2200      	movs	r2, #0
 800316c:	4611      	mov	r1, r2
 800316e:	2002      	movs	r0, #2
 8003170:	f012 fd14 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8003174:	4811      	ldr	r0, [pc, #68]	; (80031bc <StopJoin+0x88>)
 8003176:	f013 f8bd 	bl	80162f4 <UTIL_TIMER_Start>
}
 800317a:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <StopJoin+0x8c>)
 800317e:	2200      	movs	r2, #0
 8003180:	4611      	mov	r1, r2
 8003182:	2002      	movs	r0, #2
 8003184:	f012 fd0a 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8003188:	4c0e      	ldr	r4, [pc, #56]	; (80031c4 <StopJoin+0x90>)
 800318a:	2501      	movs	r5, #1
 800318c:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800318e:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <StopJoin+0x94>)
 8003190:	2200      	movs	r2, #0
 8003192:	4611      	mov	r1, r2
 8003194:	2002      	movs	r0, #2
 8003196:	f012 fd01 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 800319a:	480c      	ldr	r0, [pc, #48]	; (80031cc <StopJoin+0x98>)
 800319c:	f008 fcb6 	bl	800bb0c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80031a0:	4629      	mov	r1, r5
 80031a2:	7820      	ldrb	r0, [r4, #0]
 80031a4:	f008 fa6e 	bl	800b684 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <StopJoin+0x80>)
 80031aa:	f013 f8a3 	bl	80162f4 <UTIL_TIMER_Start>
 80031ae:	e7e1      	b.n	8003174 <StopJoin+0x40>
 80031b0:	48000400 	.word	0x48000400
 80031b4:	20002efc 	.word	0x20002efc
 80031b8:	08017d44 	.word	0x08017d44
 80031bc:	20002ecc 	.word	0x20002ecc
 80031c0:	08017d64 	.word	0x08017d64
 80031c4:	20000000 	.word	0x20000000
 80031c8:	08017d78 	.word	0x08017d78
 80031cc:	20000058 	.word	0x20000058

080031d0 <StoreContext>:
{
 80031d0:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 80031d2:	f008 feb5 	bl	800bf40 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 80031d6:	f110 0f08 	cmn.w	r0, #8
 80031da:	d003      	beq.n	80031e4 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 80031dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031e0:	d007      	beq.n	80031f2 <StoreContext+0x22>
}
 80031e2:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <StoreContext+0x30>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	4611      	mov	r1, r2
 80031ea:	2002      	movs	r0, #2
 80031ec:	f012 fcd6 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
 80031f0:	e7f7      	b.n	80031e2 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <StoreContext+0x34>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	4611      	mov	r1, r2
 80031f8:	2002      	movs	r0, #2
 80031fa:	f012 fccf 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 80031fe:	e7f0      	b.n	80031e2 <StoreContext+0x12>
 8003200:	08017d98 	.word	0x08017d98
 8003204:	08017db0 	.word	0x08017db0

08003208 <SendTxData>:
{
 8003208:	b530      	push	{r4, r5, lr}
 800320a:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 800320c:	f7fe fe7a 	bl	8001f04 <GetBatteryLevel>
 8003210:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 8003212:	f008 fadb 	bl	800b7cc <LmHandlerIsBusy>
 8003216:	b188      	cbz	r0, 800323c <SendTxData+0x34>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8003218:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 800321a:	4c47      	ldr	r4, [pc, #284]	; (8003338 <SendTxData+0x130>)
 800321c:	4620      	mov	r0, r4
 800321e:	f013 f80f 	bl	8016240 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8003222:	4b46      	ldr	r3, [pc, #280]	; (800333c <SendTxData+0x134>)
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	42a9      	cmp	r1, r5
 8003228:	bf38      	it	cc
 800322a:	4629      	movcc	r1, r5
 800322c:	4620      	mov	r0, r4
 800322e:	f013 f8a7 	bl	8016380 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8003232:	4620      	mov	r0, r4
 8003234:	f013 f85e 	bl	80162f4 <UTIL_TIMER_Start>
}
 8003238:	b009      	add	sp, #36	; 0x24
 800323a:	bd30      	pop	{r4, r5, pc}
    EnvSensors_Read(&sensor_data);
 800323c:	a802      	add	r0, sp, #8
 800323e:	f7fe ff47 	bl	80020d0 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8003242:	9400      	str	r4, [sp, #0]
 8003244:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <SendTxData+0x138>)
 8003246:	2201      	movs	r2, #1
 8003248:	2100      	movs	r1, #0
 800324a:	2002      	movs	r0, #2
 800324c:	f012 fca6 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8003250:	9803      	ldr	r0, [sp, #12]
 8003252:	f7fd ff67 	bl	8001124 <__aeabi_f2iz>
 8003256:	b200      	sxth	r0, r0
 8003258:	9000      	str	r0, [sp, #0]
 800325a:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <SendTxData+0x13c>)
 800325c:	2201      	movs	r2, #1
 800325e:	2100      	movs	r1, #0
 8003260:	2002      	movs	r0, #2
 8003262:	f012 fc9b 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 8003266:	2402      	movs	r4, #2
 8003268:	4b37      	ldr	r3, [pc, #220]	; (8003348 <SendTxData+0x140>)
 800326a:	701c      	strb	r4, [r3, #0]
    CayenneLppReset();
 800326c:	f7ff fc42 	bl	8002af4 <CayenneLppReset>
    CayenneLppAddBarometricPressure(channel++, sensor_data.pressure);
 8003270:	9902      	ldr	r1, [sp, #8]
 8003272:	2000      	movs	r0, #0
 8003274:	f7ff fcdc 	bl	8002c30 <CayenneLppAddBarometricPressure>
    CayenneLppAddTemperature(channel++, sensor_data.temperature);
 8003278:	9903      	ldr	r1, [sp, #12]
 800327a:	2001      	movs	r0, #1
 800327c:	f7ff fc8a 	bl	8002b94 <CayenneLppAddTemperature>
    CayenneLppAddRelativeHumidity(channel++, (uint16_t)(sensor_data.humidity));
 8003280:	9804      	ldr	r0, [sp, #16]
 8003282:	f7fd ff75 	bl	8001170 <__aeabi_f2uiz>
 8003286:	b280      	uxth	r0, r0
 8003288:	f7fd fd18 	bl	8000cbc <__aeabi_ui2f>
 800328c:	4601      	mov	r1, r0
 800328e:	4620      	mov	r0, r4
 8003290:	f7ff fcac 	bl	8002bec <CayenneLppAddRelativeHumidity>
    if ((LmHandlerParams.ActiveRegion != LORAMAC_REGION_US915) && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AU915)
 8003294:	4b2d      	ldr	r3, [pc, #180]	; (800334c <SendTxData+0x144>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d002      	beq.n	80032a2 <SendTxData+0x9a>
 800329c:	2b01      	cmp	r3, #1
 800329e:	d000      	beq.n	80032a2 <SendTxData+0x9a>
        && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AS923))
 80032a0:	b9ab      	cbnz	r3, 80032ce <SendTxData+0xc6>
    CayenneLppCopy(AppData.Buffer);
 80032a2:	4c29      	ldr	r4, [pc, #164]	; (8003348 <SendTxData+0x140>)
 80032a4:	6860      	ldr	r0, [r4, #4]
 80032a6:	f7ff fc31 	bl	8002b0c <CayenneLppCopy>
    AppData.BufferSize = CayenneLppGetSize();
 80032aa:	f7ff fc29 	bl	8002b00 <CayenneLppGetSize>
 80032ae:	7060      	strb	r0, [r4, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <SendTxData+0x148>)
 80032b2:	7a5b      	ldrb	r3, [r3, #9]
 80032b4:	b9bb      	cbnz	r3, 80032e6 <SendTxData+0xde>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80032b6:	2200      	movs	r2, #0
 80032b8:	4b24      	ldr	r3, [pc, #144]	; (800334c <SendTxData+0x144>)
 80032ba:	78d9      	ldrb	r1, [r3, #3]
 80032bc:	4822      	ldr	r0, [pc, #136]	; (8003348 <SendTxData+0x140>)
 80032be:	f008 fa9b 	bl	800b7f8 <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 80032c2:	b1f0      	cbz	r0, 8003302 <SendTxData+0xfa>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 80032c4:	f110 0f06 	cmn.w	r0, #6
 80032c8:	d023      	beq.n	8003312 <SendTxData+0x10a>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80032ca:	2500      	movs	r5, #0
 80032cc:	e7a5      	b.n	800321a <SendTxData+0x12>
      CayenneLppAddDigitalInput(channel++, GetBatteryLevel());
 80032ce:	f7fe fe19 	bl	8001f04 <GetBatteryLevel>
 80032d2:	4601      	mov	r1, r0
 80032d4:	2003      	movs	r0, #3
 80032d6:	f7ff fc25 	bl	8002b24 <CayenneLppAddDigitalInput>
      CayenneLppAddDigitalOutput(channel++, AppLedStateOn);
 80032da:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <SendTxData+0x14c>)
 80032dc:	7819      	ldrb	r1, [r3, #0]
 80032de:	2004      	movs	r0, #4
 80032e0:	f7ff fc3c 	bl	8002b5c <CayenneLppAddDigitalOutput>
 80032e4:	e7dd      	b.n	80032a2 <SendTxData+0x9a>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80032e6:	f008 fa5f 	bl	800b7a8 <LmHandlerJoinStatus>
 80032ea:	2801      	cmp	r0, #1
 80032ec:	d1e3      	bne.n	80032b6 <SendTxData+0xae>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80032ee:	4818      	ldr	r0, [pc, #96]	; (8003350 <SendTxData+0x148>)
 80032f0:	f012 ffa6 	bl	8016240 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80032f4:	2200      	movs	r2, #0
 80032f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032fa:	4817      	ldr	r0, [pc, #92]	; (8003358 <SendTxData+0x150>)
 80032fc:	f003 fe0a 	bl	8006f14 <HAL_GPIO_WritePin>
 8003300:	e7d9      	b.n	80032b6 <SendTxData+0xae>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8003302:	4b16      	ldr	r3, [pc, #88]	; (800335c <SendTxData+0x154>)
 8003304:	2201      	movs	r2, #1
 8003306:	2100      	movs	r1, #0
 8003308:	4610      	mov	r0, r2
 800330a:	f012 fc47 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800330e:	2500      	movs	r5, #0
 8003310:	e783      	b.n	800321a <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8003312:	f008 fa43 	bl	800b79c <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8003316:	4605      	mov	r5, r0
 8003318:	2800      	cmp	r0, #0
 800331a:	f43f af7e 	beq.w	800321a <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <SendTxData+0x158>)
 8003320:	fba3 2300 	umull	r2, r3, r3, r0
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <SendTxData+0x15c>)
 800332a:	2201      	movs	r2, #1
 800332c:	2100      	movs	r1, #0
 800332e:	4610      	mov	r0, r2
 8003330:	f012 fc34 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
 8003334:	e771      	b.n	800321a <SendTxData+0x12>
 8003336:	bf00      	nop
 8003338:	20002efc 	.word	0x20002efc
 800333c:	20000070 	.word	0x20000070
 8003340:	08017dc8 	.word	0x08017dc8
 8003344:	08017dd4 	.word	0x08017dd4
 8003348:	20000004 	.word	0x20000004
 800334c:	20000058 	.word	0x20000058
 8003350:	20002e84 	.word	0x20002e84
 8003354:	20002e82 	.word	0x20002e82
 8003358:	48000400 	.word	0x48000400
 800335c:	08017de0 	.word	0x08017de0
 8003360:	10624dd3 	.word	0x10624dd3
 8003364:	08017df0 	.word	0x08017df0

08003368 <OnJoinTimerLedEvent>:
{
 8003368:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800336a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800336e:	4802      	ldr	r0, [pc, #8]	; (8003378 <OnJoinTimerLedEvent+0x10>)
 8003370:	f003 fdd9 	bl	8006f26 <HAL_GPIO_TogglePin>
}
 8003374:	bd08      	pop	{r3, pc}
 8003376:	bf00      	nop
 8003378:	48000400 	.word	0x48000400

0800337c <LoRaWAN_Init>:
{
 800337c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337e:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8003380:	2400      	movs	r4, #0
 8003382:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8003384:	9402      	str	r4, [sp, #8]
 8003386:	2703      	movs	r7, #3
 8003388:	9701      	str	r7, [sp, #4]
 800338a:	2601      	movs	r6, #1
 800338c:	9600      	str	r6, [sp, #0]
 800338e:	4b55      	ldr	r3, [pc, #340]	; (80034e4 <LoRaWAN_Init+0x168>)
 8003390:	4622      	mov	r2, r4
 8003392:	4621      	mov	r1, r4
 8003394:	2002      	movs	r0, #2
 8003396:	f012 fc01 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800339a:	9402      	str	r4, [sp, #8]
 800339c:	2305      	movs	r3, #5
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	2502      	movs	r5, #2
 80033a2:	9500      	str	r5, [sp, #0]
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <LoRaWAN_Init+0x16c>)
 80033a6:	4622      	mov	r2, r4
 80033a8:	4621      	mov	r1, r4
 80033aa:	4628      	mov	r0, r5
 80033ac:	f012 fbf6 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80033b0:	9402      	str	r4, [sp, #8]
 80033b2:	9701      	str	r7, [sp, #4]
 80033b4:	9600      	str	r6, [sp, #0]
 80033b6:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <LoRaWAN_Init+0x170>)
 80033b8:	4622      	mov	r2, r4
 80033ba:	4621      	mov	r1, r4
 80033bc:	4628      	mov	r0, r5
 80033be:	f012 fbed 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 80033c2:	a905      	add	r1, sp, #20
 80033c4:	4620      	mov	r0, r4
 80033c6:	f008 fd13 	bl	800bdf0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 80033ca:	9b05      	ldr	r3, [sp, #20]
 80033cc:	0e1a      	lsrs	r2, r3, #24
 80033ce:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80033d2:	9102      	str	r1, [sp, #8]
 80033d4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	9200      	str	r2, [sp, #0]
 80033dc:	4b44      	ldr	r3, [pc, #272]	; (80034f0 <LoRaWAN_Init+0x174>)
 80033de:	4622      	mov	r2, r4
 80033e0:	4621      	mov	r1, r4
 80033e2:	4628      	mov	r0, r5
 80033e4:	f012 fbda 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 80033e8:	a905      	add	r1, sp, #20
 80033ea:	4630      	mov	r0, r6
 80033ec:	f008 fd00 	bl	800bdf0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 80033f0:	9b05      	ldr	r3, [sp, #20]
 80033f2:	0e1a      	lsrs	r2, r3, #24
 80033f4:	b2d9      	uxtb	r1, r3
 80033f6:	9103      	str	r1, [sp, #12]
 80033f8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80033fc:	9102      	str	r1, [sp, #8]
 80033fe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	9200      	str	r2, [sp, #0]
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <LoRaWAN_Init+0x178>)
 8003408:	4622      	mov	r2, r4
 800340a:	4621      	mov	r1, r4
 800340c:	4628      	mov	r0, r5
 800340e:	f012 fbc5 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8003412:	9400      	str	r4, [sp, #0]
 8003414:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <LoRaWAN_Init+0x17c>)
 8003416:	4622      	mov	r2, r4
 8003418:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800341c:	4837      	ldr	r0, [pc, #220]	; (80034fc <LoRaWAN_Init+0x180>)
 800341e:	f012 feb1 	bl	8016184 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8003422:	9400      	str	r4, [sp, #0]
 8003424:	4b36      	ldr	r3, [pc, #216]	; (8003500 <LoRaWAN_Init+0x184>)
 8003426:	4622      	mov	r2, r4
 8003428:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800342c:	4835      	ldr	r0, [pc, #212]	; (8003504 <LoRaWAN_Init+0x188>)
 800342e:	f012 fea9 	bl	8016184 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8003432:	9400      	str	r4, [sp, #0]
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <LoRaWAN_Init+0x18c>)
 8003436:	4632      	mov	r2, r6
 8003438:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800343c:	4833      	ldr	r0, [pc, #204]	; (800350c <LoRaWAN_Init+0x190>)
 800343e:	f012 fea1 	bl	8016184 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8003442:	4620      	mov	r0, r4
 8003444:	f7fe fa56 	bl	80018f4 <FLASH_IF_Init>
 8003448:	2800      	cmp	r0, #0
 800344a:	d147      	bne.n	80034dc <LoRaWAN_Init+0x160>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800344c:	2400      	movs	r4, #0
 800344e:	9400      	str	r4, [sp, #0]
 8003450:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <LoRaWAN_Init+0x194>)
 8003452:	4622      	mov	r2, r4
 8003454:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003458:	482e      	ldr	r0, [pc, #184]	; (8003514 <LoRaWAN_Init+0x198>)
 800345a:	f012 fe93 	bl	8016184 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800345e:	4a2e      	ldr	r2, [pc, #184]	; (8003518 <LoRaWAN_Init+0x19c>)
 8003460:	4621      	mov	r1, r4
 8003462:	2001      	movs	r0, #1
 8003464:	f012 fd8e 	bl	8015f84 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8003468:	4a2c      	ldr	r2, [pc, #176]	; (800351c <LoRaWAN_Init+0x1a0>)
 800346a:	4621      	mov	r1, r4
 800346c:	2002      	movs	r0, #2
 800346e:	f012 fd89 	bl	8015f84 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8003472:	4a2b      	ldr	r2, [pc, #172]	; (8003520 <LoRaWAN_Init+0x1a4>)
 8003474:	4621      	mov	r1, r4
 8003476:	2004      	movs	r0, #4
 8003478:	f012 fd84 	bl	8015f84 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800347c:	4a29      	ldr	r2, [pc, #164]	; (8003524 <LoRaWAN_Init+0x1a8>)
 800347e:	4621      	mov	r1, r4
 8003480:	2008      	movs	r0, #8
 8003482:	f012 fd7f 	bl	8015f84 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8003486:	f000 f865 	bl	8003554 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800348a:	4927      	ldr	r1, [pc, #156]	; (8003528 <LoRaWAN_Init+0x1ac>)
 800348c:	4827      	ldr	r0, [pc, #156]	; (800352c <LoRaWAN_Init+0x1b0>)
 800348e:	f008 fc63 	bl	800bd58 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8003492:	4827      	ldr	r0, [pc, #156]	; (8003530 <LoRaWAN_Init+0x1b4>)
 8003494:	f008 fb3a 	bl	800bb0c <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8003498:	481c      	ldr	r0, [pc, #112]	; (800350c <LoRaWAN_Init+0x190>)
 800349a:	f012 ff2b 	bl	80162f4 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 800349e:	4621      	mov	r1, r4
 80034a0:	4b24      	ldr	r3, [pc, #144]	; (8003534 <LoRaWAN_Init+0x1b8>)
 80034a2:	7818      	ldrb	r0, [r3, #0]
 80034a4:	f008 f8ee 	bl	800b684 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80034a8:	4d23      	ldr	r5, [pc, #140]	; (8003538 <LoRaWAN_Init+0x1bc>)
 80034aa:	9400      	str	r4, [sp, #0]
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <LoRaWAN_Init+0x1c0>)
 80034ae:	4622      	mov	r2, r4
 80034b0:	4923      	ldr	r1, [pc, #140]	; (8003540 <LoRaWAN_Init+0x1c4>)
 80034b2:	6809      	ldr	r1, [r1, #0]
 80034b4:	4628      	mov	r0, r5
 80034b6:	f012 fe65 	bl	8016184 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80034ba:	4628      	mov	r0, r5
 80034bc:	f012 ff1a 	bl	80162f4 <UTIL_TIMER_Start>
  UTIL_TIMER_Create(&Req_sensor_Timer, 1, UTIL_TIMER_ONESHOT, Req_sensor_value, NULL);
 80034c0:	9400      	str	r4, [sp, #0]
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <LoRaWAN_Init+0x1c8>)
 80034c4:	4622      	mov	r2, r4
 80034c6:	2101      	movs	r1, #1
 80034c8:	481f      	ldr	r0, [pc, #124]	; (8003548 <LoRaWAN_Init+0x1cc>)
 80034ca:	f012 fe5b 	bl	8016184 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_TASK_ReqSensor), UTIL_SEQ_RFU, Mems_get_sampling_handler);
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <LoRaWAN_Init+0x1d0>)
 80034d0:	4621      	mov	r1, r4
 80034d2:	2010      	movs	r0, #16
 80034d4:	f012 fd56 	bl	8015f84 <UTIL_SEQ_RegTask>
}
 80034d8:	b007      	add	sp, #28
 80034da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80034dc:	f7fe fb4f 	bl	8001b7e <Error_Handler>
 80034e0:	e7b4      	b.n	800344c <LoRaWAN_Init+0xd0>
 80034e2:	bf00      	nop
 80034e4:	08017e10 	.word	0x08017e10
 80034e8:	08017e34 	.word	0x08017e34
 80034ec:	08017e58 	.word	0x08017e58
 80034f0:	08017e7c 	.word	0x08017e7c
 80034f4:	08017ea0 	.word	0x08017ea0
 80034f8:	08002fed 	.word	0x08002fed
 80034fc:	20002ee4 	.word	0x20002ee4
 8003500:	08002fd9 	.word	0x08002fd9
 8003504:	20002eb4 	.word	0x20002eb4
 8003508:	08003369 	.word	0x08003369
 800350c:	20002e84 	.word	0x20002e84
 8003510:	08002f95 	.word	0x08002f95
 8003514:	20002ecc 	.word	0x20002ecc
 8003518:	0800b905 	.word	0x0800b905
 800351c:	08003209 	.word	0x08003209
 8003520:	080031d1 	.word	0x080031d1
 8003524:	08003135 	.word	0x08003135
 8003528:	01030000 	.word	0x01030000
 800352c:	2000000c 	.word	0x2000000c
 8003530:	20000058 	.word	0x20000058
 8003534:	20000000 	.word	0x20000000
 8003538:	20002efc 	.word	0x20002efc
 800353c:	08002dc5 	.word	0x08002dc5
 8003540:	20000070 	.word	0x20000070
 8003544:	08002da1 	.word	0x08002da1
 8003548:	20002e9c 	.word	0x20002e9c
 800354c:	08002a21 	.word	0x08002a21

08003550 <HAL_GPIO_EXTI_Callback>:
}
 8003550:	4770      	bx	lr
	...

08003554 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <LoraInfo_Init+0x1c>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800355a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800355c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800355e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 8003560:	2201      	movs	r2, #1
 8003562:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8003564:	f240 1101 	movw	r1, #257	; 0x101
 8003568:	6059      	str	r1, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800356a:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20002f14 	.word	0x20002f14

08003574 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8003574:	4800      	ldr	r0, [pc, #0]	; (8003578 <LoraInfo_GetPtr+0x4>)
 8003576:	4770      	bx	lr
 8003578:	20002f14 	.word	0x20002f14

0800357c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800357c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RBI_Init_1 */

  /* USER CODE END RBI_Init_1 */
  return (int32_t) HAL_RADIO_Init();
 800357e:	f002 fa05 	bl	800598c <HAL_RADIO_Init>
}
 8003582:	bd08      	pop	{r3, pc}

08003584 <RBI_ConfigRFSwitch>:
  /* USER CODE END RBI_DeInit_1 */
  return (int32_t) HAL_RADIO_DeInit();
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8003584:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RBI_ConfigRFSwitch_1 */

  /* USER CODE END RBI_ConfigRFSwitch_1 */
  return (int32_t) HAL_RADIO_SetSwitchConfig((HAL_RADIO_SwitchConfig_TypeDef) Config);
 8003586:	f002 fa2d 	bl	80059e4 <HAL_RADIO_SetSwitchConfig>
}
 800358a:	bd08      	pop	{r3, pc}

0800358c <RBI_GetTxConfig>:
{
  /* USER CODE BEGIN RBI_GetTxConfig_1 */

  /* USER CODE END RBI_GetTxConfig_1 */
  return RBI_CONF_RFO_LP_HP;
}
 800358c:	2000      	movs	r0, #0
 800358e:	4770      	bx	lr

08003590 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8003590:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RBI_IsTCXO_1 */

  /* USER CODE END RBI_IsTCXO_1 */
  return HAL_RADIO_IsTCXO();
 8003592:	f002 fa4f 	bl	8005a34 <HAL_RADIO_IsTCXO>
}
 8003596:	bd08      	pop	{r3, pc}

08003598 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8003598:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RBI_IsDCDC_1 */

  /* USER CODE END RBI_IsDCDC_1 */
  return HAL_RADIO_IsDCDC();
 800359a:	f002 fa4d 	bl	8005a38 <HAL_RADIO_IsDCDC>
}
 800359e:	bd08      	pop	{r3, pc}

080035a0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80035a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_1 */

  /* USER CODE END RBI_GetRFOMaxPowerConfig_1 */
  return HAL_RADIO_GetRFOMaxPowerConfig((HAL_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80035a2:	f002 fa4b 	bl	8005a3c <HAL_RADIO_GetRFOMaxPowerConfig>
}
 80035a6:	bd08      	pop	{r3, pc}

080035a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035a8:	480d      	ldr	r0, [pc, #52]	; (80035e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035ac:	f002 f99e 	bl	80058ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035b0:	480c      	ldr	r0, [pc, #48]	; (80035e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80035b2:	490d      	ldr	r1, [pc, #52]	; (80035e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035b4:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <LoopForever+0xe>)
  movs r3, #0
 80035b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035b8:	e002      	b.n	80035c0 <LoopCopyDataInit>

080035ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035be:	3304      	adds	r3, #4

080035c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035c4:	d3f9      	bcc.n	80035ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035c8:	4c0a      	ldr	r4, [pc, #40]	; (80035f4 <LoopForever+0x16>)
  movs r3, #0
 80035ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035cc:	e001      	b.n	80035d2 <LoopFillZerobss>

080035ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035d0:	3204      	adds	r2, #4

080035d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035d4:	d3fb      	bcc.n	80035ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035d6:	f013 ffb7 	bl	8017548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035da:	f7fe fb19 	bl	8001c10 <main>

080035de <LoopForever>:

LoopForever:
    b LoopForever
 80035de:	e7fe      	b.n	80035de <LoopForever>
  ldr   r0, =_estack
 80035e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80035e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80035ec:	08021218 	.word	0x08021218
  ldr r2, =_sbss
 80035f0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80035f4:	20004d38 	.word	0x20004d38

080035f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035f8:	e7fe      	b.n	80035f8 <ADC_IRQHandler>
	...

080035fc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80035fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 8003602:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003606:	fbb3 f0f0 	udiv	r0, r3, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 800360c:	222c      	movs	r2, #44	; 0x2c
 800360e:	fb02 3301 	mla	r3, r2, r1, r3
 8003612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003614:	68d9      	ldr	r1, [r3, #12]
 8003616:	eb02 0c01 	add.w	ip, r2, r1
 800361a:	f1ac 0c32 	sub.w	ip, ip, #50	; 0x32
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800361e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003620:	1cca      	adds	r2, r1, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003622:	fb00 cc12 	mls	ip, r0, r2, ip

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	6a1f      	ldr	r7, [r3, #32]
 800362a:	eba2 0e07 	sub.w	lr, r2, r7
 800362e:	f5ae 7e82 	sub.w	lr, lr, #260	; 0x104
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003632:	3104      	adds	r1, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003634:	fb01 ee10 	mls	lr, r1, r0, lr


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	441f      	add	r7, r3

  if (tsdadel_min <= 0)
 800363c:	f1bc 0f00 	cmp.w	ip, #0
 8003640:	dd06      	ble.n	8003650 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x54>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 8003642:	f1be 0f00 	cmp.w	lr, #0
 8003646:	dd06      	ble.n	8003656 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5a>
  {
    tsdadel_max = 0;
  }

  for (presc = 0U; presc < I2C_PRESC_MAX; presc++)
 8003648:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 800364a:	f04f 0810 	mov.w	r8, #16
  for (presc = 0U; presc < I2C_PRESC_MAX; presc++)
 800364e:	e037      	b.n	80036c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc4>
    tsdadel_min = 0;
 8003650:	f04f 0c00 	mov.w	ip, #0
 8003654:	e7f5      	b.n	8003642 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 8003656:	f04f 0e00 	mov.w	lr, #0
 800365a:	e7f5      	b.n	8003648 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4c>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800365c:	3201      	adds	r2, #1
 800365e:	2a0f      	cmp	r2, #15
 8003660:	d820      	bhi.n	80036a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xa8>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003662:	fb02 f301 	mul.w	r3, r2, r1
 8003666:	fb00 f303 	mul.w	r3, r0, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800366a:	459c      	cmp	ip, r3
 800366c:	d8f6      	bhi.n	800365c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x60>
 800366e:	459e      	cmp	lr, r3
 8003670:	d3f4      	bcc.n	800365c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x60>
          {
            if (presc != prev_presc)
 8003672:	45a8      	cmp	r8, r5
 8003674:	d0f2      	beq.n	800365c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x60>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003676:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80036d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>
 800367a:	f8d8 3000 	ldr.w	r3, [r8]
 800367e:	f8df a058 	ldr.w	sl, [pc, #88]	; 80036d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 8003682:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8003686:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 800368a:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800368e:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003692:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 8003696:	3301      	adds	r3, #1
 8003698:	f8c8 3000 	str.w	r3, [r8]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800369c:	2b7f      	cmp	r3, #127	; 0x7f
 800369e:	d813      	bhi.n	80036c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 80036a0:	46a8      	mov	r8, r5
 80036a2:	e7db      	b.n	800365c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x60>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80036a4:	4634      	mov	r4, r6
    for (scldel = 0U; scldel < I2C_SCLDEL_MAX; scldel++)
 80036a6:	2c0f      	cmp	r4, #15
 80036a8:	d809      	bhi.n	80036be <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc2>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80036aa:	1c66      	adds	r6, r4, #1
 80036ac:	1c69      	adds	r1, r5, #1
 80036ae:	fb04 1301 	mla	r3, r4, r1, r1
 80036b2:	fb00 f303 	mul.w	r3, r0, r3
      if (tscldel >= (uint32_t)tscldel_min)
 80036b6:	429f      	cmp	r7, r3
 80036b8:	d8f4      	bhi.n	80036a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xa8>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80036ba:	2200      	movs	r2, #0
 80036bc:	e7cf      	b.n	800365e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
  for (presc = 0U; presc < I2C_PRESC_MAX; presc++)
 80036be:	3501      	adds	r5, #1
 80036c0:	2d0f      	cmp	r5, #15
 80036c2:	d801      	bhi.n	80036c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
    for (scldel = 0U; scldel < I2C_SCLDEL_MAX; scldel++)
 80036c4:	2400      	movs	r4, #0
 80036c6:	e7ee      	b.n	80036a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xaa>
          }
        }
      }
    }
  }
}
 80036c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036cc:	3b9aca00 	.word	0x3b9aca00
 80036d0:	08017efc 	.word	0x08017efc
 80036d4:	20003928 	.word	0x20003928
 80036d8:	20002f28 	.word	0x20002f28

080036dc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	b089      	sub	sp, #36	; 0x24
 80036e2:	460d      	mov	r5, r1
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80036e4:	4b46      	ldr	r3, [pc, #280]	; (8003800 <I2C_Compute_SCLL_SCLH+0x124>)
 80036e6:	eb03 0150 	add.w	r1, r3, r0, lsr #1
 80036ea:	fbb1 f9f0 	udiv	r9, r1, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 80036ee:	4845      	ldr	r0, [pc, #276]	; (8003804 <I2C_Compute_SCLL_SCLH+0x128>)
 80036f0:	222c      	movs	r2, #44	; 0x2c
 80036f2:	fb05 f202 	mul.w	r2, r5, r2
 80036f6:	1881      	adds	r1, r0, r2
 80036f8:	5882      	ldr	r2, [r0, r2]
 80036fa:	eb03 0052 	add.w	r0, r3, r2, lsr #1
 80036fe:	fbb0 f0f2 	udiv	r0, r0, r2
 8003702:	9005      	str	r0, [sp, #20]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003704:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003706:	fb09 f202 	mul.w	r2, r9, r2
 800370a:	9204      	str	r2, [sp, #16]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800370c:	684a      	ldr	r2, [r1, #4]
 800370e:	fbb3 faf2 	udiv	sl, r3, r2
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003712:	688a      	ldr	r2, [r1, #8]
 8003714:	fbb3 f8f2 	udiv	r8, r3, r2

  prev_error = ti2cspeed;
 8003718:	9003      	str	r0, [sp, #12]

  for (uint32_t count = 0U; count < I2c_valid_timing_nbr; count++)
 800371a:	2300      	movs	r3, #0
 800371c:	9306      	str	r3, [sp, #24]
  uint32_t ret = 0xFFFFFFFFU;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	9307      	str	r3, [sp, #28]
 8003724:	46cb      	mov	fp, r9
  for (uint32_t count = 0U; count < I2c_valid_timing_nbr; count++)
 8003726:	e056      	b.n	80037d6 <I2C_Compute_SCLL_SCLH+0xfa>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 8003728:	1aca      	subs	r2, r1, r3
 800372a:	e021      	b.n	8003770 <I2C_Compute_SCLL_SCLH+0x94>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 800372c:	4630      	mov	r0, r6
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800372e:	28ff      	cmp	r0, #255	; 0xff
 8003730:	d82d      	bhi.n	800378e <I2C_Compute_SCLL_SCLH+0xb2>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003732:	1c46      	adds	r6, r0, #1
 8003734:	fb00 4204 	mla	r2, r0, r4, r4
 8003738:	444a      	add	r2, r9
 800373a:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800373c:	eb0c 0302 	add.w	r3, ip, r2
 8003740:	4930      	ldr	r1, [pc, #192]	; (8003804 <I2C_Compute_SCLL_SCLH+0x128>)
 8003742:	272c      	movs	r7, #44	; 0x2c
 8003744:	fb07 1105 	mla	r1, r7, r5, r1
 8003748:	6a0f      	ldr	r7, [r1, #32]
 800374a:	443b      	add	r3, r7
 800374c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800374e:	440b      	add	r3, r1
          if ((tscl >= clk_min) && (tscl <= clk_max)
 8003750:	4598      	cmp	r8, r3
 8003752:	d8eb      	bhi.n	800372c <I2C_Compute_SCLL_SCLH+0x50>
 8003754:	459a      	cmp	sl, r3
 8003756:	d3e9      	bcc.n	800372c <I2C_Compute_SCLL_SCLH+0x50>
              && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003758:	492a      	ldr	r1, [pc, #168]	; (8003804 <I2C_Compute_SCLL_SCLH+0x128>)
 800375a:	272c      	movs	r7, #44	; 0x2c
 800375c:	fb07 1105 	mla	r1, r7, r5, r1
 8003760:	69c9      	ldr	r1, [r1, #28]
 8003762:	4291      	cmp	r1, r2
 8003764:	d8e2      	bhi.n	800372c <I2C_Compute_SCLL_SCLH+0x50>
 8003766:	4593      	cmp	fp, r2
 8003768:	d2e0      	bcs.n	800372c <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 800376a:	9905      	ldr	r1, [sp, #20]
 800376c:	1a5a      	subs	r2, r3, r1
 800376e:	d4db      	bmi.n	8003728 <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 8003770:	9b03      	ldr	r3, [sp, #12]
 8003772:	429a      	cmp	r2, r3
 8003774:	d2da      	bcs.n	800372c <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 8003776:	9f06      	ldr	r7, [sp, #24]
 8003778:	eb07 0187 	add.w	r1, r7, r7, lsl #2
 800377c:	4b22      	ldr	r3, [pc, #136]	; (8003808 <I2C_Compute_SCLL_SCLH+0x12c>)
 800377e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003782:	9901      	ldr	r1, [sp, #4]
 8003784:	6119      	str	r1, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 8003786:	60d8      	str	r0, [r3, #12]
              prev_error = (uint32_t)error;
 8003788:	9203      	str	r2, [sp, #12]
              ret = count;
 800378a:	9707      	str	r7, [sp, #28]
 800378c:	e7ce      	b.n	800372c <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800378e:	9b02      	ldr	r3, [sp, #8]
 8003790:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003792:	9b01      	ldr	r3, [sp, #4]
 8003794:	2bff      	cmp	r3, #255	; 0xff
 8003796:	d81b      	bhi.n	80037d0 <I2C_Compute_SCLL_SCLH+0xf4>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003798:	9904      	ldr	r1, [sp, #16]
 800379a:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 800379e:	9b01      	ldr	r3, [sp, #4]
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	9202      	str	r2, [sp, #8]
 80037a4:	fb03 4c04 	mla	ip, r3, r4, r4
 80037a8:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80037ac:	eb0c 0c4b 	add.w	ip, ip, fp, lsl #1
 80037b0:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80037b2:	4b14      	ldr	r3, [pc, #80]	; (8003804 <I2C_Compute_SCLL_SCLH+0x128>)
 80037b4:	222c      	movs	r2, #44	; 0x2c
 80037b6:	fb02 3305 	mla	r3, r2, r5, r3
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	4563      	cmp	r3, ip
 80037be:	d2e6      	bcs.n	800378e <I2C_Compute_SCLL_SCLH+0xb2>
 80037c0:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 80037c4:	1a5b      	subs	r3, r3, r1
 80037c6:	ebbb 0f93 	cmp.w	fp, r3, lsr #2
 80037ca:	d2e0      	bcs.n	800378e <I2C_Compute_SCLL_SCLH+0xb2>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80037cc:	2000      	movs	r0, #0
 80037ce:	e7ae      	b.n	800372e <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0U; count < I2c_valid_timing_nbr; count++)
 80037d0:	9b06      	ldr	r3, [sp, #24]
 80037d2:	3301      	adds	r3, #1
 80037d4:	9306      	str	r3, [sp, #24]
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <I2C_Compute_SCLL_SCLH+0x130>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	9a06      	ldr	r2, [sp, #24]
 80037dc:	4293      	cmp	r3, r2
 80037de:	d90a      	bls.n	80037f6 <I2C_Compute_SCLL_SCLH+0x11a>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80037e0:	9b06      	ldr	r3, [sp, #24]
 80037e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037e6:	4a08      	ldr	r2, [pc, #32]	; (8003808 <I2C_Compute_SCLL_SCLH+0x12c>)
 80037e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80037ec:	fb04 b40b 	mla	r4, r4, fp, fp
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	e7cd      	b.n	8003792 <I2C_Compute_SCLL_SCLH+0xb6>
      }
    }
  }

  return ret;
}
 80037f6:	9807      	ldr	r0, [sp, #28]
 80037f8:	b009      	add	sp, #36	; 0x24
 80037fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037fe:	bf00      	nop
 8003800:	3b9aca00 	.word	0x3b9aca00
 8003804:	08017efc 	.word	0x08017efc
 8003808:	20002f28 	.word	0x20002f28
 800380c:	20003928 	.word	0x20003928

08003810 <I2C_GetTiming>:
{
 8003810:	b538      	push	{r3, r4, r5, lr}
  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003812:	4605      	mov	r5, r0
 8003814:	b108      	cbz	r0, 800381a <I2C_GetTiming+0xa>
 8003816:	bba9      	cbnz	r1, 8003884 <I2C_GetTiming+0x74>
  uint32_t ret = 0;
 8003818:	460d      	mov	r5, r1
}
 800381a:	4628      	mov	r0, r5
 800381c:	bd38      	pop	{r3, r4, r5, pc}
    for (speed = 0U ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800381e:	3401      	adds	r4, #1
 8003820:	2c02      	cmp	r4, #2
 8003822:	d831      	bhi.n	8003888 <I2C_GetTiming+0x78>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <I2C_GetTiming+0x80>)
 8003826:	222c      	movs	r2, #44	; 0x2c
 8003828:	fb02 3304 	mla	r3, r2, r4, r3
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	428b      	cmp	r3, r1
 8003830:	d8f5      	bhi.n	800381e <I2C_GetTiming+0xe>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003832:	4b17      	ldr	r3, [pc, #92]	; (8003890 <I2C_GetTiming+0x80>)
 8003834:	fb02 3304 	mla	r3, r2, r4, r3
 8003838:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800383a:	428b      	cmp	r3, r1
 800383c:	d3ef      	bcc.n	800381e <I2C_GetTiming+0xe>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800383e:	4621      	mov	r1, r4
 8003840:	4628      	mov	r0, r5
 8003842:	f7ff fedb 	bl	80035fc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003846:	4621      	mov	r1, r4
 8003848:	4628      	mov	r0, r5
 800384a:	f7ff ff47 	bl	80036dc <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 800384e:	287f      	cmp	r0, #127	; 0x7f
 8003850:	d81c      	bhi.n	800388c <I2C_GetTiming+0x7c>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003852:	4a10      	ldr	r2, [pc, #64]	; (8003894 <I2C_GetTiming+0x84>)
 8003854:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8003858:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800385c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8003860:	684b      	ldr	r3, [r1, #4]
 8003862:	051d      	lsls	r5, r3, #20
 8003864:	f405 0570 	and.w	r5, r5, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003868:	ea45 7504 	orr.w	r5, r5, r4, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 800386c:	688b      	ldr	r3, [r1, #8]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8003874:	431d      	orrs	r5, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8003876:	68cb      	ldr	r3, [r1, #12]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 800387c:	431d      	orrs	r5, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800387e:	7c0b      	ldrb	r3, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8003880:	431d      	orrs	r5, r3
 8003882:	e7ca      	b.n	800381a <I2C_GetTiming+0xa>
    for (speed = 0U ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003884:	2400      	movs	r4, #0
 8003886:	e7cb      	b.n	8003820 <I2C_GetTiming+0x10>
  uint32_t ret = 0;
 8003888:	2500      	movs	r5, #0
 800388a:	e7c6      	b.n	800381a <I2C_GetTiming+0xa>
 800388c:	2500      	movs	r5, #0
 800388e:	e7c4      	b.n	800381a <I2C_GetTiming+0xa>
 8003890:	08017efc 	.word	0x08017efc
 8003894:	20002f28 	.word	0x20002f28

08003898 <I2C2_MspInit>:
{
 8003898:	b530      	push	{r4, r5, lr}
 800389a:	b089      	sub	sp, #36	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 800389c:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80038a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80038a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80038b0:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin       = BUS_I2C2_SCL_GPIO_PIN;
 80038b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b6:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80038b8:	2312      	movs	r3, #18
 80038ba:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80038c0:	2302      	movs	r3, #2
 80038c2:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C2_SCL_GPIO_AF;
 80038c4:	2504      	movs	r5, #4
 80038c6:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 80038c8:	a903      	add	r1, sp, #12
 80038ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ce:	f003 f9d1 	bl	8006c74 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C2_SDA_GPIO_PIN;
 80038d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038d6:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = BUS_I2C2_SDA_GPIO_AF;
 80038d8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 80038da:	a903      	add	r1, sp, #12
 80038dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e0:	f003 f9c8 	bl	8006c74 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80038e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ea:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80038ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80038f4:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80038f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038fc:	63a3      	str	r3, [r4, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80038fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003900:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003904:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003906:	b009      	add	sp, #36	; 0x24
 8003908:	bd30      	pop	{r4, r5, pc}

0800390a <I2C2_MspDeInit>:
{
 800390a:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 800390c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003914:	f003 fa80 	bl	8006e18 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8003918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800391c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003920:	f003 fa7a 	bl	8006e18 <HAL_GPIO_DeInit>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003928:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800392a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800392e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003930:	bd08      	pop	{r3, pc}
	...

08003934 <I2C2_WriteReg>:
{
 8003934:	b510      	push	{r4, lr}
 8003936:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C2_TIMEOUT) != HAL_OK)
 8003938:	f242 7410 	movw	r4, #10000	; 0x2710
 800393c:	9402      	str	r4, [sp, #8]
 800393e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8003942:	9401      	str	r4, [sp, #4]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	4613      	mov	r3, r2
 8003948:	460a      	mov	r2, r1
 800394a:	4601      	mov	r1, r0
 800394c:	4812      	ldr	r0, [pc, #72]	; (8003998 <I2C2_WriteReg+0x64>)
 800394e:	f003 fd42 	bl	80073d6 <HAL_I2C_Mem_Write>
 8003952:	b910      	cbnz	r0, 800395a <I2C2_WriteReg+0x26>
  int32_t  status = BSP_ERROR_NONE;
 8003954:	2000      	movs	r0, #0
}
 8003956:	b004      	add	sp, #16
 8003958:	bd10      	pop	{r4, pc}
    hal_error = HAL_I2C_GetError(&hbus_i2c2);
 800395a:	480f      	ldr	r0, [pc, #60]	; (8003998 <I2C2_WriteReg+0x64>)
 800395c:	f003 feeb 	bl	8007736 <HAL_I2C_GetError>
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8003960:	f010 0f01 	tst.w	r0, #1
 8003964:	d10b      	bne.n	800397e <I2C2_WriteReg+0x4a>
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8003966:	f010 0f02 	tst.w	r0, #2
 800396a:	d10b      	bne.n	8003984 <I2C2_WriteReg+0x50>
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 800396c:	f010 0f04 	tst.w	r0, #4
 8003970:	d10b      	bne.n	800398a <I2C2_WriteReg+0x56>
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8003972:	f010 0f60 	tst.w	r0, #96	; 0x60
 8003976:	d00b      	beq.n	8003990 <I2C2_WriteReg+0x5c>
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8003978:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800397c:	e7eb      	b.n	8003956 <I2C2_WriteReg+0x22>
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 800397e:	f06f 0066 	mvn.w	r0, #102	; 0x66
 8003982:	e7e8      	b.n	8003956 <I2C2_WriteReg+0x22>
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8003984:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8003988:	e7e5      	b.n	8003956 <I2C2_WriteReg+0x22>
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800398a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800398e:	e7e2      	b.n	8003956 <I2C2_WriteReg+0x22>
      status = BSP_ERROR_PERIPH_FAILURE;
 8003990:	f06f 0003 	mvn.w	r0, #3
  return status;
 8003994:	e7df      	b.n	8003956 <I2C2_WriteReg+0x22>
 8003996:	bf00      	nop
 8003998:	2000392c 	.word	0x2000392c

0800399c <I2C2_ReadReg>:
{
 800399c:	b510      	push	{r4, lr}
 800399e:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C2_TIMEOUT) != HAL_OK)
 80039a0:	f242 7410 	movw	r4, #10000	; 0x2710
 80039a4:	9402      	str	r4, [sp, #8]
 80039a6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80039aa:	9401      	str	r4, [sp, #4]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	460a      	mov	r2, r1
 80039b2:	4601      	mov	r1, r0
 80039b4:	4812      	ldr	r0, [pc, #72]	; (8003a00 <I2C2_ReadReg+0x64>)
 80039b6:	f003 fde3 	bl	8007580 <HAL_I2C_Mem_Read>
 80039ba:	b910      	cbnz	r0, 80039c2 <I2C2_ReadReg+0x26>
  int32_t  status = BSP_ERROR_NONE;
 80039bc:	2000      	movs	r0, #0
}
 80039be:	b004      	add	sp, #16
 80039c0:	bd10      	pop	{r4, pc}
    hal_error = HAL_I2C_GetError(&hbus_i2c2);
 80039c2:	480f      	ldr	r0, [pc, #60]	; (8003a00 <I2C2_ReadReg+0x64>)
 80039c4:	f003 feb7 	bl	8007736 <HAL_I2C_GetError>
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 80039c8:	f010 0f01 	tst.w	r0, #1
 80039cc:	d10b      	bne.n	80039e6 <I2C2_ReadReg+0x4a>
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 80039ce:	f010 0f02 	tst.w	r0, #2
 80039d2:	d10b      	bne.n	80039ec <I2C2_ReadReg+0x50>
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 80039d4:	f010 0f04 	tst.w	r0, #4
 80039d8:	d10b      	bne.n	80039f2 <I2C2_ReadReg+0x56>
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 80039da:	f010 0f60 	tst.w	r0, #96	; 0x60
 80039de:	d00b      	beq.n	80039f8 <I2C2_ReadReg+0x5c>
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 80039e0:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80039e4:	e7eb      	b.n	80039be <I2C2_ReadReg+0x22>
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 80039e6:	f06f 0066 	mvn.w	r0, #102	; 0x66
 80039ea:	e7e8      	b.n	80039be <I2C2_ReadReg+0x22>
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 80039ec:	f06f 0064 	mvn.w	r0, #100	; 0x64
 80039f0:	e7e5      	b.n	80039be <I2C2_ReadReg+0x22>
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80039f2:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80039f6:	e7e2      	b.n	80039be <I2C2_ReadReg+0x22>
      status = BSP_ERROR_PERIPH_FAILURE;
 80039f8:	f06f 0003 	mvn.w	r0, #3
  return status;
 80039fc:	e7df      	b.n	80039be <I2C2_ReadReg+0x22>
 80039fe:	bf00      	nop
 8003a00:	2000392c 	.word	0x2000392c

08003a04 <BSP_I2C2_DeInit>:
  if (I2c2InitCounter > 0U)
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <BSP_I2C2_DeInit+0x30>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	b17b      	cbz	r3, 8003a2a <BSP_I2C2_DeInit+0x26>
    I2c2InitCounter--;
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <BSP_I2C2_DeInit+0x30>)
 8003a0e:	6013      	str	r3, [r2, #0]
    if (I2c2InitCounter == 0U)
 8003a10:	b10b      	cbz	r3, 8003a16 <BSP_I2C2_DeInit+0x12>
  int32_t status = BSP_ERROR_NONE;
 8003a12:	2000      	movs	r0, #0
}
 8003a14:	4770      	bx	lr
{
 8003a16:	b510      	push	{r4, lr}
      I2C2_MspDeInit(&hbus_i2c2);
 8003a18:	4c07      	ldr	r4, [pc, #28]	; (8003a38 <BSP_I2C2_DeInit+0x34>)
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f7ff ff75 	bl	800390a <I2C2_MspDeInit>
      if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8003a20:	4620      	mov	r0, r4
 8003a22:	f003 fcbf 	bl	80073a4 <HAL_I2C_DeInit>
 8003a26:	b910      	cbnz	r0, 8003a2e <BSP_I2C2_DeInit+0x2a>
}
 8003a28:	bd10      	pop	{r4, pc}
  int32_t status = BSP_ERROR_NONE;
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	4770      	bx	lr
        status = BSP_ERROR_PERIPH_FAILURE;
 8003a2e:	f06f 0003 	mvn.w	r0, #3
  return status;
 8003a32:	e7f9      	b.n	8003a28 <BSP_I2C2_DeInit+0x24>
 8003a34:	20002f24 	.word	0x20002f24
 8003a38:	2000392c 	.word	0x2000392c

08003a3c <BSP_I2C2_WriteReg>:
{
 8003a3c:	b500      	push	{lr}
 8003a3e:	b083      	sub	sp, #12
  return I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	2201      	movs	r2, #1
 8003a46:	f7ff ff75 	bl	8003934 <I2C2_WriteReg>
}
 8003a4a:	b003      	add	sp, #12
 8003a4c:	f85d fb04 	ldr.w	pc, [sp], #4

08003a50 <BSP_I2C2_ReadReg>:
{
 8003a50:	b500      	push	{lr}
 8003a52:	b083      	sub	sp, #12
  return I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	4613      	mov	r3, r2
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f7ff ff9f 	bl	800399c <I2C2_ReadReg>
}
 8003a5e:	b003      	add	sp, #12
 8003a60:	f85d fb04 	ldr.w	pc, [sp], #4

08003a64 <BSP_GetTick>:
{
 8003a64:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8003a66:	f7fe fad1 	bl	800200c <HAL_GetTick>
}
 8003a6a:	bd08      	pop	{r3, pc}

08003a6c <MX_I2C2_Init>:
{
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 8003a70:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003a76:	2201      	movs	r2, #1
 8003a78:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003a7a:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003a7c:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a7e:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003a80:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003a82:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003a84:	f003 fc2f 	bl	80072e6 <HAL_I2C_Init>
 8003a88:	b108      	cbz	r0, 8003a8e <MX_I2C2_Init+0x22>
    status = HAL_ERROR;
 8003a8a:	2001      	movs	r0, #1
}
 8003a8c:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4620      	mov	r0, r4
 8003a92:	f003 fe52 	bl	800773a <HAL_I2CEx_ConfigAnalogFilter>
 8003a96:	b108      	cbz	r0, 8003a9c <MX_I2C2_Init+0x30>
      status = HAL_ERROR;
 8003a98:	2001      	movs	r0, #1
 8003a9a:	e7f7      	b.n	8003a8c <MX_I2C2_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f003 fe79 	bl	8007796 <HAL_I2CEx_ConfigDigitalFilter>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d0f1      	beq.n	8003a8c <MX_I2C2_Init+0x20>
        status = HAL_ERROR;
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	e7ef      	b.n	8003a8c <MX_I2C2_Init+0x20>

08003aac <BSP_I2C2_Init>:
  hbus_i2c2.Instance = BUS_I2C2;
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <BSP_I2C2_Init+0x68>)
 8003aae:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <BSP_I2C2_Init+0x6c>)
 8003ab0:	601a      	str	r2, [r3, #0]
  if (I2c2InitCounter == 0U)
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <BSP_I2C2_Init+0x70>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	b14b      	cbz	r3, 8003acc <BSP_I2C2_Init+0x20>
  int32_t status = BSP_ERROR_NONE;
 8003ab8:	2000      	movs	r0, #0
  if (I2c2InitCounter < 0xFFFFFFFFU)
 8003aba:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <BSP_I2C2_Init+0x70>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d025      	beq.n	8003b10 <BSP_I2C2_Init+0x64>
    I2c2InitCounter++;
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <BSP_I2C2_Init+0x70>)
 8003ac8:	6013      	str	r3, [r2, #0]
  return status;
 8003aca:	4770      	bx	lr
{
 8003acc:	b510      	push	{r4, lr}
    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8003ace:	4811      	ldr	r0, [pc, #68]	; (8003b14 <BSP_I2C2_Init+0x68>)
 8003ad0:	f003 fe2e 	bl	8007730 <HAL_I2C_GetState>
 8003ad4:	b148      	cbz	r0, 8003aea <BSP_I2C2_Init+0x3e>
  int32_t status = BSP_ERROR_NONE;
 8003ad6:	2000      	movs	r0, #0
  if (I2c2InitCounter < 0xFFFFFFFFU)
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <BSP_I2C2_Init+0x70>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d002      	beq.n	8003ae8 <BSP_I2C2_Init+0x3c>
    I2c2InitCounter++;
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	4a0d      	ldr	r2, [pc, #52]	; (8003b1c <BSP_I2C2_Init+0x70>)
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	bd10      	pop	{r4, pc}
      I2C2_MspInit(&hbus_i2c2);
 8003aea:	4c0a      	ldr	r4, [pc, #40]	; (8003b14 <BSP_I2C2_Init+0x68>)
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7ff fed3 	bl	8003898 <I2C2_MspInit>
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2C2),
 8003af2:	2080      	movs	r0, #128	; 0x80
 8003af4:	f005 f9ba 	bl	8008e6c <HAL_RCCEx_GetPeriphCLKFreq>
 8003af8:	4909      	ldr	r1, [pc, #36]	; (8003b20 <BSP_I2C2_Init+0x74>)
 8003afa:	f7ff fe89 	bl	8003810 <I2C_GetTiming>
 8003afe:	4601      	mov	r1, r0
 8003b00:	4620      	mov	r0, r4
 8003b02:	f7ff ffb3 	bl	8003a6c <MX_I2C2_Init>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d0e6      	beq.n	8003ad8 <BSP_I2C2_Init+0x2c>
        status = BSP_ERROR_BUS_FAILURE;
 8003b0a:	f06f 0007 	mvn.w	r0, #7
 8003b0e:	e7e3      	b.n	8003ad8 <BSP_I2C2_Init+0x2c>
}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000392c 	.word	0x2000392c
 8003b18:	40005800 	.word	0x40005800
 8003b1c:	20002f24 	.word	0x20002f24
 8003b20:	00061a80 	.word	0x00061a80

08003b24 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be:
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
int32_t STTS22H_0_Probe(uint32_t Functions)
{
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	4604      	mov	r4, r0
  int32_t                 ret = BSP_ERROR_NONE;
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = STTS22H_I2C_ADD_L;
 8003b2e:	237f      	movs	r3, #127	; 0x7f
 8003b30:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = B_WL5M_SUBG_I2C_Init;
 8003b34:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <STTS22H_0_Probe+0x9c>)
 8003b36:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = B_WL5M_SUBG_I2C_DeInit;
 8003b38:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <STTS22H_0_Probe+0xa0>)
 8003b3a:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = B_WL5M_SUBG_I2C_ReadReg;
 8003b3c:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <STTS22H_0_Probe+0xa4>)
 8003b3e:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = B_WL5M_SUBG_I2C_WriteReg;
 8003b40:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <STTS22H_0_Probe+0xa8>)
 8003b42:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.GetTick     = B_WL5M_SUBG_GetTick;
 8003b44:	4b22      	ldr	r3, [pc, #136]	; (8003bd0 <STTS22H_0_Probe+0xac>)
 8003b46:	930b      	str	r3, [sp, #44]	; 0x2c

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 8003b48:	a905      	add	r1, sp, #20
 8003b4a:	4822      	ldr	r0, [pc, #136]	; (8003bd4 <STTS22H_0_Probe+0xb0>)
 8003b4c:	f000 fa7a 	bl	8004044 <STTS22H_RegisterBusIO>
 8003b50:	bb60      	cbnz	r0, 8003bac <STTS22H_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 8003b52:	f10d 0113 	add.w	r1, sp, #19
 8003b56:	481f      	ldr	r0, [pc, #124]	; (8003bd4 <STTS22H_0_Probe+0xb0>)
 8003b58:	f000 f9d5 	bl	8003f06 <STTS22H_ReadID>
 8003b5c:	4606      	mov	r6, r0
 8003b5e:	bb40      	cbnz	r0, 8003bb2 <STTS22H_0_Probe+0x8e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != STTS22H_ID)
 8003b60:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003b64:	2ba0      	cmp	r3, #160	; 0xa0
 8003b66:	d127      	bne.n	8003bb8 <STTS22H_0_Probe+0x94>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 8003b68:	4d1a      	ldr	r5, [pc, #104]	; (8003bd4 <STTS22H_0_Probe+0xb0>)
 8003b6a:	4669      	mov	r1, sp
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f000 f90d 	bl	8003d8c <STTS22H_GetCapabilities>

    EnvCtx[ENV_SENSOR_STTS22H_0].Functions = (uint32_t)cap.Temperature;
 8003b72:	f89d 3000 	ldrb.w	r3, [sp]
 8003b76:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <STTS22H_0_Probe+0xb4>)
 8003b78:	6013      	str	r3, [r2, #0]

    EnvCompObj[ENV_SENSOR_STTS22H_0] = &stts22h_obj_0;
 8003b7a:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <STTS22H_0_Probe+0xb8>)
 8003b7c:	6015      	str	r5, [r2, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[ENV_SENSOR_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <STTS22H_0_Probe+0xbc>)
 8003b80:	4918      	ldr	r1, [pc, #96]	; (8003be4 <STTS22H_0_Probe+0xc0>)
 8003b82:	6011      	str	r1, [r2, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8003b84:	f014 0f01 	tst.w	r4, #1
 8003b88:	d001      	beq.n	8003b8e <STTS22H_0_Probe+0x6a>
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d002      	beq.n	8003b94 <STTS22H_0_Probe+0x70>
        ret = BSP_ERROR_NONE;
      }
    }
  }
  return ret;
}
 8003b8e:	4630      	mov	r0, r6
 8003b90:	b00c      	add	sp, #48	; 0x30
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
      EnvFuncDrv[ENV_SENSOR_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <STTS22H_0_Probe+0xc4>)
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <STTS22H_0_Probe+0xc8>)
 8003b98:	601a      	str	r2, [r3, #0]
      if (EnvDrv[ENV_SENSOR_STTS22H_0]->Init(EnvCompObj[ENV_SENSOR_STTS22H_0]) != STTS22H_OK)
 8003b9a:	680b      	ldr	r3, [r1, #0]
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	4798      	blx	r3
 8003ba0:	4606      	mov	r6, r0
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d0f3      	beq.n	8003b8e <STTS22H_0_Probe+0x6a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ba6:	f06f 0604 	mvn.w	r6, #4
 8003baa:	e7f0      	b.n	8003b8e <STTS22H_0_Probe+0x6a>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003bac:	f06f 0606 	mvn.w	r6, #6
 8003bb0:	e7ed      	b.n	8003b8e <STTS22H_0_Probe+0x6a>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003bb2:	f06f 0606 	mvn.w	r6, #6
 8003bb6:	e7ea      	b.n	8003b8e <STTS22H_0_Probe+0x6a>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003bb8:	f06f 0606 	mvn.w	r6, #6
  return ret;
 8003bbc:	e7e7      	b.n	8003b8e <STTS22H_0_Probe+0x6a>
 8003bbe:	bf00      	nop
 8003bc0:	08003aad 	.word	0x08003aad
 8003bc4:	08003a05 	.word	0x08003a05
 8003bc8:	08003a51 	.word	0x08003a51
 8003bcc:	08003a3d 	.word	0x08003a3d
 8003bd0:	08003a65 	.word	0x08003a65
 8003bd4:	20003994 	.word	0x20003994
 8003bd8:	20003984 	.word	0x20003984
 8003bdc:	20003980 	.word	0x20003980
 8003be0:	20003988 	.word	0x20003988
 8003be4:	20000074 	.word	0x20000074
 8003be8:	2000398c 	.word	0x2000398c
 8003bec:	20000084 	.word	0x20000084

08003bf0 <BSP_ENV_SENSOR_Init>:
{
 8003bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bf4:	b085      	sub	sp, #20
  switch (Instance)
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	d147      	bne.n	8003c8a <BSP_ENV_SENSOR_Init+0x9a>
 8003bfa:	460e      	mov	r6, r1
 8003bfc:	4607      	mov	r7, r0
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 8003bfe:	4608      	mov	r0, r1
 8003c00:	f7ff ff90 	bl	8003b24 <STTS22H_0_Probe>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d146      	bne.n	8003c96 <BSP_ENV_SENSOR_Init+0xa6>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003c08:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <BSP_ENV_SENSOR_Init+0xb4>)
 8003c0a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4669      	mov	r1, sp
 8003c12:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <BSP_ENV_SENSOR_Init+0xb8>)
 8003c14:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 8003c18:	4798      	blx	r3
 8003c1a:	4681      	mov	r9, r0
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	d13d      	bne.n	8003c9c <BSP_ENV_SENSOR_Init+0xac>
      if (cap.Temperature == 1U)
 8003c20:	f89d 3000 	ldrb.w	r3, [sp]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d00b      	beq.n	8003c40 <BSP_ENV_SENSOR_Init+0x50>
  uint32_t component_functions = 0;
 8003c28:	46b8      	mov	r8, r7
      if (cap.Pressure == 1U)
 8003c2a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d009      	beq.n	8003c46 <BSP_ENV_SENSOR_Init+0x56>
      if (cap.Humidity == 1U)
 8003c32:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d008      	beq.n	8003c4c <BSP_ENV_SENSOR_Init+0x5c>
        component_functions |= ENV_TEMPERATURE;
 8003c3a:	463c      	mov	r4, r7
 8003c3c:	2501      	movs	r5, #1
 8003c3e:	e00a      	b.n	8003c56 <BSP_ENV_SENSOR_Init+0x66>
 8003c40:	f04f 0801 	mov.w	r8, #1
 8003c44:	e7f1      	b.n	8003c2a <BSP_ENV_SENSOR_Init+0x3a>
        component_functions |= ENV_PRESSURE;
 8003c46:	f048 0802 	orr.w	r8, r8, #2
 8003c4a:	e7f2      	b.n	8003c32 <BSP_ENV_SENSOR_Init+0x42>
        component_functions |= ENV_HUMIDITY;
 8003c4c:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 8003c50:	e7f3      	b.n	8003c3a <BSP_ENV_SENSOR_Init+0x4a>
    function = function << 1;
 8003c52:	006d      	lsls	r5, r5, #1
  for (i = 0; i < ENV_SENSOR_FUNCTIONS_NBR; i++)
 8003c54:	3401      	adds	r4, #1
 8003c56:	2c01      	cmp	r4, #1
 8003c58:	d819      	bhi.n	8003c8e <BSP_ENV_SENSOR_Init+0x9e>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8003c5a:	ea35 0306 	bics.w	r3, r5, r6
 8003c5e:	d1f8      	bne.n	8003c52 <BSP_ENV_SENSOR_Init+0x62>
 8003c60:	ea35 0308 	bics.w	r3, r5, r8
 8003c64:	d1f5      	bne.n	8003c52 <BSP_ENV_SENSOR_Init+0x62>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <BSP_ENV_SENSOR_Init+0xbc>)
 8003c68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003c6c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8003c70:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <BSP_ENV_SENSOR_Init+0xc0>)
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a0b      	ldr	r2, [pc, #44]	; (8003ca8 <BSP_ENV_SENSOR_Init+0xb8>)
 8003c7a:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 8003c7e:	4798      	blx	r3
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d0e6      	beq.n	8003c52 <BSP_ENV_SENSOR_Init+0x62>
        return BSP_ERROR_COMPONENT_FAILURE;
 8003c84:	f06f 0904 	mvn.w	r9, #4
 8003c88:	e001      	b.n	8003c8e <BSP_ENV_SENSOR_Init+0x9e>
      ret = BSP_ERROR_WRONG_PARAM;
 8003c8a:	f06f 0901 	mvn.w	r9, #1
}
 8003c8e:	4648      	mov	r0, r9
 8003c90:	b005      	add	sp, #20
 8003c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BSP_ERROR_NO_INIT;
 8003c96:	f04f 39ff 	mov.w	r9, #4294967295
 8003c9a:	e7f8      	b.n	8003c8e <BSP_ENV_SENSOR_Init+0x9e>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8003c9c:	f06f 0906 	mvn.w	r9, #6
 8003ca0:	e7f5      	b.n	8003c8e <BSP_ENV_SENSOR_Init+0x9e>
 8003ca2:	bf00      	nop
 8003ca4:	20003988 	.word	0x20003988
 8003ca8:	20003980 	.word	0x20003980
 8003cac:	08017f80 	.word	0x08017f80
 8003cb0:	2000398c 	.word	0x2000398c

08003cb4 <BSP_ENV_SENSOR_GetCapabilities>:
  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 8003cb4:	b970      	cbnz	r0, 8003cd4 <BSP_ENV_SENSOR_GetCapabilities+0x20>
{
 8003cb6:	b508      	push	{r3, lr}
 8003cb8:	4603      	mov	r3, r0
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8003cba:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <BSP_ENV_SENSOR_GetCapabilities+0x28>)
 8003cbc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8003cc0:	68d2      	ldr	r2, [r2, #12]
 8003cc2:	4807      	ldr	r0, [pc, #28]	; (8003ce0 <BSP_ENV_SENSOR_GetCapabilities+0x2c>)
 8003cc4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003cc8:	4790      	blx	r2
 8003cca:	b900      	cbnz	r0, 8003cce <BSP_ENV_SENSOR_GetCapabilities+0x1a>
}
 8003ccc:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003cce:	f06f 0006 	mvn.w	r0, #6
 8003cd2:	e7fb      	b.n	8003ccc <BSP_ENV_SENSOR_GetCapabilities+0x18>
    ret = BSP_ERROR_WRONG_PARAM;
 8003cd4:	f06f 0001 	mvn.w	r0, #1
}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20003988 	.word	0x20003988
 8003ce0:	20003980 	.word	0x20003980

08003ce4 <BSP_ENV_SENSOR_Enable>:
  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 8003ce4:	b9c0      	cbnz	r0, 8003d18 <BSP_ENV_SENSOR_Enable+0x34>
{
 8003ce6:	b508      	push	{r3, lr}
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <BSP_ENV_SENSOR_Enable+0x40>)
 8003cea:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8003cee:	ea31 0202 	bics.w	r2, r1, r2
 8003cf2:	d114      	bne.n	8003d1e <BSP_ENV_SENSOR_Enable+0x3a>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8003cf4:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <BSP_ENV_SENSOR_Enable+0x44>)
 8003cf6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003cfa:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003cfe:	490b      	ldr	r1, [pc, #44]	; (8003d2c <BSP_ENV_SENSOR_Enable+0x48>)
 8003d00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	490a      	ldr	r1, [pc, #40]	; (8003d30 <BSP_ENV_SENSOR_Enable+0x4c>)
 8003d08:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8003d0c:	4790      	blx	r2
 8003d0e:	b900      	cbnz	r0, 8003d12 <BSP_ENV_SENSOR_Enable+0x2e>
}
 8003d10:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d12:	f06f 0004 	mvn.w	r0, #4
 8003d16:	e7fb      	b.n	8003d10 <BSP_ENV_SENSOR_Enable+0x2c>
    ret = BSP_ERROR_WRONG_PARAM;
 8003d18:	f06f 0001 	mvn.w	r0, #1
}
 8003d1c:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8003d1e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003d22:	e7f5      	b.n	8003d10 <BSP_ENV_SENSOR_Enable+0x2c>
 8003d24:	20003984 	.word	0x20003984
 8003d28:	08017f80 	.word	0x08017f80
 8003d2c:	2000398c 	.word	0x2000398c
 8003d30:	20003980 	.word	0x20003980

08003d34 <BSP_ENV_SENSOR_GetValue>:
  if (Instance >= ENV_SENSOR_INSTANCES_NBR)
 8003d34:	b9d8      	cbnz	r0, 8003d6e <BSP_ENV_SENSOR_GetValue+0x3a>
{
 8003d36:	b508      	push	{r3, lr}
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4602      	mov	r2, r0
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8003d3e:	480f      	ldr	r0, [pc, #60]	; (8003d7c <BSP_ENV_SENSOR_GetValue+0x48>)
 8003d40:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8003d44:	ea33 0000 	bics.w	r0, r3, r0
 8003d48:	d114      	bne.n	8003d74 <BSP_ENV_SENSOR_GetValue+0x40>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8003d4a:	480d      	ldr	r0, [pc, #52]	; (8003d80 <BSP_ENV_SENSOR_GetValue+0x4c>)
 8003d4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d50:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003d54:	480b      	ldr	r0, [pc, #44]	; (8003d84 <BSP_ENV_SENSOR_GetValue+0x50>)
 8003d56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	480a      	ldr	r0, [pc, #40]	; (8003d88 <BSP_ENV_SENSOR_GetValue+0x54>)
 8003d5e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8003d62:	4798      	blx	r3
 8003d64:	b900      	cbnz	r0, 8003d68 <BSP_ENV_SENSOR_GetValue+0x34>
}
 8003d66:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d68:	f06f 0004 	mvn.w	r0, #4
 8003d6c:	e7fb      	b.n	8003d66 <BSP_ENV_SENSOR_GetValue+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 8003d6e:	f06f 0001 	mvn.w	r0, #1
}
 8003d72:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8003d74:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003d78:	e7f5      	b.n	8003d66 <BSP_ENV_SENSOR_GetValue+0x32>
 8003d7a:	bf00      	nop
 8003d7c:	20003984 	.word	0x20003984
 8003d80:	08017f80 	.word	0x08017f80
 8003d84:	2000398c 	.word	0x2000398c
 8003d88:	20003980 	.word	0x20003980

08003d8c <STTS22H_GetCapabilities>:
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	7088      	strb	r0, [r1, #2]
  Capabilities->Pressure    = 0;
 8003d90:	7048      	strb	r0, [r1, #1]
  Capabilities->Temperature = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	700b      	strb	r3, [r1, #0]
  Capabilities->LowPower    = 0;
 8003d96:	70c8      	strb	r0, [r1, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 8003d9c:	4a01      	ldr	r2, [pc, #4]	; (8003da4 <STTS22H_GetCapabilities+0x18>)
 8003d9e:	608a      	str	r2, [r1, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8003da0:	60cb      	str	r3, [r1, #12]
  return STTS22H_OK;
}
 8003da2:	4770      	bx	lr
 8003da4:	43480000 	.word	0x43480000

08003da8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dac:	461e      	mov	r6, r3
  uint16_t i;
  int32_t ret = STTS22H_OK;
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 8003dae:	6883      	ldr	r3, [r0, #8]
 8003db0:	b1b3      	cbz	r3, 8003de0 <ReadRegWrap+0x38>
  int32_t ret = STTS22H_OK;
 8003db2:	2300      	movs	r3, #0
      }
    }
  }

  return ret;
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < Length; i++)
 8003dba:	3401      	adds	r4, #1
 8003dbc:	b2a4      	uxth	r4, r4
 8003dbe:	42b4      	cmp	r4, r6
 8003dc0:	d2f8      	bcs.n	8003db4 <ReadRegWrap+0xc>
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8003dc2:	19e1      	adds	r1, r4, r7
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	eb08 0204 	add.w	r2, r8, r4
 8003dca:	b289      	uxth	r1, r1
 8003dcc:	7b28      	ldrb	r0, [r5, #12]
 8003dce:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8003dd2:	47e0      	blx	ip
      if (ret != STTS22H_OK)
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d0ef      	beq.n	8003dba <ReadRegWrap+0x12>
        return STTS22H_ERROR;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	e7e9      	b.n	8003db4 <ReadRegWrap+0xc>
 8003de0:	4605      	mov	r5, r0
 8003de2:	460f      	mov	r7, r1
 8003de4:	4690      	mov	r8, r2
  int32_t ret = STTS22H_OK;
 8003de6:	2300      	movs	r3, #0
    for (i = 0; i < Length; i++)
 8003de8:	461c      	mov	r4, r3
 8003dea:	e7e8      	b.n	8003dbe <ReadRegWrap+0x16>

08003dec <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df0:	461e      	mov	r6, r3
  uint16_t i;
  int32_t ret = STTS22H_OK;
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 8003df2:	6883      	ldr	r3, [r0, #8]
 8003df4:	b1b3      	cbz	r3, 8003e24 <WriteRegWrap+0x38>
  int32_t ret = STTS22H_OK;
 8003df6:	2300      	movs	r3, #0
      }
    }
  }

  return ret;
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < Length; i++)
 8003dfe:	3401      	adds	r4, #1
 8003e00:	b2a4      	uxth	r4, r4
 8003e02:	42b4      	cmp	r4, r6
 8003e04:	d2f8      	bcs.n	8003df8 <WriteRegWrap+0xc>
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8003e06:	19e1      	adds	r1, r4, r7
 8003e08:	2301      	movs	r3, #1
 8003e0a:	eb08 0204 	add.w	r2, r8, r4
 8003e0e:	b289      	uxth	r1, r1
 8003e10:	7b28      	ldrb	r0, [r5, #12]
 8003e12:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003e16:	47e0      	blx	ip
      if (ret != STTS22H_OK)
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d0ef      	beq.n	8003dfe <WriteRegWrap+0x12>
        return STTS22H_ERROR;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e22:	e7e9      	b.n	8003df8 <WriteRegWrap+0xc>
 8003e24:	4605      	mov	r5, r0
 8003e26:	460f      	mov	r7, r1
 8003e28:	4690      	mov	r8, r2
  int32_t ret = STTS22H_OK;
 8003e2a:	2300      	movs	r3, #0
    for (i = 0; i < Length; i++)
 8003e2c:	461c      	mov	r4, r3
 8003e2e:	e7e8      	b.n	8003e02 <WriteRegWrap+0x16>

08003e30 <STTS22H_Init>:
{
 8003e30:	b538      	push	{r3, r4, r5, lr}
 8003e32:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 8003e34:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8003e38:	b123      	cbz	r3, 8003e44 <STTS22H_Init+0x14>
  pObj->is_initialized = 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return STTS22H_OK;
 8003e40:	2000      	movs	r0, #0
}
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
    pObj->temp_odr = 1.0f;
 8003e44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e48:	62c3      	str	r3, [r0, #44]	; 0x2c
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 8003e4a:	f100 051c 	add.w	r5, r0, #28
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 fa2e 	bl	80042b2 <stts22h_block_data_update_set>
 8003e56:	b968      	cbnz	r0, 8003e74 <STTS22H_Init+0x44>
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	f000 fa5b 	bl	8004316 <stts22h_auto_increment_set>
 8003e60:	b958      	cbnz	r0, 8003e7a <STTS22H_Init+0x4a>
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8003e62:	2100      	movs	r1, #0
 8003e64:	4628      	mov	r0, r5
 8003e66:	f000 f925 	bl	80040b4 <stts22h_temp_data_rate_set>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d0e5      	beq.n	8003e3a <STTS22H_Init+0xa>
      return STTS22H_ERROR;
 8003e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e72:	e7e6      	b.n	8003e42 <STTS22H_Init+0x12>
      return STTS22H_ERROR;
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	e7e3      	b.n	8003e42 <STTS22H_Init+0x12>
      return STTS22H_ERROR;
 8003e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7e:	e7e0      	b.n	8003e42 <STTS22H_Init+0x12>

08003e80 <STTS22H_TEMP_SetOutputDataRate>:
{
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4605      	mov	r5, r0
 8003e84:	460c      	mov	r4, r1
            : (Odr <= 25.0f) ? STTS22H_25Hz
 8003e86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f7fd f916 	bl	80010bc <__aeabi_fcmple>
 8003e90:	b980      	cbnz	r0, 8003eb4 <STTS22H_TEMP_SetOutputDataRate+0x34>
 8003e92:	4910      	ldr	r1, [pc, #64]	; (8003ed4 <STTS22H_TEMP_SetOutputDataRate+0x54>)
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7fd f911 	bl	80010bc <__aeabi_fcmple>
 8003e9a:	b990      	cbnz	r0, 8003ec2 <STTS22H_TEMP_SetOutputDataRate+0x42>
 8003e9c:	490e      	ldr	r1, [pc, #56]	; (8003ed8 <STTS22H_TEMP_SetOutputDataRate+0x58>)
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f7fd f90c 	bl	80010bc <__aeabi_fcmple>
 8003ea4:	b978      	cbnz	r0, 8003ec6 <STTS22H_TEMP_SetOutputDataRate+0x46>
 8003ea6:	490d      	ldr	r1, [pc, #52]	; (8003edc <STTS22H_TEMP_SetOutputDataRate+0x5c>)
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f7fd f907 	bl	80010bc <__aeabi_fcmple>
 8003eae:	b160      	cbz	r0, 8003eca <STTS22H_TEMP_SetOutputDataRate+0x4a>
 8003eb0:	2122      	movs	r1, #34	; 0x22
 8003eb2:	e000      	b.n	8003eb6 <STTS22H_TEMP_SetOutputDataRate+0x36>
 8003eb4:	2104      	movs	r1, #4
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 8003eb6:	f105 001c 	add.w	r0, r5, #28
 8003eba:	f000 f8fb 	bl	80040b4 <stts22h_temp_data_rate_set>
 8003ebe:	b930      	cbnz	r0, 8003ece <STTS22H_TEMP_SetOutputDataRate+0x4e>
}
 8003ec0:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <= 25.0f) ? STTS22H_25Hz
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	e7f7      	b.n	8003eb6 <STTS22H_TEMP_SetOutputDataRate+0x36>
 8003ec6:	2112      	movs	r1, #18
 8003ec8:	e7f5      	b.n	8003eb6 <STTS22H_TEMP_SetOutputDataRate+0x36>
 8003eca:	2132      	movs	r1, #50	; 0x32
 8003ecc:	e7f3      	b.n	8003eb6 <STTS22H_TEMP_SetOutputDataRate+0x36>
    return STTS22H_ERROR;
 8003ece:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed2:	e7f5      	b.n	8003ec0 <STTS22H_TEMP_SetOutputDataRate+0x40>
 8003ed4:	41c80000 	.word	0x41c80000
 8003ed8:	42480000 	.word	0x42480000
 8003edc:	42c80000 	.word	0x42c80000

08003ee0 <STTS22H_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8003ee0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d009      	beq.n	8003efc <STTS22H_TEMP_Enable+0x1c>
{
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	4604      	mov	r4, r0
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 8003eec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003eee:	f7ff ffc7 	bl	8003e80 <STTS22H_TEMP_SetOutputDataRate>
 8003ef2:	b928      	cbnz	r0, 8003f00 <STTS22H_TEMP_Enable+0x20>
  pObj->temp_is_enabled = 1;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8003efa:	bd10      	pop	{r4, pc}
    return STTS22H_OK;
 8003efc:	2000      	movs	r0, #0
}
 8003efe:	4770      	bx	lr
    return STTS22H_ERROR;
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	e7f9      	b.n	8003efa <STTS22H_TEMP_Enable+0x1a>

08003f06 <STTS22H_ReadID>:
{
 8003f06:	b510      	push	{r4, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	460c      	mov	r4, r1
  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 8003f0c:	f10d 0107 	add.w	r1, sp, #7
 8003f10:	301c      	adds	r0, #28
 8003f12:	f000 f9f9 	bl	8004308 <stts22h_dev_id_get>
 8003f16:	b920      	cbnz	r0, 8003f22 <STTS22H_ReadID+0x1c>
  *Id = buf;
 8003f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f1c:	7023      	strb	r3, [r4, #0]
}
 8003f1e:	b002      	add	sp, #8
 8003f20:	bd10      	pop	{r4, pc}
    return STTS22H_ERROR;
 8003f22:	f04f 30ff 	mov.w	r0, #4294967295
 8003f26:	e7fa      	b.n	8003f1e <STTS22H_ReadID+0x18>

08003f28 <STTS22H_TEMP_GetOutputDataRate>:
{
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	460c      	mov	r4, r1
  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 8003f2e:	f10d 0107 	add.w	r1, sp, #7
 8003f32:	301c      	adds	r0, #28
 8003f34:	f000 f970 	bl	8004218 <stts22h_temp_data_rate_get>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d132      	bne.n	8003fa2 <STTS22H_TEMP_GetOutputDataRate+0x7a>
  switch (odr_low_level)
 8003f3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f40:	2b32      	cmp	r3, #50	; 0x32
 8003f42:	d831      	bhi.n	8003fa8 <STTS22H_TEMP_GetOutputDataRate+0x80>
 8003f44:	e8df f003 	tbb	[pc, r3]
 8003f48:	30211a1a 	.word	0x30211a1a
 8003f4c:	3030301d 	.word	0x3030301d
 8003f50:	30303030 	.word	0x30303030
 8003f54:	30303030 	.word	0x30303030
 8003f58:	30243030 	.word	0x30243030
 8003f5c:	30303030 	.word	0x30303030
 8003f60:	30303030 	.word	0x30303030
 8003f64:	30303030 	.word	0x30303030
 8003f68:	30273030 	.word	0x30273030
 8003f6c:	30303030 	.word	0x30303030
 8003f70:	30303030 	.word	0x30303030
 8003f74:	30303030 	.word	0x30303030
 8003f78:	3030      	.short	0x3030
 8003f7a:	2a          	.byte	0x2a
 8003f7b:	00          	.byte	0x00
      *Odr = 0.0f;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	6023      	str	r3, [r4, #0]
      break;
 8003f80:	e014      	b.n	8003fac <STTS22H_TEMP_GetOutputDataRate+0x84>
      *Odr = 1.0f;
 8003f82:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f86:	6023      	str	r3, [r4, #0]
      break;
 8003f88:	e010      	b.n	8003fac <STTS22H_TEMP_GetOutputDataRate+0x84>
      *Odr = 25.0f;
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <STTS22H_TEMP_GetOutputDataRate+0x88>)
 8003f8c:	6023      	str	r3, [r4, #0]
      break;
 8003f8e:	e00d      	b.n	8003fac <STTS22H_TEMP_GetOutputDataRate+0x84>
      *Odr = 50.0f;
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <STTS22H_TEMP_GetOutputDataRate+0x8c>)
 8003f92:	6023      	str	r3, [r4, #0]
      break;
 8003f94:	e00a      	b.n	8003fac <STTS22H_TEMP_GetOutputDataRate+0x84>
      *Odr = 100.0f;
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <STTS22H_TEMP_GetOutputDataRate+0x90>)
 8003f98:	6023      	str	r3, [r4, #0]
      break;
 8003f9a:	e007      	b.n	8003fac <STTS22H_TEMP_GetOutputDataRate+0x84>
      *Odr = 200.0f;
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <STTS22H_TEMP_GetOutputDataRate+0x94>)
 8003f9e:	6023      	str	r3, [r4, #0]
      break;
 8003fa0:	e004      	b.n	8003fac <STTS22H_TEMP_GetOutputDataRate+0x84>
    return STTS22H_ERROR;
 8003fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa6:	e001      	b.n	8003fac <STTS22H_TEMP_GetOutputDataRate+0x84>
  switch (odr_low_level)
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003fac:	b002      	add	sp, #8
 8003fae:	bd10      	pop	{r4, pc}
 8003fb0:	41c80000 	.word	0x41c80000
 8003fb4:	42480000 	.word	0x42480000
 8003fb8:	42c80000 	.word	0x42c80000
 8003fbc:	43480000 	.word	0x43480000

08003fc0 <STTS22H_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8003fc0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8003fc4:	b90b      	cbnz	r3, 8003fca <STTS22H_TEMP_Disable+0xa>
    return STTS22H_OK;
 8003fc6:	2000      	movs	r0, #0
}
 8003fc8:	4770      	bx	lr
{
 8003fca:	b510      	push	{r4, lr}
 8003fcc:	4604      	mov	r4, r0
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 8003fce:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8003fd2:	f7ff ffa9 	bl	8003f28 <STTS22H_TEMP_GetOutputDataRate>
 8003fd6:	b940      	cbnz	r0, 8003fea <STTS22H_TEMP_Disable+0x2a>
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8003fd8:	2100      	movs	r1, #0
 8003fda:	f104 001c 	add.w	r0, r4, #28
 8003fde:	f000 f869 	bl	80040b4 <stts22h_temp_data_rate_set>
 8003fe2:	b928      	cbnz	r0, 8003ff0 <STTS22H_TEMP_Disable+0x30>
  pObj->temp_is_enabled = 0;
 8003fe4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8003fe8:	bd10      	pop	{r4, pc}
    return STTS22H_ERROR;
 8003fea:	f04f 30ff 	mov.w	r0, #4294967295
 8003fee:	e7fb      	b.n	8003fe8 <STTS22H_TEMP_Disable+0x28>
    return STTS22H_ERROR;
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	e7f8      	b.n	8003fe8 <STTS22H_TEMP_Disable+0x28>

08003ff6 <STTS22H_DeInit>:
{
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8003ffa:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d003      	beq.n	800400a <STTS22H_DeInit+0x14>
  pObj->is_initialized = 0;
 8004002:	2000      	movs	r0, #0
 8004004:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8004008:	bd10      	pop	{r4, pc}
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800400a:	f7ff ffd9 	bl	8003fc0 <STTS22H_TEMP_Disable>
 800400e:	2800      	cmp	r0, #0
 8004010:	d0f7      	beq.n	8004002 <STTS22H_DeInit+0xc>
      return STTS22H_ERROR;
 8004012:	f04f 30ff 	mov.w	r0, #4294967295
 8004016:	e7f7      	b.n	8004008 <STTS22H_DeInit+0x12>

08004018 <STTS22H_TEMP_GetTemperature>:
{
 8004018:	b530      	push	{r4, r5, lr}
 800401a:	b083      	sub	sp, #12
 800401c:	460c      	mov	r4, r1
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800401e:	f10d 0106 	add.w	r1, sp, #6
 8004022:	301c      	adds	r0, #28
 8004024:	f000 f95e 	bl	80042e4 <stts22h_temperature_raw_get>
 8004028:	b940      	cbnz	r0, 800403c <STTS22H_TEMP_GetTemperature+0x24>
 800402a:	4605      	mov	r5, r0
  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800402c:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8004030:	f000 f836 	bl	80040a0 <stts22h_from_lsb_to_celsius>
 8004034:	6020      	str	r0, [r4, #0]
}
 8004036:	4628      	mov	r0, r5
 8004038:	b003      	add	sp, #12
 800403a:	bd30      	pop	{r4, r5, pc}
    return STTS22H_ERROR;
 800403c:	f04f 35ff 	mov.w	r5, #4294967295
 8004040:	e7f9      	b.n	8004036 <STTS22H_TEMP_GetTemperature+0x1e>
	...

08004044 <STTS22H_RegisterBusIO>:
  if (pObj == NULL)
 8004044:	b1b8      	cbz	r0, 8004076 <STTS22H_RegisterBusIO+0x32>
{
 8004046:	b508      	push	{r3, lr}
 8004048:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 800404a:	680a      	ldr	r2, [r1, #0]
 800404c:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800404e:	6848      	ldr	r0, [r1, #4]
 8004050:	6058      	str	r0, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004052:	6888      	ldr	r0, [r1, #8]
 8004054:	6098      	str	r0, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004056:	7b08      	ldrb	r0, [r1, #12]
 8004058:	7318      	strb	r0, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800405a:	6908      	ldr	r0, [r1, #16]
 800405c:	6118      	str	r0, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800405e:	6948      	ldr	r0, [r1, #20]
 8004060:	6158      	str	r0, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004062:	6989      	ldr	r1, [r1, #24]
 8004064:	6199      	str	r1, [r3, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8004066:	4907      	ldr	r1, [pc, #28]	; (8004084 <STTS22H_RegisterBusIO+0x40>)
 8004068:	6219      	str	r1, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800406a:	4907      	ldr	r1, [pc, #28]	; (8004088 <STTS22H_RegisterBusIO+0x44>)
 800406c:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800406e:	625b      	str	r3, [r3, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 8004070:	b122      	cbz	r2, 800407c <STTS22H_RegisterBusIO+0x38>
      ret = pObj->IO.Init();
 8004072:	4790      	blx	r2
}
 8004074:	bd08      	pop	{r3, pc}
    ret = STTS22H_ERROR;
 8004076:	f04f 30ff 	mov.w	r0, #4294967295
}
 800407a:	4770      	bx	lr
      ret = STTS22H_ERROR;
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004080:	e7f8      	b.n	8004074 <STTS22H_RegisterBusIO+0x30>
 8004082:	bf00      	nop
 8004084:	08003da9 	.word	0x08003da9
 8004088:	08003ded 	.word	0x08003ded

0800408c <stts22h_read_reg>:
  *
  */
int32_t stts22h_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800408c:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800408e:	6844      	ldr	r4, [r0, #4]
 8004090:	6880      	ldr	r0, [r0, #8]
 8004092:	47a0      	blx	r4

  return ret;
}
 8004094:	bd10      	pop	{r4, pc}

08004096 <stts22h_write_reg>:
  *
  */
int32_t stts22h_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004096:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004098:	6804      	ldr	r4, [r0, #0]
 800409a:	6880      	ldr	r0, [r0, #8]
 800409c:	47a0      	blx	r4

  return ret;
}
 800409e:	bd10      	pop	{r4, pc}

080040a0 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 80040a0:	b508      	push	{r3, lr}
  return ((float_t)lsb / 100.0f);
 80040a2:	f7fc fe0f 	bl	8000cc4 <__aeabi_i2f>
 80040a6:	4902      	ldr	r1, [pc, #8]	; (80040b0 <stts22h_from_lsb_to_celsius+0x10>)
 80040a8:	f7fc ff14 	bl	8000ed4 <__aeabi_fdiv>
}
 80040ac:	bd08      	pop	{r3, pc}
 80040ae:	bf00      	nop
 80040b0:	42c80000 	.word	0x42c80000

080040b4 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 80040b4:	b530      	push	{r4, r5, lr}
 80040b6:	b083      	sub	sp, #12
 80040b8:	4605      	mov	r5, r0
 80040ba:	460c      	mov	r4, r1
  stts22h_software_reset_t software_reset;
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80040bc:	2301      	movs	r3, #1
 80040be:	466a      	mov	r2, sp
 80040c0:	2104      	movs	r1, #4
 80040c2:	f7ff ffe3 	bl	800408c <stts22h_read_reg>

  if (ret == 0)
 80040c6:	4603      	mov	r3, r0
 80040c8:	b1b0      	cbz	r0, 80040f8 <stts22h_temp_data_rate_set+0x44>
  {
    ret = stts22h_read_reg(ctx, STTS22H_SOFTWARE_RESET,
                           (uint8_t *)&software_reset, 1);
  }

  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 80040ca:	2c01      	cmp	r4, #1
 80040cc:	d01c      	beq.n	8004108 <stts22h_temp_data_rate_set+0x54>
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (((val == STTS22H_25Hz)  || (val == STTS22H_50Hz)   ||
 80040ce:	2c02      	cmp	r4, #2
 80040d0:	d005      	beq.n	80040de <stts22h_temp_data_rate_set+0x2a>
 80040d2:	2c12      	cmp	r4, #18
 80040d4:	d003      	beq.n	80040de <stts22h_temp_data_rate_set+0x2a>
 80040d6:	2c22      	cmp	r4, #34	; 0x22
 80040d8:	d001      	beq.n	80040de <stts22h_temp_data_rate_set+0x2a>
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 80040da:	2c32      	cmp	r4, #50	; 0x32
 80040dc:	d105      	bne.n	80040ea <stts22h_temp_data_rate_set+0x36>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 80040de:	f89d 2000 	ldrb.w	r2, [sp]
       (val == STTS22H_100Hz) || (val == STTS22H_200Hz)) &&
 80040e2:	f012 0f04 	tst.w	r2, #4
 80040e6:	d100      	bne.n	80040ea <stts22h_temp_data_rate_set+0x36>
      (ctrl.freerun == PROPERTY_DISABLE) && (ret == 0))
 80040e8:	b36b      	cbz	r3, 8004146 <stts22h_temp_data_rate_set+0x92>
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
                              (uint8_t *)&software_reset, 1);
    }
  }

  if ((val == STTS22H_1Hz) && (ret == 0))
 80040ea:	2c04      	cmp	r4, #4
 80040ec:	d048      	beq.n	8004180 <stts22h_temp_data_rate_set+0xcc>
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
                              (uint8_t *)&software_reset, 1);
    }
  }

  if (ret == 0)
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d06f      	beq.n	80041d2 <stts22h_temp_data_rate_set+0x11e>
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
  }

  return ret;
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	b003      	add	sp, #12
 80040f6:	bd30      	pop	{r4, r5, pc}
    ret = stts22h_read_reg(ctx, STTS22H_SOFTWARE_RESET,
 80040f8:	2301      	movs	r3, #1
 80040fa:	aa01      	add	r2, sp, #4
 80040fc:	210c      	movs	r1, #12
 80040fe:	4628      	mov	r0, r5
 8004100:	f7ff ffc4 	bl	800408c <stts22h_read_reg>
 8004104:	4603      	mov	r3, r0
 8004106:	e7e0      	b.n	80040ca <stts22h_temp_data_rate_set+0x16>
  if ((val == STTS22H_ONE_SHOT) && (ret == 0))
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e0      	bne.n	80040ce <stts22h_temp_data_rate_set+0x1a>
    software_reset.sw_reset = PROPERTY_ENABLE;
 800410c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004110:	f043 0302 	orr.w	r3, r3, #2
 8004114:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 8004118:	2301      	movs	r3, #1
 800411a:	aa01      	add	r2, sp, #4
 800411c:	210c      	movs	r1, #12
 800411e:	4628      	mov	r0, r5
 8004120:	f7ff ffb9 	bl	8004096 <stts22h_write_reg>
    if (ret == 0)
 8004124:	4603      	mov	r3, r0
 8004126:	2800      	cmp	r0, #0
 8004128:	d1d1      	bne.n	80040ce <stts22h_temp_data_rate_set+0x1a>
      software_reset.sw_reset = PROPERTY_DISABLE;
 800412a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800412e:	f36f 0341 	bfc	r3, #1, #1
 8004132:	f88d 3004 	strb.w	r3, [sp, #4]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 8004136:	2301      	movs	r3, #1
 8004138:	aa01      	add	r2, sp, #4
 800413a:	210c      	movs	r1, #12
 800413c:	4628      	mov	r0, r5
 800413e:	f7ff ffaa 	bl	8004096 <stts22h_write_reg>
 8004142:	4603      	mov	r3, r0
 8004144:	e7c3      	b.n	80040ce <stts22h_temp_data_rate_set+0x1a>
    software_reset.sw_reset = PROPERTY_ENABLE;
 8004146:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800414a:	f043 0302 	orr.w	r3, r3, #2
 800414e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 8004152:	2301      	movs	r3, #1
 8004154:	aa01      	add	r2, sp, #4
 8004156:	210c      	movs	r1, #12
 8004158:	4628      	mov	r0, r5
 800415a:	f7ff ff9c 	bl	8004096 <stts22h_write_reg>
    if (ret == 0)
 800415e:	4603      	mov	r3, r0
 8004160:	2800      	cmp	r0, #0
 8004162:	d1c2      	bne.n	80040ea <stts22h_temp_data_rate_set+0x36>
      software_reset.sw_reset = PROPERTY_DISABLE;
 8004164:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004168:	f36f 0341 	bfc	r3, #1, #1
 800416c:	f88d 3004 	strb.w	r3, [sp, #4]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 8004170:	2301      	movs	r3, #1
 8004172:	aa01      	add	r2, sp, #4
 8004174:	210c      	movs	r1, #12
 8004176:	4628      	mov	r0, r5
 8004178:	f7ff ff8d 	bl	8004096 <stts22h_write_reg>
 800417c:	4603      	mov	r3, r0
 800417e:	e7b4      	b.n	80040ea <stts22h_temp_data_rate_set+0x36>
  if ((val == STTS22H_1Hz) && (ret == 0))
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1b4      	bne.n	80040ee <stts22h_temp_data_rate_set+0x3a>
    software_reset.sw_reset = PROPERTY_ENABLE;
 8004184:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004188:	f043 0302 	orr.w	r3, r3, #2
 800418c:	f88d 3004 	strb.w	r3, [sp, #4]
    software_reset.low_odr_enable = PROPERTY_ENABLE;
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004196:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 800419a:	2301      	movs	r3, #1
 800419c:	aa01      	add	r2, sp, #4
 800419e:	210c      	movs	r1, #12
 80041a0:	4628      	mov	r0, r5
 80041a2:	f7ff ff78 	bl	8004096 <stts22h_write_reg>
    if (ret == 0)
 80041a6:	4603      	mov	r3, r0
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d1a0      	bne.n	80040ee <stts22h_temp_data_rate_set+0x3a>
      software_reset.sw_reset = PROPERTY_DISABLE;
 80041ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041b0:	f36f 0341 	bfc	r3, #1, #1
 80041b4:	f88d 3004 	strb.w	r3, [sp, #4]
      software_reset.low_odr_enable = PROPERTY_ENABLE;
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041be:	f88d 3004 	strb.w	r3, [sp, #4]
      ret = stts22h_write_reg(ctx, STTS22H_SOFTWARE_RESET,
 80041c2:	2301      	movs	r3, #1
 80041c4:	aa01      	add	r2, sp, #4
 80041c6:	210c      	movs	r1, #12
 80041c8:	4628      	mov	r0, r5
 80041ca:	f7ff ff64 	bl	8004096 <stts22h_write_reg>
 80041ce:	4603      	mov	r3, r0
 80041d0:	e78d      	b.n	80040ee <stts22h_temp_data_rate_set+0x3a>
    ctrl.one_shot = (uint8_t)val & 0x01U;
 80041d2:	f89d 3000 	ldrb.w	r3, [sp]
 80041d6:	f364 0300 	bfi	r3, r4, #0, #1
 80041da:	f88d 3000 	strb.w	r3, [sp]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 80041de:	f3c4 0240 	ubfx	r2, r4, #1, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f362 0382 	bfi	r3, r2, #2, #1
 80041e8:	f88d 3000 	strb.w	r3, [sp]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 80041ec:	f3c4 0280 	ubfx	r2, r4, #2, #1
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f362 13c7 	bfi	r3, r2, #7, #1
 80041f6:	f88d 3000 	strb.w	r3, [sp]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 80041fa:	f3c4 1401 	ubfx	r4, r4, #4, #2
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f364 1305 	bfi	r3, r4, #4, #2
 8004204:	f88d 3000 	strb.w	r3, [sp]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8004208:	2301      	movs	r3, #1
 800420a:	466a      	mov	r2, sp
 800420c:	2104      	movs	r1, #4
 800420e:	4628      	mov	r0, r5
 8004210:	f7ff ff41 	bl	8004096 <stts22h_write_reg>
 8004214:	4603      	mov	r3, r0
  return ret;
 8004216:	e76c      	b.n	80040f2 <stts22h_temp_data_rate_set+0x3e>

08004218 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 8004218:	b510      	push	{r4, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	460c      	mov	r4, r1
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800421e:	2301      	movs	r3, #1
 8004220:	aa01      	add	r2, sp, #4
 8004222:	2104      	movs	r1, #4
 8004224:	f7ff ff32 	bl	800408c <stts22h_read_reg>
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 8004228:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800422c:	f002 0301 	and.w	r3, r2, #1
 8004230:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8004234:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004238:	09d1      	lsrs	r1, r2, #7
 800423a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
                                                 2) |
          (ctrl.avg << 4))
 800423e:	f002 0230 	and.w	r2, r2, #48	; 0x30
                                                 2) |
 8004242:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 8004244:	2b32      	cmp	r3, #50	; 0x32
 8004246:	d831      	bhi.n	80042ac <stts22h_temp_data_rate_get+0x94>
 8004248:	e8df f003 	tbb	[pc, r3]
 800424c:	30241e1a 	.word	0x30241e1a
 8004250:	30303021 	.word	0x30303021
 8004254:	30303030 	.word	0x30303030
 8004258:	30303030 	.word	0x30303030
 800425c:	30273030 	.word	0x30273030
 8004260:	30303030 	.word	0x30303030
 8004264:	30303030 	.word	0x30303030
 8004268:	30303030 	.word	0x30303030
 800426c:	302a3030 	.word	0x302a3030
 8004270:	30303030 	.word	0x30303030
 8004274:	30303030 	.word	0x30303030
 8004278:	30303030 	.word	0x30303030
 800427c:	3030      	.short	0x3030
 800427e:	2d          	.byte	0x2d
 800427f:	00          	.byte	0x00
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 8004280:	2300      	movs	r3, #0
 8004282:	7023      	strb	r3, [r4, #0]
      *val = STTS22H_POWER_DOWN;
      break;
  }

  return ret;
}
 8004284:	b002      	add	sp, #8
 8004286:	bd10      	pop	{r4, pc}
      *val = STTS22H_ONE_SHOT;
 8004288:	2301      	movs	r3, #1
 800428a:	7023      	strb	r3, [r4, #0]
      break;
 800428c:	e7fa      	b.n	8004284 <stts22h_temp_data_rate_get+0x6c>
      *val = STTS22H_1Hz;
 800428e:	2304      	movs	r3, #4
 8004290:	7023      	strb	r3, [r4, #0]
      break;
 8004292:	e7f7      	b.n	8004284 <stts22h_temp_data_rate_get+0x6c>
      *val = STTS22H_25Hz;
 8004294:	2302      	movs	r3, #2
 8004296:	7023      	strb	r3, [r4, #0]
      break;
 8004298:	e7f4      	b.n	8004284 <stts22h_temp_data_rate_get+0x6c>
      *val = STTS22H_50Hz;
 800429a:	2312      	movs	r3, #18
 800429c:	7023      	strb	r3, [r4, #0]
      break;
 800429e:	e7f1      	b.n	8004284 <stts22h_temp_data_rate_get+0x6c>
      *val = STTS22H_100Hz;
 80042a0:	2322      	movs	r3, #34	; 0x22
 80042a2:	7023      	strb	r3, [r4, #0]
      break;
 80042a4:	e7ee      	b.n	8004284 <stts22h_temp_data_rate_get+0x6c>
      *val = STTS22H_200Hz;
 80042a6:	2332      	movs	r3, #50	; 0x32
 80042a8:	7023      	strb	r3, [r4, #0]
      break;
 80042aa:	e7eb      	b.n	8004284 <stts22h_temp_data_rate_get+0x6c>
      *val = STTS22H_POWER_DOWN;
 80042ac:	2300      	movs	r3, #0
 80042ae:	7023      	strb	r3, [r4, #0]
  return ret;
 80042b0:	e7e8      	b.n	8004284 <stts22h_temp_data_rate_get+0x6c>

080042b2 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80042b2:	b530      	push	{r4, r5, lr}
 80042b4:	b083      	sub	sp, #12
 80042b6:	4604      	mov	r4, r0
 80042b8:	460d      	mov	r5, r1
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80042ba:	2301      	movs	r3, #1
 80042bc:	aa01      	add	r2, sp, #4
 80042be:	2104      	movs	r1, #4
 80042c0:	f7ff fee4 	bl	800408c <stts22h_read_reg>

  if (ret == 0)
 80042c4:	b108      	cbz	r0, 80042ca <stts22h_block_data_update_set+0x18>
    ctrl.bdu = val;
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
  }

  return ret;
}
 80042c6:	b003      	add	sp, #12
 80042c8:	bd30      	pop	{r4, r5, pc}
    ctrl.bdu = val;
 80042ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80042ce:	f365 1386 	bfi	r3, r5, #6, #1
 80042d2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80042d6:	2301      	movs	r3, #1
 80042d8:	aa01      	add	r2, sp, #4
 80042da:	2104      	movs	r1, #4
 80042dc:	4620      	mov	r0, r4
 80042de:	f7ff feda 	bl	8004096 <stts22h_write_reg>
  return ret;
 80042e2:	e7f0      	b.n	80042c6 <stts22h_block_data_update_set+0x14>

080042e4 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80042e4:	b510      	push	{r4, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 80042ea:	2302      	movs	r3, #2
 80042ec:	aa01      	add	r2, sp, #4
 80042ee:	2106      	movs	r1, #6
 80042f0:	f7ff fecc 	bl	800408c <stts22h_read_reg>
  *val = (int16_t)buff[1];
 80042f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80042f8:	8022      	strh	r2, [r4, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80042fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80042fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004302:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8004304:	b002      	add	sp, #8
 8004306:	bd10      	pop	{r4, pc}

08004308 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004308:	b508      	push	{r3, lr}
 800430a:	460a      	mov	r2, r1
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800430c:	2301      	movs	r3, #1
 800430e:	4619      	mov	r1, r3
 8004310:	f7ff febc 	bl	800408c <stts22h_read_reg>

  return ret;
}
 8004314:	bd08      	pop	{r3, pc}

08004316 <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004316:	b530      	push	{r4, r5, lr}
 8004318:	b083      	sub	sp, #12
 800431a:	4604      	mov	r4, r0
 800431c:	460d      	mov	r5, r1
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800431e:	2301      	movs	r3, #1
 8004320:	aa01      	add	r2, sp, #4
 8004322:	2104      	movs	r1, #4
 8004324:	f7ff feb2 	bl	800408c <stts22h_read_reg>

  if (ret == 0)
 8004328:	b108      	cbz	r0, 800432e <stts22h_auto_increment_set+0x18>
    ctrl.if_add_inc = (uint8_t)val;
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
  }

  return ret;
}
 800432a:	b003      	add	sp, #12
 800432c:	bd30      	pop	{r4, r5, pc}
    ctrl.if_add_inc = (uint8_t)val;
 800432e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004332:	f365 03c3 	bfi	r3, r5, #3, #1
 8004336:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800433a:	2301      	movs	r3, #1
 800433c:	aa01      	add	r2, sp, #4
 800433e:	2104      	movs	r1, #4
 8004340:	4620      	mov	r0, r4
 8004342:	f7ff fea8 	bl	8004096 <stts22h_write_reg>
  return ret;
 8004346:	e7f0      	b.n	800432a <stts22h_auto_increment_set+0x14>

08004348 <ISM330DHCX_GetCapabilities>:
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004348:	2301      	movs	r3, #1
 800434a:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 800434c:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
 800434e:	2000      	movs	r0, #0
 8004350:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8004352:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 4000;
 8004354:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004358:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 800435a:	2310      	movs	r3, #16
 800435c:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 800435e:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8004360:	4b02      	ldr	r3, [pc, #8]	; (800436c <ISM330DHCX_GetCapabilities+0x24>)
 8004362:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8004364:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004366:	2300      	movs	r3, #0
 8004368:	618b      	str	r3, [r1, #24]
  return ISM330DHCX_OK;
}
 800436a:	4770      	bx	lr
 800436c:	45d05800 	.word	0x45d05800

08004370 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4605      	mov	r5, r0
 8004374:	460c      	mov	r4, r1
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8004376:	4922      	ldr	r1, [pc, #136]	; (8004400 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>)
 8004378:	4620      	mov	r0, r4
 800437a:	f7fc fe9f 	bl	80010bc <__aeabi_fcmple>
 800437e:	bb48      	cbnz	r0, 80043d4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004380:	4920      	ldr	r1, [pc, #128]	; (8004404 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x94>)
 8004382:	4620      	mov	r0, r4
 8004384:	f7fc fe9a 	bl	80010bc <__aeabi_fcmple>
 8004388:	bb48      	cbnz	r0, 80043de <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x6e>
 800438a:	491f      	ldr	r1, [pc, #124]	; (8004408 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x98>)
 800438c:	4620      	mov	r0, r4
 800438e:	f7fc fe95 	bl	80010bc <__aeabi_fcmple>
 8004392:	bb30      	cbnz	r0, 80043e2 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x72>
 8004394:	491d      	ldr	r1, [pc, #116]	; (800440c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x9c>)
 8004396:	4620      	mov	r0, r4
 8004398:	f7fc fe90 	bl	80010bc <__aeabi_fcmple>
 800439c:	bb18      	cbnz	r0, 80043e6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x76>
 800439e:	491c      	ldr	r1, [pc, #112]	; (8004410 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa0>)
 80043a0:	4620      	mov	r0, r4
 80043a2:	f7fc fe8b 	bl	80010bc <__aeabi_fcmple>
 80043a6:	bb00      	cbnz	r0, 80043ea <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80043a8:	491a      	ldr	r1, [pc, #104]	; (8004414 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa4>)
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7fc fe86 	bl	80010bc <__aeabi_fcmple>
 80043b0:	b9e8      	cbnz	r0, 80043ee <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7e>
 80043b2:	4919      	ldr	r1, [pc, #100]	; (8004418 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa8>)
 80043b4:	4620      	mov	r0, r4
 80043b6:	f7fc fe81 	bl	80010bc <__aeabi_fcmple>
 80043ba:	b9d0      	cbnz	r0, 80043f2 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x82>
 80043bc:	4917      	ldr	r1, [pc, #92]	; (800441c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xac>)
 80043be:	4620      	mov	r0, r4
 80043c0:	f7fc fe7c 	bl	80010bc <__aeabi_fcmple>
 80043c4:	b9b8      	cbnz	r0, 80043f6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x86>
 80043c6:	4916      	ldr	r1, [pc, #88]	; (8004420 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xb0>)
 80043c8:	4620      	mov	r0, r4
 80043ca:	f7fc fe77 	bl	80010bc <__aeabi_fcmple>
 80043ce:	b1a0      	cbz	r0, 80043fa <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x8a>
 80043d0:	2309      	movs	r3, #9
 80043d2:	e000      	b.n	80043d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x66>
 80043d4:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80043d6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
}
 80043da:	2000      	movs	r0, #0
 80043dc:	bd38      	pop	{r3, r4, r5, pc}
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80043de:	2302      	movs	r3, #2
 80043e0:	e7f9      	b.n	80043d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x66>
 80043e2:	2303      	movs	r3, #3
 80043e4:	e7f7      	b.n	80043d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x66>
 80043e6:	2304      	movs	r3, #4
 80043e8:	e7f5      	b.n	80043d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x66>
 80043ea:	2305      	movs	r3, #5
 80043ec:	e7f3      	b.n	80043d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x66>
 80043ee:	2306      	movs	r3, #6
 80043f0:	e7f1      	b.n	80043d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x66>
 80043f2:	2307      	movs	r3, #7
 80043f4:	e7ef      	b.n	80043d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x66>
 80043f6:	2308      	movs	r3, #8
 80043f8:	e7ed      	b.n	80043d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x66>
 80043fa:	230a      	movs	r3, #10
 80043fc:	e7eb      	b.n	80043d6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x66>
 80043fe:	bf00      	nop
 8004400:	41480000 	.word	0x41480000
 8004404:	41d00000 	.word	0x41d00000
 8004408:	42500000 	.word	0x42500000
 800440c:	42d00000 	.word	0x42d00000
 8004410:	43500000 	.word	0x43500000
 8004414:	43d00000 	.word	0x43d00000
 8004418:	44504000 	.word	0x44504000
 800441c:	44d04000 	.word	0x44d04000
 8004420:	45504000 	.word	0x45504000

08004424 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4605      	mov	r5, r0
 8004428:	460c      	mov	r4, r1
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800442a:	4922      	ldr	r1, [pc, #136]	; (80044b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>)
 800442c:	4620      	mov	r0, r4
 800442e:	f7fc fe45 	bl	80010bc <__aeabi_fcmple>
 8004432:	bb48      	cbnz	r0, 8004488 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004434:	4920      	ldr	r1, [pc, #128]	; (80044b8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x94>)
 8004436:	4620      	mov	r0, r4
 8004438:	f7fc fe40 	bl	80010bc <__aeabi_fcmple>
 800443c:	bb48      	cbnz	r0, 8004492 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x6e>
 800443e:	491f      	ldr	r1, [pc, #124]	; (80044bc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x98>)
 8004440:	4620      	mov	r0, r4
 8004442:	f7fc fe3b 	bl	80010bc <__aeabi_fcmple>
 8004446:	bb30      	cbnz	r0, 8004496 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x72>
 8004448:	491d      	ldr	r1, [pc, #116]	; (80044c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x9c>)
 800444a:	4620      	mov	r0, r4
 800444c:	f7fc fe36 	bl	80010bc <__aeabi_fcmple>
 8004450:	bb18      	cbnz	r0, 800449a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x76>
 8004452:	491c      	ldr	r1, [pc, #112]	; (80044c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa0>)
 8004454:	4620      	mov	r0, r4
 8004456:	f7fc fe31 	bl	80010bc <__aeabi_fcmple>
 800445a:	bb00      	cbnz	r0, 800449e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800445c:	491a      	ldr	r1, [pc, #104]	; (80044c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa4>)
 800445e:	4620      	mov	r0, r4
 8004460:	f7fc fe2c 	bl	80010bc <__aeabi_fcmple>
 8004464:	b9e8      	cbnz	r0, 80044a2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7e>
 8004466:	4919      	ldr	r1, [pc, #100]	; (80044cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa8>)
 8004468:	4620      	mov	r0, r4
 800446a:	f7fc fe27 	bl	80010bc <__aeabi_fcmple>
 800446e:	b9d0      	cbnz	r0, 80044a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x82>
 8004470:	4917      	ldr	r1, [pc, #92]	; (80044d0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xac>)
 8004472:	4620      	mov	r0, r4
 8004474:	f7fc fe22 	bl	80010bc <__aeabi_fcmple>
 8004478:	b9b8      	cbnz	r0, 80044aa <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x86>
 800447a:	4916      	ldr	r1, [pc, #88]	; (80044d4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xb0>)
 800447c:	4620      	mov	r0, r4
 800447e:	f7fc fe1d 	bl	80010bc <__aeabi_fcmple>
 8004482:	b1a0      	cbz	r0, 80044ae <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x8a>
 8004484:	2309      	movs	r3, #9
 8004486:	e000      	b.n	800448a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x66>
 8004488:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800448a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
}
 800448e:	2000      	movs	r0, #0
 8004490:	bd38      	pop	{r3, r4, r5, pc}
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8004492:	2302      	movs	r3, #2
 8004494:	e7f9      	b.n	800448a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x66>
 8004496:	2303      	movs	r3, #3
 8004498:	e7f7      	b.n	800448a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x66>
 800449a:	2304      	movs	r3, #4
 800449c:	e7f5      	b.n	800448a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x66>
 800449e:	2305      	movs	r3, #5
 80044a0:	e7f3      	b.n	800448a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x66>
 80044a2:	2306      	movs	r3, #6
 80044a4:	e7f1      	b.n	800448a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x66>
 80044a6:	2307      	movs	r3, #7
 80044a8:	e7ef      	b.n	800448a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x66>
 80044aa:	2308      	movs	r3, #8
 80044ac:	e7ed      	b.n	800448a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x66>
 80044ae:	230a      	movs	r3, #10
 80044b0:	e7eb      	b.n	800448a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x66>
 80044b2:	bf00      	nop
 80044b4:	41480000 	.word	0x41480000
 80044b8:	41d00000 	.word	0x41d00000
 80044bc:	42500000 	.word	0x42500000
 80044c0:	42d00000 	.word	0x42d00000
 80044c4:	43500000 	.word	0x43500000
 80044c8:	43d00000 	.word	0x43d00000
 80044cc:	44504000 	.word	0x44504000
 80044d0:	44d04000 	.word	0x44d04000
 80044d4:	45504000 	.word	0x45504000

080044d8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80044d8:	b510      	push	{r4, lr}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80044da:	6944      	ldr	r4, [r0, #20]
 80044dc:	7b00      	ldrb	r0, [r0, #12]
 80044de:	47a0      	blx	r4
}
 80044e0:	bd10      	pop	{r4, pc}

080044e2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80044e2:	b510      	push	{r4, lr}
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80044e4:	6904      	ldr	r4, [r0, #16]
 80044e6:	7b00      	ldrb	r0, [r0, #12]
 80044e8:	47a0      	blx	r4
}
 80044ea:	bd10      	pop	{r4, pc}

080044ec <ISM330DHCX_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 80044ec:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d00b      	beq.n	800450c <ISM330DHCX_ACC_Enable+0x20>
{
 80044f4:	b510      	push	{r4, lr}
 80044f6:	4604      	mov	r4, r0
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 80044f8:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
 80044fc:	3020      	adds	r0, #32
 80044fe:	f000 fea8 	bl	8005252 <ism330dhcx_xl_data_rate_set>
 8004502:	b928      	cbnz	r0, 8004510 <ISM330DHCX_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8004504:	2301      	movs	r3, #1
 8004506:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 800450a:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 800450c:	2000      	movs	r0, #0
}
 800450e:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	e7f9      	b.n	800450a <ISM330DHCX_ACC_Enable+0x1e>
	...

08004518 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
{
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4605      	mov	r5, r0
 800451c:	460c      	mov	r4, r1
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 800451e:	4924      	ldr	r1, [pc, #144]	; (80045b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x98>)
 8004520:	4620      	mov	r0, r4
 8004522:	f7fc fdcb 	bl	80010bc <__aeabi_fcmple>
 8004526:	bb48      	cbnz	r0, 800457c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004528:	4922      	ldr	r1, [pc, #136]	; (80045b4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x9c>)
 800452a:	4620      	mov	r0, r4
 800452c:	f7fc fdc6 	bl	80010bc <__aeabi_fcmple>
 8004530:	bb58      	cbnz	r0, 800458a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x72>
 8004532:	4921      	ldr	r1, [pc, #132]	; (80045b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa0>)
 8004534:	4620      	mov	r0, r4
 8004536:	f7fc fdc1 	bl	80010bc <__aeabi_fcmple>
 800453a:	bb40      	cbnz	r0, 800458e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x76>
 800453c:	491f      	ldr	r1, [pc, #124]	; (80045bc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa4>)
 800453e:	4620      	mov	r0, r4
 8004540:	f7fc fdbc 	bl	80010bc <__aeabi_fcmple>
 8004544:	bb28      	cbnz	r0, 8004592 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004546:	491e      	ldr	r1, [pc, #120]	; (80045c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa8>)
 8004548:	4620      	mov	r0, r4
 800454a:	f7fc fdb7 	bl	80010bc <__aeabi_fcmple>
 800454e:	bb10      	cbnz	r0, 8004596 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7e>
 8004550:	491c      	ldr	r1, [pc, #112]	; (80045c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xac>)
 8004552:	4620      	mov	r0, r4
 8004554:	f7fc fdb2 	bl	80010bc <__aeabi_fcmple>
 8004558:	b9f8      	cbnz	r0, 800459a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x82>
 800455a:	491b      	ldr	r1, [pc, #108]	; (80045c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xb0>)
 800455c:	4620      	mov	r0, r4
 800455e:	f7fc fdad 	bl	80010bc <__aeabi_fcmple>
 8004562:	b9e0      	cbnz	r0, 800459e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x86>
 8004564:	4919      	ldr	r1, [pc, #100]	; (80045cc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xb4>)
 8004566:	4620      	mov	r0, r4
 8004568:	f7fc fda8 	bl	80010bc <__aeabi_fcmple>
 800456c:	b9c8      	cbnz	r0, 80045a2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x8a>
 800456e:	4918      	ldr	r1, [pc, #96]	; (80045d0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xb8>)
 8004570:	4620      	mov	r0, r4
 8004572:	f7fc fda3 	bl	80010bc <__aeabi_fcmple>
 8004576:	b1b0      	cbz	r0, 80045a6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x8e>
 8004578:	2109      	movs	r1, #9
 800457a:	e000      	b.n	800457e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x66>
 800457c:	2101      	movs	r1, #1
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800457e:	f105 0020 	add.w	r0, r5, #32
 8004582:	f000 fe66 	bl	8005252 <ism330dhcx_xl_data_rate_set>
 8004586:	b980      	cbnz	r0, 80045aa <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x92>
}
 8004588:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 800458a:	2102      	movs	r1, #2
 800458c:	e7f7      	b.n	800457e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x66>
 800458e:	2103      	movs	r1, #3
 8004590:	e7f5      	b.n	800457e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x66>
 8004592:	2104      	movs	r1, #4
 8004594:	e7f3      	b.n	800457e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x66>
 8004596:	2105      	movs	r1, #5
 8004598:	e7f1      	b.n	800457e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x66>
 800459a:	2106      	movs	r1, #6
 800459c:	e7ef      	b.n	800457e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x66>
 800459e:	2107      	movs	r1, #7
 80045a0:	e7ed      	b.n	800457e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x66>
 80045a2:	2108      	movs	r1, #8
 80045a4:	e7eb      	b.n	800457e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x66>
 80045a6:	210a      	movs	r1, #10
 80045a8:	e7e9      	b.n	800457e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x66>
    return ISM330DHCX_ERROR;
 80045aa:	f04f 30ff 	mov.w	r0, #4294967295
 80045ae:	e7eb      	b.n	8004588 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x70>
 80045b0:	41480000 	.word	0x41480000
 80045b4:	41d00000 	.word	0x41d00000
 80045b8:	42500000 	.word	0x42500000
 80045bc:	42d00000 	.word	0x42d00000
 80045c0:	43500000 	.word	0x43500000
 80045c4:	43d00000 	.word	0x43d00000
 80045c8:	44504000 	.word	0x44504000
 80045cc:	44d04000 	.word	0x44d04000
 80045d0:	45504000 	.word	0x45504000

080045d4 <ISM330DHCX_ACC_SetOutputDataRate>:
{
 80045d4:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 80045d6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d002      	beq.n	80045e4 <ISM330DHCX_ACC_SetOutputDataRate+0x10>
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80045de:	f7ff fec7 	bl	8004370 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
}
 80045e2:	bd08      	pop	{r3, pc}
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80045e4:	f7ff ff98 	bl	8004518 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 80045e8:	e7fb      	b.n	80045e2 <ISM330DHCX_ACC_SetOutputDataRate+0xe>

080045ea <ISM330DHCX_ACC_SetFullScale>:
{
 80045ea:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? ISM330DHCX_4g
 80045ec:	2902      	cmp	r1, #2
 80045ee:	dd05      	ble.n	80045fc <ISM330DHCX_ACC_SetFullScale+0x12>
 80045f0:	2904      	cmp	r1, #4
 80045f2:	dd09      	ble.n	8004608 <ISM330DHCX_ACC_SetFullScale+0x1e>
 80045f4:	2908      	cmp	r1, #8
 80045f6:	dc09      	bgt.n	800460c <ISM330DHCX_ACC_SetFullScale+0x22>
 80045f8:	2103      	movs	r1, #3
 80045fa:	e000      	b.n	80045fe <ISM330DHCX_ACC_SetFullScale+0x14>
 80045fc:	2100      	movs	r1, #0
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80045fe:	3020      	adds	r0, #32
 8004600:	f000 fbb8 	bl	8004d74 <ism330dhcx_xl_full_scale_set>
 8004604:	b920      	cbnz	r0, 8004610 <ISM330DHCX_ACC_SetFullScale+0x26>
}
 8004606:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? ISM330DHCX_4g
 8004608:	2102      	movs	r1, #2
 800460a:	e7f8      	b.n	80045fe <ISM330DHCX_ACC_SetFullScale+0x14>
 800460c:	2101      	movs	r1, #1
 800460e:	e7f6      	b.n	80045fe <ISM330DHCX_ACC_SetFullScale+0x14>
    return ISM330DHCX_ERROR;
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	e7f7      	b.n	8004606 <ISM330DHCX_ACC_SetFullScale+0x1c>

08004616 <ISM330DHCX_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 8004616:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800461a:	2b01      	cmp	r3, #1
 800461c:	d00b      	beq.n	8004636 <ISM330DHCX_GYRO_Enable+0x20>
{
 800461e:	b510      	push	{r4, lr}
 8004620:	4604      	mov	r4, r0
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8004622:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8004626:	3020      	adds	r0, #32
 8004628:	f000 fefa 	bl	8005420 <ism330dhcx_gy_data_rate_set>
 800462c:	b928      	cbnz	r0, 800463a <ISM330DHCX_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 800462e:	2301      	movs	r3, #1
 8004630:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 8004634:	bd10      	pop	{r4, pc}
    return ISM330DHCX_OK;
 8004636:	2000      	movs	r0, #0
}
 8004638:	4770      	bx	lr
    return ISM330DHCX_ERROR;
 800463a:	f04f 30ff 	mov.w	r0, #4294967295
 800463e:	e7f9      	b.n	8004634 <ISM330DHCX_GYRO_Enable+0x1e>

08004640 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
{
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4605      	mov	r5, r0
 8004644:	460c      	mov	r4, r1
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8004646:	4924      	ldr	r1, [pc, #144]	; (80046d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x98>)
 8004648:	4620      	mov	r0, r4
 800464a:	f7fc fd37 	bl	80010bc <__aeabi_fcmple>
 800464e:	bb48      	cbnz	r0, 80046a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004650:	4922      	ldr	r1, [pc, #136]	; (80046dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x9c>)
 8004652:	4620      	mov	r0, r4
 8004654:	f7fc fd32 	bl	80010bc <__aeabi_fcmple>
 8004658:	bb58      	cbnz	r0, 80046b2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x72>
 800465a:	4921      	ldr	r1, [pc, #132]	; (80046e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa0>)
 800465c:	4620      	mov	r0, r4
 800465e:	f7fc fd2d 	bl	80010bc <__aeabi_fcmple>
 8004662:	bb40      	cbnz	r0, 80046b6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x76>
 8004664:	491f      	ldr	r1, [pc, #124]	; (80046e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa4>)
 8004666:	4620      	mov	r0, r4
 8004668:	f7fc fd28 	bl	80010bc <__aeabi_fcmple>
 800466c:	bb28      	cbnz	r0, 80046ba <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800466e:	491e      	ldr	r1, [pc, #120]	; (80046e8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa8>)
 8004670:	4620      	mov	r0, r4
 8004672:	f7fc fd23 	bl	80010bc <__aeabi_fcmple>
 8004676:	bb10      	cbnz	r0, 80046be <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 8004678:	491c      	ldr	r1, [pc, #112]	; (80046ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xac>)
 800467a:	4620      	mov	r0, r4
 800467c:	f7fc fd1e 	bl	80010bc <__aeabi_fcmple>
 8004680:	b9f8      	cbnz	r0, 80046c2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x82>
 8004682:	491b      	ldr	r1, [pc, #108]	; (80046f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xb0>)
 8004684:	4620      	mov	r0, r4
 8004686:	f7fc fd19 	bl	80010bc <__aeabi_fcmple>
 800468a:	b9e0      	cbnz	r0, 80046c6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x86>
 800468c:	4919      	ldr	r1, [pc, #100]	; (80046f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xb4>)
 800468e:	4620      	mov	r0, r4
 8004690:	f7fc fd14 	bl	80010bc <__aeabi_fcmple>
 8004694:	b9c8      	cbnz	r0, 80046ca <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x8a>
 8004696:	4918      	ldr	r1, [pc, #96]	; (80046f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xb8>)
 8004698:	4620      	mov	r0, r4
 800469a:	f7fc fd0f 	bl	80010bc <__aeabi_fcmple>
 800469e:	b1b0      	cbz	r0, 80046ce <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x8e>
 80046a0:	2109      	movs	r1, #9
 80046a2:	e000      	b.n	80046a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x66>
 80046a4:	2101      	movs	r1, #1
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80046a6:	f105 0020 	add.w	r0, r5, #32
 80046aa:	f000 feb9 	bl	8005420 <ism330dhcx_gy_data_rate_set>
 80046ae:	b980      	cbnz	r0, 80046d2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x92>
}
 80046b0:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80046b2:	2102      	movs	r1, #2
 80046b4:	e7f7      	b.n	80046a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x66>
 80046b6:	2103      	movs	r1, #3
 80046b8:	e7f5      	b.n	80046a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x66>
 80046ba:	2104      	movs	r1, #4
 80046bc:	e7f3      	b.n	80046a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x66>
 80046be:	2105      	movs	r1, #5
 80046c0:	e7f1      	b.n	80046a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x66>
 80046c2:	2106      	movs	r1, #6
 80046c4:	e7ef      	b.n	80046a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x66>
 80046c6:	2107      	movs	r1, #7
 80046c8:	e7ed      	b.n	80046a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x66>
 80046ca:	2108      	movs	r1, #8
 80046cc:	e7eb      	b.n	80046a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x66>
 80046ce:	210a      	movs	r1, #10
 80046d0:	e7e9      	b.n	80046a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x66>
    return ISM330DHCX_ERROR;
 80046d2:	f04f 30ff 	mov.w	r0, #4294967295
 80046d6:	e7eb      	b.n	80046b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x70>
 80046d8:	41480000 	.word	0x41480000
 80046dc:	41d00000 	.word	0x41d00000
 80046e0:	42500000 	.word	0x42500000
 80046e4:	42d00000 	.word	0x42d00000
 80046e8:	43500000 	.word	0x43500000
 80046ec:	43d00000 	.word	0x43d00000
 80046f0:	44504000 	.word	0x44504000
 80046f4:	44d04000 	.word	0x44d04000
 80046f8:	45504000 	.word	0x45504000

080046fc <ISM330DHCX_GYRO_SetOutputDataRate>:
{
 80046fc:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 80046fe:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8004702:	2b01      	cmp	r3, #1
 8004704:	d002      	beq.n	800470c <ISM330DHCX_GYRO_SetOutputDataRate+0x10>
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004706:	f7ff fe8d 	bl	8004424 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
}
 800470a:	bd08      	pop	{r3, pc}
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800470c:	f7ff ff98 	bl	8004640 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8004710:	e7fb      	b.n	800470a <ISM330DHCX_GYRO_SetOutputDataRate+0xe>

08004712 <ISM330DHCX_Init>:
{
 8004712:	b538      	push	{r3, r4, r5, lr}
 8004714:	4605      	mov	r5, r0
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004716:	f100 0420 	add.w	r4, r0, #32
 800471a:	2101      	movs	r1, #1
 800471c:	4620      	mov	r0, r4
 800471e:	f000 fc7e 	bl	800501e <ism330dhcx_device_conf_set>
 8004722:	bbb0      	cbnz	r0, 8004792 <ISM330DHCX_Init+0x80>
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004724:	2101      	movs	r1, #1
 8004726:	4620      	mov	r0, r4
 8004728:	f000 fccb 	bl	80050c2 <ism330dhcx_auto_increment_set>
 800472c:	bba0      	cbnz	r0, 8004798 <ISM330DHCX_Init+0x86>
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800472e:	2101      	movs	r1, #1
 8004730:	4620      	mov	r0, r4
 8004732:	f000 fcad 	bl	8005090 <ism330dhcx_reset_set>
 8004736:	bb90      	cbnz	r0, 800479e <ISM330DHCX_Init+0x8c>
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004738:	2101      	movs	r1, #1
 800473a:	4620      	mov	r0, r4
 800473c:	f000 fcc1 	bl	80050c2 <ism330dhcx_auto_increment_set>
 8004740:	bb80      	cbnz	r0, 80047a4 <ISM330DHCX_Init+0x92>
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004742:	2101      	movs	r1, #1
 8004744:	4620      	mov	r0, r4
 8004746:	f000 fc0d 	bl	8004f64 <ism330dhcx_block_data_update_set>
 800474a:	bb70      	cbnz	r0, 80047aa <ISM330DHCX_Init+0x98>
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 800474c:	2100      	movs	r1, #0
 800474e:	4620      	mov	r0, r4
 8004750:	f000 fcd0 	bl	80050f4 <ism330dhcx_fifo_mode_set>
 8004754:	bb60      	cbnz	r0, 80047b0 <ISM330DHCX_Init+0x9e>
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8004756:	2304      	movs	r3, #4
 8004758:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800475c:	2100      	movs	r1, #0
 800475e:	4620      	mov	r0, r4
 8004760:	f000 fd77 	bl	8005252 <ism330dhcx_xl_data_rate_set>
 8004764:	bb38      	cbnz	r0, 80047b6 <ISM330DHCX_Init+0xa4>
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8004766:	2100      	movs	r1, #0
 8004768:	4620      	mov	r0, r4
 800476a:	f000 fb03 	bl	8004d74 <ism330dhcx_xl_full_scale_set>
 800476e:	bb28      	cbnz	r0, 80047bc <ISM330DHCX_Init+0xaa>
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8004770:	2304      	movs	r3, #4
 8004772:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004776:	2100      	movs	r1, #0
 8004778:	4620      	mov	r0, r4
 800477a:	f000 fe51 	bl	8005420 <ism330dhcx_gy_data_rate_set>
 800477e:	bb00      	cbnz	r0, 80047c2 <ISM330DHCX_Init+0xb0>
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8004780:	210c      	movs	r1, #12
 8004782:	4620      	mov	r0, r4
 8004784:	f000 fb6e 	bl	8004e64 <ism330dhcx_gy_full_scale_set>
 8004788:	b9f0      	cbnz	r0, 80047c8 <ISM330DHCX_Init+0xb6>
  pObj->is_initialized = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
 8004790:	bd38      	pop	{r3, r4, r5, pc}
    return ISM330DHCX_ERROR;
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	e7fb      	b.n	8004790 <ISM330DHCX_Init+0x7e>
    return ISM330DHCX_ERROR;
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	e7f8      	b.n	8004790 <ISM330DHCX_Init+0x7e>
    return ISM330DHCX_ERROR;
 800479e:	f04f 30ff 	mov.w	r0, #4294967295
 80047a2:	e7f5      	b.n	8004790 <ISM330DHCX_Init+0x7e>
    return ISM330DHCX_ERROR;
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	e7f2      	b.n	8004790 <ISM330DHCX_Init+0x7e>
    return ISM330DHCX_ERROR;
 80047aa:	f04f 30ff 	mov.w	r0, #4294967295
 80047ae:	e7ef      	b.n	8004790 <ISM330DHCX_Init+0x7e>
    return ISM330DHCX_ERROR;
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295
 80047b4:	e7ec      	b.n	8004790 <ISM330DHCX_Init+0x7e>
    return ISM330DHCX_ERROR;
 80047b6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ba:	e7e9      	b.n	8004790 <ISM330DHCX_Init+0x7e>
    return ISM330DHCX_ERROR;
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295
 80047c0:	e7e6      	b.n	8004790 <ISM330DHCX_Init+0x7e>
    return ISM330DHCX_ERROR;
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295
 80047c6:	e7e3      	b.n	8004790 <ISM330DHCX_Init+0x7e>
    return ISM330DHCX_ERROR;
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	e7e0      	b.n	8004790 <ISM330DHCX_Init+0x7e>

080047ce <ISM330DHCX_GYRO_SetFullScale>:
{
 80047ce:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 80047d0:	297d      	cmp	r1, #125	; 0x7d
 80047d2:	dd0c      	ble.n	80047ee <ISM330DHCX_GYRO_SetFullScale+0x20>
 80047d4:	29fa      	cmp	r1, #250	; 0xfa
 80047d6:	dd10      	ble.n	80047fa <ISM330DHCX_GYRO_SetFullScale+0x2c>
 80047d8:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 80047dc:	dd0f      	ble.n	80047fe <ISM330DHCX_GYRO_SetFullScale+0x30>
 80047de:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80047e2:	dd0e      	ble.n	8004802 <ISM330DHCX_GYRO_SetFullScale+0x34>
 80047e4:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 80047e8:	dc0d      	bgt.n	8004806 <ISM330DHCX_GYRO_SetFullScale+0x38>
 80047ea:	210c      	movs	r1, #12
 80047ec:	e000      	b.n	80047f0 <ISM330DHCX_GYRO_SetFullScale+0x22>
 80047ee:	2102      	movs	r1, #2
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80047f0:	3020      	adds	r0, #32
 80047f2:	f000 fb37 	bl	8004e64 <ism330dhcx_gy_full_scale_set>
 80047f6:	b940      	cbnz	r0, 800480a <ISM330DHCX_GYRO_SetFullScale+0x3c>
}
 80047f8:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 80047fa:	2100      	movs	r1, #0
 80047fc:	e7f8      	b.n	80047f0 <ISM330DHCX_GYRO_SetFullScale+0x22>
 80047fe:	2104      	movs	r1, #4
 8004800:	e7f6      	b.n	80047f0 <ISM330DHCX_GYRO_SetFullScale+0x22>
 8004802:	2108      	movs	r1, #8
 8004804:	e7f4      	b.n	80047f0 <ISM330DHCX_GYRO_SetFullScale+0x22>
 8004806:	2101      	movs	r1, #1
 8004808:	e7f2      	b.n	80047f0 <ISM330DHCX_GYRO_SetFullScale+0x22>
    return ISM330DHCX_ERROR;
 800480a:	f04f 30ff 	mov.w	r0, #4294967295
 800480e:	e7f3      	b.n	80047f8 <ISM330DHCX_GYRO_SetFullScale+0x2a>

08004810 <ISM330DHCX_ReadID>:
{
 8004810:	b508      	push	{r3, lr}
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8004812:	3020      	adds	r0, #32
 8004814:	f000 fc35 	bl	8005082 <ism330dhcx_device_id_get>
 8004818:	b900      	cbnz	r0, 800481c <ISM330DHCX_ReadID+0xc>
}
 800481a:	bd08      	pop	{r3, pc}
    return ISM330DHCX_ERROR;
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	e7fb      	b.n	800481a <ISM330DHCX_ReadID+0xa>

08004822 <ISM330DHCX_ACC_Disable>:
{
 8004822:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8004824:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004828:	b90b      	cbnz	r3, 800482e <ISM330DHCX_ACC_Disable+0xc>
    return ISM330DHCX_OK;
 800482a:	2000      	movs	r0, #0
}
 800482c:	bd38      	pop	{r3, r4, r5, pc}
 800482e:	4604      	mov	r4, r0
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8004830:	f100 0520 	add.w	r5, r0, #32
 8004834:	f100 0133 	add.w	r1, r0, #51	; 0x33
 8004838:	4628      	mov	r0, r5
 800483a:	f000 fad6 	bl	8004dea <ism330dhcx_xl_data_rate_get>
 800483e:	b938      	cbnz	r0, 8004850 <ISM330DHCX_ACC_Disable+0x2e>
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8004840:	2100      	movs	r1, #0
 8004842:	4628      	mov	r0, r5
 8004844:	f000 fd05 	bl	8005252 <ism330dhcx_xl_data_rate_set>
 8004848:	b928      	cbnz	r0, 8004856 <ISM330DHCX_ACC_Disable+0x34>
  pObj->acc_is_enabled = 0;
 800484a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  return ISM330DHCX_OK;
 800484e:	e7ed      	b.n	800482c <ISM330DHCX_ACC_Disable+0xa>
    return ISM330DHCX_ERROR;
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	e7ea      	b.n	800482c <ISM330DHCX_ACC_Disable+0xa>
    return ISM330DHCX_ERROR;
 8004856:	f04f 30ff 	mov.w	r0, #4294967295
 800485a:	e7e7      	b.n	800482c <ISM330DHCX_ACC_Disable+0xa>

0800485c <ISM330DHCX_ACC_GetOutputDataRate>:
{
 800485c:	b510      	push	{r4, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	460c      	mov	r4, r1
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004862:	f10d 0107 	add.w	r1, sp, #7
 8004866:	3020      	adds	r0, #32
 8004868:	f000 fabf 	bl	8004dea <ism330dhcx_xl_data_rate_get>
 800486c:	2800      	cmp	r0, #0
 800486e:	d12d      	bne.n	80048cc <ISM330DHCX_ACC_GetOutputDataRate+0x70>
  switch (odr_low_level)
 8004870:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004874:	2b0a      	cmp	r3, #10
 8004876:	d82c      	bhi.n	80048d2 <ISM330DHCX_ACC_GetOutputDataRate+0x76>
 8004878:	e8df f003 	tbb	[pc, r3]
 800487c:	100d0a06 	.word	0x100d0a06
 8004880:	1c191613 	.word	0x1c191613
 8004884:	221f      	.short	0x221f
 8004886:	25          	.byte	0x25
 8004887:	00          	.byte	0x00
      *Odr = 0.0f;
 8004888:	2300      	movs	r3, #0
 800488a:	6023      	str	r3, [r4, #0]
}
 800488c:	b002      	add	sp, #8
 800488e:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 8004890:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <ISM330DHCX_ACC_GetOutputDataRate+0x7c>)
 8004892:	6023      	str	r3, [r4, #0]
      break;
 8004894:	e7fa      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8004896:	4b11      	ldr	r3, [pc, #68]	; (80048dc <ISM330DHCX_ACC_GetOutputDataRate+0x80>)
 8004898:	6023      	str	r3, [r4, #0]
      break;
 800489a:	e7f7      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 800489c:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <ISM330DHCX_ACC_GetOutputDataRate+0x84>)
 800489e:	6023      	str	r3, [r4, #0]
      break;
 80048a0:	e7f4      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <ISM330DHCX_ACC_GetOutputDataRate+0x88>)
 80048a4:	6023      	str	r3, [r4, #0]
      break;
 80048a6:	e7f1      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <ISM330DHCX_ACC_GetOutputDataRate+0x8c>)
 80048aa:	6023      	str	r3, [r4, #0]
      break;
 80048ac:	e7ee      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 416.0f;
 80048ae:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <ISM330DHCX_ACC_GetOutputDataRate+0x90>)
 80048b0:	6023      	str	r3, [r4, #0]
      break;
 80048b2:	e7eb      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <ISM330DHCX_ACC_GetOutputDataRate+0x94>)
 80048b6:	6023      	str	r3, [r4, #0]
      break;
 80048b8:	e7e8      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 1666.0f;
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <ISM330DHCX_ACC_GetOutputDataRate+0x98>)
 80048bc:	6023      	str	r3, [r4, #0]
      break;
 80048be:	e7e5      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 3332.0f;
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <ISM330DHCX_ACC_GetOutputDataRate+0x9c>)
 80048c2:	6023      	str	r3, [r4, #0]
      break;
 80048c4:	e7e2      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <ISM330DHCX_ACC_GetOutputDataRate+0xa0>)
 80048c8:	6023      	str	r3, [r4, #0]
      break;
 80048ca:	e7df      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
    return ISM330DHCX_ERROR;
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	e7dc      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
  switch (odr_low_level)
 80048d2:	f04f 30ff 	mov.w	r0, #4294967295
 80048d6:	e7d9      	b.n	800488c <ISM330DHCX_ACC_GetOutputDataRate+0x30>
 80048d8:	41480000 	.word	0x41480000
 80048dc:	41d00000 	.word	0x41d00000
 80048e0:	42500000 	.word	0x42500000
 80048e4:	42d00000 	.word	0x42d00000
 80048e8:	43500000 	.word	0x43500000
 80048ec:	43d00000 	.word	0x43d00000
 80048f0:	44504000 	.word	0x44504000
 80048f4:	44d04000 	.word	0x44d04000
 80048f8:	45504000 	.word	0x45504000
 80048fc:	45d05800 	.word	0x45d05800

08004900 <ISM330DHCX_ACC_GetSensitivity>:
{
 8004900:	b510      	push	{r4, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8004906:	f10d 0107 	add.w	r1, sp, #7
 800490a:	3020      	adds	r0, #32
 800490c:	f000 fa4b 	bl	8004da6 <ism330dhcx_xl_full_scale_get>
 8004910:	b9a0      	cbnz	r0, 800493c <ISM330DHCX_ACC_GetSensitivity+0x3c>
  switch (full_scale)
 8004912:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004916:	2b03      	cmp	r3, #3
 8004918:	d813      	bhi.n	8004942 <ISM330DHCX_ACC_GetSensitivity+0x42>
 800491a:	e8df f003 	tbb	[pc, r3]
 800491e:	0c02      	.short	0x0c02
 8004920:	0906      	.short	0x0906
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <ISM330DHCX_ACC_GetSensitivity+0x48>)
 8004924:	6023      	str	r3, [r4, #0]
}
 8004926:	b002      	add	sp, #8
 8004928:	bd10      	pop	{r4, pc}
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 800492a:	4b08      	ldr	r3, [pc, #32]	; (800494c <ISM330DHCX_ACC_GetSensitivity+0x4c>)
 800492c:	6023      	str	r3, [r4, #0]
      break;
 800492e:	e7fa      	b.n	8004926 <ISM330DHCX_ACC_GetSensitivity+0x26>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <ISM330DHCX_ACC_GetSensitivity+0x50>)
 8004932:	6023      	str	r3, [r4, #0]
      break;
 8004934:	e7f7      	b.n	8004926 <ISM330DHCX_ACC_GetSensitivity+0x26>
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8004936:	4b07      	ldr	r3, [pc, #28]	; (8004954 <ISM330DHCX_ACC_GetSensitivity+0x54>)
 8004938:	6023      	str	r3, [r4, #0]
      break;
 800493a:	e7f4      	b.n	8004926 <ISM330DHCX_ACC_GetSensitivity+0x26>
    return ISM330DHCX_ERROR;
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	e7f1      	b.n	8004926 <ISM330DHCX_ACC_GetSensitivity+0x26>
  switch (full_scale)
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	e7ee      	b.n	8004926 <ISM330DHCX_ACC_GetSensitivity+0x26>
 8004948:	3d79db23 	.word	0x3d79db23
 800494c:	3df9db23 	.word	0x3df9db23
 8004950:	3e79db23 	.word	0x3e79db23
 8004954:	3ef9db23 	.word	0x3ef9db23

08004958 <ISM330DHCX_ACC_GetFullScale>:
{
 8004958:	b510      	push	{r4, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	460c      	mov	r4, r1
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800495e:	f10d 0107 	add.w	r1, sp, #7
 8004962:	3020      	adds	r0, #32
 8004964:	f000 fa1f 	bl	8004da6 <ism330dhcx_xl_full_scale_get>
 8004968:	b9a0      	cbnz	r0, 8004994 <ISM330DHCX_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 800496a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800496e:	2b03      	cmp	r3, #3
 8004970:	d813      	bhi.n	800499a <ISM330DHCX_ACC_GetFullScale+0x42>
 8004972:	e8df f003 	tbb	[pc, r3]
 8004976:	0c02      	.short	0x0c02
 8004978:	0906      	.short	0x0906
      *FullScale =  2;
 800497a:	2302      	movs	r3, #2
 800497c:	6023      	str	r3, [r4, #0]
}
 800497e:	b002      	add	sp, #8
 8004980:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8004982:	2304      	movs	r3, #4
 8004984:	6023      	str	r3, [r4, #0]
      break;
 8004986:	e7fa      	b.n	800497e <ISM330DHCX_ACC_GetFullScale+0x26>
      *FullScale =  8;
 8004988:	2308      	movs	r3, #8
 800498a:	6023      	str	r3, [r4, #0]
      break;
 800498c:	e7f7      	b.n	800497e <ISM330DHCX_ACC_GetFullScale+0x26>
      *FullScale = 16;
 800498e:	2310      	movs	r3, #16
 8004990:	6023      	str	r3, [r4, #0]
      break;
 8004992:	e7f4      	b.n	800497e <ISM330DHCX_ACC_GetFullScale+0x26>
    return ISM330DHCX_ERROR;
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	e7f1      	b.n	800497e <ISM330DHCX_ACC_GetFullScale+0x26>
  switch (fs_low_level)
 800499a:	f04f 30ff 	mov.w	r0, #4294967295
 800499e:	e7ee      	b.n	800497e <ISM330DHCX_ACC_GetFullScale+0x26>

080049a0 <ISM330DHCX_ACC_GetAxesRaw>:
{
 80049a0:	b510      	push	{r4, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	460c      	mov	r4, r1
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80049a6:	4669      	mov	r1, sp
 80049a8:	3020      	adds	r0, #32
 80049aa:	f000 fb16 	bl	8004fda <ism330dhcx_acceleration_raw_get>
 80049ae:	b950      	cbnz	r0, 80049c6 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 80049b0:	f9bd 3000 	ldrsh.w	r3, [sp]
 80049b4:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 80049b6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80049ba:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 80049bc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80049c0:	80a3      	strh	r3, [r4, #4]
}
 80049c2:	b002      	add	sp, #8
 80049c4:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 80049c6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ca:	e7fa      	b.n	80049c2 <ISM330DHCX_ACC_GetAxesRaw+0x22>

080049cc <ISM330DHCX_ACC_GetAxes>:
{
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	4605      	mov	r5, r0
 80049d2:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 80049d4:	2300      	movs	r3, #0
 80049d6:	9301      	str	r3, [sp, #4]
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80049d8:	a902      	add	r1, sp, #8
 80049da:	3020      	adds	r0, #32
 80049dc:	f000 fafd 	bl	8004fda <ism330dhcx_acceleration_raw_get>
 80049e0:	bb40      	cbnz	r0, 8004a34 <ISM330DHCX_ACC_GetAxes+0x68>
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80049e2:	a901      	add	r1, sp, #4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f7ff ff8b 	bl	8004900 <ISM330DHCX_ACC_GetSensitivity>
 80049ea:	4606      	mov	r6, r0
 80049ec:	bb28      	cbnz	r0, 8004a3a <ISM330DHCX_ACC_GetAxes+0x6e>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80049ee:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80049f2:	f7fc f967 	bl	8000cc4 <__aeabi_i2f>
 80049f6:	9901      	ldr	r1, [sp, #4]
 80049f8:	f7fc f9b8 	bl	8000d6c <__aeabi_fmul>
 80049fc:	f7fc fb92 	bl	8001124 <__aeabi_f2iz>
 8004a00:	6020      	str	r0, [r4, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004a02:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8004a06:	f7fc f95d 	bl	8000cc4 <__aeabi_i2f>
 8004a0a:	9d01      	ldr	r5, [sp, #4]
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	f7fc f9ad 	bl	8000d6c <__aeabi_fmul>
 8004a12:	f7fc fb87 	bl	8001124 <__aeabi_f2iz>
 8004a16:	6060      	str	r0, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004a18:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8004a1c:	f7fc f952 	bl	8000cc4 <__aeabi_i2f>
 8004a20:	4601      	mov	r1, r0
 8004a22:	4628      	mov	r0, r5
 8004a24:	f7fc f9a2 	bl	8000d6c <__aeabi_fmul>
 8004a28:	f7fc fb7c 	bl	8001124 <__aeabi_f2iz>
 8004a2c:	60a0      	str	r0, [r4, #8]
}
 8004a2e:	4630      	mov	r0, r6
 8004a30:	b004      	add	sp, #16
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
    return ISM330DHCX_ERROR;
 8004a34:	f04f 36ff 	mov.w	r6, #4294967295
 8004a38:	e7f9      	b.n	8004a2e <ISM330DHCX_ACC_GetAxes+0x62>
    return ISM330DHCX_ERROR;
 8004a3a:	f04f 36ff 	mov.w	r6, #4294967295
 8004a3e:	e7f6      	b.n	8004a2e <ISM330DHCX_ACC_GetAxes+0x62>

08004a40 <ISM330DHCX_GYRO_Disable>:
{
 8004a40:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 8004a42:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8004a46:	b90b      	cbnz	r3, 8004a4c <ISM330DHCX_GYRO_Disable+0xc>
    return ISM330DHCX_OK;
 8004a48:	2000      	movs	r0, #0
}
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	4604      	mov	r4, r0
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8004a4e:	f100 0520 	add.w	r5, r0, #32
 8004a52:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 fa4a 	bl	8004ef0 <ism330dhcx_gy_data_rate_get>
 8004a5c:	b938      	cbnz	r0, 8004a6e <ISM330DHCX_GYRO_Disable+0x2e>
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 fcdd 	bl	8005420 <ism330dhcx_gy_data_rate_set>
 8004a66:	b928      	cbnz	r0, 8004a74 <ISM330DHCX_GYRO_Disable+0x34>
  pObj->gyro_is_enabled = 0;
 8004a68:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  return ISM330DHCX_OK;
 8004a6c:	e7ed      	b.n	8004a4a <ISM330DHCX_GYRO_Disable+0xa>
    return ISM330DHCX_ERROR;
 8004a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a72:	e7ea      	b.n	8004a4a <ISM330DHCX_GYRO_Disable+0xa>
    return ISM330DHCX_ERROR;
 8004a74:	f04f 30ff 	mov.w	r0, #4294967295
 8004a78:	e7e7      	b.n	8004a4a <ISM330DHCX_GYRO_Disable+0xa>

08004a7a <ISM330DHCX_DeInit>:
{
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	4604      	mov	r4, r0
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8004a7e:	f7ff fed0 	bl	8004822 <ISM330DHCX_ACC_Disable>
 8004a82:	b950      	cbnz	r0, 8004a9a <ISM330DHCX_DeInit+0x20>
  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7ff ffdb 	bl	8004a40 <ISM330DHCX_GYRO_Disable>
 8004a8a:	b948      	cbnz	r0, 8004aa0 <ISM330DHCX_DeInit+0x26>
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8004a8c:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8004a90:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  pObj->is_initialized = 0;
 8004a94:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
 8004a98:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 8004a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9e:	e7fb      	b.n	8004a98 <ISM330DHCX_DeInit+0x1e>
    return ISM330DHCX_ERROR;
 8004aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa4:	e7f8      	b.n	8004a98 <ISM330DHCX_DeInit+0x1e>
	...

08004aa8 <ISM330DHCX_GYRO_GetOutputDataRate>:
{
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	460c      	mov	r4, r1
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004aae:	f10d 0107 	add.w	r1, sp, #7
 8004ab2:	3020      	adds	r0, #32
 8004ab4:	f000 fa1c 	bl	8004ef0 <ism330dhcx_gy_data_rate_get>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d12d      	bne.n	8004b18 <ISM330DHCX_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 8004abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ac0:	2b0a      	cmp	r3, #10
 8004ac2:	d82c      	bhi.n	8004b1e <ISM330DHCX_GYRO_GetOutputDataRate+0x76>
 8004ac4:	e8df f003 	tbb	[pc, r3]
 8004ac8:	100d0a06 	.word	0x100d0a06
 8004acc:	1c191613 	.word	0x1c191613
 8004ad0:	221f      	.short	0x221f
 8004ad2:	25          	.byte	0x25
 8004ad3:	00          	.byte	0x00
      *Odr = 0.0f;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	6023      	str	r3, [r4, #0]
}
 8004ad8:	b002      	add	sp, #8
 8004ada:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <ISM330DHCX_GYRO_GetOutputDataRate+0x7c>)
 8004ade:	6023      	str	r3, [r4, #0]
      break;
 8004ae0:	e7fa      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <ISM330DHCX_GYRO_GetOutputDataRate+0x80>)
 8004ae4:	6023      	str	r3, [r4, #0]
      break;
 8004ae6:	e7f7      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <ISM330DHCX_GYRO_GetOutputDataRate+0x84>)
 8004aea:	6023      	str	r3, [r4, #0]
      break;
 8004aec:	e7f4      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <ISM330DHCX_GYRO_GetOutputDataRate+0x88>)
 8004af0:	6023      	str	r3, [r4, #0]
      break;
 8004af2:	e7f1      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <ISM330DHCX_GYRO_GetOutputDataRate+0x8c>)
 8004af6:	6023      	str	r3, [r4, #0]
      break;
 8004af8:	e7ee      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 416.0f;
 8004afa:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <ISM330DHCX_GYRO_GetOutputDataRate+0x90>)
 8004afc:	6023      	str	r3, [r4, #0]
      break;
 8004afe:	e7eb      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8004b00:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <ISM330DHCX_GYRO_GetOutputDataRate+0x94>)
 8004b02:	6023      	str	r3, [r4, #0]
      break;
 8004b04:	e7e8      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr =  1666.0f;
 8004b06:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <ISM330DHCX_GYRO_GetOutputDataRate+0x98>)
 8004b08:	6023      	str	r3, [r4, #0]
      break;
 8004b0a:	e7e5      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr =  3332.0f;
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <ISM330DHCX_GYRO_GetOutputDataRate+0x9c>)
 8004b0e:	6023      	str	r3, [r4, #0]
      break;
 8004b10:	e7e2      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
      *Odr =  6667.0f;
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <ISM330DHCX_GYRO_GetOutputDataRate+0xa0>)
 8004b14:	6023      	str	r3, [r4, #0]
      break;
 8004b16:	e7df      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
    return ISM330DHCX_ERROR;
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	e7dc      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8004b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b22:	e7d9      	b.n	8004ad8 <ISM330DHCX_GYRO_GetOutputDataRate+0x30>
 8004b24:	41480000 	.word	0x41480000
 8004b28:	41d00000 	.word	0x41d00000
 8004b2c:	42500000 	.word	0x42500000
 8004b30:	42d00000 	.word	0x42d00000
 8004b34:	43500000 	.word	0x43500000
 8004b38:	43d00000 	.word	0x43d00000
 8004b3c:	44504000 	.word	0x44504000
 8004b40:	44d04000 	.word	0x44d04000
 8004b44:	45504000 	.word	0x45504000
 8004b48:	45d05800 	.word	0x45d05800

08004b4c <ISM330DHCX_GYRO_GetSensitivity>:
{
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8004b52:	f10d 0107 	add.w	r1, sp, #7
 8004b56:	3020      	adds	r0, #32
 8004b58:	f000 f99d 	bl	8004e96 <ism330dhcx_gy_full_scale_get>
 8004b5c:	b9f0      	cbnz	r0, 8004b9c <ISM330DHCX_GYRO_GetSensitivity+0x50>
  switch (full_scale)
 8004b5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004b62:	2b0c      	cmp	r3, #12
 8004b64:	d81d      	bhi.n	8004ba2 <ISM330DHCX_GYRO_GetSensitivity+0x56>
 8004b66:	e8df f003 	tbb	[pc, r3]
 8004b6a:	160a      	.short	0x160a
 8004b6c:	1c0d1c07 	.word	0x1c0d1c07
 8004b70:	1c101c1c 	.word	0x1c101c1c
 8004b74:	1c1c      	.short	0x1c1c
 8004b76:	13          	.byte	0x13
 8004b77:	00          	.byte	0x00
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <ISM330DHCX_GYRO_GetSensitivity+0x60>)
 8004b7a:	6023      	str	r3, [r4, #0]
      break;
 8004b7c:	e013      	b.n	8004ba6 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <ISM330DHCX_GYRO_GetSensitivity+0x64>)
 8004b80:	6023      	str	r3, [r4, #0]
      break;
 8004b82:	e010      	b.n	8004ba6 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <ISM330DHCX_GYRO_GetSensitivity+0x68>)
 8004b86:	6023      	str	r3, [r4, #0]
      break;
 8004b88:	e00d      	b.n	8004ba6 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <ISM330DHCX_GYRO_GetSensitivity+0x6c>)
 8004b8c:	6023      	str	r3, [r4, #0]
      break;
 8004b8e:	e00a      	b.n	8004ba6 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <ISM330DHCX_GYRO_GetSensitivity+0x70>)
 8004b92:	6023      	str	r3, [r4, #0]
      break;
 8004b94:	e007      	b.n	8004ba6 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <ISM330DHCX_GYRO_GetSensitivity+0x74>)
 8004b98:	6023      	str	r3, [r4, #0]
      break;
 8004b9a:	e004      	b.n	8004ba6 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
    return ISM330DHCX_ERROR;
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	e001      	b.n	8004ba6 <ISM330DHCX_GYRO_GetSensitivity+0x5a>
  switch (full_scale)
 8004ba2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004ba6:	b002      	add	sp, #8
 8004ba8:	bd10      	pop	{r4, pc}
 8004baa:	bf00      	nop
 8004bac:	408c0000 	.word	0x408c0000
 8004bb0:	410c0000 	.word	0x410c0000
 8004bb4:	418c0000 	.word	0x418c0000
 8004bb8:	420c0000 	.word	0x420c0000
 8004bbc:	428c0000 	.word	0x428c0000
 8004bc0:	430c0000 	.word	0x430c0000

08004bc4 <ISM330DHCX_GYRO_GetFullScale>:
{
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	460c      	mov	r4, r1
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004bca:	f10d 0107 	add.w	r1, sp, #7
 8004bce:	3020      	adds	r0, #32
 8004bd0:	f000 f961 	bl	8004e96 <ism330dhcx_gy_full_scale_get>
 8004bd4:	bb10      	cbnz	r0, 8004c1c <ISM330DHCX_GYRO_GetFullScale+0x58>
  switch (fs_low_level)
 8004bd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d821      	bhi.n	8004c22 <ISM330DHCX_GYRO_GetFullScale+0x5e>
 8004bde:	e8df f003 	tbb	[pc, r3]
 8004be2:	190a      	.short	0x190a
 8004be4:	200d2007 	.word	0x200d2007
 8004be8:	20112020 	.word	0x20112020
 8004bec:	2020      	.short	0x2020
 8004bee:	15          	.byte	0x15
 8004bef:	00          	.byte	0x00
      *FullScale =  125;
 8004bf0:	237d      	movs	r3, #125	; 0x7d
 8004bf2:	6023      	str	r3, [r4, #0]
      break;
 8004bf4:	e017      	b.n	8004c26 <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale =  250;
 8004bf6:	23fa      	movs	r3, #250	; 0xfa
 8004bf8:	6023      	str	r3, [r4, #0]
      break;
 8004bfa:	e014      	b.n	8004c26 <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale =  500;
 8004bfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004c00:	6023      	str	r3, [r4, #0]
      break;
 8004c02:	e010      	b.n	8004c26 <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale = 1000;
 8004c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c08:	6023      	str	r3, [r4, #0]
      break;
 8004c0a:	e00c      	b.n	8004c26 <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale = 2000;
 8004c0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004c10:	6023      	str	r3, [r4, #0]
      break;
 8004c12:	e008      	b.n	8004c26 <ISM330DHCX_GYRO_GetFullScale+0x62>
      *FullScale = 4000;
 8004c14:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004c18:	6023      	str	r3, [r4, #0]
      break;
 8004c1a:	e004      	b.n	8004c26 <ISM330DHCX_GYRO_GetFullScale+0x62>
    return ISM330DHCX_ERROR;
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	e001      	b.n	8004c26 <ISM330DHCX_GYRO_GetFullScale+0x62>
  switch (fs_low_level)
 8004c22:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c26:	b002      	add	sp, #8
 8004c28:	bd10      	pop	{r4, pc}

08004c2a <ISM330DHCX_GYRO_GetAxesRaw>:
{
 8004c2a:	b510      	push	{r4, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004c30:	4669      	mov	r1, sp
 8004c32:	3020      	adds	r0, #32
 8004c34:	f000 f9af 	bl	8004f96 <ism330dhcx_angular_rate_raw_get>
 8004c38:	b950      	cbnz	r0, 8004c50 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8004c3a:	f9bd 3000 	ldrsh.w	r3, [sp]
 8004c3e:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8004c40:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8004c44:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8004c46:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8004c4a:	80a3      	strh	r3, [r4, #4]
}
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd10      	pop	{r4, pc}
    return ISM330DHCX_ERROR;
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	e7fa      	b.n	8004c4c <ISM330DHCX_GYRO_GetAxesRaw+0x22>

08004c56 <ISM330DHCX_GYRO_GetAxes>:
{
 8004c56:	b570      	push	{r4, r5, r6, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	460c      	mov	r4, r1
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004c5e:	a902      	add	r1, sp, #8
 8004c60:	3020      	adds	r0, #32
 8004c62:	f000 f998 	bl	8004f96 <ism330dhcx_angular_rate_raw_get>
 8004c66:	bb40      	cbnz	r0, 8004cba <ISM330DHCX_GYRO_GetAxes+0x64>
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004c68:	a901      	add	r1, sp, #4
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f7ff ff6e 	bl	8004b4c <ISM330DHCX_GYRO_GetSensitivity>
 8004c70:	4606      	mov	r6, r0
 8004c72:	bb28      	cbnz	r0, 8004cc0 <ISM330DHCX_GYRO_GetAxes+0x6a>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004c74:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8004c78:	f7fc f824 	bl	8000cc4 <__aeabi_i2f>
 8004c7c:	9901      	ldr	r1, [sp, #4]
 8004c7e:	f7fc f875 	bl	8000d6c <__aeabi_fmul>
 8004c82:	f7fc fa4f 	bl	8001124 <__aeabi_f2iz>
 8004c86:	6020      	str	r0, [r4, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004c88:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8004c8c:	f7fc f81a 	bl	8000cc4 <__aeabi_i2f>
 8004c90:	9d01      	ldr	r5, [sp, #4]
 8004c92:	4629      	mov	r1, r5
 8004c94:	f7fc f86a 	bl	8000d6c <__aeabi_fmul>
 8004c98:	f7fc fa44 	bl	8001124 <__aeabi_f2iz>
 8004c9c:	6060      	str	r0, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004c9e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8004ca2:	f7fc f80f 	bl	8000cc4 <__aeabi_i2f>
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f7fc f85f 	bl	8000d6c <__aeabi_fmul>
 8004cae:	f7fc fa39 	bl	8001124 <__aeabi_f2iz>
 8004cb2:	60a0      	str	r0, [r4, #8]
}
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	b004      	add	sp, #16
 8004cb8:	bd70      	pop	{r4, r5, r6, pc}
    return ISM330DHCX_ERROR;
 8004cba:	f04f 36ff 	mov.w	r6, #4294967295
 8004cbe:	e7f9      	b.n	8004cb4 <ISM330DHCX_GYRO_GetAxes+0x5e>
    return ISM330DHCX_ERROR;
 8004cc0:	f04f 36ff 	mov.w	r6, #4294967295
 8004cc4:	e7f6      	b.n	8004cb4 <ISM330DHCX_GYRO_GetAxes+0x5e>

08004cc6 <ISM330DHCX_Write_Reg>:
{
 8004cc6:	b500      	push	{lr}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	f88d 2007 	strb.w	r2, [sp, #7]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f10d 0207 	add.w	r2, sp, #7
 8004cd4:	3020      	adds	r0, #32
 8004cd6:	f000 f848 	bl	8004d6a <ism330dhcx_write_reg>
 8004cda:	b910      	cbnz	r0, 8004ce2 <ISM330DHCX_Write_Reg+0x1c>
}
 8004cdc:	b003      	add	sp, #12
 8004cde:	f85d fb04 	ldr.w	pc, [sp], #4
    return ISM330DHCX_ERROR;
 8004ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce6:	e7f9      	b.n	8004cdc <ISM330DHCX_Write_Reg+0x16>

08004ce8 <ISM330DHCX_RegisterBusIO>:
  if (pObj == NULL)
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d02b      	beq.n	8004d44 <ISM330DHCX_RegisterBusIO+0x5c>
{
 8004cec:	b510      	push	{r4, lr}
 8004cee:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8004cf0:	680b      	ldr	r3, [r1, #0]
 8004cf2:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004cf4:	684a      	ldr	r2, [r1, #4]
 8004cf6:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004cf8:	688a      	ldr	r2, [r1, #8]
 8004cfa:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8004cfc:	7b0a      	ldrb	r2, [r1, #12]
 8004cfe:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004d00:	690a      	ldr	r2, [r1, #16]
 8004d02:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004d04:	694a      	ldr	r2, [r1, #20]
 8004d06:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004d08:	698a      	ldr	r2, [r1, #24]
 8004d0a:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8004d0c:	4a12      	ldr	r2, [pc, #72]	; (8004d58 <ISM330DHCX_RegisterBusIO+0x70>)
 8004d0e:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004d10:	4a12      	ldr	r2, [pc, #72]	; (8004d5c <ISM330DHCX_RegisterBusIO+0x74>)
 8004d12:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004d14:	69ca      	ldr	r2, [r1, #28]
 8004d16:	6282      	str	r2, [r0, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004d18:	62c0      	str	r0, [r0, #44]	; 0x2c
    if (pObj->IO.Init == NULL)
 8004d1a:	b1b3      	cbz	r3, 8004d4a <ISM330DHCX_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8004d1c:	4798      	blx	r3
 8004d1e:	b9b8      	cbnz	r0, 8004d50 <ISM330DHCX_RegisterBusIO+0x68>
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004d20:	68a3      	ldr	r3, [r4, #8]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d000      	beq.n	8004d28 <ISM330DHCX_RegisterBusIO+0x40>
}
 8004d26:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8004d28:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1fa      	bne.n	8004d26 <ISM330DHCX_RegisterBusIO+0x3e>
          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8004d30:	220c      	movs	r2, #12
 8004d32:	2112      	movs	r1, #18
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7ff ffc6 	bl	8004cc6 <ISM330DHCX_Write_Reg>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d0f3      	beq.n	8004d26 <ISM330DHCX_RegisterBusIO+0x3e>
            ret = ISM330DHCX_ERROR;
 8004d3e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004d42:	e7f0      	b.n	8004d26 <ISM330DHCX_RegisterBusIO+0x3e>
    ret = ISM330DHCX_ERROR;
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004d48:	4770      	bx	lr
      ret = ISM330DHCX_ERROR;
 8004d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4e:	e7ea      	b.n	8004d26 <ISM330DHCX_RegisterBusIO+0x3e>
      ret = ISM330DHCX_ERROR;
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295
 8004d54:	e7e7      	b.n	8004d26 <ISM330DHCX_RegisterBusIO+0x3e>
 8004d56:	bf00      	nop
 8004d58:	080044d9 	.word	0x080044d9
 8004d5c:	080044e3 	.word	0x080044e3

08004d60 <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8004d60:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d62:	6844      	ldr	r4, [r0, #4]
 8004d64:	68c0      	ldr	r0, [r0, #12]
 8004d66:	47a0      	blx	r4

  return ret;
}
 8004d68:	bd10      	pop	{r4, pc}

08004d6a <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8004d6a:	b510      	push	{r4, lr}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d6c:	6804      	ldr	r4, [r0, #0]
 8004d6e:	68c0      	ldr	r0, [r0, #12]
 8004d70:	47a0      	blx	r4

  return ret;
}
 8004d72:	bd10      	pop	{r4, pc}

08004d74 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8004d74:	b530      	push	{r4, r5, lr}
 8004d76:	b083      	sub	sp, #12
 8004d78:	4604      	mov	r4, r0
 8004d7a:	460d      	mov	r5, r1
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	aa01      	add	r2, sp, #4
 8004d80:	2110      	movs	r1, #16
 8004d82:	f7ff ffed 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8004d86:	b108      	cbz	r0, 8004d8c <ism330dhcx_xl_full_scale_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 8004d88:	b003      	add	sp, #12
 8004d8a:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004d8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004d90:	f365 0383 	bfi	r3, r5, #2, #2
 8004d94:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004d98:	2301      	movs	r3, #1
 8004d9a:	aa01      	add	r2, sp, #4
 8004d9c:	2110      	movs	r1, #16
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7ff ffe3 	bl	8004d6a <ism330dhcx_write_reg>
  return ret;
 8004da4:	e7f0      	b.n	8004d88 <ism330dhcx_xl_full_scale_set+0x14>

08004da6 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8004da6:	b510      	push	{r4, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	460c      	mov	r4, r1
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004dac:	2301      	movs	r3, #1
 8004dae:	aa01      	add	r2, sp, #4
 8004db0:	2110      	movs	r1, #16
 8004db2:	f7ff ffd5 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8004db6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004dba:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d810      	bhi.n	8004de4 <ism330dhcx_xl_full_scale_get+0x3e>
 8004dc2:	e8df f003 	tbb	[pc, r3]
 8004dc6:	0602      	.short	0x0602
 8004dc8:	0c09      	.short	0x0c09
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_2g;
      break;
  }

  return ret;
}
 8004dce:	b002      	add	sp, #8
 8004dd0:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_16g;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	7023      	strb	r3, [r4, #0]
      break;
 8004dd6:	e7fa      	b.n	8004dce <ism330dhcx_xl_full_scale_get+0x28>
      *val = ISM330DHCX_4g;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	7023      	strb	r3, [r4, #0]
      break;
 8004ddc:	e7f7      	b.n	8004dce <ism330dhcx_xl_full_scale_get+0x28>
      *val = ISM330DHCX_8g;
 8004dde:	2303      	movs	r3, #3
 8004de0:	7023      	strb	r3, [r4, #0]
      break;
 8004de2:	e7f4      	b.n	8004dce <ism330dhcx_xl_full_scale_get+0x28>
      *val = ISM330DHCX_2g;
 8004de4:	2300      	movs	r3, #0
 8004de6:	7023      	strb	r3, [r4, #0]
  return ret;
 8004de8:	e7f1      	b.n	8004dce <ism330dhcx_xl_full_scale_get+0x28>

08004dea <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8004dea:	b510      	push	{r4, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	460c      	mov	r4, r1
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004df0:	2301      	movs	r3, #1
 8004df2:	aa01      	add	r2, sp, #4
 8004df4:	2110      	movs	r1, #16
 8004df6:	f7ff ffb3 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8004dfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004dfe:	091b      	lsrs	r3, r3, #4
 8004e00:	2b0b      	cmp	r3, #11
 8004e02:	d82c      	bhi.n	8004e5e <ism330dhcx_xl_data_rate_get+0x74>
 8004e04:	e8df f003 	tbb	[pc, r3]
 8004e08:	100d0a06 	.word	0x100d0a06
 8004e0c:	1c191613 	.word	0x1c191613
 8004e10:	2825221f 	.word	0x2825221f
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004e14:	2300      	movs	r3, #0
 8004e16:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_XL_ODR_OFF;
      break;
  }

  return ret;
}
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	7023      	strb	r3, [r4, #0]
      break;
 8004e20:	e7fa      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_26Hz;
 8004e22:	2302      	movs	r3, #2
 8004e24:	7023      	strb	r3, [r4, #0]
      break;
 8004e26:	e7f7      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_52Hz;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	7023      	strb	r3, [r4, #0]
      break;
 8004e2c:	e7f4      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_104Hz;
 8004e2e:	2304      	movs	r3, #4
 8004e30:	7023      	strb	r3, [r4, #0]
      break;
 8004e32:	e7f1      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_208Hz;
 8004e34:	2305      	movs	r3, #5
 8004e36:	7023      	strb	r3, [r4, #0]
      break;
 8004e38:	e7ee      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_416Hz;
 8004e3a:	2306      	movs	r3, #6
 8004e3c:	7023      	strb	r3, [r4, #0]
      break;
 8004e3e:	e7eb      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_833Hz;
 8004e40:	2307      	movs	r3, #7
 8004e42:	7023      	strb	r3, [r4, #0]
      break;
 8004e44:	e7e8      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8004e46:	2308      	movs	r3, #8
 8004e48:	7023      	strb	r3, [r4, #0]
      break;
 8004e4a:	e7e5      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8004e4c:	2309      	movs	r3, #9
 8004e4e:	7023      	strb	r3, [r4, #0]
      break;
 8004e50:	e7e2      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8004e52:	230a      	movs	r3, #10
 8004e54:	7023      	strb	r3, [r4, #0]
      break;
 8004e56:	e7df      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8004e58:	230b      	movs	r3, #11
 8004e5a:	7023      	strb	r3, [r4, #0]
      break;
 8004e5c:	e7dc      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>
      *val = ISM330DHCX_XL_ODR_OFF;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	7023      	strb	r3, [r4, #0]
  return ret;
 8004e62:	e7d9      	b.n	8004e18 <ism330dhcx_xl_data_rate_get+0x2e>

08004e64 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8004e64:	b530      	push	{r4, r5, lr}
 8004e66:	b083      	sub	sp, #12
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	aa01      	add	r2, sp, #4
 8004e70:	2111      	movs	r1, #17
 8004e72:	f7ff ff75 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8004e76:	b108      	cbz	r0, 8004e7c <ism330dhcx_gy_full_scale_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 8004e78:	b003      	add	sp, #12
 8004e7a:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.fs_g = (uint8_t)val;
 8004e7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004e80:	f365 0303 	bfi	r3, r5, #0, #4
 8004e84:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004e88:	2301      	movs	r3, #1
 8004e8a:	aa01      	add	r2, sp, #4
 8004e8c:	2111      	movs	r1, #17
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff ff6b 	bl	8004d6a <ism330dhcx_write_reg>
  return ret;
 8004e94:	e7f0      	b.n	8004e78 <ism330dhcx_gy_full_scale_set+0x14>

08004e96 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8004e96:	b510      	push	{r4, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	460c      	mov	r4, r1
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	aa01      	add	r2, sp, #4
 8004ea0:	2111      	movs	r1, #17
 8004ea2:	f7ff ff5d 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8004ea6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d81b      	bhi.n	8004eea <ism330dhcx_gy_full_scale_get+0x54>
 8004eb2:	e8df f003 	tbb	[pc, r3]
 8004eb6:	170b      	.short	0x170b
 8004eb8:	1a0e1a07 	.word	0x1a0e1a07
 8004ebc:	1a111a1a 	.word	0x1a111a1a
 8004ec0:	1a1a      	.short	0x1a1a
 8004ec2:	14          	.byte	0x14
 8004ec3:	00          	.byte	0x00
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_125dps;
      break;
  }

  return ret;
}
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_250dps;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	7023      	strb	r3, [r4, #0]
      break;
 8004ed0:	e7fa      	b.n	8004ec8 <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_500dps;
 8004ed2:	2304      	movs	r3, #4
 8004ed4:	7023      	strb	r3, [r4, #0]
      break;
 8004ed6:	e7f7      	b.n	8004ec8 <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_1000dps;
 8004ed8:	2308      	movs	r3, #8
 8004eda:	7023      	strb	r3, [r4, #0]
      break;
 8004edc:	e7f4      	b.n	8004ec8 <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_2000dps;
 8004ede:	230c      	movs	r3, #12
 8004ee0:	7023      	strb	r3, [r4, #0]
      break;
 8004ee2:	e7f1      	b.n	8004ec8 <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_4000dps;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	7023      	strb	r3, [r4, #0]
      break;
 8004ee8:	e7ee      	b.n	8004ec8 <ism330dhcx_gy_full_scale_get+0x32>
      *val = ISM330DHCX_125dps;
 8004eea:	2302      	movs	r3, #2
 8004eec:	7023      	strb	r3, [r4, #0]
  return ret;
 8004eee:	e7eb      	b.n	8004ec8 <ism330dhcx_gy_full_scale_get+0x32>

08004ef0 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	460c      	mov	r4, r1
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	aa01      	add	r2, sp, #4
 8004efa:	2111      	movs	r1, #17
 8004efc:	f7ff ff30 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 8004f00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	2b0a      	cmp	r3, #10
 8004f08:	d829      	bhi.n	8004f5e <ism330dhcx_gy_data_rate_get+0x6e>
 8004f0a:	e8df f003 	tbb	[pc, r3]
 8004f0e:	0a06      	.short	0x0a06
 8004f10:	1613100d 	.word	0x1613100d
 8004f14:	221f1c19 	.word	0x221f1c19
 8004f18:	25          	.byte	0x25
 8004f19:	00          	.byte	0x00
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	7023      	strb	r3, [r4, #0]
      *val = ISM330DHCX_GY_ODR_OFF;
      break;
  }

  return ret;
}
 8004f1e:	b002      	add	sp, #8
 8004f20:	bd10      	pop	{r4, pc}
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8004f22:	2301      	movs	r3, #1
 8004f24:	7023      	strb	r3, [r4, #0]
      break;
 8004f26:	e7fa      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_26Hz;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	7023      	strb	r3, [r4, #0]
      break;
 8004f2c:	e7f7      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_52Hz;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	7023      	strb	r3, [r4, #0]
      break;
 8004f32:	e7f4      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_104Hz;
 8004f34:	2304      	movs	r3, #4
 8004f36:	7023      	strb	r3, [r4, #0]
      break;
 8004f38:	e7f1      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_208Hz;
 8004f3a:	2305      	movs	r3, #5
 8004f3c:	7023      	strb	r3, [r4, #0]
      break;
 8004f3e:	e7ee      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_416Hz;
 8004f40:	2306      	movs	r3, #6
 8004f42:	7023      	strb	r3, [r4, #0]
      break;
 8004f44:	e7eb      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_833Hz;
 8004f46:	2307      	movs	r3, #7
 8004f48:	7023      	strb	r3, [r4, #0]
      break;
 8004f4a:	e7e8      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	7023      	strb	r3, [r4, #0]
      break;
 8004f50:	e7e5      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8004f52:	2309      	movs	r3, #9
 8004f54:	7023      	strb	r3, [r4, #0]
      break;
 8004f56:	e7e2      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8004f58:	230a      	movs	r3, #10
 8004f5a:	7023      	strb	r3, [r4, #0]
      break;
 8004f5c:	e7df      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>
      *val = ISM330DHCX_GY_ODR_OFF;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	7023      	strb	r3, [r4, #0]
  return ret;
 8004f62:	e7dc      	b.n	8004f1e <ism330dhcx_gy_data_rate_get+0x2e>

08004f64 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8004f64:	b530      	push	{r4, r5, lr}
 8004f66:	b083      	sub	sp, #12
 8004f68:	4604      	mov	r4, r0
 8004f6a:	460d      	mov	r5, r1
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	aa01      	add	r2, sp, #4
 8004f70:	2112      	movs	r1, #18
 8004f72:	f7ff fef5 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8004f76:	b108      	cbz	r0, 8004f7c <ism330dhcx_block_data_update_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8004f78:	b003      	add	sp, #12
 8004f7a:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.bdu = (uint8_t)val;
 8004f7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f80:	f365 1386 	bfi	r3, r5, #6, #1
 8004f84:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004f88:	2301      	movs	r3, #1
 8004f8a:	aa01      	add	r2, sp, #4
 8004f8c:	2112      	movs	r1, #18
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f7ff feeb 	bl	8004d6a <ism330dhcx_write_reg>
  return ret;
 8004f94:	e7f0      	b.n	8004f78 <ism330dhcx_block_data_update_set+0x14>

08004f96 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8004f96:	b510      	push	{r4, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	466a      	mov	r2, sp
 8004fa0:	2122      	movs	r1, #34	; 0x22
 8004fa2:	f7ff fedd 	bl	8004d60 <ism330dhcx_read_reg>
  val[0] = (int16_t)buff[1];
 8004fa6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004faa:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004fac:	f89d 3000 	ldrb.w	r3, [sp]
 8004fb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004fb4:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8004fb6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004fba:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004fbc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004fc0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004fc4:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8004fc6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004fca:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004fcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004fd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004fd4:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8004fd6:	b002      	add	sp, #8
 8004fd8:	bd10      	pop	{r4, pc}

08004fda <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8004fe0:	2306      	movs	r3, #6
 8004fe2:	466a      	mov	r2, sp
 8004fe4:	2128      	movs	r1, #40	; 0x28
 8004fe6:	f7ff febb 	bl	8004d60 <ism330dhcx_read_reg>
  val[0] = (int16_t)buff[1];
 8004fea:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004fee:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004ff0:	f89d 3000 	ldrb.w	r3, [sp]
 8004ff4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ff8:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8004ffa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004ffe:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005000:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005004:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005008:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 800500a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800500e:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005010:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005014:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005018:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 800501a:	b002      	add	sp, #8
 800501c:	bd10      	pop	{r4, pc}

0800501e <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800501e:	b530      	push	{r4, r5, lr}
 8005020:	b083      	sub	sp, #12
 8005022:	4604      	mov	r4, r0
 8005024:	460d      	mov	r5, r1
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8005026:	2301      	movs	r3, #1
 8005028:	aa01      	add	r2, sp, #4
 800502a:	2118      	movs	r1, #24
 800502c:	f7ff fe98 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8005030:	b108      	cbz	r0, 8005036 <ism330dhcx_device_conf_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
}
 8005032:	b003      	add	sp, #12
 8005034:	bd30      	pop	{r4, r5, pc}
    ctrl9_xl.device_conf = (uint8_t)val;
 8005036:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800503a:	f365 0341 	bfi	r3, r5, #1, #1
 800503e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8005042:	2301      	movs	r3, #1
 8005044:	aa01      	add	r2, sp, #4
 8005046:	2118      	movs	r1, #24
 8005048:	4620      	mov	r0, r4
 800504a:	f7ff fe8e 	bl	8004d6a <ism330dhcx_write_reg>
  return ret;
 800504e:	e7f0      	b.n	8005032 <ism330dhcx_device_conf_set+0x14>

08005050 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8005050:	b530      	push	{r4, r5, lr}
 8005052:	b083      	sub	sp, #12
 8005054:	4604      	mov	r4, r0
 8005056:	460d      	mov	r5, r1
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005058:	2301      	movs	r3, #1
 800505a:	aa01      	add	r2, sp, #4
 800505c:	4619      	mov	r1, r3
 800505e:	f7ff fe7f 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8005062:	b108      	cbz	r0, 8005068 <ism330dhcx_mem_bank_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
}
 8005064:	b003      	add	sp, #12
 8005066:	bd30      	pop	{r4, r5, pc}
    func_cfg_access.reg_access = (uint8_t)val;
 8005068:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800506c:	f365 1387 	bfi	r3, r5, #6, #2
 8005070:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005074:	2301      	movs	r3, #1
 8005076:	aa01      	add	r2, sp, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4620      	mov	r0, r4
 800507c:	f7ff fe75 	bl	8004d6a <ism330dhcx_write_reg>
  return ret;
 8005080:	e7f0      	b.n	8005064 <ism330dhcx_mem_bank_set+0x14>

08005082 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005082:	b508      	push	{r3, lr}
 8005084:	460a      	mov	r2, r1
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8005086:	2301      	movs	r3, #1
 8005088:	210f      	movs	r1, #15
 800508a:	f7ff fe69 	bl	8004d60 <ism330dhcx_read_reg>

  return ret;
}
 800508e:	bd08      	pop	{r3, pc}

08005090 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005090:	b530      	push	{r4, r5, lr}
 8005092:	b083      	sub	sp, #12
 8005094:	4604      	mov	r4, r0
 8005096:	460d      	mov	r5, r1
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005098:	2301      	movs	r3, #1
 800509a:	aa01      	add	r2, sp, #4
 800509c:	2112      	movs	r1, #18
 800509e:	f7ff fe5f 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80050a2:	b108      	cbz	r0, 80050a8 <ism330dhcx_reset_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 80050a4:	b003      	add	sp, #12
 80050a6:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.sw_reset = (uint8_t)val;
 80050a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80050ac:	f365 0300 	bfi	r3, r5, #0, #1
 80050b0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80050b4:	2301      	movs	r3, #1
 80050b6:	aa01      	add	r2, sp, #4
 80050b8:	2112      	movs	r1, #18
 80050ba:	4620      	mov	r0, r4
 80050bc:	f7ff fe55 	bl	8004d6a <ism330dhcx_write_reg>
  return ret;
 80050c0:	e7f0      	b.n	80050a4 <ism330dhcx_reset_set+0x14>

080050c2 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80050c2:	b530      	push	{r4, r5, lr}
 80050c4:	b083      	sub	sp, #12
 80050c6:	4604      	mov	r4, r0
 80050c8:	460d      	mov	r5, r1
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80050ca:	2301      	movs	r3, #1
 80050cc:	aa01      	add	r2, sp, #4
 80050ce:	2112      	movs	r1, #18
 80050d0:	f7ff fe46 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80050d4:	b108      	cbz	r0, 80050da <ism330dhcx_auto_increment_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 80050d6:	b003      	add	sp, #12
 80050d8:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.if_inc = (uint8_t)val;
 80050da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80050de:	f365 0382 	bfi	r3, r5, #2, #1
 80050e2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80050e6:	2301      	movs	r3, #1
 80050e8:	aa01      	add	r2, sp, #4
 80050ea:	2112      	movs	r1, #18
 80050ec:	4620      	mov	r0, r4
 80050ee:	f7ff fe3c 	bl	8004d6a <ism330dhcx_write_reg>
  return ret;
 80050f2:	e7f0      	b.n	80050d6 <ism330dhcx_auto_increment_set+0x14>

080050f4 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 80050f4:	b530      	push	{r4, r5, lr}
 80050f6:	b083      	sub	sp, #12
 80050f8:	4604      	mov	r4, r0
 80050fa:	460d      	mov	r5, r1
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80050fc:	2301      	movs	r3, #1
 80050fe:	aa01      	add	r2, sp, #4
 8005100:	210a      	movs	r1, #10
 8005102:	f7ff fe2d 	bl	8004d60 <ism330dhcx_read_reg>
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8005106:	b108      	cbz	r0, 800510c <ism330dhcx_fifo_mode_set+0x18>
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
}
 8005108:	b003      	add	sp, #12
 800510a:	bd30      	pop	{r4, r5, pc}
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800510c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005110:	f365 0302 	bfi	r3, r5, #0, #3
 8005114:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005118:	2301      	movs	r3, #1
 800511a:	aa01      	add	r2, sp, #4
 800511c:	210a      	movs	r1, #10
 800511e:	4620      	mov	r0, r4
 8005120:	f7ff fe23 	bl	8004d6a <ism330dhcx_write_reg>
  return ret;
 8005124:	e7f0      	b.n	8005108 <ism330dhcx_fifo_mode_set+0x14>

08005126 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8005126:	b538      	push	{r3, r4, r5, lr}
 8005128:	4604      	mov	r4, r0
 800512a:	460d      	mov	r5, r1
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800512c:	2102      	movs	r1, #2
 800512e:	f7ff ff8f 	bl	8005050 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 8005132:	b110      	cbz	r0, 800513a <ism330dhcx_fsm_enable_get+0x14>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
  }

  if (ret == 0)
 8005134:	b140      	cbz	r0, 8005148 <ism330dhcx_fsm_enable_get+0x22>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
  }

  if (ret == 0)
 8005136:	b170      	cbz	r0, 8005156 <ism330dhcx_fsm_enable_get+0x30>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  return ret;
}
 8005138:	bd38      	pop	{r3, r4, r5, pc}
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 800513a:	2301      	movs	r3, #1
 800513c:	462a      	mov	r2, r5
 800513e:	2146      	movs	r1, #70	; 0x46
 8005140:	4620      	mov	r0, r4
 8005142:	f7ff fe0d 	bl	8004d60 <ism330dhcx_read_reg>
 8005146:	e7f5      	b.n	8005134 <ism330dhcx_fsm_enable_get+0xe>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8005148:	2301      	movs	r3, #1
 800514a:	18ea      	adds	r2, r5, r3
 800514c:	2147      	movs	r1, #71	; 0x47
 800514e:	4620      	mov	r0, r4
 8005150:	f7ff fe06 	bl	8004d60 <ism330dhcx_read_reg>
 8005154:	e7ef      	b.n	8005136 <ism330dhcx_fsm_enable_get+0x10>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005156:	2100      	movs	r1, #0
 8005158:	4620      	mov	r0, r4
 800515a:	f7ff ff79 	bl	8005050 <ism330dhcx_mem_bank_set>
  return ret;
 800515e:	e7eb      	b.n	8005138 <ism330dhcx_fsm_enable_get+0x12>

08005160 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8005160:	b530      	push	{r4, r5, lr}
 8005162:	b083      	sub	sp, #12
 8005164:	4604      	mov	r4, r0
 8005166:	460d      	mov	r5, r1
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005168:	2102      	movs	r1, #2
 800516a:	f7ff ff71 	bl	8005050 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 800516e:	b150      	cbz	r0, 8005186 <ism330dhcx_fsm_data_rate_get+0x26>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8005170:	b180      	cbz	r0, 8005194 <ism330dhcx_fsm_data_rate_get+0x34>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8005172:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005176:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800517a:	2b03      	cmp	r3, #3
 800517c:	d81c      	bhi.n	80051b8 <ism330dhcx_fsm_data_rate_get+0x58>
 800517e:	e8df f003 	tbb	[pc, r3]
 8005182:	120e      	.short	0x120e
 8005184:	1815      	.short	0x1815
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8005186:	2301      	movs	r3, #1
 8005188:	aa01      	add	r2, sp, #4
 800518a:	215f      	movs	r1, #95	; 0x5f
 800518c:	4620      	mov	r0, r4
 800518e:	f7ff fde7 	bl	8004d60 <ism330dhcx_read_reg>
 8005192:	e7ed      	b.n	8005170 <ism330dhcx_fsm_data_rate_get+0x10>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005194:	2100      	movs	r1, #0
 8005196:	4620      	mov	r0, r4
 8005198:	f7ff ff5a 	bl	8005050 <ism330dhcx_mem_bank_set>
 800519c:	e7e9      	b.n	8005172 <ism330dhcx_fsm_data_rate_get+0x12>
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800519e:	2300      	movs	r3, #0
 80051a0:	702b      	strb	r3, [r5, #0]
      *val = ISM330DHCX_ODR_FSM_12Hz5;
      break;
  }

  return ret;
}
 80051a2:	b003      	add	sp, #12
 80051a4:	bd30      	pop	{r4, r5, pc}
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80051a6:	2301      	movs	r3, #1
 80051a8:	702b      	strb	r3, [r5, #0]
      break;
 80051aa:	e7fa      	b.n	80051a2 <ism330dhcx_fsm_data_rate_get+0x42>
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80051ac:	2302      	movs	r3, #2
 80051ae:	702b      	strb	r3, [r5, #0]
      break;
 80051b0:	e7f7      	b.n	80051a2 <ism330dhcx_fsm_data_rate_get+0x42>
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80051b2:	2303      	movs	r3, #3
 80051b4:	702b      	strb	r3, [r5, #0]
      break;
 80051b6:	e7f4      	b.n	80051a2 <ism330dhcx_fsm_data_rate_get+0x42>
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80051b8:	2300      	movs	r3, #0
 80051ba:	702b      	strb	r3, [r5, #0]
  return ret;
 80051bc:	e7f1      	b.n	80051a2 <ism330dhcx_fsm_data_rate_get+0x42>

080051be <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80051be:	b530      	push	{r4, r5, lr}
 80051c0:	b083      	sub	sp, #12
 80051c2:	4604      	mov	r4, r0
 80051c4:	460d      	mov	r5, r1
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80051c6:	2102      	movs	r1, #2
 80051c8:	f7ff ff42 	bl	8005050 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 80051cc:	b110      	cbz	r0, 80051d4 <ism330dhcx_mlc_get+0x16>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80051ce:	b140      	cbz	r0, 80051e2 <ism330dhcx_mlc_get+0x24>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
    *val  = reg.mlc_en;
  }

  return ret;
}
 80051d0:	b003      	add	sp, #12
 80051d2:	bd30      	pop	{r4, r5, pc}
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80051d4:	2301      	movs	r3, #1
 80051d6:	aa01      	add	r2, sp, #4
 80051d8:	2105      	movs	r1, #5
 80051da:	4620      	mov	r0, r4
 80051dc:	f7ff fdc0 	bl	8004d60 <ism330dhcx_read_reg>
 80051e0:	e7f5      	b.n	80051ce <ism330dhcx_mlc_get+0x10>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80051e2:	2100      	movs	r1, #0
 80051e4:	4620      	mov	r0, r4
 80051e6:	f7ff ff33 	bl	8005050 <ism330dhcx_mem_bank_set>
    *val  = reg.mlc_en;
 80051ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80051f2:	702b      	strb	r3, [r5, #0]
  return ret;
 80051f4:	e7ec      	b.n	80051d0 <ism330dhcx_mlc_get+0x12>

080051f6 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80051f6:	b530      	push	{r4, r5, lr}
 80051f8:	b083      	sub	sp, #12
 80051fa:	4605      	mov	r5, r0
 80051fc:	460c      	mov	r4, r1
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80051fe:	2102      	movs	r1, #2
 8005200:	f7ff ff26 	bl	8005050 <ism330dhcx_mem_bank_set>

  if (ret == 0)
 8005204:	b150      	cbz	r0, 800521c <ism330dhcx_mlc_data_rate_get+0x26>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005206:	b9b0      	cbnz	r0, 8005236 <ism330dhcx_mlc_data_rate_get+0x40>
  {
    switch (reg.mlc_odr)
 8005208:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800520c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005210:	2b03      	cmp	r3, #3
 8005212:	d81b      	bhi.n	800524c <ism330dhcx_mlc_data_rate_get+0x56>
 8005214:	e8df f003 	tbb	[pc, r3]
 8005218:	17141109 	.word	0x17141109
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800521c:	2301      	movs	r3, #1
 800521e:	aa01      	add	r2, sp, #4
 8005220:	2160      	movs	r1, #96	; 0x60
 8005222:	4628      	mov	r0, r5
 8005224:	f7ff fd9c 	bl	8004d60 <ism330dhcx_read_reg>
 8005228:	e7ed      	b.n	8005206 <ism330dhcx_mlc_data_rate_get+0x10>
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800522a:	2300      	movs	r3, #0
 800522c:	7023      	strb	r3, [r4, #0]
      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
        break;
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800522e:	2100      	movs	r1, #0
 8005230:	4628      	mov	r0, r5
 8005232:	f7ff ff0d 	bl	8005050 <ism330dhcx_mem_bank_set>
  }

  return ret;
}
 8005236:	b003      	add	sp, #12
 8005238:	bd30      	pop	{r4, r5, pc}
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 800523a:	2301      	movs	r3, #1
 800523c:	7023      	strb	r3, [r4, #0]
        break;
 800523e:	e7f6      	b.n	800522e <ism330dhcx_mlc_data_rate_get+0x38>
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8005240:	2302      	movs	r3, #2
 8005242:	7023      	strb	r3, [r4, #0]
        break;
 8005244:	e7f3      	b.n	800522e <ism330dhcx_mlc_data_rate_get+0x38>
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8005246:	2303      	movs	r3, #3
 8005248:	7023      	strb	r3, [r4, #0]
        break;
 800524a:	e7f0      	b.n	800522e <ism330dhcx_mlc_data_rate_get+0x38>
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800524c:	2300      	movs	r3, #0
 800524e:	7023      	strb	r3, [r4, #0]
        break;
 8005250:	e7ed      	b.n	800522e <ism330dhcx_mlc_data_rate_get+0x38>

08005252 <ism330dhcx_xl_data_rate_set>:
{
 8005252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005254:	b083      	sub	sp, #12
 8005256:	4604      	mov	r4, r0
 8005258:	460d      	mov	r5, r1
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 800525a:	a901      	add	r1, sp, #4
 800525c:	f7ff ff63 	bl	8005126 <ism330dhcx_fsm_enable_get>
  if (ret == 0)
 8005260:	4602      	mov	r2, r0
 8005262:	2800      	cmp	r0, #0
 8005264:	d160      	bne.n	8005328 <ism330dhcx_xl_data_rate_set+0xd6>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005266:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800526a:	f001 0301 	and.w	r3, r1, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 800526e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005272:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005274:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005278:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
 800527a:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 800527e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005280:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005284:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005286:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 800528a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 800528c:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005290:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005292:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005296:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800529a:	f001 0001 	and.w	r0, r1, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 800529e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm10_en |
 80052a0:	f3c1 0040 	ubfx	r0, r1, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 80052a4:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm11_en |
 80052a6:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 80052aa:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm12_en |
 80052ac:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 80052b0:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm13_en |
 80052b2:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 80052b6:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm14_en |
 80052b8:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 80052bc:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm15_en |
 80052be:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 80052c2:	4303      	orrs	r3, r0
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80052c4:	ea53 13d1 	orrs.w	r3, r3, r1, lsr #7
 80052c8:	d101      	bne.n	80052ce <ism330dhcx_xl_data_rate_set+0x7c>
  ism330dhcx_odr_xl_t odr_xl =  val;
 80052ca:	462e      	mov	r6, r5
 80052cc:	e02d      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80052ce:	f10d 0103 	add.w	r1, sp, #3
 80052d2:	4620      	mov	r0, r4
 80052d4:	f7ff ff44 	bl	8005160 <ism330dhcx_fsm_data_rate_get>
      if (ret == 0)
 80052d8:	4602      	mov	r2, r0
 80052da:	bb88      	cbnz	r0, 8005340 <ism330dhcx_xl_data_rate_set+0xee>
        switch (fsm_odr)
 80052dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d82f      	bhi.n	8005344 <ism330dhcx_xl_data_rate_set+0xf2>
 80052e4:	e8df f003 	tbb	[pc, r3]
 80052e8:	150c0502 	.word	0x150c0502
            if (val == ISM330DHCX_XL_ODR_OFF)
 80052ec:	bb65      	cbnz	r5, 8005348 <ism330dhcx_xl_data_rate_set+0xf6>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80052ee:	2601      	movs	r6, #1
 80052f0:	e01b      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 80052f2:	b35d      	cbz	r5, 800534c <ism330dhcx_xl_data_rate_set+0xfa>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80052f4:	2d01      	cmp	r5, #1
 80052f6:	d001      	beq.n	80052fc <ism330dhcx_xl_data_rate_set+0xaa>
              odr_xl = val;
 80052f8:	462e      	mov	r6, r5
 80052fa:	e016      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80052fc:	2602      	movs	r6, #2
 80052fe:	e014      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005300:	b335      	cbz	r5, 8005350 <ism330dhcx_xl_data_rate_set+0xfe>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005302:	2d01      	cmp	r5, #1
 8005304:	d026      	beq.n	8005354 <ism330dhcx_xl_data_rate_set+0x102>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8005306:	2d02      	cmp	r5, #2
 8005308:	d001      	beq.n	800530e <ism330dhcx_xl_data_rate_set+0xbc>
              odr_xl = val;
 800530a:	462e      	mov	r6, r5
 800530c:	e00d      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800530e:	2603      	movs	r6, #3
 8005310:	e00b      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005312:	b30d      	cbz	r5, 8005358 <ism330dhcx_xl_data_rate_set+0x106>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005314:	2d02      	cmp	r5, #2
 8005316:	d021      	beq.n	800535c <ism330dhcx_xl_data_rate_set+0x10a>
 8005318:	2d03      	cmp	r5, #3
 800531a:	d021      	beq.n	8005360 <ism330dhcx_xl_data_rate_set+0x10e>
 800531c:	2d01      	cmp	r5, #1
 800531e:	d001      	beq.n	8005324 <ism330dhcx_xl_data_rate_set+0xd2>
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005320:	462e      	mov	r6, r5
 8005322:	e002      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
 8005324:	2604      	movs	r6, #4
 8005326:	e000      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
  ism330dhcx_odr_xl_t odr_xl =  val;
 8005328:	462e      	mov	r6, r5
  mlc_enable = PROPERTY_DISABLE;
 800532a:	2300      	movs	r3, #0
 800532c:	f88d 3002 	strb.w	r3, [sp, #2]
  if (ret == 0)
 8005330:	b1c2      	cbz	r2, 8005364 <ism330dhcx_xl_data_rate_set+0x112>
  if (ret == 0)
 8005332:	2a00      	cmp	r2, #0
 8005334:	d05e      	beq.n	80053f4 <ism330dhcx_xl_data_rate_set+0x1a2>
  if (ret == 0)
 8005336:	2a00      	cmp	r2, #0
 8005338:	d064      	beq.n	8005404 <ism330dhcx_xl_data_rate_set+0x1b2>
}
 800533a:	4610      	mov	r0, r2
 800533c:	b003      	add	sp, #12
 800533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ism330dhcx_odr_xl_t odr_xl =  val;
 8005340:	462e      	mov	r6, r5
 8005342:	e7f2      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
        switch (fsm_odr)
 8005344:	462e      	mov	r6, r5
 8005346:	e7f0      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = val;
 8005348:	462e      	mov	r6, r5
 800534a:	e7ee      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800534c:	2602      	movs	r6, #2
 800534e:	e7ec      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005350:	2603      	movs	r6, #3
 8005352:	e7ea      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005354:	2603      	movs	r6, #3
 8005356:	e7e8      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005358:	2604      	movs	r6, #4
 800535a:	e7e6      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
            if (val == ISM330DHCX_XL_ODR_OFF)
 800535c:	2604      	movs	r6, #4
 800535e:	e7e4      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
 8005360:	2604      	movs	r6, #4
 8005362:	e7e2      	b.n	800532a <ism330dhcx_xl_data_rate_set+0xd8>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005364:	f10d 0102 	add.w	r1, sp, #2
 8005368:	4620      	mov	r0, r4
 800536a:	f7ff ff28 	bl	80051be <ism330dhcx_mlc_get>
 800536e:	4602      	mov	r2, r0
    if (mlc_enable == PROPERTY_ENABLE)
 8005370:	f89d 7002 	ldrb.w	r7, [sp, #2]
 8005374:	2f01      	cmp	r7, #1
 8005376:	d1dc      	bne.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005378:	f10d 0101 	add.w	r1, sp, #1
 800537c:	4620      	mov	r0, r4
 800537e:	f7ff ff3a 	bl	80051f6 <ism330dhcx_mlc_data_rate_get>
      if (ret == 0)
 8005382:	4602      	mov	r2, r0
 8005384:	2800      	cmp	r0, #0
 8005386:	d1d4      	bne.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
        switch (mlc_odr)
 8005388:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d821      	bhi.n	80053d4 <ism330dhcx_xl_data_rate_set+0x182>
 8005390:	e8df f003 	tbb	[pc, r3]
 8005394:	150c0502 	.word	0x150c0502
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005398:	b9f5      	cbnz	r5, 80053d8 <ism330dhcx_xl_data_rate_set+0x186>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800539a:	463e      	mov	r6, r7
 800539c:	e7c9      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
            if (val == ISM330DHCX_XL_ODR_OFF)
 800539e:	b1ed      	cbz	r5, 80053dc <ism330dhcx_xl_data_rate_set+0x18a>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80053a0:	2d01      	cmp	r5, #1
 80053a2:	d001      	beq.n	80053a8 <ism330dhcx_xl_data_rate_set+0x156>
              odr_xl = val;
 80053a4:	462e      	mov	r6, r5
 80053a6:	e7c4      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80053a8:	2602      	movs	r6, #2
 80053aa:	e7c2      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
            if (val == ISM330DHCX_XL_ODR_OFF)
 80053ac:	b1c5      	cbz	r5, 80053e0 <ism330dhcx_xl_data_rate_set+0x18e>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80053ae:	2d01      	cmp	r5, #1
 80053b0:	d018      	beq.n	80053e4 <ism330dhcx_xl_data_rate_set+0x192>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80053b2:	2d02      	cmp	r5, #2
 80053b4:	d001      	beq.n	80053ba <ism330dhcx_xl_data_rate_set+0x168>
              odr_xl = val;
 80053b6:	462e      	mov	r6, r5
 80053b8:	e7bb      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80053ba:	2603      	movs	r6, #3
 80053bc:	e7b9      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
            if (val == ISM330DHCX_XL_ODR_OFF)
 80053be:	b19d      	cbz	r5, 80053e8 <ism330dhcx_xl_data_rate_set+0x196>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80053c0:	2d02      	cmp	r5, #2
 80053c2:	d013      	beq.n	80053ec <ism330dhcx_xl_data_rate_set+0x19a>
 80053c4:	2d03      	cmp	r5, #3
 80053c6:	d013      	beq.n	80053f0 <ism330dhcx_xl_data_rate_set+0x19e>
 80053c8:	2d01      	cmp	r5, #1
 80053ca:	d001      	beq.n	80053d0 <ism330dhcx_xl_data_rate_set+0x17e>
            if (val == ISM330DHCX_XL_ODR_OFF)
 80053cc:	462e      	mov	r6, r5
 80053ce:	e7b0      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
 80053d0:	2604      	movs	r6, #4
 80053d2:	e7ae      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
        switch (mlc_odr)
 80053d4:	462e      	mov	r6, r5
 80053d6:	e7ac      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
              odr_xl = val;
 80053d8:	462e      	mov	r6, r5
 80053da:	e7aa      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80053dc:	2602      	movs	r6, #2
 80053de:	e7a8      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80053e0:	2603      	movs	r6, #3
 80053e2:	e7a6      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80053e4:	2603      	movs	r6, #3
 80053e6:	e7a4      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80053e8:	2604      	movs	r6, #4
 80053ea:	e7a2      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
            if (val == ISM330DHCX_XL_ODR_OFF)
 80053ec:	2604      	movs	r6, #4
 80053ee:	e7a0      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
 80053f0:	2604      	movs	r6, #4
 80053f2:	e79e      	b.n	8005332 <ism330dhcx_xl_data_rate_set+0xe0>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80053f4:	2301      	movs	r3, #1
 80053f6:	466a      	mov	r2, sp
 80053f8:	2110      	movs	r1, #16
 80053fa:	4620      	mov	r0, r4
 80053fc:	f7ff fcb0 	bl	8004d60 <ism330dhcx_read_reg>
 8005400:	4602      	mov	r2, r0
 8005402:	e798      	b.n	8005336 <ism330dhcx_xl_data_rate_set+0xe4>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005404:	f89d 3000 	ldrb.w	r3, [sp]
 8005408:	f366 1307 	bfi	r3, r6, #4, #4
 800540c:	f88d 3000 	strb.w	r3, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005410:	2301      	movs	r3, #1
 8005412:	466a      	mov	r2, sp
 8005414:	2110      	movs	r1, #16
 8005416:	4620      	mov	r0, r4
 8005418:	f7ff fca7 	bl	8004d6a <ism330dhcx_write_reg>
 800541c:	4602      	mov	r2, r0
  return ret;
 800541e:	e78c      	b.n	800533a <ism330dhcx_xl_data_rate_set+0xe8>

08005420 <ism330dhcx_gy_data_rate_set>:
{
 8005420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005422:	b083      	sub	sp, #12
 8005424:	4604      	mov	r4, r0
 8005426:	460d      	mov	r5, r1
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005428:	a901      	add	r1, sp, #4
 800542a:	f7ff fe7c 	bl	8005126 <ism330dhcx_fsm_enable_get>
  if (ret == 0)
 800542e:	4602      	mov	r2, r0
 8005430:	2800      	cmp	r0, #0
 8005432:	d160      	bne.n	80054f6 <ism330dhcx_gy_data_rate_set+0xd6>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005434:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005438:	f001 0301 	and.w	r3, r1, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 800543c:	f3c1 0040 	ubfx	r0, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005440:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005442:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005446:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005448:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 800544c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
 800544e:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005452:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005454:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005458:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 800545a:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 800545e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005460:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005464:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8005468:	f001 0001 	and.w	r0, r1, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 800546c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm10_en |
 800546e:	f3c1 0040 	ubfx	r0, r1, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005472:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm11_en |
 8005474:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8005478:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm12_en |
 800547a:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 800547e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm13_en |
 8005480:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8005484:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm14_en |
 8005486:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 800548a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm15_en |
 800548c:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 8005490:	4303      	orrs	r3, r0
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005492:	ea53 13d1 	orrs.w	r3, r3, r1, lsr #7
 8005496:	d101      	bne.n	800549c <ism330dhcx_gy_data_rate_set+0x7c>
  ism330dhcx_odr_g_t odr_gy =  val;
 8005498:	462e      	mov	r6, r5
 800549a:	e02d      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800549c:	f10d 0103 	add.w	r1, sp, #3
 80054a0:	4620      	mov	r0, r4
 80054a2:	f7ff fe5d 	bl	8005160 <ism330dhcx_fsm_data_rate_get>
      if (ret == 0)
 80054a6:	4602      	mov	r2, r0
 80054a8:	bb88      	cbnz	r0, 800550e <ism330dhcx_gy_data_rate_set+0xee>
        switch (fsm_odr)
 80054aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d82f      	bhi.n	8005512 <ism330dhcx_gy_data_rate_set+0xf2>
 80054b2:	e8df f003 	tbb	[pc, r3]
 80054b6:	0502      	.short	0x0502
 80054b8:	150c      	.short	0x150c
            if (val == ISM330DHCX_GY_ODR_OFF)
 80054ba:	bb65      	cbnz	r5, 8005516 <ism330dhcx_gy_data_rate_set+0xf6>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80054bc:	2601      	movs	r6, #1
 80054be:	e01b      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 80054c0:	b35d      	cbz	r5, 800551a <ism330dhcx_gy_data_rate_set+0xfa>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80054c2:	2d01      	cmp	r5, #1
 80054c4:	d001      	beq.n	80054ca <ism330dhcx_gy_data_rate_set+0xaa>
              odr_gy = val;
 80054c6:	462e      	mov	r6, r5
 80054c8:	e016      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80054ca:	2602      	movs	r6, #2
 80054cc:	e014      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 80054ce:	b335      	cbz	r5, 800551e <ism330dhcx_gy_data_rate_set+0xfe>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80054d0:	2d01      	cmp	r5, #1
 80054d2:	d026      	beq.n	8005522 <ism330dhcx_gy_data_rate_set+0x102>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 80054d4:	2d02      	cmp	r5, #2
 80054d6:	d001      	beq.n	80054dc <ism330dhcx_gy_data_rate_set+0xbc>
              odr_gy = val;
 80054d8:	462e      	mov	r6, r5
 80054da:	e00d      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80054dc:	2603      	movs	r6, #3
 80054de:	e00b      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 80054e0:	b30d      	cbz	r5, 8005526 <ism330dhcx_gy_data_rate_set+0x106>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 80054e2:	2d02      	cmp	r5, #2
 80054e4:	d021      	beq.n	800552a <ism330dhcx_gy_data_rate_set+0x10a>
 80054e6:	2d03      	cmp	r5, #3
 80054e8:	d021      	beq.n	800552e <ism330dhcx_gy_data_rate_set+0x10e>
 80054ea:	2d01      	cmp	r5, #1
 80054ec:	d001      	beq.n	80054f2 <ism330dhcx_gy_data_rate_set+0xd2>
            if (val == ISM330DHCX_GY_ODR_OFF)
 80054ee:	462e      	mov	r6, r5
 80054f0:	e002      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
 80054f2:	2604      	movs	r6, #4
 80054f4:	e000      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
  ism330dhcx_odr_g_t odr_gy =  val;
 80054f6:	462e      	mov	r6, r5
  mlc_enable = PROPERTY_DISABLE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f88d 3002 	strb.w	r3, [sp, #2]
  if (ret == 0)
 80054fe:	b1c2      	cbz	r2, 8005532 <ism330dhcx_gy_data_rate_set+0x112>
  if (ret == 0)
 8005500:	2a00      	cmp	r2, #0
 8005502:	d05e      	beq.n	80055c2 <ism330dhcx_gy_data_rate_set+0x1a2>
  if (ret == 0)
 8005504:	2a00      	cmp	r2, #0
 8005506:	d064      	beq.n	80055d2 <ism330dhcx_gy_data_rate_set+0x1b2>
}
 8005508:	4610      	mov	r0, r2
 800550a:	b003      	add	sp, #12
 800550c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ism330dhcx_odr_g_t odr_gy =  val;
 800550e:	462e      	mov	r6, r5
 8005510:	e7f2      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
        switch (fsm_odr)
 8005512:	462e      	mov	r6, r5
 8005514:	e7f0      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = val;
 8005516:	462e      	mov	r6, r5
 8005518:	e7ee      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800551a:	2602      	movs	r6, #2
 800551c:	e7ec      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800551e:	2603      	movs	r6, #3
 8005520:	e7ea      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005522:	2603      	movs	r6, #3
 8005524:	e7e8      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005526:	2604      	movs	r6, #4
 8005528:	e7e6      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
            if (val == ISM330DHCX_GY_ODR_OFF)
 800552a:	2604      	movs	r6, #4
 800552c:	e7e4      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
 800552e:	2604      	movs	r6, #4
 8005530:	e7e2      	b.n	80054f8 <ism330dhcx_gy_data_rate_set+0xd8>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005532:	f10d 0102 	add.w	r1, sp, #2
 8005536:	4620      	mov	r0, r4
 8005538:	f7ff fe41 	bl	80051be <ism330dhcx_mlc_get>
 800553c:	4602      	mov	r2, r0
    if (mlc_enable == PROPERTY_ENABLE)
 800553e:	f89d 7002 	ldrb.w	r7, [sp, #2]
 8005542:	2f01      	cmp	r7, #1
 8005544:	d1dc      	bne.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005546:	f10d 0101 	add.w	r1, sp, #1
 800554a:	4620      	mov	r0, r4
 800554c:	f7ff fe53 	bl	80051f6 <ism330dhcx_mlc_data_rate_get>
      if (ret == 0)
 8005550:	4602      	mov	r2, r0
 8005552:	2800      	cmp	r0, #0
 8005554:	d1d4      	bne.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
        switch (mlc_odr)
 8005556:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800555a:	2b03      	cmp	r3, #3
 800555c:	d821      	bhi.n	80055a2 <ism330dhcx_gy_data_rate_set+0x182>
 800555e:	e8df f003 	tbb	[pc, r3]
 8005562:	0502      	.short	0x0502
 8005564:	150c      	.short	0x150c
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005566:	b9f5      	cbnz	r5, 80055a6 <ism330dhcx_gy_data_rate_set+0x186>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005568:	463e      	mov	r6, r7
 800556a:	e7c9      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
            if (val == ISM330DHCX_GY_ODR_OFF)
 800556c:	b1ed      	cbz	r5, 80055aa <ism330dhcx_gy_data_rate_set+0x18a>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800556e:	2d01      	cmp	r5, #1
 8005570:	d001      	beq.n	8005576 <ism330dhcx_gy_data_rate_set+0x156>
              odr_gy = val;
 8005572:	462e      	mov	r6, r5
 8005574:	e7c4      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005576:	2602      	movs	r6, #2
 8005578:	e7c2      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
            if (val == ISM330DHCX_GY_ODR_OFF)
 800557a:	b1c5      	cbz	r5, 80055ae <ism330dhcx_gy_data_rate_set+0x18e>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800557c:	2d01      	cmp	r5, #1
 800557e:	d018      	beq.n	80055b2 <ism330dhcx_gy_data_rate_set+0x192>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005580:	2d02      	cmp	r5, #2
 8005582:	d001      	beq.n	8005588 <ism330dhcx_gy_data_rate_set+0x168>
              odr_gy = val;
 8005584:	462e      	mov	r6, r5
 8005586:	e7bb      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005588:	2603      	movs	r6, #3
 800558a:	e7b9      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
            if (val == ISM330DHCX_GY_ODR_OFF)
 800558c:	b19d      	cbz	r5, 80055b6 <ism330dhcx_gy_data_rate_set+0x196>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 800558e:	2d02      	cmp	r5, #2
 8005590:	d013      	beq.n	80055ba <ism330dhcx_gy_data_rate_set+0x19a>
 8005592:	2d03      	cmp	r5, #3
 8005594:	d013      	beq.n	80055be <ism330dhcx_gy_data_rate_set+0x19e>
 8005596:	2d01      	cmp	r5, #1
 8005598:	d001      	beq.n	800559e <ism330dhcx_gy_data_rate_set+0x17e>
            if (val == ISM330DHCX_GY_ODR_OFF)
 800559a:	462e      	mov	r6, r5
 800559c:	e7b0      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
 800559e:	2604      	movs	r6, #4
 80055a0:	e7ae      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
        switch (mlc_odr)
 80055a2:	462e      	mov	r6, r5
 80055a4:	e7ac      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
              odr_gy = val;
 80055a6:	462e      	mov	r6, r5
 80055a8:	e7aa      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80055aa:	2602      	movs	r6, #2
 80055ac:	e7a8      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80055ae:	2603      	movs	r6, #3
 80055b0:	e7a6      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80055b2:	2603      	movs	r6, #3
 80055b4:	e7a4      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80055b6:	2604      	movs	r6, #4
 80055b8:	e7a2      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
            if (val == ISM330DHCX_GY_ODR_OFF)
 80055ba:	2604      	movs	r6, #4
 80055bc:	e7a0      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
 80055be:	2604      	movs	r6, #4
 80055c0:	e79e      	b.n	8005500 <ism330dhcx_gy_data_rate_set+0xe0>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80055c2:	2301      	movs	r3, #1
 80055c4:	466a      	mov	r2, sp
 80055c6:	2111      	movs	r1, #17
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7ff fbc9 	bl	8004d60 <ism330dhcx_read_reg>
 80055ce:	4602      	mov	r2, r0
 80055d0:	e798      	b.n	8005504 <ism330dhcx_gy_data_rate_set+0xe4>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80055d2:	f89d 3000 	ldrb.w	r3, [sp]
 80055d6:	f366 1307 	bfi	r3, r6, #4, #4
 80055da:	f88d 3000 	strb.w	r3, [sp]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 80055de:	2301      	movs	r3, #1
 80055e0:	466a      	mov	r2, sp
 80055e2:	2111      	movs	r1, #17
 80055e4:	4620      	mov	r0, r4
 80055e6:	f7ff fbc0 	bl	8004d6a <ism330dhcx_write_reg>
 80055ea:	4602      	mov	r2, r0
  return ret;
 80055ec:	e78c      	b.n	8005508 <ism330dhcx_gy_data_rate_set+0xe8>

080055ee <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS02A1_MOTION_SENSOR_Axes_t *Axes)
{
 80055ee:	b508      	push	{r3, lr}
 80055f0:	4602      	mov	r2, r0
  (void)IKS02A1_MOTION_SENSOR_GetAxes(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO, Axes);
 80055f2:	2102      	movs	r1, #2
 80055f4:	2000      	movs	r0, #0
 80055f6:	f000 f8f5 	bl	80057e4 <IKS02A1_MOTION_SENSOR_GetAxes>
}
 80055fa:	bd08      	pop	{r3, pc}

080055fc <ISM330DHCX_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	b090      	sub	sp, #64	; 0x40
 8005600:	4604      	mov	r4, r0
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 8005602:	2300      	movs	r3, #0
 8005604:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 8005606:	23d7      	movs	r3, #215	; 0xd7
 8005608:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  io_ctx.Init        = IKS02A1_I2C_Init;
 800560c:	4b36      	ldr	r3, [pc, #216]	; (80056e8 <ISM330DHCX_0_Probe+0xec>)
 800560e:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8005610:	4b36      	ldr	r3, [pc, #216]	; (80056ec <ISM330DHCX_0_Probe+0xf0>)
 8005612:	9309      	str	r3, [sp, #36]	; 0x24
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005614:	4b36      	ldr	r3, [pc, #216]	; (80056f0 <ISM330DHCX_0_Probe+0xf4>)
 8005616:	930d      	str	r3, [sp, #52]	; 0x34
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005618:	4b36      	ldr	r3, [pc, #216]	; (80056f4 <ISM330DHCX_0_Probe+0xf8>)
 800561a:	930c      	str	r3, [sp, #48]	; 0x30
  io_ctx.GetTick     = IKS02A1_GetTick;
 800561c:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <ISM330DHCX_0_Probe+0xfc>)
 800561e:	930e      	str	r3, [sp, #56]	; 0x38
  io_ctx.Delay       = IKS02A1_Delay;
 8005620:	4b36      	ldr	r3, [pc, #216]	; (80056fc <ISM330DHCX_0_Probe+0x100>)
 8005622:	930f      	str	r3, [sp, #60]	; 0x3c

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8005624:	a908      	add	r1, sp, #32
 8005626:	4836      	ldr	r0, [pc, #216]	; (8005700 <ISM330DHCX_0_Probe+0x104>)
 8005628:	f7ff fb5e 	bl	8004ce8 <ISM330DHCX_RegisterBusIO>
 800562c:	2800      	cmp	r0, #0
 800562e:	d14e      	bne.n	80056ce <ISM330DHCX_0_Probe+0xd2>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8005630:	f10d 011f 	add.w	r1, sp, #31
 8005634:	4832      	ldr	r0, [pc, #200]	; (8005700 <ISM330DHCX_0_Probe+0x104>)
 8005636:	f7ff f8eb 	bl	8004810 <ISM330DHCX_ReadID>
 800563a:	4605      	mov	r5, r0
 800563c:	2800      	cmp	r0, #0
 800563e:	d149      	bne.n	80056d4 <ISM330DHCX_0_Probe+0xd8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != ISM330DHCX_ID)
 8005640:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005644:	2b6b      	cmp	r3, #107	; 0x6b
 8005646:	d148      	bne.n	80056da <ISM330DHCX_0_Probe+0xde>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8005648:	4e2d      	ldr	r6, [pc, #180]	; (8005700 <ISM330DHCX_0_Probe+0x104>)
 800564a:	4669      	mov	r1, sp
 800564c:	4630      	mov	r0, r6
 800564e:	f7fe fe7b 	bl	8004348 <ISM330DHCX_GetCapabilities>
    MotionCtx[IKS02A1_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005652:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005656:	f89d 3000 	ldrb.w	r3, [sp]
 800565a:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 800565e:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8005662:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8005666:	4927      	ldr	r1, [pc, #156]	; (8005704 <ISM330DHCX_0_Probe+0x108>)
 8005668:	600b      	str	r3, [r1, #0]

    MotionCompObj[IKS02A1_ISM330DHCX_0] = &ism330dhcx_obj_0;
 800566a:	4b27      	ldr	r3, [pc, #156]	; (8005708 <ISM330DHCX_0_Probe+0x10c>)
 800566c:	601e      	str	r6, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 800566e:	4b27      	ldr	r3, [pc, #156]	; (800570c <ISM330DHCX_0_Probe+0x110>)
 8005670:	4927      	ldr	r1, [pc, #156]	; (8005710 <ISM330DHCX_0_Probe+0x114>)
 8005672:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005674:	f014 0f01 	tst.w	r4, #1
 8005678:	d001      	beq.n	800567e <ISM330DHCX_0_Probe+0x82>
 800567a:	2a01      	cmp	r2, #1
 800567c:	d00d      	beq.n	800569a <ISM330DHCX_0_Probe+0x9e>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800567e:	f014 0f02 	tst.w	r4, #2
 8005682:	d003      	beq.n	800568c <ISM330DHCX_0_Probe+0x90>
 8005684:	f89d 3000 	ldrb.w	r3, [sp]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d011      	beq.n	80056b0 <ISM330DHCX_0_Probe+0xb4>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800568c:	b915      	cbnz	r5, 8005694 <ISM330DHCX_0_Probe+0x98>
 800568e:	f014 0f04 	tst.w	r4, #4
 8005692:	d125      	bne.n	80056e0 <ISM330DHCX_0_Probe+0xe4>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 8005694:	4628      	mov	r0, r5
 8005696:	b010      	add	sp, #64	; 0x40
 8005698:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 800569a:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <ISM330DHCX_0_Probe+0x118>)
 800569c:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <ISM330DHCX_0_Probe+0x11c>)
 800569e:	601a      	str	r2, [r3, #0]
      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 80056a0:	680b      	ldr	r3, [r1, #0]
 80056a2:	4630      	mov	r0, r6
 80056a4:	4798      	blx	r3
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d0e9      	beq.n	800567e <ISM330DHCX_0_Probe+0x82>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80056aa:	f06f 0504 	mvn.w	r5, #4
 80056ae:	e7ed      	b.n	800568c <ISM330DHCX_0_Probe+0x90>
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80056b0:	4b18      	ldr	r3, [pc, #96]	; (8005714 <ISM330DHCX_0_Probe+0x118>)
 80056b2:	4a1a      	ldr	r2, [pc, #104]	; (800571c <ISM330DHCX_0_Probe+0x120>)
 80056b4:	605a      	str	r2, [r3, #4]
      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 80056b6:	4b15      	ldr	r3, [pc, #84]	; (800570c <ISM330DHCX_0_Probe+0x110>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a12      	ldr	r2, [pc, #72]	; (8005708 <ISM330DHCX_0_Probe+0x10c>)
 80056be:	6810      	ldr	r0, [r2, #0]
 80056c0:	4798      	blx	r3
 80056c2:	4605      	mov	r5, r0
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d0e2      	beq.n	800568e <ISM330DHCX_0_Probe+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80056c8:	f06f 0504 	mvn.w	r5, #4
 80056cc:	e7e2      	b.n	8005694 <ISM330DHCX_0_Probe+0x98>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056ce:	f06f 0506 	mvn.w	r5, #6
 80056d2:	e7df      	b.n	8005694 <ISM330DHCX_0_Probe+0x98>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056d4:	f06f 0506 	mvn.w	r5, #6
 80056d8:	e7dc      	b.n	8005694 <ISM330DHCX_0_Probe+0x98>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056da:	f06f 0506 	mvn.w	r5, #6
 80056de:	e7d9      	b.n	8005694 <ISM330DHCX_0_Probe+0x98>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80056e0:	f06f 0504 	mvn.w	r5, #4
  return ret;
 80056e4:	e7d6      	b.n	8005694 <ISM330DHCX_0_Probe+0x98>
 80056e6:	bf00      	nop
 80056e8:	08003aad 	.word	0x08003aad
 80056ec:	08003a05 	.word	0x08003a05
 80056f0:	08003a51 	.word	0x08003a51
 80056f4:	08003a3d 	.word	0x08003a3d
 80056f8:	08003a65 	.word	0x08003a65
 80056fc:	08002025 	.word	0x08002025
 8005700:	200039dc 	.word	0x200039dc
 8005704:	200039c8 	.word	0x200039c8
 8005708:	200039c4 	.word	0x200039c4
 800570c:	200039cc 	.word	0x200039cc
 8005710:	200000bc 	.word	0x200000bc
 8005714:	200039d0 	.word	0x200039d0
 8005718:	200000cc 	.word	0x200000cc
 800571c:	20000098 	.word	0x20000098

08005720 <IKS02A1_MOTION_SENSOR_Init>:
{
 8005720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005724:	b089      	sub	sp, #36	; 0x24
  switch (Instance)
 8005726:	2800      	cmp	r0, #0
 8005728:	d148      	bne.n	80057bc <IKS02A1_MOTION_SENSOR_Init+0x9c>
 800572a:	460e      	mov	r6, r1
 800572c:	4607      	mov	r7, r0
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 800572e:	4608      	mov	r0, r1
 8005730:	f7ff ff64 	bl	80055fc <ISM330DHCX_0_Probe>
 8005734:	2800      	cmp	r0, #0
 8005736:	d147      	bne.n	80057c8 <IKS02A1_MOTION_SENSOR_Init+0xa8>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005738:	4b26      	ldr	r3, [pc, #152]	; (80057d4 <IKS02A1_MOTION_SENSOR_Init+0xb4>)
 800573a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	a901      	add	r1, sp, #4
 8005742:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <IKS02A1_MOTION_SENSOR_Init+0xb8>)
 8005744:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 8005748:	4798      	blx	r3
 800574a:	4681      	mov	r9, r0
 800574c:	2800      	cmp	r0, #0
 800574e:	d13e      	bne.n	80057ce <IKS02A1_MOTION_SENSOR_Init+0xae>
      if (cap.Acc == 1U)
 8005750:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d00b      	beq.n	8005770 <IKS02A1_MOTION_SENSOR_Init+0x50>
  uint32_t component_functions = 0;
 8005758:	46b8      	mov	r8, r7
      if (cap.Gyro == 1U)
 800575a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d009      	beq.n	8005776 <IKS02A1_MOTION_SENSOR_Init+0x56>
      if (cap.Magneto == 1U)
 8005762:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d008      	beq.n	800577c <IKS02A1_MOTION_SENSOR_Init+0x5c>
        component_functions |= MOTION_ACCELERO;
 800576a:	463d      	mov	r5, r7
 800576c:	2401      	movs	r4, #1
 800576e:	e00a      	b.n	8005786 <IKS02A1_MOTION_SENSOR_Init+0x66>
 8005770:	f04f 0802 	mov.w	r8, #2
 8005774:	e7f1      	b.n	800575a <IKS02A1_MOTION_SENSOR_Init+0x3a>
        component_functions |= MOTION_GYRO;
 8005776:	f048 0801 	orr.w	r8, r8, #1
 800577a:	e7f2      	b.n	8005762 <IKS02A1_MOTION_SENSOR_Init+0x42>
        component_functions |= MOTION_MAGNETO;
 800577c:	f048 0804 	orr.w	r8, r8, #4
  if (ret != BSP_ERROR_NONE)
 8005780:	e7f3      	b.n	800576a <IKS02A1_MOTION_SENSOR_Init+0x4a>
    function = function << 1;
 8005782:	0064      	lsls	r4, r4, #1
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8005784:	3501      	adds	r5, #1
 8005786:	2d02      	cmp	r5, #2
 8005788:	d81a      	bhi.n	80057c0 <IKS02A1_MOTION_SENSOR_Init+0xa0>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800578a:	ea34 0306 	bics.w	r3, r4, r6
 800578e:	d1f8      	bne.n	8005782 <IKS02A1_MOTION_SENSOR_Init+0x62>
 8005790:	ea34 0308 	bics.w	r3, r4, r8
 8005794:	d1f5      	bne.n	8005782 <IKS02A1_MOTION_SENSOR_Init+0x62>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005796:	4b11      	ldr	r3, [pc, #68]	; (80057dc <IKS02A1_MOTION_SENSOR_Init+0xbc>)
 8005798:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800579c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80057a0:	4413      	add	r3, r2
 80057a2:	4a0f      	ldr	r2, [pc, #60]	; (80057e0 <IKS02A1_MOTION_SENSOR_Init+0xc0>)
 80057a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a0b      	ldr	r2, [pc, #44]	; (80057d8 <IKS02A1_MOTION_SENSOR_Init+0xb8>)
 80057ac:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 80057b0:	4798      	blx	r3
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d0e5      	beq.n	8005782 <IKS02A1_MOTION_SENSOR_Init+0x62>
        return BSP_ERROR_COMPONENT_FAILURE;
 80057b6:	f06f 0904 	mvn.w	r9, #4
 80057ba:	e001      	b.n	80057c0 <IKS02A1_MOTION_SENSOR_Init+0xa0>
      ret = BSP_ERROR_WRONG_PARAM;
 80057bc:	f06f 0901 	mvn.w	r9, #1
}
 80057c0:	4648      	mov	r0, r9
 80057c2:	b009      	add	sp, #36	; 0x24
 80057c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BSP_ERROR_NO_INIT;
 80057c8:	f04f 39ff 	mov.w	r9, #4294967295
 80057cc:	e7f8      	b.n	80057c0 <IKS02A1_MOTION_SENSOR_Init+0xa0>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80057ce:	f06f 0906 	mvn.w	r9, #6
 80057d2:	e7f5      	b.n	80057c0 <IKS02A1_MOTION_SENSOR_Init+0xa0>
 80057d4:	200039cc 	.word	0x200039cc
 80057d8:	200039c4 	.word	0x200039c4
 80057dc:	08017f94 	.word	0x08017f94
 80057e0:	200039d0 	.word	0x200039d0

080057e4 <IKS02A1_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 80057e4:	b9d8      	cbnz	r0, 800581e <IKS02A1_MOTION_SENSOR_GetAxes+0x3a>
{
 80057e6:	b508      	push	{r3, lr}
 80057e8:	460b      	mov	r3, r1
 80057ea:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80057ec:	4a0f      	ldr	r2, [pc, #60]	; (800582c <IKS02A1_MOTION_SENSOR_GetAxes+0x48>)
 80057ee:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80057f2:	ea33 0202 	bics.w	r2, r3, r2
 80057f6:	d115      	bne.n	8005824 <IKS02A1_MOTION_SENSOR_GetAxes+0x40>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80057f8:	4a0d      	ldr	r2, [pc, #52]	; (8005830 <IKS02A1_MOTION_SENSOR_GetAxes+0x4c>)
 80057fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80057fe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8005802:	4413      	add	r3, r2
 8005804:	4a0b      	ldr	r2, [pc, #44]	; (8005834 <IKS02A1_MOTION_SENSOR_GetAxes+0x50>)
 8005806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4a0a      	ldr	r2, [pc, #40]	; (8005838 <IKS02A1_MOTION_SENSOR_GetAxes+0x54>)
 800580e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005812:	4798      	blx	r3
 8005814:	b900      	cbnz	r0, 8005818 <IKS02A1_MOTION_SENSOR_GetAxes+0x34>
}
 8005816:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005818:	f06f 0004 	mvn.w	r0, #4
 800581c:	e7fb      	b.n	8005816 <IKS02A1_MOTION_SENSOR_GetAxes+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 800581e:	f06f 0001 	mvn.w	r0, #1
}
 8005822:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 8005824:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005828:	e7f5      	b.n	8005816 <IKS02A1_MOTION_SENSOR_GetAxes+0x32>
 800582a:	bf00      	nop
 800582c:	200039c8 	.word	0x200039c8
 8005830:	08017f94 	.word	0x08017f94
 8005834:	200039d0 	.word	0x200039d0
 8005838:	200039c4 	.word	0x200039c4

0800583c <IKS02A1_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 800583c:	b9d8      	cbnz	r0, 8005876 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x3a>
{
 800583e:	b508      	push	{r3, lr}
 8005840:	460b      	mov	r3, r1
 8005842:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005844:	4a0f      	ldr	r2, [pc, #60]	; (8005884 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x48>)
 8005846:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800584a:	ea33 0202 	bics.w	r2, r3, r2
 800584e:	d115      	bne.n	800587c <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x40>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005850:	4a0d      	ldr	r2, [pc, #52]	; (8005888 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 8005852:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005856:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800585a:	4413      	add	r3, r2
 800585c:	4a0b      	ldr	r2, [pc, #44]	; (800588c <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x50>)
 800585e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x54>)
 8005866:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800586a:	4798      	blx	r3
 800586c:	b900      	cbnz	r0, 8005870 <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x34>
}
 800586e:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005870:	f06f 0004 	mvn.w	r0, #4
 8005874:	e7fb      	b.n	800586e <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 8005876:	f06f 0001 	mvn.w	r0, #1
}
 800587a:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 800587c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005880:	e7f5      	b.n	800586e <IKS02A1_MOTION_SENSOR_SetOutputDataRate+0x32>
 8005882:	bf00      	nop
 8005884:	200039c8 	.word	0x200039c8
 8005888:	08017f94 	.word	0x08017f94
 800588c:	200039d0 	.word	0x200039d0
 8005890:	200039c4 	.word	0x200039c4

08005894 <IKS02A1_MOTION_SENSOR_SetFullScale>:
  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 8005894:	b9d8      	cbnz	r0, 80058ce <IKS02A1_MOTION_SENSOR_SetFullScale+0x3a>
{
 8005896:	b508      	push	{r3, lr}
 8005898:	460b      	mov	r3, r1
 800589a:	4611      	mov	r1, r2
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800589c:	4a0f      	ldr	r2, [pc, #60]	; (80058dc <IKS02A1_MOTION_SENSOR_SetFullScale+0x48>)
 800589e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80058a2:	ea33 0202 	bics.w	r2, r3, r2
 80058a6:	d115      	bne.n	80058d4 <IKS02A1_MOTION_SENSOR_SetFullScale+0x40>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 80058a8:	4a0d      	ldr	r2, [pc, #52]	; (80058e0 <IKS02A1_MOTION_SENSOR_SetFullScale+0x4c>)
 80058aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058ae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80058b2:	4413      	add	r3, r2
 80058b4:	4a0b      	ldr	r2, [pc, #44]	; (80058e4 <IKS02A1_MOTION_SENSOR_SetFullScale+0x50>)
 80058b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <IKS02A1_MOTION_SENSOR_SetFullScale+0x54>)
 80058be:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80058c2:	4798      	blx	r3
 80058c4:	b900      	cbnz	r0, 80058c8 <IKS02A1_MOTION_SENSOR_SetFullScale+0x34>
}
 80058c6:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058c8:	f06f 0004 	mvn.w	r0, #4
 80058cc:	e7fb      	b.n	80058c6 <IKS02A1_MOTION_SENSOR_SetFullScale+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 80058ce:	f06f 0001 	mvn.w	r0, #1
}
 80058d2:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 80058d4:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80058d8:	e7f5      	b.n	80058c6 <IKS02A1_MOTION_SENSOR_SetFullScale+0x32>
 80058da:	bf00      	nop
 80058dc:	200039c8 	.word	0x200039c8
 80058e0:	08017f94 	.word	0x08017f94
 80058e4:	200039d0 	.word	0x200039d0
 80058e8:	200039c4 	.word	0x200039c4

080058ec <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80058ec:	4770      	bx	lr
	...

080058f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058f0:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058f2:	2003      	movs	r0, #3
 80058f4:	f000 fd80 	bl	80063f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058f8:	f002 fbc0 	bl	800807c <HAL_RCC_GetHCLKFreq>
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <HAL_Init+0x28>)
 80058fe:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005900:	200f      	movs	r0, #15
 8005902:	f7fc fb81 	bl	8002008 <HAL_InitTick>
 8005906:	b110      	cbz	r0, 800590e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005908:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800590a:	4620      	mov	r0, r4
 800590c:	bd10      	pop	{r4, pc}
 800590e:	4604      	mov	r4, r0
    HAL_MspInit();
 8005910:	f7fc fa38 	bl	8001d84 <HAL_MspInit>
 8005914:	e7f9      	b.n	800590a <HAL_Init+0x1a>
 8005916:	bf00      	nop
 8005918:	200000f0 	.word	0x200000f0

0800591c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800591c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005920:	6913      	ldr	r3, [r2, #16]
 8005922:	f023 0302 	bic.w	r3, r3, #2
 8005926:	6113      	str	r3, [r2, #16]
}
 8005928:	4770      	bx	lr

0800592a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800592a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800592e:	6913      	ldr	r3, [r2, #16]
 8005930:	f043 0302 	orr.w	r3, r3, #2
 8005934:	6113      	str	r3, [r2, #16]
}
 8005936:	4770      	bx	lr

08005938 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8005938:	4b01      	ldr	r3, [pc, #4]	; (8005940 <HAL_GetUIDw0+0x8>)
 800593a:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 800593e:	4770      	bx	lr
 8005940:	1fff7000 	.word	0x1fff7000

08005944 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8005944:	4b01      	ldr	r3, [pc, #4]	; (800594c <HAL_GetUIDw1+0x8>)
 8005946:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 800594a:	4770      	bx	lr
 800594c:	1fff7000 	.word	0x1fff7000

08005950 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8005950:	4b01      	ldr	r3, [pc, #4]	; (8005958 <HAL_GetUIDw2+0x8>)
 8005952:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8005956:	4770      	bx	lr
 8005958:	1fff7000 	.word	0x1fff7000

0800595c <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800595c:	4a02      	ldr	r2, [pc, #8]	; (8005968 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800595e:	6853      	ldr	r3, [r2, #4]
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8005966:	4770      	bx	lr
 8005968:	e0042000 	.word	0xe0042000

0800596c <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800596c:	4a02      	ldr	r2, [pc, #8]	; (8005978 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800596e:	6853      	ldr	r3, [r2, #4]
 8005970:	f043 0302 	orr.w	r3, r3, #2
 8005974:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8005976:	4770      	bx	lr
 8005978:	e0042000 	.word	0xe0042000

0800597c <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800597c:	4a02      	ldr	r2, [pc, #8]	; (8005988 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800597e:	6853      	ldr	r3, [r2, #4]
 8005980:	f043 0304 	orr.w	r3, r3, #4
 8005984:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8005986:	4770      	bx	lr
 8005988:	e0042000 	.word	0xe0042000

0800598c <HAL_RADIO_Init>:
/**
  * @brief  Init Radio Switch
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RADIO_Init(void)
{
 800598c:	b530      	push	{r4, r5, lr}
 800598e:	b087      	sub	sp, #28
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005996:	f042 0204 	orr.w	r2, r2, #4
 800599a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800599c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80059a4:	9b00      	ldr	r3, [sp, #0]

  /* Enable the Radio Switch Clock */
  RADIO_SWITCH_CTRL_GPIO_CLK_ENABLE();

  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = (RADIO_SWITCH_CTRL1_PIN | RADIO_SWITCH_CTRL2_PIN | RADIO_SWITCH_CTRL3_PIN);
 80059a6:	2538      	movs	r5, #56	; 0x38
 80059a8:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80059aa:	2301      	movs	r3, #1
 80059ac:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059b2:	2303      	movs	r3, #3
 80059b4:	9304      	str	r3, [sp, #16]

  HAL_GPIO_Init(RADIO_SWITCH_CTRL_GPIO_PORT, &gpio_init_structure);
 80059b6:	4c0a      	ldr	r4, [pc, #40]	; (80059e0 <HAL_RADIO_Init+0x54>)
 80059b8:	a901      	add	r1, sp, #4
 80059ba:	4620      	mov	r0, r4
 80059bc:	f001 f95a 	bl	8006c74 <HAL_GPIO_Init>

  /* Lock RF Switch GPIOs configuration to avoid any user change */
  /* Only a MCU reset will unlock this configuration */
  status = HAL_GPIO_LockPin(RADIO_SWITCH_CTRL_GPIO_PORT, (RADIO_SWITCH_CTRL1_PIN | RADIO_SWITCH_CTRL2_PIN | RADIO_SWITCH_CTRL3_PIN));
 80059c0:	4629      	mov	r1, r5
 80059c2:	4620      	mov	r0, r4
 80059c4:	f001 fab8 	bl	8006f38 <HAL_GPIO_LockPin>
  if (status == HAL_OK)
 80059c8:	4604      	mov	r4, r0
 80059ca:	b110      	cbz	r0, 80059d2 <HAL_RADIO_Init+0x46>
    HAL_GPIO_WritePin(RADIO_SWITCH_CTRL_GPIO_PORT,
                      (RADIO_SWITCH_CTRL1_PIN | RADIO_SWITCH_CTRL2_PIN | RADIO_SWITCH_CTRL3_PIN), GPIO_PIN_RESET);
  }

  return status;
}
 80059cc:	4620      	mov	r0, r4
 80059ce:	b007      	add	sp, #28
 80059d0:	bd30      	pop	{r4, r5, pc}
    HAL_GPIO_WritePin(RADIO_SWITCH_CTRL_GPIO_PORT,
 80059d2:	2200      	movs	r2, #0
 80059d4:	4629      	mov	r1, r5
 80059d6:	4802      	ldr	r0, [pc, #8]	; (80059e0 <HAL_RADIO_Init+0x54>)
 80059d8:	f001 fa9c 	bl	8006f14 <HAL_GPIO_WritePin>
 80059dc:	e7f6      	b.n	80059cc <HAL_RADIO_Init+0x40>
 80059de:	bf00      	nop
 80059e0:	48000800 	.word	0x48000800

080059e4 <HAL_RADIO_SetSwitchConfig>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RADIO_SetSwitchConfig(HAL_RADIO_SwitchConfig_TypeDef Config)
{
 80059e4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  switch (Config)
 80059e6:	2803      	cmp	r0, #3
 80059e8:	d820      	bhi.n	8005a2c <HAL_RADIO_SetSwitchConfig+0x48>
 80059ea:	e8df f000 	tbb	[pc, r0]
 80059ee:	0a02      	.short	0x0a02
 80059f0:	1811      	.short	0x1811
 80059f2:	4604      	mov	r4, r0
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RADIO_SWITCH_CTRL_GPIO_PORT,
 80059f4:	2200      	movs	r2, #0
 80059f6:	2138      	movs	r1, #56	; 0x38
 80059f8:	480d      	ldr	r0, [pc, #52]	; (8005a30 <HAL_RADIO_SetSwitchConfig+0x4c>)
 80059fa:	f001 fa8b 	bl	8006f14 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef status = HAL_OK;
 80059fe:	4620      	mov	r0, r4
      break;
    }
  }

  return status;
}
 8005a00:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_SWITCH_CTRL_GPIO_PORT,
 8005a02:	2201      	movs	r2, #1
 8005a04:	2138      	movs	r1, #56	; 0x38
 8005a06:	480a      	ldr	r0, [pc, #40]	; (8005a30 <HAL_RADIO_SetSwitchConfig+0x4c>)
 8005a08:	f001 fa84 	bl	8006f14 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2000      	movs	r0, #0
      break;
 8005a0e:	e7f7      	b.n	8005a00 <HAL_RADIO_SetSwitchConfig+0x1c>
      HAL_GPIO_WriteMultipleStatePin(RADIO_SWITCH_CTRL_GPIO_PORT, RADIO_SWITCH_CTRL2_PIN,
 8005a10:	2218      	movs	r2, #24
 8005a12:	2120      	movs	r1, #32
 8005a14:	4806      	ldr	r0, [pc, #24]	; (8005a30 <HAL_RADIO_SetSwitchConfig+0x4c>)
 8005a16:	f001 fa82 	bl	8006f1e <HAL_GPIO_WriteMultipleStatePin>
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2000      	movs	r0, #0
      break;
 8005a1c:	e7f0      	b.n	8005a00 <HAL_RADIO_SetSwitchConfig+0x1c>
      HAL_GPIO_WriteMultipleStatePin(RADIO_SWITCH_CTRL_GPIO_PORT, RADIO_SWITCH_CTRL1_PIN,
 8005a1e:	2228      	movs	r2, #40	; 0x28
 8005a20:	2110      	movs	r1, #16
 8005a22:	4803      	ldr	r0, [pc, #12]	; (8005a30 <HAL_RADIO_SetSwitchConfig+0x4c>)
 8005a24:	f001 fa7b 	bl	8006f1e <HAL_GPIO_WriteMultipleStatePin>
  HAL_StatusTypeDef status = HAL_OK;
 8005a28:	2000      	movs	r0, #0
      break;
 8005a2a:	e7e9      	b.n	8005a00 <HAL_RADIO_SetSwitchConfig+0x1c>
  switch (Config)
 8005a2c:	2001      	movs	r0, #1
 8005a2e:	e7e7      	b.n	8005a00 <HAL_RADIO_SetSwitchConfig+0x1c>
 8005a30:	48000800 	.word	0x48000800

08005a34 <HAL_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
uint8_t HAL_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8005a34:	2001      	movs	r0, #1
 8005a36:	4770      	bx	lr

08005a38 <HAL_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED
  */
uint8_t HAL_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8005a38:	2001      	movs	r0, #1
 8005a3a:	4770      	bx	lr

08005a3c <HAL_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t HAL_RADIO_GetRFOMaxPowerConfig(HAL_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if (Config == RADIO_RFO_LP_MAXPOWER)
 8005a3c:	b908      	cbnz	r0, 8005a42 <HAL_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8005a3e:	200f      	movs	r0, #15
 8005a40:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8005a42:	2016      	movs	r0, #22
  }

  return ret;
}
 8005a44:	4770      	bx	lr
	...

08005a48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a48:	b530      	push	{r4, r5, lr}
 8005a4a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f000 8106 	beq.w	8005c62 <HAL_ADC_Init+0x21a>
 8005a56:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a58:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005a5a:	b1bb      	cbz	r3, 8005a8c <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a5c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a5e:	6893      	ldr	r3, [r2, #8]
 8005a60:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005a64:	d11f      	bne.n	8005aa6 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8005a66:	6893      	ldr	r3, [r2, #8]
 8005a68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005a6c:	f023 0317 	bic.w	r3, r3, #23
 8005a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a74:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a76:	4b7c      	ldr	r3, [pc, #496]	; (8005c68 <HAL_ADC_Init+0x220>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	099b      	lsrs	r3, r3, #6
 8005a7c:	4a7b      	ldr	r2, [pc, #492]	; (8005c6c <HAL_ADC_Init+0x224>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	099b      	lsrs	r3, r3, #6
 8005a84:	3301      	adds	r3, #1
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005a8a:	e009      	b.n	8005aa0 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8005a8c:	f7fb fd3a 	bl	8001504 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005a90:	2300      	movs	r3, #0
 8005a92:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8005a94:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8005a98:	e7e0      	b.n	8005a5c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8005a9a:	9b01      	ldr	r3, [sp, #4]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005aa0:	9b01      	ldr	r3, [sp, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f9      	bne.n	8005a9a <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005aa6:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005aa8:	6893      	ldr	r3, [r2, #8]
 8005aaa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005aae:	f040 809a 	bne.w	8005be6 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ab2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ab4:	f043 0310 	orr.w	r3, r3, #16
 8005ab8:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005abc:	f043 0301 	orr.w	r3, r3, #1
 8005ac0:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ac2:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ac4:	6893      	ldr	r3, [r2, #8]
 8005ac6:	f013 0304 	ands.w	r3, r3, #4
 8005aca:	d000      	beq.n	8005ace <HAL_ADC_Init+0x86>
 8005acc:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ace:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005ad0:	f011 0f10 	tst.w	r1, #16
 8005ad4:	f040 80be 	bne.w	8005c54 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f040 80bb 	bne.w	8005c54 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ae0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005ae4:	f043 0302 	orr.w	r3, r3, #2
 8005ae8:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005aea:	6893      	ldr	r3, [r2, #8]
 8005aec:	f013 0f01 	tst.w	r3, #1
 8005af0:	d14f      	bne.n	8005b92 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005af2:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005af4:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005af6:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005afa:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005afc:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005b00:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005b02:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005b06:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b08:	b109      	cbz	r1, 8005b0e <HAL_ADC_Init+0xc6>
 8005b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005b0e:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8005b10:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005b12:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005b14:	6921      	ldr	r1, [r4, #16]
 8005b16:	2900      	cmp	r1, #0
 8005b18:	db67      	blt.n	8005bea <HAL_ADC_Init+0x1a2>
 8005b1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8005b1e:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b20:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005b24:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b28:	f894 1020 	ldrb.w	r1, [r4, #32]
 8005b2c:	2901      	cmp	r1, #1
 8005b2e:	d05f      	beq.n	8005bf0 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b32:	b121      	cbz	r1, 8005b3e <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005b34:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8005b38:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005b3a:	4329      	orrs	r1, r5
 8005b3c:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005b3e:	68d1      	ldr	r1, [r2, #12]
 8005b40:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 8005b44:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 8005b48:	4319      	orrs	r1, r3
 8005b4a:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005b4c:	6863      	ldr	r3, [r4, #4]
 8005b4e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005b52:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005b54:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005b56:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8005b5a:	2901      	cmp	r1, #1
 8005b5c:	d055      	beq.n	8005c0a <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005b5e:	6821      	ldr	r1, [r4, #0]
 8005b60:	690d      	ldr	r5, [r1, #16]
 8005b62:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <HAL_ADC_Init+0x228>)
 8005b64:	402b      	ands	r3, r5
 8005b66:	4313      	orrs	r3, r2
 8005b68:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005b6a:	6863      	ldr	r3, [r4, #4]
 8005b6c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005b70:	d00f      	beq.n	8005b92 <HAL_ADC_Init+0x14a>
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b76:	d00c      	beq.n	8005b92 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b7c:	d009      	beq.n	8005b92 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8005b7e:	493d      	ldr	r1, [pc, #244]	; (8005c74 <HAL_ADC_Init+0x22c>)
 8005b80:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8005b84:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8005b88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005b92:	6821      	ldr	r1, [r4, #0]
 8005b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8005b96:	694a      	ldr	r2, [r1, #20]
 8005b98:	f022 0207 	bic.w	r2, r2, #7
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005ba4:	6953      	ldr	r3, [r2, #20]
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005bae:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d133      	bne.n	8005c1e <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005bba:	f063 030f 	orn	r3, r3, #15
 8005bbe:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005bc0:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8005bc8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d039      	beq.n	8005c42 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005bce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bd0:	f023 0312 	bic.w	r3, r3, #18
 8005bd4:	f043 0310 	orr.w	r3, r3, #16
 8005bd8:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005be2:	2001      	movs	r0, #1
 8005be4:	e03b      	b.n	8005c5e <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005be6:	2000      	movs	r0, #0
 8005be8:	e76c      	b.n	8005ac4 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005bea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005bee:	e796      	b.n	8005b1e <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005bf0:	b915      	cbnz	r5, 8005bf8 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf6:	e79b      	b.n	8005b30 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bf8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005bfa:	f041 0120 	orr.w	r1, r1, #32
 8005bfe:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005c02:	f041 0101 	orr.w	r1, r1, #1
 8005c06:	65e1      	str	r1, [r4, #92]	; 0x5c
 8005c08:	e792      	b.n	8005b30 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8005c0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005c0c:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8005c0e:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005c10:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8005c12:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005c14:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005c16:	431a      	orrs	r2, r3
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	e79f      	b.n	8005b5e <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c22:	d1cd      	bne.n	8005bc0 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8005c24:	6821      	ldr	r1, [r4, #0]
 8005c26:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005c28:	69e3      	ldr	r3, [r4, #28]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	f003 031c 	and.w	r3, r3, #28
 8005c32:	f06f 020f 	mvn.w	r2, #15
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	628b      	str	r3, [r1, #40]	; 0x28
 8005c40:	e7be      	b.n	8005bc0 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8005c42:	2300      	movs	r3, #0
 8005c44:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8005c46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c48:	f023 0303 	bic.w	r3, r3, #3
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c52:	e004      	b.n	8005c5e <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c56:	f043 0310 	orr.w	r3, r3, #16
 8005c5a:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c5c:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8005c5e:	b003      	add	sp, #12
 8005c60:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005c62:	2001      	movs	r0, #1
 8005c64:	e7fb      	b.n	8005c5e <HAL_ADC_Init+0x216>
 8005c66:	bf00      	nop
 8005c68:	200000f0 	.word	0x200000f0
 8005c6c:	053e2d63 	.word	0x053e2d63
 8005c70:	1ffffc02 	.word	0x1ffffc02
 8005c74:	40012000 	.word	0x40012000

08005c78 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005c7e:	6946      	ldr	r6, [r0, #20]
 8005c80:	2e08      	cmp	r6, #8
 8005c82:	d005      	beq.n	8005c90 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005c84:	6803      	ldr	r3, [r0, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f013 0f01 	tst.w	r3, #1
 8005c8c:	d11e      	bne.n	8005ccc <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8005c8e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005c90:	f7fc f9bc 	bl	800200c <HAL_GetTick>
 8005c94:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4232      	tst	r2, r6
 8005c9c:	d11c      	bne.n	8005cd8 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005c9e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005ca2:	d0f8      	beq.n	8005c96 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005ca4:	f7fc f9b2 	bl	800200c <HAL_GetTick>
 8005ca8:	1bc3      	subs	r3, r0, r7
 8005caa:	42ab      	cmp	r3, r5
 8005cac:	d801      	bhi.n	8005cb2 <HAL_ADC_PollForConversion+0x3a>
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	d1f1      	bne.n	8005c96 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4233      	tst	r3, r6
 8005cb8:	d1ed      	bne.n	8005c96 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005cba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cbc:	f043 0304 	orr.w	r3, r3, #4
 8005cc0:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8005cc8:	2003      	movs	r0, #3
 8005cca:	e028      	b.n	8005d1e <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ccc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005cce:	f043 0320 	orr.w	r3, r3, #32
 8005cd2:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	e022      	b.n	8005d1e <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cd8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cde:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005ce6:	d115      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005ce8:	7ea2      	ldrb	r2, [r4, #26]
 8005cea:	b99a      	cbnz	r2, 8005d14 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	f012 0f08 	tst.w	r2, #8
 8005cf2:	d00f      	beq.n	8005d14 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	f012 0f04 	tst.w	r2, #4
 8005cfa:	d111      	bne.n	8005d20 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	f022 020c 	bic.w	r2, r2, #12
 8005d02:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005d04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005d14:	7e20      	ldrb	r0, [r4, #24]
 8005d16:	b960      	cbnz	r0, 8005d32 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	220c      	movs	r2, #12
 8005d1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8005d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d22:	f043 0320 	orr.w	r3, r3, #32
 8005d26:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005d30:	e7f0      	b.n	8005d14 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8005d32:	2000      	movs	r0, #0
 8005d34:	e7f3      	b.n	8005d1e <HAL_ADC_PollForConversion+0xa6>

08005d36 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005d36:	6803      	ldr	r3, [r0, #0]
 8005d38:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8005d3a:	4770      	bx	lr

08005d3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005d3c:	b470      	push	{r4, r5, r6}
 8005d3e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005d40:	2200      	movs	r2, #0
 8005d42:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d44:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005d46:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8005d4a:	2a01      	cmp	r2, #1
 8005d4c:	f000 8103 	beq.w	8005f56 <HAL_ADC_ConfigChannel+0x21a>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2201      	movs	r2, #1
 8005d54:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d58:	6802      	ldr	r2, [r0, #0]
 8005d5a:	6890      	ldr	r0, [r2, #8]
 8005d5c:	f010 0f04 	tst.w	r0, #4
 8005d60:	d00a      	beq.n	8005d78 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d64:	f042 0220 	orr.w	r2, r2, #32
 8005d68:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005d6a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8005d72:	b003      	add	sp, #12
 8005d74:	bc70      	pop	{r4, r5, r6}
 8005d76:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8005d78:	6848      	ldr	r0, [r1, #4]
 8005d7a:	2802      	cmp	r0, #2
 8005d7c:	f000 809c 	beq.w	8005eb8 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005d80:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8005d84:	d027      	beq.n	8005dd6 <HAL_ADC_ConfigChannel+0x9a>
 8005d86:	4d75      	ldr	r5, [pc, #468]	; (8005f5c <HAL_ADC_ConfigChannel+0x220>)
 8005d88:	42ac      	cmp	r4, r5
 8005d8a:	d024      	beq.n	8005dd6 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005d8c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8005d8e:	f000 001f 	and.w	r0, r0, #31
 8005d92:	250f      	movs	r5, #15
 8005d94:	4085      	lsls	r5, r0
 8005d96:	ea24 0505 	bic.w	r5, r4, r5
 8005d9a:	680c      	ldr	r4, [r1, #0]
 8005d9c:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8005da0:	2e00      	cmp	r6, #0
 8005da2:	d131      	bne.n	8005e08 <HAL_ADC_ConfigChannel+0xcc>
 8005da4:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005da8:	4084      	lsls	r4, r0
 8005daa:	432c      	orrs	r4, r5
 8005dac:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005dae:	684c      	ldr	r4, [r1, #4]
 8005db0:	08a0      	lsrs	r0, r4, #2
 8005db2:	3001      	adds	r0, #1
 8005db4:	69dd      	ldr	r5, [r3, #28]
 8005db6:	42a8      	cmp	r0, r5
 8005db8:	d813      	bhi.n	8005de2 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005dba:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8005dbc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8005dbe:	f004 041f 	and.w	r4, r4, #31
 8005dc2:	260f      	movs	r6, #15
 8005dc4:	40a6      	lsls	r6, r4
 8005dc6:	ea20 0006 	bic.w	r0, r0, r6
 8005dca:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8005dce:	40a5      	lsls	r5, r4
 8005dd0:	4328      	orrs	r0, r5
 8005dd2:	6290      	str	r0, [r2, #40]	; 0x28
}
 8005dd4:	e005      	b.n	8005de2 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005dd6:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005dd8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8005dda:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8005dde:	4320      	orrs	r0, r4
 8005de0:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005de2:	681c      	ldr	r4, [r3, #0]
 8005de4:	680d      	ldr	r5, [r1, #0]
 8005de6:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8005de8:	6960      	ldr	r0, [r4, #20]
 8005dea:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8005dee:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8005df2:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8005df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005dfa:	4302      	orrs	r2, r0
 8005dfc:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005dfe:	680a      	ldr	r2, [r1, #0]
 8005e00:	2a00      	cmp	r2, #0
 8005e02:	db09      	blt.n	8005e18 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e04:	2000      	movs	r0, #0
 8005e06:	e7b1      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e08:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005e0c:	b114      	cbz	r4, 8005e14 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005e0e:	fab4 f484 	clz	r4, r4
 8005e12:	e7c9      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8005e14:	2420      	movs	r4, #32
 8005e16:	e7c7      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e18:	4951      	ldr	r1, [pc, #324]	; (8005f60 <HAL_ADC_ConfigChannel+0x224>)
 8005e1a:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8005e1e:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e22:	4c50      	ldr	r4, [pc, #320]	; (8005f64 <HAL_ADC_ConfigChannel+0x228>)
 8005e24:	42a2      	cmp	r2, r4
 8005e26:	d007      	beq.n	8005e38 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005e28:	4c4f      	ldr	r4, [pc, #316]	; (8005f68 <HAL_ADC_ConfigChannel+0x22c>)
 8005e2a:	42a2      	cmp	r2, r4
 8005e2c:	d026      	beq.n	8005e7c <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005e2e:	4c4f      	ldr	r4, [pc, #316]	; (8005f6c <HAL_ADC_ConfigChannel+0x230>)
 8005e30:	42a2      	cmp	r2, r4
 8005e32:	d032      	beq.n	8005e9a <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e34:	2000      	movs	r0, #0
 8005e36:	e799      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8005e3c:	d1f4      	bne.n	8005e28 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e42:	4847      	ldr	r0, [pc, #284]	; (8005f60 <HAL_ADC_ConfigChannel+0x224>)
 8005e44:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8005e48:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005e4c:	4311      	orrs	r1, r2
 8005e4e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e52:	4a47      	ldr	r2, [pc, #284]	; (8005f70 <HAL_ADC_ConfigChannel+0x234>)
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	0992      	lsrs	r2, r2, #6
 8005e58:	4946      	ldr	r1, [pc, #280]	; (8005f74 <HAL_ADC_ConfigChannel+0x238>)
 8005e5a:	fba1 1202 	umull	r1, r2, r1, r2
 8005e5e:	0992      	lsrs	r2, r2, #6
 8005e60:	3201      	adds	r2, #1
 8005e62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005e66:	0092      	lsls	r2, r2, #2
 8005e68:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005e6a:	e002      	b.n	8005e72 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8005e6c:	9a01      	ldr	r2, [sp, #4]
 8005e6e:	3a01      	subs	r2, #1
 8005e70:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005e72:	9a01      	ldr	r2, [sp, #4]
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	d1f9      	bne.n	8005e6c <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e78:	2000      	movs	r0, #0
 8005e7a:	e777      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e7c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8005e80:	d1d5      	bne.n	8005e2e <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e82:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8005e86:	4836      	ldr	r0, [pc, #216]	; (8005f60 <HAL_ADC_ConfigChannel+0x224>)
 8005e88:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8005e8c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005e90:	4311      	orrs	r1, r2
 8005e92:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e96:	2000      	movs	r0, #0
}
 8005e98:	e768      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005e9a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8005e9e:	d158      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ea0:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005ea4:	482e      	ldr	r0, [pc, #184]	; (8005f60 <HAL_ADC_ConfigChannel+0x224>)
 8005ea6:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8005eaa:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005eb4:	2000      	movs	r0, #0
}
 8005eb6:	e759      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005eb8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8005ebc:	d002      	beq.n	8005ec4 <HAL_ADC_ConfigChannel+0x188>
 8005ebe:	4827      	ldr	r0, [pc, #156]	; (8005f5c <HAL_ADC_ConfigChannel+0x220>)
 8005ec0:	4284      	cmp	r4, r0
 8005ec2:	d106      	bne.n	8005ed2 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005ec4:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005ec6:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8005ec8:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8005ecc:	ea20 0004 	bic.w	r0, r0, r4
 8005ed0:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005ed2:	680a      	ldr	r2, [r1, #0]
 8005ed4:	2a00      	cmp	r2, #0
 8005ed6:	db01      	blt.n	8005edc <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e747      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005edc:	4920      	ldr	r1, [pc, #128]	; (8005f60 <HAL_ADC_ConfigChannel+0x224>)
 8005ede:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ee2:	4820      	ldr	r0, [pc, #128]	; (8005f64 <HAL_ADC_ConfigChannel+0x228>)
 8005ee4:	4282      	cmp	r2, r0
 8005ee6:	d007      	beq.n	8005ef8 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005ee8:	481f      	ldr	r0, [pc, #124]	; (8005f68 <HAL_ADC_ConfigChannel+0x22c>)
 8005eea:	4282      	cmp	r2, r0
 8005eec:	d013      	beq.n	8005f16 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005eee:	481f      	ldr	r0, [pc, #124]	; (8005f6c <HAL_ADC_ConfigChannel+0x230>)
 8005ef0:	4282      	cmp	r2, r0
 8005ef2:	d01f      	beq.n	8005f34 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	e739      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ef8:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005efc:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8005f00:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8005f04:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8005f08:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005f0c:	4311      	orrs	r1, r2
 8005f0e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f12:	2000      	movs	r0, #0
}
 8005f14:	e72a      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f16:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005f1a:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8005f1e:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8005f22:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8005f26:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f30:	2000      	movs	r0, #0
}
 8005f32:	e71b      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f34:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005f38:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8005f3c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8005f40:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8005f44:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f4e:	2000      	movs	r0, #0
}
 8005f50:	e70c      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
 8005f52:	2000      	movs	r0, #0
 8005f54:	e70a      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8005f56:	2002      	movs	r0, #2
 8005f58:	e70b      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x36>
 8005f5a:	bf00      	nop
 8005f5c:	80000004 	.word	0x80000004
 8005f60:	40012000 	.word	0x40012000
 8005f64:	b0001000 	.word	0xb0001000
 8005f68:	b8004000 	.word	0xb8004000
 8005f6c:	b4002000 	.word	0xb4002000
 8005f70:	200000f0 	.word	0x200000f0
 8005f74:	053e2d63 	.word	0x053e2d63

08005f78 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8005f78:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005f7a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	f012 0f04 	tst.w	r2, #4
 8005f82:	d02a      	beq.n	8005fda <ADC_ConversionStop+0x62>
 8005f84:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	f012 0f02 	tst.w	r2, #2
 8005f8c:	d107      	bne.n	8005f9e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f94:	f022 0217 	bic.w	r2, r2, #23
 8005f98:	f042 0210 	orr.w	r2, r2, #16
 8005f9c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f9e:	f7fc f835 	bl	800200c <HAL_GetTick>
 8005fa2:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f013 0f04 	tst.w	r3, #4
 8005fac:	d013      	beq.n	8005fd6 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005fae:	f7fc f82d 	bl	800200c <HAL_GetTick>
 8005fb2:	1b43      	subs	r3, r0, r5
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d9f5      	bls.n	8005fa4 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f013 0f04 	tst.w	r3, #4
 8005fc0:	d0f0      	beq.n	8005fa4 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fc4:	f043 0310 	orr.w	r3, r3, #16
 8005fc8:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	e002      	b.n	8005fdc <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	e000      	b.n	8005fdc <ADC_ConversionStop+0x64>
 8005fda:	2000      	movs	r0, #0
}
 8005fdc:	bd38      	pop	{r3, r4, r5, pc}
	...

08005fe0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005fe0:	b530      	push	{r4, r5, lr}
 8005fe2:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fe8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	f012 0f01 	tst.w	r2, #1
 8005ff0:	d15b      	bne.n	80060aa <ADC_Enable+0xca>
 8005ff2:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005ff4:	6899      	ldr	r1, [r3, #8]
 8005ff6:	4a2e      	ldr	r2, [pc, #184]	; (80060b0 <ADC_Enable+0xd0>)
 8005ff8:	4211      	tst	r1, r2
 8005ffa:	d117      	bne.n	800602c <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006002:	f022 0217 	bic.w	r2, r2, #23
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800600c:	4b29      	ldr	r3, [pc, #164]	; (80060b4 <ADC_Enable+0xd4>)
 800600e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006012:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006016:	d019      	beq.n	800604c <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006018:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <ADC_Enable+0xd8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	099b      	lsrs	r3, r3, #6
 800601e:	4a27      	ldr	r2, [pc, #156]	; (80060bc <ADC_Enable+0xdc>)
 8006020:	fba2 2303 	umull	r2, r3, r2, r3
 8006024:	099b      	lsrs	r3, r3, #6
 8006026:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8006028:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800602a:	e00c      	b.n	8006046 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800602c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800602e:	f043 0310 	orr.w	r3, r3, #16
 8006032:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006034:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800603c:	2001      	movs	r0, #1
 800603e:	e035      	b.n	80060ac <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8006040:	9b01      	ldr	r3, [sp, #4]
 8006042:	3b01      	subs	r3, #1
 8006044:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f9      	bne.n	8006040 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800604c:	7e63      	ldrb	r3, [r4, #25]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006052:	2000      	movs	r0, #0
 8006054:	e02a      	b.n	80060ac <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8006056:	f7fb ffd9 	bl	800200c <HAL_GetTick>
 800605a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	f012 0f01 	tst.w	r2, #1
 8006064:	d11f      	bne.n	80060a6 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	f012 0f01 	tst.w	r2, #1
 800606c:	d107      	bne.n	800607e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006074:	f022 0217 	bic.w	r2, r2, #23
 8006078:	f042 0201 	orr.w	r2, r2, #1
 800607c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800607e:	f7fb ffc5 	bl	800200c <HAL_GetTick>
 8006082:	1b40      	subs	r0, r0, r5
 8006084:	2802      	cmp	r0, #2
 8006086:	d9e9      	bls.n	800605c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f013 0f01 	tst.w	r3, #1
 8006090:	d1e4      	bne.n	800605c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006094:	f043 0310 	orr.w	r3, r3, #16
 8006098:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800609a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80060a2:	2001      	movs	r0, #1
 80060a4:	e002      	b.n	80060ac <ADC_Enable+0xcc>
  return HAL_OK;
 80060a6:	2000      	movs	r0, #0
 80060a8:	e000      	b.n	80060ac <ADC_Enable+0xcc>
 80060aa:	2000      	movs	r0, #0
}
 80060ac:	b003      	add	sp, #12
 80060ae:	bd30      	pop	{r4, r5, pc}
 80060b0:	80000017 	.word	0x80000017
 80060b4:	40012000 	.word	0x40012000
 80060b8:	200000f0 	.word	0x200000f0
 80060bc:	053e2d63 	.word	0x053e2d63

080060c0 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060c0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f013 0f04 	tst.w	r3, #4
 80060c8:	d128      	bne.n	800611c <HAL_ADC_Start+0x5c>
{
 80060ca:	b510      	push	{r4, lr}
 80060cc:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80060ce:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d024      	beq.n	8006120 <HAL_ADC_Start+0x60>
 80060d6:	2301      	movs	r3, #1
 80060d8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80060dc:	f7ff ff80 	bl	8005fe0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80060e0:	b9c0      	cbnz	r0, 8006114 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 80060e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060e8:	f023 0301 	bic.w	r3, r3, #1
 80060ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f0:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80060f2:	2300      	movs	r3, #0
 80060f4:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	211c      	movs	r1, #28
 80060fa:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80060fc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006100:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006102:	6893      	ldr	r3, [r2, #8]
 8006104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006108:	f023 0317 	bic.w	r3, r3, #23
 800610c:	f043 0304 	orr.w	r3, r3, #4
 8006110:	6093      	str	r3, [r2, #8]
}
 8006112:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8006114:	2300      	movs	r3, #0
 8006116:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800611a:	e7fa      	b.n	8006112 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 800611c:	2002      	movs	r0, #2
}
 800611e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8006120:	2002      	movs	r0, #2
 8006122:	e7f6      	b.n	8006112 <HAL_ADC_Start+0x52>

08006124 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006124:	b538      	push	{r3, r4, r5, lr}
 8006126:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006128:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800612a:	6893      	ldr	r3, [r2, #8]
 800612c:	f013 0302 	ands.w	r3, r3, #2
 8006130:	d000      	beq.n	8006134 <ADC_Disable+0x10>
 8006132:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006134:	6891      	ldr	r1, [r2, #8]
 8006136:	f011 0f01 	tst.w	r1, #1
 800613a:	d039      	beq.n	80061b0 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800613c:	2b00      	cmp	r3, #0
 800613e:	d139      	bne.n	80061b4 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006140:	6893      	ldr	r3, [r2, #8]
 8006142:	f003 0305 	and.w	r3, r3, #5
 8006146:	2b01      	cmp	r3, #1
 8006148:	d009      	beq.n	800615e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800614a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800614c:	f043 0310 	orr.w	r3, r3, #16
 8006150:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006152:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800615a:	2001      	movs	r0, #1
 800615c:	e029      	b.n	80061b2 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800615e:	6893      	ldr	r3, [r2, #8]
 8006160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006164:	f023 0317 	bic.w	r3, r3, #23
 8006168:	f043 0302 	orr.w	r3, r3, #2
 800616c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	2203      	movs	r2, #3
 8006172:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006174:	f7fb ff4a 	bl	800200c <HAL_GetTick>
 8006178:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f013 0f01 	tst.w	r3, #1
 8006182:	d013      	beq.n	80061ac <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006184:	f7fb ff42 	bl	800200c <HAL_GetTick>
 8006188:	1b40      	subs	r0, r0, r5
 800618a:	2802      	cmp	r0, #2
 800618c:	d9f5      	bls.n	800617a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f013 0f01 	tst.w	r3, #1
 8006196:	d0f0      	beq.n	800617a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006198:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800619a:	f043 0310 	orr.w	r3, r3, #16
 800619e:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80061a8:	2001      	movs	r0, #1
 80061aa:	e002      	b.n	80061b2 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80061ac:	2000      	movs	r0, #0
 80061ae:	e000      	b.n	80061b2 <ADC_Disable+0x8e>
 80061b0:	2000      	movs	r0, #0
}
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80061b4:	2000      	movs	r0, #0
 80061b6:	e7fc      	b.n	80061b2 <ADC_Disable+0x8e>

080061b8 <HAL_ADC_DeInit>:
{
 80061b8:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d056      	beq.n	800626c <HAL_ADC_DeInit+0xb4>
 80061be:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80061c0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80061c2:	f043 0302 	orr.w	r3, r3, #2
 80061c6:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80061c8:	f7ff fed6 	bl	8005f78 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80061cc:	4606      	mov	r6, r0
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d03d      	beq.n	800624e <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	6853      	ldr	r3, [r2, #4]
 80061d6:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	f240 329f 	movw	r2, #927	; 0x39f
 80061e6:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80061e8:	6822      	ldr	r2, [r4, #0]
 80061ea:	68d1      	ldr	r1, [r2, #12]
 80061ec:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_ADC_DeInit+0xb8>)
 80061ee:	400b      	ands	r3, r1
 80061f0:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	6913      	ldr	r3, [r2, #16]
 80061f6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80061fa:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80061fc:	6822      	ldr	r2, [r4, #0]
 80061fe:	6953      	ldr	r3, [r2, #20]
 8006200:	f023 0307 	bic.w	r3, r3, #7
 8006204:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	6a13      	ldr	r3, [r2, #32]
 800620a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800620e:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8006214:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8006218:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800621e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8006222:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006228:	2500      	movs	r5, #0
 800622a:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800622c:	4a11      	ldr	r2, [pc, #68]	; (8006274 <HAL_ADC_DeInit+0xbc>)
 800622e:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8006232:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8006236:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 800623a:	4620      	mov	r0, r4
 800623c:	f7fb f978 	bl	8001530 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8006240:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8006242:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8006244:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8006246:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 800624a:	4630      	mov	r0, r6
 800624c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff ff68 	bl	8006124 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8006254:	4606      	mov	r6, r0
 8006256:	b908      	cbnz	r0, 800625c <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8006258:	2301      	movs	r3, #1
 800625a:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800625c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800625e:	6893      	ldr	r3, [r2, #8]
 8006260:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006264:	f023 0317 	bic.w	r3, r3, #23
 8006268:	6093      	str	r3, [r2, #8]
}
 800626a:	e7b2      	b.n	80061d2 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 800626c:	2601      	movs	r6, #1
 800626e:	e7ec      	b.n	800624a <HAL_ADC_DeInit+0x92>
 8006270:	833e0200 	.word	0x833e0200
 8006274:	40012000 	.word	0x40012000

08006278 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8006278:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800627c:	2b01      	cmp	r3, #1
 800627e:	d019      	beq.n	80062b4 <HAL_ADC_Stop+0x3c>
{
 8006280:	b510      	push	{r4, lr}
 8006282:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8006284:	2301      	movs	r3, #1
 8006286:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800628a:	f7ff fe75 	bl	8005f78 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800628e:	b118      	cbz	r0, 8006298 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8006290:	2300      	movs	r3, #0
 8006292:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8006296:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8006298:	4620      	mov	r0, r4
 800629a:	f7ff ff43 	bl	8006124 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800629e:	2800      	cmp	r0, #0
 80062a0:	d1f6      	bne.n	8006290 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80062a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a8:	f023 0301 	bic.w	r3, r3, #1
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80062b2:	e7ed      	b.n	8006290 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80062b4:	2002      	movs	r0, #2
}
 80062b6:	4770      	bx	lr

080062b8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80062b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ba:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80062bc:	2300      	movs	r3, #0
 80062be:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80062c0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	f000 8094 	beq.w	80063f2 <HAL_ADCEx_Calibration_Start+0x13a>
 80062ca:	4604      	mov	r4, r0
 80062cc:	2301      	movs	r3, #1
 80062ce:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80062d2:	f7ff ff27 	bl	8006124 <ADC_Disable>
 80062d6:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062d8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	f012 0201 	ands.w	r2, r2, #1
 80062e0:	d009      	beq.n	80062f6 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062e4:	f043 0310 	orr.w	r3, r3, #16
 80062e8:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80062ea:	2300      	movs	r3, #0
 80062ec:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80062f0:	4628      	mov	r0, r5
 80062f2:	b003      	add	sp, #12
 80062f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80062f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80062f8:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80062fc:	f041 0102 	orr.w	r1, r1, #2
 8006300:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006302:	68de      	ldr	r6, [r3, #12]
 8006304:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8006308:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 800630c:	0436      	lsls	r6, r6, #16
 800630e:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006310:	68d9      	ldr	r1, [r3, #12]
 8006312:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8006316:	f021 0103 	bic.w	r1, r1, #3
 800631a:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 800631c:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800631e:	e005      	b.n	800632c <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8006320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006328:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800632a:	3201      	adds	r2, #1
 800632c:	2a07      	cmp	r2, #7
 800632e:	d81e      	bhi.n	800636e <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8006330:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006332:	688b      	ldr	r3, [r1, #8]
 8006334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006338:	f023 0317 	bic.w	r3, r3, #23
 800633c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006340:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006342:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006344:	6899      	ldr	r1, [r3, #8]
 8006346:	2900      	cmp	r1, #0
 8006348:	daea      	bge.n	8006320 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 800634a:	9b01      	ldr	r3, [sp, #4]
 800634c:	3301      	adds	r3, #1
 800634e:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8006356:	d3f4      	bcc.n	8006342 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8006358:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800635a:	f023 0312 	bic.w	r3, r3, #18
 800635e:	f043 0310 	orr.w	r3, r3, #16
 8006362:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8006364:	2300      	movs	r3, #0
 8006366:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800636a:	2501      	movs	r5, #1
 800636c:	e7c0      	b.n	80062f0 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800636e:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8006372:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006374:	6893      	ldr	r3, [r2, #8]
 8006376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800637a:	f023 0317 	bic.w	r3, r3, #23
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8006384:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8006386:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 800638a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800638e:	4318      	orrs	r0, r3
 8006390:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8006394:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006396:	6893      	ldr	r3, [r2, #8]
 8006398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800639c:	f023 0317 	bic.w	r3, r3, #23
 80063a0:	f043 0302 	orr.w	r3, r3, #2
 80063a4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80063a6:	f7fb fe31 	bl	800200c <HAL_GetTick>
 80063aa:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80063ac:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	f012 0f01 	tst.w	r2, #1
 80063b4:	d109      	bne.n	80063ca <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	4332      	orrs	r2, r6
 80063ba:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80063bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063be:	f023 0303 	bic.w	r3, r3, #3
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80063c8:	e78f      	b.n	80062ea <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80063ca:	f7fb fe1f 	bl	800200c <HAL_GetTick>
 80063ce:	1bc3      	subs	r3, r0, r7
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d9eb      	bls.n	80063ac <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f013 0f01 	tst.w	r3, #1
 80063dc:	d0e6      	beq.n	80063ac <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063e0:	f043 0310 	orr.w	r3, r3, #16
 80063e4:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80063ee:	2501      	movs	r5, #1
 80063f0:	e77e      	b.n	80062f0 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 80063f2:	2502      	movs	r5, #2
 80063f4:	e77c      	b.n	80062f0 <HAL_ADCEx_Calibration_Start+0x38>
	...

080063f8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063f8:	4a07      	ldr	r2, [pc, #28]	; (8006418 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80063fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006400:	041b      	lsls	r3, r3, #16
 8006402:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006404:	0200      	lsls	r0, r0, #8
 8006406:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800640a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800640c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006414:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006416:	4770      	bx	lr
 8006418:	e000ed00 	.word	0xe000ed00

0800641c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800641c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800641e:	4b19      	ldr	r3, [pc, #100]	; (8006484 <HAL_NVIC_SetPriority+0x68>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006426:	f1c3 0c07 	rsb	ip, r3, #7
 800642a:	f1bc 0f04 	cmp.w	ip, #4
 800642e:	bf28      	it	cs
 8006430:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006434:	f103 0e04 	add.w	lr, r3, #4
 8006438:	f1be 0f06 	cmp.w	lr, #6
 800643c:	d918      	bls.n	8006470 <HAL_NVIC_SetPriority+0x54>
 800643e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006440:	f04f 3eff 	mov.w	lr, #4294967295
 8006444:	fa0e fc0c 	lsl.w	ip, lr, ip
 8006448:	ea21 010c 	bic.w	r1, r1, ip
 800644c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800644e:	fa0e fe03 	lsl.w	lr, lr, r3
 8006452:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006456:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8006458:	2800      	cmp	r0, #0
 800645a:	db0b      	blt.n	8006474 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800645c:	0112      	lsls	r2, r2, #4
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006464:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006468:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800646c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006470:	2300      	movs	r3, #0
 8006472:	e7e5      	b.n	8006440 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006474:	f000 000f 	and.w	r0, r0, #15
 8006478:	0112      	lsls	r2, r2, #4
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	4b02      	ldr	r3, [pc, #8]	; (8006488 <HAL_NVIC_SetPriority+0x6c>)
 800647e:	541a      	strb	r2, [r3, r0]
 8006480:	e7f4      	b.n	800646c <HAL_NVIC_SetPriority+0x50>
 8006482:	bf00      	nop
 8006484:	e000ed00 	.word	0xe000ed00
 8006488:	e000ed14 	.word	0xe000ed14

0800648c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800648c:	2800      	cmp	r0, #0
 800648e:	db07      	blt.n	80064a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006490:	f000 021f 	and.w	r2, r0, #31
 8006494:	0940      	lsrs	r0, r0, #5
 8006496:	2301      	movs	r3, #1
 8006498:	4093      	lsls	r3, r2
 800649a:	4a02      	ldr	r2, [pc, #8]	; (80064a4 <HAL_NVIC_EnableIRQ+0x18>)
 800649c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	e000e100 	.word	0xe000e100

080064a8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80064a8:	2800      	cmp	r0, #0
 80064aa:	db0c      	blt.n	80064c6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ac:	f000 021f 	and.w	r2, r0, #31
 80064b0:	0940      	lsrs	r0, r0, #5
 80064b2:	2301      	movs	r3, #1
 80064b4:	4093      	lsls	r3, r2
 80064b6:	3020      	adds	r0, #32
 80064b8:	4a03      	ldr	r2, [pc, #12]	; (80064c8 <HAL_NVIC_DisableIRQ+0x20>)
 80064ba:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80064be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80064c2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80064c6:	4770      	bx	lr
 80064c8:	e000e100 	.word	0xe000e100

080064cc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064cc:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064ce:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80064d0:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80064d4:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80064d8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80064da:	b124      	cbz	r4, 80064e6 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064dc:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80064de:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80064e2:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80064e6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80064e8:	f004 0c1c 	and.w	ip, r4, #28
 80064ec:	2401      	movs	r4, #1
 80064ee:	fa04 f40c 	lsl.w	r4, r4, ip
 80064f2:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80064f6:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064fa:	6804      	ldr	r4, [r0, #0]
 80064fc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064fe:	6883      	ldr	r3, [r0, #8]
 8006500:	2b10      	cmp	r3, #16
 8006502:	d005      	beq.n	8006510 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006504:	6803      	ldr	r3, [r0, #0]
 8006506:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006508:	6803      	ldr	r3, [r0, #0]
 800650a:	60da      	str	r2, [r3, #12]
  }
}
 800650c:	bc10      	pop	{r4}
 800650e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8006510:	6803      	ldr	r3, [r0, #0]
 8006512:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006514:	6803      	ldr	r3, [r0, #0]
 8006516:	60d9      	str	r1, [r3, #12]
 8006518:	e7f8      	b.n	800650c <DMA_SetConfig+0x40>
	...

0800651c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800651c:	6803      	ldr	r3, [r0, #0]
 800651e:	4a14      	ldr	r2, [pc, #80]	; (8006570 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d816      	bhi.n	8006552 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006524:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006526:	f022 0203 	bic.w	r2, r2, #3
 800652a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800652e:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8006532:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006534:	b2db      	uxtb	r3, r3
 8006536:	3b08      	subs	r3, #8
 8006538:	4a0e      	ldr	r2, [pc, #56]	; (8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006540:	4a0d      	ldr	r2, [pc, #52]	; (8006578 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8006542:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006544:	f003 031f 	and.w	r3, r3, #31
 8006548:	2201      	movs	r2, #1
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8006550:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006552:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006554:	f022 0103 	bic.w	r1, r2, #3
 8006558:	4a08      	ldr	r2, [pc, #32]	; (800657c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 800655a:	440a      	add	r2, r1
 800655c:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800655e:	b2db      	uxtb	r3, r3
 8006560:	3b08      	subs	r3, #8
 8006562:	4a04      	ldr	r2, [pc, #16]	; (8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	3307      	adds	r3, #7
 800656c:	e7e8      	b.n	8006540 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800656e:	bf00      	nop
 8006570:	40020407 	.word	0x40020407
 8006574:	cccccccd 	.word	0xcccccccd
 8006578:	40020880 	.word	0x40020880
 800657c:	4002081c 	.word	0x4002081c

08006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006580:	6843      	ldr	r3, [r0, #4]
 8006582:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006586:	4a07      	ldr	r2, [pc, #28]	; (80065a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8006588:	441a      	add	r2, r3
 800658a:	0092      	lsls	r2, r2, #2
 800658c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800658e:	4a06      	ldr	r2, [pc, #24]	; (80065a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8006590:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006592:	3b01      	subs	r3, #1
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	2201      	movs	r2, #1
 800659a:	fa02 f303 	lsl.w	r3, r2, r3
 800659e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	1000823f 	.word	0x1000823f
 80065a8:	40020940 	.word	0x40020940

080065ac <HAL_DMA_Init>:
  if (hdma == NULL)
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d060      	beq.n	8006672 <HAL_DMA_Init+0xc6>
{
 80065b0:	b510      	push	{r4, lr}
 80065b2:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065b4:	6802      	ldr	r2, [r0, #0]
 80065b6:	4b30      	ldr	r3, [pc, #192]	; (8006678 <HAL_DMA_Init+0xcc>)
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d842      	bhi.n	8006642 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80065bc:	4b2f      	ldr	r3, [pc, #188]	; (800667c <HAL_DMA_Init+0xd0>)
 80065be:	4413      	add	r3, r2
 80065c0:	492f      	ldr	r1, [pc, #188]	; (8006680 <HAL_DMA_Init+0xd4>)
 80065c2:	fba1 1303 	umull	r1, r3, r1, r3
 80065c6:	091b      	lsrs	r3, r3, #4
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80065cc:	4b2d      	ldr	r3, [pc, #180]	; (8006684 <HAL_DMA_Init+0xd8>)
 80065ce:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80065d0:	2302      	movs	r3, #2
 80065d2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80065d6:	6813      	ldr	r3, [r2, #0]
 80065d8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80065dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e0:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80065e2:	6821      	ldr	r1, [r4, #0]
 80065e4:	680a      	ldr	r2, [r1, #0]
 80065e6:	68a3      	ldr	r3, [r4, #8]
 80065e8:	68e0      	ldr	r0, [r4, #12]
 80065ea:	4303      	orrs	r3, r0
 80065ec:	6920      	ldr	r0, [r4, #16]
 80065ee:	4303      	orrs	r3, r0
 80065f0:	6960      	ldr	r0, [r4, #20]
 80065f2:	4303      	orrs	r3, r0
 80065f4:	69a0      	ldr	r0, [r4, #24]
 80065f6:	4303      	orrs	r3, r0
 80065f8:	69e0      	ldr	r0, [r4, #28]
 80065fa:	4303      	orrs	r3, r0
 80065fc:	6a20      	ldr	r0, [r4, #32]
 80065fe:	4303      	orrs	r3, r0
 8006600:	4313      	orrs	r3, r2
 8006602:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006604:	4620      	mov	r0, r4
 8006606:	f7ff ff89 	bl	800651c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800660a:	68a3      	ldr	r3, [r4, #8]
 800660c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006610:	d022      	beq.n	8006658 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006612:	6863      	ldr	r3, [r4, #4]
 8006614:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800661a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800661c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800661e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006620:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006622:	6863      	ldr	r3, [r4, #4]
 8006624:	3b01      	subs	r3, #1
 8006626:	2b03      	cmp	r3, #3
 8006628:	d919      	bls.n	800665e <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800662e:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006630:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006632:	2000      	movs	r0, #0
 8006634:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8006636:	2301      	movs	r3, #1
 8006638:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800663c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8006640:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006642:	4b11      	ldr	r3, [pc, #68]	; (8006688 <HAL_DMA_Init+0xdc>)
 8006644:	4413      	add	r3, r2
 8006646:	490e      	ldr	r1, [pc, #56]	; (8006680 <HAL_DMA_Init+0xd4>)
 8006648:	fba1 1303 	umull	r1, r3, r1, r3
 800664c:	091b      	lsrs	r3, r3, #4
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006652:	4b0e      	ldr	r3, [pc, #56]	; (800668c <HAL_DMA_Init+0xe0>)
 8006654:	6403      	str	r3, [r0, #64]	; 0x40
 8006656:	e7bb      	b.n	80065d0 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006658:	2300      	movs	r3, #0
 800665a:	6063      	str	r3, [r4, #4]
 800665c:	e7d9      	b.n	8006612 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800665e:	4620      	mov	r0, r4
 8006660:	f7ff ff8e 	bl	8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006664:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800666a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800666c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	e7df      	b.n	8006632 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8006672:	2001      	movs	r0, #1
}
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40020407 	.word	0x40020407
 800667c:	bffdfff8 	.word	0xbffdfff8
 8006680:	cccccccd 	.word	0xcccccccd
 8006684:	40020000 	.word	0x40020000
 8006688:	bffdfbf8 	.word	0xbffdfbf8
 800668c:	40020400 	.word	0x40020400

08006690 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8006690:	2800      	cmp	r0, #0
 8006692:	d04b      	beq.n	800672c <HAL_DMA_DeInit+0x9c>
{
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8006698:	6802      	ldr	r2, [r0, #0]
 800669a:	6813      	ldr	r3, [r2, #0]
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80066a2:	6802      	ldr	r2, [r0, #0]
 80066a4:	4b22      	ldr	r3, [pc, #136]	; (8006730 <HAL_DMA_DeInit+0xa0>)
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d82c      	bhi.n	8006704 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80066aa:	4b22      	ldr	r3, [pc, #136]	; (8006734 <HAL_DMA_DeInit+0xa4>)
 80066ac:	4413      	add	r3, r2
 80066ae:	4922      	ldr	r1, [pc, #136]	; (8006738 <HAL_DMA_DeInit+0xa8>)
 80066b0:	fba1 1303 	umull	r1, r3, r1, r3
 80066b4:	091b      	lsrs	r3, r3, #4
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80066ba:	4b20      	ldr	r3, [pc, #128]	; (800673c <HAL_DMA_DeInit+0xac>)
 80066bc:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80066be:	2500      	movs	r5, #0
 80066c0:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80066c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80066c4:	f003 021c 	and.w	r2, r3, #28
 80066c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80066ca:	2301      	movs	r3, #1
 80066cc:	4093      	lsls	r3, r2
 80066ce:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80066d0:	4620      	mov	r0, r4
 80066d2:	f7ff ff23 	bl	800651c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80066d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80066d8:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80066dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80066de:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80066e0:	6863      	ldr	r3, [r4, #4]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d918      	bls.n	800671a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 80066e8:	2000      	movs	r0, #0
 80066ea:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80066ec:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80066ee:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80066f0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80066f2:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80066f4:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80066f6:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066f8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80066fa:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80066fe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8006702:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006704:	4b0e      	ldr	r3, [pc, #56]	; (8006740 <HAL_DMA_DeInit+0xb0>)
 8006706:	4413      	add	r3, r2
 8006708:	490b      	ldr	r1, [pc, #44]	; (8006738 <HAL_DMA_DeInit+0xa8>)
 800670a:	fba1 1303 	umull	r1, r3, r1, r3
 800670e:	091b      	lsrs	r3, r3, #4
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006714:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <HAL_DMA_DeInit+0xb4>)
 8006716:	6403      	str	r3, [r0, #64]	; 0x40
 8006718:	e7d1      	b.n	80066be <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800671a:	4620      	mov	r0, r4
 800671c:	f7ff ff30 	bl	8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006720:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006722:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006724:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006726:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	e7dd      	b.n	80066e8 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 800672c:	2001      	movs	r0, #1
}
 800672e:	4770      	bx	lr
 8006730:	40020407 	.word	0x40020407
 8006734:	bffdfff8 	.word	0xbffdfff8
 8006738:	cccccccd 	.word	0xcccccccd
 800673c:	40020000 	.word	0x40020000
 8006740:	bffdfbf8 	.word	0xbffdfbf8
 8006744:	40020400 	.word	0x40020400

08006748 <HAL_DMA_Start_IT>:
{
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800674c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8006750:	2801      	cmp	r0, #1
 8006752:	d043      	beq.n	80067dc <HAL_DMA_Start_IT+0x94>
 8006754:	2001      	movs	r0, #1
 8006756:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 800675a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800675e:	b2c0      	uxtb	r0, r0
 8006760:	2801      	cmp	r0, #1
 8006762:	d006      	beq.n	8006772 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006764:	2380      	movs	r3, #128	; 0x80
 8006766:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006768:	2300      	movs	r3, #0
 800676a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800676e:	2001      	movs	r0, #1
}
 8006770:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8006772:	2002      	movs	r0, #2
 8006774:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006778:	2000      	movs	r0, #0
 800677a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800677c:	6825      	ldr	r5, [r4, #0]
 800677e:	6828      	ldr	r0, [r5, #0]
 8006780:	f020 0001 	bic.w	r0, r0, #1
 8006784:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006786:	4620      	mov	r0, r4
 8006788:	f7ff fea0 	bl	80064cc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800678c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800678e:	b1d3      	cbz	r3, 80067c6 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006790:	6822      	ldr	r2, [r4, #0]
 8006792:	6813      	ldr	r3, [r2, #0]
 8006794:	f043 030e 	orr.w	r3, r3, #14
 8006798:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800679a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80067a2:	d003      	beq.n	80067ac <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067aa:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 80067ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80067ae:	b11b      	cbz	r3, 80067b8 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80067b8:	6822      	ldr	r2, [r4, #0]
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	f043 0301 	orr.w	r3, r3, #1
 80067c0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067c2:	2000      	movs	r0, #0
 80067c4:	e7d4      	b.n	8006770 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	6813      	ldr	r3, [r2, #0]
 80067ca:	f023 0304 	bic.w	r3, r3, #4
 80067ce:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	f043 030a 	orr.w	r3, r3, #10
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	e7de      	b.n	800679a <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80067dc:	2002      	movs	r0, #2
 80067de:	e7c7      	b.n	8006770 <HAL_DMA_Start_IT+0x28>

080067e0 <HAL_DMA_Abort>:
  if (NULL == hdma)
 80067e0:	4603      	mov	r3, r0
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d034      	beq.n	8006850 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80067e6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	2a02      	cmp	r2, #2
 80067ee:	d006      	beq.n	80067fe <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067f0:	2204      	movs	r2, #4
 80067f2:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80067f4:	2200      	movs	r2, #0
 80067f6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80067fa:	2001      	movs	r0, #1
 80067fc:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067fe:	6801      	ldr	r1, [r0, #0]
 8006800:	680a      	ldr	r2, [r1, #0]
 8006802:	f022 020e 	bic.w	r2, r2, #14
 8006806:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006808:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800680a:	680a      	ldr	r2, [r1, #0]
 800680c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006810:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8006812:	6801      	ldr	r1, [r0, #0]
 8006814:	680a      	ldr	r2, [r1, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800681c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800681e:	f002 011c 	and.w	r1, r2, #28
 8006822:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8006824:	2201      	movs	r2, #1
 8006826:	408a      	lsls	r2, r1
 8006828:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800682a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800682c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800682e:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8006830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006832:	b132      	cbz	r2, 8006842 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006834:	6811      	ldr	r1, [r2, #0]
 8006836:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800683a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800683c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800683e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8006840:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006848:	2000      	movs	r0, #0
 800684a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800684e:	4770      	bx	lr
    return HAL_ERROR;
 8006850:	2001      	movs	r0, #1
}
 8006852:	4770      	bx	lr

08006854 <HAL_DMA_Abort_IT>:
{
 8006854:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006856:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d003      	beq.n	8006868 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006860:	2304      	movs	r3, #4
 8006862:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8006864:	2001      	movs	r0, #1
}
 8006866:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006868:	6802      	ldr	r2, [r0, #0]
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	f023 030e 	bic.w	r3, r3, #14
 8006870:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006872:	6802      	ldr	r2, [r0, #0]
 8006874:	6813      	ldr	r3, [r2, #0]
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800687c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006884:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006886:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006888:	f003 021c 	and.w	r2, r3, #28
 800688c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800688e:	2301      	movs	r3, #1
 8006890:	4093      	lsls	r3, r2
 8006892:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006894:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006896:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006898:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 800689a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800689c:	b133      	cbz	r3, 80068ac <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068a6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80068a8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80068aa:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80068b2:	2300      	movs	r3, #0
 80068b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80068b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80068ba:	b113      	cbz	r3, 80068c2 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80068bc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80068be:	2000      	movs	r0, #0
 80068c0:	e7d1      	b.n	8006866 <HAL_DMA_Abort_IT+0x12>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e7cf      	b.n	8006866 <HAL_DMA_Abort_IT+0x12>
	...

080068c8 <HAL_DMA_IRQHandler>:
{
 80068c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80068ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80068cc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80068ce:	6804      	ldr	r4, [r0, #0]
 80068d0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80068d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80068d4:	f003 031c 	and.w	r3, r3, #28
 80068d8:	2204      	movs	r2, #4
 80068da:	409a      	lsls	r2, r3
 80068dc:	420a      	tst	r2, r1
 80068de:	d015      	beq.n	800690c <HAL_DMA_IRQHandler+0x44>
 80068e0:	f015 0f04 	tst.w	r5, #4
 80068e4:	d012      	beq.n	800690c <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	f013 0f20 	tst.w	r3, #32
 80068ec:	d103      	bne.n	80068f6 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	f023 0304 	bic.w	r3, r3, #4
 80068f4:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80068f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80068f8:	f003 021c 	and.w	r2, r3, #28
 80068fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80068fe:	2304      	movs	r3, #4
 8006900:	4093      	lsls	r3, r2
 8006902:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8006904:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006906:	b103      	cbz	r3, 800690a <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8006908:	4798      	blx	r3
}
 800690a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800690c:	2202      	movs	r2, #2
 800690e:	409a      	lsls	r2, r3
 8006910:	420a      	tst	r2, r1
 8006912:	d028      	beq.n	8006966 <HAL_DMA_IRQHandler+0x9e>
 8006914:	f015 0f02 	tst.w	r5, #2
 8006918:	d025      	beq.n	8006966 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f013 0f20 	tst.w	r3, #32
 8006920:	d106      	bne.n	8006930 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	f023 030a 	bic.w	r3, r3, #10
 8006928:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800692a:	2301      	movs	r3, #1
 800692c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006930:	6802      	ldr	r2, [r0, #0]
 8006932:	4b1c      	ldr	r3, [pc, #112]	; (80069a4 <HAL_DMA_IRQHandler+0xdc>)
 8006934:	429a      	cmp	r2, r3
 8006936:	d90e      	bls.n	8006956 <HAL_DMA_IRQHandler+0x8e>
 8006938:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800693a:	f003 021c 	and.w	r2, r3, #28
 800693e:	2302      	movs	r3, #2
 8006940:	4093      	lsls	r3, r2
 8006942:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <HAL_DMA_IRQHandler+0xe0>)
 8006944:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8006946:	2300      	movs	r3, #0
 8006948:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 800694c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0db      	beq.n	800690a <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8006952:	4798      	blx	r3
 8006954:	e7d9      	b.n	800690a <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006956:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006958:	f003 021c 	and.w	r2, r3, #28
 800695c:	2302      	movs	r3, #2
 800695e:	4093      	lsls	r3, r2
 8006960:	4a12      	ldr	r2, [pc, #72]	; (80069ac <HAL_DMA_IRQHandler+0xe4>)
 8006962:	6053      	str	r3, [r2, #4]
 8006964:	e7ef      	b.n	8006946 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006966:	2208      	movs	r2, #8
 8006968:	fa02 f303 	lsl.w	r3, r2, r3
 800696c:	420b      	tst	r3, r1
 800696e:	d0cc      	beq.n	800690a <HAL_DMA_IRQHandler+0x42>
 8006970:	f015 0f08 	tst.w	r5, #8
 8006974:	d0c9      	beq.n	800690a <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	f023 030e 	bic.w	r3, r3, #14
 800697c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800697e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006980:	f003 031c 	and.w	r3, r3, #28
 8006984:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006986:	2201      	movs	r2, #1
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800698e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006990:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006994:	2300      	movs	r3, #0
 8006996:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800699a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0b4      	beq.n	800690a <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80069a0:	4798      	blx	r3
  return;
 80069a2:	e7b2      	b.n	800690a <HAL_DMA_IRQHandler+0x42>
 80069a4:	40020080 	.word	0x40020080
 80069a8:	40020400 	.word	0x40020400
 80069ac:	40020000 	.word	0x40020000

080069b0 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80069b0:	b178      	cbz	r0, 80069d2 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 80069b2:	6803      	ldr	r3, [r0, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80069b6:	f011 0f10 	tst.w	r1, #16
 80069ba:	d004      	beq.n	80069c6 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80069bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80069c0:	d004      	beq.n	80069cc <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80069c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80069c6:	601a      	str	r2, [r3, #0]
  return status;
 80069c8:	2000      	movs	r0, #0
 80069ca:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80069cc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80069d0:	e7f9      	b.n	80069c6 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 80069d2:	2001      	movs	r0, #1
}
 80069d4:	4770      	bx	lr
	...

080069d8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80069d8:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80069da:	4c05      	ldr	r4, [pc, #20]	; (80069f0 <FLASH_Program_DoubleWord+0x18>)
 80069dc:	6961      	ldr	r1, [r4, #20]
 80069de:	f041 0101 	orr.w	r1, r1, #1
 80069e2:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80069e4:	6002      	str	r2, [r0, #0]
 80069e6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80069ea:	6043      	str	r3, [r0, #4]
}
 80069ec:	bc10      	pop	{r4}
 80069ee:	4770      	bx	lr
 80069f0:	58004000 	.word	0x58004000

080069f4 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80069f4:	4a0c      	ldr	r2, [pc, #48]	; (8006a28 <FLASH_Program_Fast+0x34>)
 80069f6:	6953      	ldr	r3, [r2, #20]
 80069f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069fe:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006a02:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006a04:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006a06:	f851 2b04 	ldr.w	r2, [r1], #4
 8006a0a:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8006a0e:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8006a10:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8006a14:	d1f7      	bne.n	8006a06 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8006a16:	4b04      	ldr	r3, [pc, #16]	; (8006a28 <FLASH_Program_Fast+0x34>)
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006a1e:	d1fa      	bne.n	8006a16 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a20:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	58004000 	.word	0x58004000

08006a2c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006a2c:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <HAL_FLASH_Unlock+0x28>)
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	db01      	blt.n	8006a38 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8006a34:	2000      	movs	r0, #0
 8006a36:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006a38:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <HAL_FLASH_Unlock+0x28>)
 8006a3a:	4a07      	ldr	r2, [pc, #28]	; (8006a58 <HAL_FLASH_Unlock+0x2c>)
 8006a3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006a3e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8006a42:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	db01      	blt.n	8006a4e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	4770      	bx	lr
      status = HAL_ERROR;
 8006a4e:	2001      	movs	r0, #1
}
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	58004000 	.word	0x58004000
 8006a58:	45670123 	.word	0x45670123

08006a5c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <HAL_FLASH_Lock+0x18>)
 8006a5e:	695a      	ldr	r2, [r3, #20]
 8006a60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a64:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	db01      	blt.n	8006a70 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8006a6c:	2001      	movs	r0, #1
}
 8006a6e:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8006a70:	2000      	movs	r0, #0
 8006a72:	4770      	bx	lr
 8006a74:	58004000 	.word	0x58004000

08006a78 <FLASH_WaitForLastOperation>:
{
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8006a7c:	f7fb fac6 	bl	800200c <HAL_GetTick>
 8006a80:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006a82:	4b16      	ldr	r3, [pc, #88]	; (8006adc <FLASH_WaitForLastOperation+0x64>)
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006a8a:	d006      	beq.n	8006a9a <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006a8c:	f7fb fabe 	bl	800200c <HAL_GetTick>
 8006a90:	1b00      	subs	r0, r0, r4
 8006a92:	42a8      	cmp	r0, r5
 8006a94:	d3f5      	bcc.n	8006a82 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8006a96:	2003      	movs	r0, #3
}
 8006a98:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8006a9a:	4b10      	ldr	r3, [pc, #64]	; (8006adc <FLASH_WaitForLastOperation+0x64>)
 8006a9c:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8006a9e:	f013 0f01 	tst.w	r3, #1
 8006aa2:	d002      	beq.n	8006aaa <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006aa4:	4a0d      	ldr	r2, [pc, #52]	; (8006adc <FLASH_WaitForLastOperation+0x64>)
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8006aaa:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d001      	beq.n	8006ab6 <FLASH_WaitForLastOperation+0x3e>
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <FLASH_WaitForLastOperation+0x64>)
 8006ab4:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8006ab6:	b95b      	cbnz	r3, 8006ad0 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8006ab8:	4b08      	ldr	r3, [pc, #32]	; (8006adc <FLASH_WaitForLastOperation+0x64>)
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006ac0:	d00a      	beq.n	8006ad8 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006ac2:	f7fb faa3 	bl	800200c <HAL_GetTick>
 8006ac6:	1b00      	subs	r0, r0, r4
 8006ac8:	42a8      	cmp	r0, r5
 8006aca:	d3f5      	bcc.n	8006ab8 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8006acc:	2003      	movs	r0, #3
 8006ace:	e7e3      	b.n	8006a98 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8006ad0:	4a03      	ldr	r2, [pc, #12]	; (8006ae0 <FLASH_WaitForLastOperation+0x68>)
 8006ad2:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	e7df      	b.n	8006a98 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8006ad8:	2000      	movs	r0, #0
 8006ada:	e7dd      	b.n	8006a98 <FLASH_WaitForLastOperation+0x20>
 8006adc:	58004000 	.word	0x58004000
 8006ae0:	20003a14 	.word	0x20003a14

08006ae4 <HAL_FLASH_Program>:
{
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8006ae8:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <HAL_FLASH_Program+0x5c>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d025      	beq.n	8006b3c <HAL_FLASH_Program+0x58>
 8006af0:	4604      	mov	r4, r0
 8006af2:	460d      	mov	r5, r1
 8006af4:	4616      	mov	r6, r2
 8006af6:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <HAL_FLASH_Program+0x5c>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006afc:	2200      	movs	r2, #0
 8006afe:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b04:	f7ff ffb8 	bl	8006a78 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8006b08:	b970      	cbnz	r0, 8006b28 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006b0a:	2c01      	cmp	r4, #1
 8006b0c:	d010      	beq.n	8006b30 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4628      	mov	r0, r5
 8006b12:	f7ff ff6f 	bl	80069f4 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b1a:	f7ff ffad 	bl	8006a78 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8006b1e:	4a09      	ldr	r2, [pc, #36]	; (8006b44 <HAL_FLASH_Program+0x60>)
 8006b20:	6953      	ldr	r3, [r2, #20]
 8006b22:	ea23 0304 	bic.w	r3, r3, r4
 8006b26:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8006b28:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <HAL_FLASH_Program+0x5c>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
}
 8006b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8006b30:	4632      	mov	r2, r6
 8006b32:	463b      	mov	r3, r7
 8006b34:	4628      	mov	r0, r5
 8006b36:	f7ff ff4f 	bl	80069d8 <FLASH_Program_DoubleWord>
 8006b3a:	e7ec      	b.n	8006b16 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8006b3c:	2002      	movs	r0, #2
 8006b3e:	e7f6      	b.n	8006b2e <HAL_FLASH_Program+0x4a>
 8006b40:	20003a14 	.word	0x20003a14
 8006b44:	58004000 	.word	0x58004000

08006b48 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8006b48:	4a03      	ldr	r2, [pc, #12]	; (8006b58 <FLASH_MassErase+0x10>)
 8006b4a:	6953      	ldr	r3, [r2, #20]
 8006b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b50:	f043 0304 	orr.w	r3, r3, #4
 8006b54:	6153      	str	r3, [r2, #20]
#endif
}
 8006b56:	4770      	bx	lr
 8006b58:	58004000 	.word	0x58004000

08006b5c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8006b5c:	4b18      	ldr	r3, [pc, #96]	; (8006bc0 <FLASH_FlushCaches+0x64>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d006      	beq.n	8006b76 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8006b68:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <FLASH_FlushCaches+0x64>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d012      	beq.n	8006b9a <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8006b74:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006b76:	4b12      	ldr	r3, [pc, #72]	; (8006bc0 <FLASH_FlushCaches+0x64>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b7e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b8e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	e7e6      	b.n	8006b68 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006b9a:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <FLASH_FlushCaches+0x64>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bb2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bba:	601a      	str	r2, [r3, #0]
}
 8006bbc:	e7da      	b.n	8006b74 <FLASH_FlushCaches+0x18>
 8006bbe:	bf00      	nop
 8006bc0:	58004000 	.word	0x58004000

08006bc4 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006bc4:	4a03      	ldr	r2, [pc, #12]	; (8006bd4 <FLASH_AcknowledgePageErase+0x10>)
 8006bc6:	6953      	ldr	r3, [r2, #20]
 8006bc8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8006bcc:	f023 0302 	bic.w	r3, r3, #2
 8006bd0:	6153      	str	r3, [r2, #20]
#endif
}
 8006bd2:	4770      	bx	lr
 8006bd4:	58004000 	.word	0x58004000

08006bd8 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8006bd8:	4a05      	ldr	r2, [pc, #20]	; (8006bf0 <FLASH_PageErase+0x18>)
 8006bda:	6953      	ldr	r3, [r2, #20]
 8006bdc:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8006be0:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8006be4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8006be8:	f040 0002 	orr.w	r0, r0, #2
 8006bec:	6150      	str	r0, [r2, #20]
}
 8006bee:	4770      	bx	lr
 8006bf0:	58004000 	.word	0x58004000

08006bf4 <HAL_FLASHEx_Erase>:
{
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8006bf6:	4b1e      	ldr	r3, [pc, #120]	; (8006c70 <HAL_FLASHEx_Erase+0x7c>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d035      	beq.n	8006c6a <HAL_FLASHEx_Erase+0x76>
 8006bfe:	4605      	mov	r5, r0
 8006c00:	460f      	mov	r7, r1
 8006c02:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <HAL_FLASHEx_Erase+0x7c>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006c08:	2200      	movs	r2, #0
 8006c0a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006c0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c10:	f7ff ff32 	bl	8006a78 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8006c14:	4606      	mov	r6, r0
 8006c16:	bb18      	cbnz	r0, 8006c60 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d013      	beq.n	8006c46 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8006c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c22:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006c24:	686c      	ldr	r4, [r5, #4]
 8006c26:	686b      	ldr	r3, [r5, #4]
 8006c28:	68aa      	ldr	r2, [r5, #8]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	d913      	bls.n	8006c58 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8006c30:	4620      	mov	r0, r4
 8006c32:	f7ff ffd1 	bl	8006bd8 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c3a:	f7ff ff1d 	bl	8006a78 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8006c3e:	4606      	mov	r6, r0
 8006c40:	b948      	cbnz	r0, 8006c56 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006c42:	3401      	adds	r4, #1
 8006c44:	e7ef      	b.n	8006c26 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8006c46:	f7ff ff7f 	bl	8006b48 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006c4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c4e:	f7ff ff13 	bl	8006a78 <FLASH_WaitForLastOperation>
 8006c52:	4606      	mov	r6, r0
 8006c54:	e002      	b.n	8006c5c <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8006c56:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8006c58:	f7ff ffb4 	bl	8006bc4 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8006c5c:	f7ff ff7e 	bl	8006b5c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8006c60:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <HAL_FLASHEx_Erase+0x7c>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
}
 8006c66:	4630      	mov	r0, r6
 8006c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8006c6a:	2602      	movs	r6, #2
 8006c6c:	e7fb      	b.n	8006c66 <HAL_FLASHEx_Erase+0x72>
 8006c6e:	bf00      	nop
 8006c70:	20003a14 	.word	0x20003a14

08006c74 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c74:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8006c76:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c78:	e069      	b.n	8006d4e <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c7a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c7c:	005e      	lsls	r6, r3, #1
 8006c7e:	2403      	movs	r4, #3
 8006c80:	40b4      	lsls	r4, r6
 8006c82:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c86:	68cc      	ldr	r4, [r1, #12]
 8006c88:	40b4      	lsls	r4, r6
 8006c8a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8006c8c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c8e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c90:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c94:	684c      	ldr	r4, [r1, #4]
 8006c96:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006c9a:	409c      	lsls	r4, r3
 8006c9c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8006c9e:	6044      	str	r4, [r0, #4]
 8006ca0:	e066      	b.n	8006d70 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ca2:	08dd      	lsrs	r5, r3, #3
 8006ca4:	3508      	adds	r5, #8
 8006ca6:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006caa:	f003 0c07 	and.w	ip, r3, #7
 8006cae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006cb2:	f04f 0e0f 	mov.w	lr, #15
 8006cb6:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006cba:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006cbe:	690c      	ldr	r4, [r1, #16]
 8006cc0:	fa04 f40c 	lsl.w	r4, r4, ip
 8006cc4:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8006cc8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8006ccc:	e067      	b.n	8006d9e <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006cce:	2402      	movs	r4, #2
 8006cd0:	e000      	b.n	8006cd4 <HAL_GPIO_Init+0x60>
 8006cd2:	2400      	movs	r4, #0
 8006cd4:	fa04 f40e 	lsl.w	r4, r4, lr
 8006cd8:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006cda:	f10c 0c02 	add.w	ip, ip, #2
 8006cde:	4d4b      	ldr	r5, [pc, #300]	; (8006e0c <HAL_GPIO_Init+0x198>)
 8006ce0:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ce4:	4c4a      	ldr	r4, [pc, #296]	; (8006e10 <HAL_GPIO_Init+0x19c>)
 8006ce6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006ce8:	43d4      	mvns	r4, r2
 8006cea:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006cee:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8006cf2:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8006cf6:	d001      	beq.n	8006cfc <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8006cf8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006cfc:	4d44      	ldr	r5, [pc, #272]	; (8006e10 <HAL_GPIO_Init+0x19c>)
 8006cfe:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8006d00:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8006d02:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d06:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8006d0a:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8006d0e:	d001      	beq.n	8006d14 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8006d10:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8006d14:	4d3e      	ldr	r5, [pc, #248]	; (8006e10 <HAL_GPIO_Init+0x19c>)
 8006d16:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8006d18:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006d1c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d20:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8006d24:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8006d28:	d001      	beq.n	8006d2e <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8006d2a:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8006d2e:	4d38      	ldr	r5, [pc, #224]	; (8006e10 <HAL_GPIO_Init+0x19c>)
 8006d30:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8006d34:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006d38:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d3a:	684e      	ldr	r6, [r1, #4]
 8006d3c:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8006d40:	d001      	beq.n	8006d46 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8006d42:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8006d46:	4a32      	ldr	r2, [pc, #200]	; (8006e10 <HAL_GPIO_Init+0x19c>)
 8006d48:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8006d4c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d4e:	680a      	ldr	r2, [r1, #0]
 8006d50:	fa32 f403 	lsrs.w	r4, r2, r3
 8006d54:	d058      	beq.n	8006e08 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d56:	f04f 0c01 	mov.w	ip, #1
 8006d5a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8006d5e:	ea1c 0202 	ands.w	r2, ip, r2
 8006d62:	d0f3      	beq.n	8006d4c <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d64:	684c      	ldr	r4, [r1, #4]
 8006d66:	f004 0403 	and.w	r4, r4, #3
 8006d6a:	3c01      	subs	r4, #1
 8006d6c:	2c01      	cmp	r4, #1
 8006d6e:	d984      	bls.n	8006c7a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d70:	684c      	ldr	r4, [r1, #4]
 8006d72:	f004 0403 	and.w	r4, r4, #3
 8006d76:	2c03      	cmp	r4, #3
 8006d78:	d00c      	beq.n	8006d94 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8006d7a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d7c:	005d      	lsls	r5, r3, #1
 8006d7e:	f04f 0c03 	mov.w	ip, #3
 8006d82:	fa0c fc05 	lsl.w	ip, ip, r5
 8006d86:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d8a:	688c      	ldr	r4, [r1, #8]
 8006d8c:	40ac      	lsls	r4, r5
 8006d8e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8006d92:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d94:	684c      	ldr	r4, [r1, #4]
 8006d96:	f004 0403 	and.w	r4, r4, #3
 8006d9a:	2c02      	cmp	r4, #2
 8006d9c:	d081      	beq.n	8006ca2 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8006d9e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006da0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006da4:	f04f 0c03 	mov.w	ip, #3
 8006da8:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006dac:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006db0:	684c      	ldr	r4, [r1, #4]
 8006db2:	f004 0403 	and.w	r4, r4, #3
 8006db6:	fa04 f40e 	lsl.w	r4, r4, lr
 8006dba:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006dbe:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006dc0:	684c      	ldr	r4, [r1, #4]
 8006dc2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8006dc6:	d0c1      	beq.n	8006d4c <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8006dc8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8006dcc:	f10c 0502 	add.w	r5, ip, #2
 8006dd0:	4c0e      	ldr	r4, [pc, #56]	; (8006e0c <HAL_GPIO_Init+0x198>)
 8006dd2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8006dd6:	f003 0e03 	and.w	lr, r3, #3
 8006dda:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006dde:	2407      	movs	r4, #7
 8006de0:	fa04 f40e 	lsl.w	r4, r4, lr
 8006de4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006de8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8006dec:	f43f af71 	beq.w	8006cd2 <HAL_GPIO_Init+0x5e>
 8006df0:	4c08      	ldr	r4, [pc, #32]	; (8006e14 <HAL_GPIO_Init+0x1a0>)
 8006df2:	42a0      	cmp	r0, r4
 8006df4:	d006      	beq.n	8006e04 <HAL_GPIO_Init+0x190>
 8006df6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006dfa:	42a0      	cmp	r0, r4
 8006dfc:	f43f af67 	beq.w	8006cce <HAL_GPIO_Init+0x5a>
 8006e00:	2407      	movs	r4, #7
 8006e02:	e767      	b.n	8006cd4 <HAL_GPIO_Init+0x60>
 8006e04:	2401      	movs	r4, #1
 8006e06:	e765      	b.n	8006cd4 <HAL_GPIO_Init+0x60>
  }
}
 8006e08:	bd70      	pop	{r4, r5, r6, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	58000800 	.word	0x58000800
 8006e14:	48000400 	.word	0x48000400

08006e18 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8006e18:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006e1a:	fa31 f203 	lsrs.w	r2, r1, r3
 8006e1e:	d071      	beq.n	8006f04 <HAL_GPIO_DeInit+0xec>
{
 8006e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e22:	e02e      	b.n	8006e82 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006e24:	2502      	movs	r5, #2
 8006e26:	e000      	b.n	8006e2a <HAL_GPIO_DeInit+0x12>
 8006e28:	2500      	movs	r5, #0
 8006e2a:	fa05 f50c 	lsl.w	r5, r5, ip
 8006e2e:	42a5      	cmp	r5, r4
 8006e30:	d049      	beq.n	8006ec6 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006e32:	6804      	ldr	r4, [r0, #0]
 8006e34:	005d      	lsls	r5, r3, #1
 8006e36:	f04f 0c03 	mov.w	ip, #3
 8006e3a:	fa0c fc05 	lsl.w	ip, ip, r5
 8006e3e:	ea44 040c 	orr.w	r4, r4, ip
 8006e42:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006e44:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8006e48:	f10e 0e08 	add.w	lr, lr, #8
 8006e4c:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8006e50:	f003 0607 	and.w	r6, r3, #7
 8006e54:	00b6      	lsls	r6, r6, #2
 8006e56:	250f      	movs	r5, #15
 8006e58:	40b5      	lsls	r5, r6
 8006e5a:	ea24 0405 	bic.w	r4, r4, r5
 8006e5e:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e62:	6884      	ldr	r4, [r0, #8]
 8006e64:	ea24 040c 	bic.w	r4, r4, ip
 8006e68:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e6a:	6844      	ldr	r4, [r0, #4]
 8006e6c:	ea24 0202 	bic.w	r2, r4, r2
 8006e70:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e72:	68c2      	ldr	r2, [r0, #12]
 8006e74:	ea22 020c 	bic.w	r2, r2, ip
 8006e78:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8006e7a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8006e7c:	fa31 f203 	lsrs.w	r2, r1, r3
 8006e80:	d03f      	beq.n	8006f02 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006e82:	2201      	movs	r2, #1
 8006e84:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8006e86:	ea12 0701 	ands.w	r7, r2, r1
 8006e8a:	d0f6      	beq.n	8006e7a <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8006e8c:	089e      	lsrs	r6, r3, #2
 8006e8e:	1cb5      	adds	r5, r6, #2
 8006e90:	4c1d      	ldr	r4, [pc, #116]	; (8006f08 <HAL_GPIO_DeInit+0xf0>)
 8006e92:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8006e96:	f003 0c03 	and.w	ip, r3, #3
 8006e9a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006e9e:	f04f 0e07 	mov.w	lr, #7
 8006ea2:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006ea6:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006eaa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8006eae:	d0bb      	beq.n	8006e28 <HAL_GPIO_DeInit+0x10>
 8006eb0:	4d16      	ldr	r5, [pc, #88]	; (8006f0c <HAL_GPIO_DeInit+0xf4>)
 8006eb2:	42a8      	cmp	r0, r5
 8006eb4:	d005      	beq.n	8006ec2 <HAL_GPIO_DeInit+0xaa>
 8006eb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006eba:	42a8      	cmp	r0, r5
 8006ebc:	d0b2      	beq.n	8006e24 <HAL_GPIO_DeInit+0xc>
 8006ebe:	2507      	movs	r5, #7
 8006ec0:	e7b3      	b.n	8006e2a <HAL_GPIO_DeInit+0x12>
 8006ec2:	2501      	movs	r5, #1
 8006ec4:	e7b1      	b.n	8006e2a <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8006ec6:	4c12      	ldr	r4, [pc, #72]	; (8006f10 <HAL_GPIO_DeInit+0xf8>)
 8006ec8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8006ecc:	ea25 0507 	bic.w	r5, r5, r7
 8006ed0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006ed4:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006ed8:	ea25 0507 	bic.w	r5, r5, r7
 8006edc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8006ee0:	6825      	ldr	r5, [r4, #0]
 8006ee2:	ea25 0507 	bic.w	r5, r5, r7
 8006ee6:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006ee8:	6865      	ldr	r5, [r4, #4]
 8006eea:	ea25 0507 	bic.w	r5, r5, r7
 8006eee:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006ef0:	4d05      	ldr	r5, [pc, #20]	; (8006f08 <HAL_GPIO_DeInit+0xf0>)
 8006ef2:	3602      	adds	r6, #2
 8006ef4:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8006ef8:	ea24 040e 	bic.w	r4, r4, lr
 8006efc:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8006f00:	e797      	b.n	8006e32 <HAL_GPIO_DeInit+0x1a>
  }
}
 8006f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	48000400 	.word	0x48000400
 8006f10:	58000800 	.word	0x58000800

08006f14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f14:	b10a      	cbz	r2, 8006f1a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f16:	6181      	str	r1, [r0, #24]
 8006f18:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f1a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006f1c:	4770      	bx	lr

08006f1e <HAL_GPIO_WriteMultipleStatePin>:
  /* Check the parameters */
  /* Make sure at least one parameter is different from zero and that there is no common pin */
  assert_param(IS_GPIO_PIN((uint32_t)PinReset | (uint32_t)PinSet));
  assert_param(IS_GPIO_COMMON_PIN(PinReset, PinSet));

  tmp = (((uint32_t)PinReset << 16) | PinSet);
 8006f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  GPIOx->BSRR = tmp;
 8006f22:	6182      	str	r2, [r0, #24]
}
 8006f24:	4770      	bx	lr

08006f26 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f26:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f28:	ea01 0203 	and.w	r2, r1, r3
 8006f2c:	ea21 0103 	bic.w	r1, r1, r3
 8006f30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f34:	6181      	str	r1, [r0, #24]
}
 8006f36:	4770      	bx	lr

08006f38 <HAL_GPIO_LockPin>:
  * @param GPIO_Pin specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f38:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8006f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f3e:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8006f40:	9b01      	ldr	r3, [sp, #4]
 8006f42:	430b      	orrs	r3, r1
 8006f44:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8006f4a:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8006f4c:	9b01      	ldr	r3, [sp, #4]
 8006f4e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8006f50:	69c3      	ldr	r3, [r0, #28]
 8006f52:	9301      	str	r3, [sp, #4]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
 8006f54:	69c3      	ldr	r3, [r0, #28]
 8006f56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006f5a:	d002      	beq.n	8006f62 <HAL_GPIO_LockPin+0x2a>
  {
    return HAL_OK;
 8006f5c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_ERROR;
  }
}
 8006f5e:	b002      	add	sp, #8
 8006f60:	4770      	bx	lr
    return HAL_ERROR;
 8006f62:	2001      	movs	r0, #1
 8006f64:	e7fb      	b.n	8006f5e <HAL_GPIO_LockPin+0x26>
	...

08006f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f68:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	4203      	tst	r3, r0
 8006f70:	d100      	bne.n	8006f74 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8006f72:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f74:	4b02      	ldr	r3, [pc, #8]	; (8006f80 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006f76:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f78:	f7fc faea 	bl	8003550 <HAL_GPIO_EXTI_Callback>
}
 8006f7c:	e7f9      	b.n	8006f72 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8006f7e:	bf00      	nop
 8006f80:	58000800 	.word	0x58000800

08006f84 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f84:	6803      	ldr	r3, [r0, #0]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	f012 0f02 	tst.w	r2, #2
 8006f8c:	d001      	beq.n	8006f92 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f8e:	2200      	movs	r2, #0
 8006f90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f92:	6803      	ldr	r3, [r0, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	f012 0f01 	tst.w	r2, #1
 8006f9a:	d103      	bne.n	8006fa4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	619a      	str	r2, [r3, #24]
  }
}
 8006fa4:	4770      	bx	lr

08006fa6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006fa6:	b410      	push	{r4}
 8006fa8:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006faa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006fae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fb2:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fb4:	4321      	orrs	r1, r4
 8006fb6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fba:	6802      	ldr	r2, [r0, #0]
 8006fbc:	6853      	ldr	r3, [r2, #4]
 8006fbe:	0d64      	lsrs	r4, r4, #21
 8006fc0:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8006fc4:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8006fc8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8006fcc:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8006fd0:	f044 0403 	orr.w	r4, r4, #3
 8006fd4:	ea23 0304 	bic.w	r3, r3, r4
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006fdc:	bc10      	pop	{r4}
 8006fde:	4770      	bx	lr

08006fe0 <I2C_IsErrorOccurred>:
{
 8006fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe4:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8006fe6:	6803      	ldr	r3, [r0, #0]
 8006fe8:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006fea:	f016 0610 	ands.w	r6, r6, #16
 8006fee:	d07c      	beq.n	80070ea <I2C_IsErrorOccurred+0x10a>
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff4:	2210      	movs	r2, #16
 8006ff6:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8006ff8:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006ffa:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	6998      	ldr	r0, [r3, #24]
 8007000:	f010 0f20 	tst.w	r0, #32
 8007004:	d130      	bne.n	8007068 <I2C_IsErrorOccurred+0x88>
 8007006:	bb7f      	cbnz	r7, 8007068 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8007008:	f1b5 3fff 	cmp.w	r5, #4294967295
 800700c:	d0f6      	beq.n	8006ffc <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800700e:	f7fa fffd 	bl	800200c <HAL_GetTick>
 8007012:	eba0 0008 	sub.w	r0, r0, r8
 8007016:	42a8      	cmp	r0, r5
 8007018:	d801      	bhi.n	800701e <I2C_IsErrorOccurred+0x3e>
 800701a:	2d00      	cmp	r5, #0
 800701c:	d1ee      	bne.n	8006ffc <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800701e:	6821      	ldr	r1, [r4, #0]
 8007020:	684b      	ldr	r3, [r1, #4]
 8007022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8007026:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800702a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800702c:	6988      	ldr	r0, [r1, #24]
 800702e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007032:	d002      	beq.n	800703a <I2C_IsErrorOccurred+0x5a>
 8007034:	b90b      	cbnz	r3, 800703a <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8007036:	2a20      	cmp	r2, #32
 8007038:	d10e      	bne.n	8007058 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	f013 0f20 	tst.w	r3, #32
 8007042:	d1db      	bne.n	8006ffc <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007044:	f7fa ffe2 	bl	800200c <HAL_GetTick>
 8007048:	eba0 0008 	sub.w	r0, r0, r8
 800704c:	2819      	cmp	r0, #25
 800704e:	d9f4      	bls.n	800703a <I2C_IsErrorOccurred+0x5a>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007050:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8007054:	2701      	movs	r7, #1
              break;
 8007056:	e7d1      	b.n	8006ffc <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007058:	684b      	ldr	r3, [r1, #4]
 800705a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800705e:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8007060:	f7fa ffd4 	bl	800200c <HAL_GetTick>
 8007064:	4680      	mov	r8, r0
 8007066:	e7e8      	b.n	800703a <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8007068:	b90f      	cbnz	r7, 800706e <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800706a:	2220      	movs	r2, #32
 800706c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800706e:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8007072:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8007074:	6822      	ldr	r2, [r4, #0]
 8007076:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007078:	f413 7f80 	tst.w	r3, #256	; 0x100
 800707c:	d005      	beq.n	800708a <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 800707e:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007086:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8007088:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800708a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800708e:	d006      	beq.n	800709e <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8007090:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007094:	6822      	ldr	r2, [r4, #0]
 8007096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800709a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800709c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800709e:	f413 7f00 	tst.w	r3, #512	; 0x200
 80070a2:	d024      	beq.n	80070ee <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 80070a4:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ae:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80070b0:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80070b2:	4620      	mov	r0, r4
 80070b4:	f7ff ff66 	bl	8006f84 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	6853      	ldr	r3, [r2, #4]
 80070bc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80070c0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80070c4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80070ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80070d0:	4333      	orrs	r3, r6
 80070d2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80070d4:	2320      	movs	r3, #32
 80070d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070da:	2300      	movs	r3, #0
 80070dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80070e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80070e4:	4628      	mov	r0, r5
 80070e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80070ea:	2500      	movs	r5, #0
 80070ec:	e7c2      	b.n	8007074 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 80070ee:	2d00      	cmp	r5, #0
 80070f0:	d0f8      	beq.n	80070e4 <I2C_IsErrorOccurred+0x104>
 80070f2:	e7de      	b.n	80070b2 <I2C_IsErrorOccurred+0xd2>

080070f4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4604      	mov	r4, r0
 80070f8:	460d      	mov	r5, r1
 80070fa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	f013 0f02 	tst.w	r3, #2
 8007104:	d11d      	bne.n	8007142 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007106:	4632      	mov	r2, r6
 8007108:	4629      	mov	r1, r5
 800710a:	4620      	mov	r0, r4
 800710c:	f7ff ff68 	bl	8006fe0 <I2C_IsErrorOccurred>
 8007110:	b9c8      	cbnz	r0, 8007146 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8007112:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007116:	d0f1      	beq.n	80070fc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007118:	f7fa ff78 	bl	800200c <HAL_GetTick>
 800711c:	1b80      	subs	r0, r0, r6
 800711e:	42a8      	cmp	r0, r5
 8007120:	d801      	bhi.n	8007126 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8007122:	2d00      	cmp	r5, #0
 8007124:	d1ea      	bne.n	80070fc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007126:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007128:	f043 0320 	orr.w	r3, r3, #32
 800712c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800712e:	2320      	movs	r3, #32
 8007130:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007134:	2300      	movs	r3, #0
 8007136:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800713a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800713e:	2001      	movs	r0, #1
 8007140:	e000      	b.n	8007144 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8007142:	2000      	movs	r0, #0
}
 8007144:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007146:	2001      	movs	r0, #1
 8007148:	e7fc      	b.n	8007144 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800714a <I2C_WaitOnFlagUntilTimeout>:
{
 800714a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714e:	4606      	mov	r6, r0
 8007150:	4688      	mov	r8, r1
 8007152:	4617      	mov	r7, r2
 8007154:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007156:	6834      	ldr	r4, [r6, #0]
 8007158:	69a4      	ldr	r4, [r4, #24]
 800715a:	ea38 0404 	bics.w	r4, r8, r4
 800715e:	bf0c      	ite	eq
 8007160:	2401      	moveq	r4, #1
 8007162:	2400      	movne	r4, #0
 8007164:	42bc      	cmp	r4, r7
 8007166:	d118      	bne.n	800719a <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007168:	f1b5 3fff 	cmp.w	r5, #4294967295
 800716c:	d0f3      	beq.n	8007156 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800716e:	f7fa ff4d 	bl	800200c <HAL_GetTick>
 8007172:	9b06      	ldr	r3, [sp, #24]
 8007174:	1ac0      	subs	r0, r0, r3
 8007176:	42a8      	cmp	r0, r5
 8007178:	d801      	bhi.n	800717e <I2C_WaitOnFlagUntilTimeout+0x34>
 800717a:	2d00      	cmp	r5, #0
 800717c:	d1eb      	bne.n	8007156 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800717e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8007180:	f043 0320 	orr.w	r3, r3, #32
 8007184:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007186:	2320      	movs	r3, #32
 8007188:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800718c:	2300      	movs	r3, #0
 800718e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8007192:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8007196:	2001      	movs	r0, #1
 8007198:	e000      	b.n	800719c <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 800719a:	2000      	movs	r0, #0
}
 800719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080071a0 <I2C_RequestMemoryWrite>:
{
 80071a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	4604      	mov	r4, r0
 80071a8:	4690      	mov	r8, r2
 80071aa:	461d      	mov	r5, r3
 80071ac:	9e08      	ldr	r6, [sp, #32]
 80071ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80071b0:	4b19      	ldr	r3, [pc, #100]	; (8007218 <I2C_RequestMemoryWrite+0x78>)
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071b8:	b2ea      	uxtb	r2, r5
 80071ba:	f7ff fef4 	bl	8006fa6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071be:	463a      	mov	r2, r7
 80071c0:	4631      	mov	r1, r6
 80071c2:	4620      	mov	r0, r4
 80071c4:	f7ff ff96 	bl	80070f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80071c8:	b9f8      	cbnz	r0, 800720a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071ca:	2d01      	cmp	r5, #1
 80071cc:	d10e      	bne.n	80071ec <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	fa5f f288 	uxtb.w	r2, r8
 80071d4:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80071d6:	9700      	str	r7, [sp, #0]
 80071d8:	4633      	mov	r3, r6
 80071da:	2200      	movs	r2, #0
 80071dc:	2180      	movs	r1, #128	; 0x80
 80071de:	4620      	mov	r0, r4
 80071e0:	f7ff ffb3 	bl	800714a <I2C_WaitOnFlagUntilTimeout>
 80071e4:	b9a8      	cbnz	r0, 8007212 <I2C_RequestMemoryWrite+0x72>
}
 80071e6:	b002      	add	sp, #8
 80071e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80071f2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f4:	463a      	mov	r2, r7
 80071f6:	4631      	mov	r1, r6
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7ff ff7b 	bl	80070f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80071fe:	b930      	cbnz	r0, 800720e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	fa5f f288 	uxtb.w	r2, r8
 8007206:	629a      	str	r2, [r3, #40]	; 0x28
 8007208:	e7e5      	b.n	80071d6 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800720a:	2001      	movs	r0, #1
 800720c:	e7eb      	b.n	80071e6 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800720e:	2001      	movs	r0, #1
 8007210:	e7e9      	b.n	80071e6 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8007212:	2001      	movs	r0, #1
 8007214:	e7e7      	b.n	80071e6 <I2C_RequestMemoryWrite+0x46>
 8007216:	bf00      	nop
 8007218:	80002000 	.word	0x80002000

0800721c <I2C_RequestMemoryRead>:
{
 800721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	4604      	mov	r4, r0
 8007224:	4690      	mov	r8, r2
 8007226:	461d      	mov	r5, r3
 8007228:	9e08      	ldr	r6, [sp, #32]
 800722a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800722c:	4b18      	ldr	r3, [pc, #96]	; (8007290 <I2C_RequestMemoryRead+0x74>)
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	2300      	movs	r3, #0
 8007232:	b2ea      	uxtb	r2, r5
 8007234:	f7ff feb7 	bl	8006fa6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007238:	463a      	mov	r2, r7
 800723a:	4631      	mov	r1, r6
 800723c:	4620      	mov	r0, r4
 800723e:	f7ff ff59 	bl	80070f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007242:	b9f8      	cbnz	r0, 8007284 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007244:	2d01      	cmp	r5, #1
 8007246:	d10e      	bne.n	8007266 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	fa5f f288 	uxtb.w	r2, r8
 800724e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007250:	9700      	str	r7, [sp, #0]
 8007252:	4633      	mov	r3, r6
 8007254:	2200      	movs	r2, #0
 8007256:	2140      	movs	r1, #64	; 0x40
 8007258:	4620      	mov	r0, r4
 800725a:	f7ff ff76 	bl	800714a <I2C_WaitOnFlagUntilTimeout>
 800725e:	b9a8      	cbnz	r0, 800728c <I2C_RequestMemoryRead+0x70>
}
 8007260:	b002      	add	sp, #8
 8007262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800726c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800726e:	463a      	mov	r2, r7
 8007270:	4631      	mov	r1, r6
 8007272:	4620      	mov	r0, r4
 8007274:	f7ff ff3e 	bl	80070f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007278:	b930      	cbnz	r0, 8007288 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	fa5f f288 	uxtb.w	r2, r8
 8007280:	629a      	str	r2, [r3, #40]	; 0x28
 8007282:	e7e5      	b.n	8007250 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8007284:	2001      	movs	r0, #1
 8007286:	e7eb      	b.n	8007260 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8007288:	2001      	movs	r0, #1
 800728a:	e7e9      	b.n	8007260 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800728c:	2001      	movs	r0, #1
 800728e:	e7e7      	b.n	8007260 <I2C_RequestMemoryRead+0x44>
 8007290:	80002000 	.word	0x80002000

08007294 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	4605      	mov	r5, r0
 8007298:	460c      	mov	r4, r1
 800729a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	f013 0f20 	tst.w	r3, #32
 80072a4:	d11a      	bne.n	80072dc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072a6:	4632      	mov	r2, r6
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f7ff fe98 	bl	8006fe0 <I2C_IsErrorOccurred>
 80072b0:	b9b0      	cbnz	r0, 80072e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b2:	f7fa feab 	bl	800200c <HAL_GetTick>
 80072b6:	1b80      	subs	r0, r0, r6
 80072b8:	42a0      	cmp	r0, r4
 80072ba:	d801      	bhi.n	80072c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80072bc:	2c00      	cmp	r4, #0
 80072be:	d1ed      	bne.n	800729c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80072c2:	f043 0320 	orr.w	r3, r3, #32
 80072c6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80072c8:	2320      	movs	r3, #32
 80072ca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80072d4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80072d8:	2001      	movs	r0, #1
}
 80072da:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80072dc:	2000      	movs	r0, #0
 80072de:	e7fc      	b.n	80072da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80072e0:	2001      	movs	r0, #1
 80072e2:	e7fa      	b.n	80072da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080072e4 <HAL_I2C_MspInit>:
}
 80072e4:	4770      	bx	lr

080072e6 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d059      	beq.n	800739e <HAL_I2C_Init+0xb8>
{
 80072ea:	b510      	push	{r4, lr}
 80072ec:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d043      	beq.n	800737e <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80072f6:	2324      	movs	r3, #36	; 0x24
 80072f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80072fc:	6822      	ldr	r2, [r4, #0]
 80072fe:	6813      	ldr	r3, [r2, #0]
 8007300:	f023 0301 	bic.w	r3, r3, #1
 8007304:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007306:	6863      	ldr	r3, [r4, #4]
 8007308:	6822      	ldr	r2, [r4, #0]
 800730a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800730e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007310:	6822      	ldr	r2, [r4, #0]
 8007312:	6893      	ldr	r3, [r2, #8]
 8007314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007318:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800731a:	68e3      	ldr	r3, [r4, #12]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d033      	beq.n	8007388 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007320:	68a3      	ldr	r3, [r4, #8]
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8007328:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800732a:	68e3      	ldr	r3, [r4, #12]
 800732c:	2b02      	cmp	r3, #2
 800732e:	d031      	beq.n	8007394 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	6853      	ldr	r3, [r2, #4]
 8007334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800733c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800733e:	6822      	ldr	r2, [r4, #0]
 8007340:	68d3      	ldr	r3, [r2, #12]
 8007342:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007346:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	6962      	ldr	r2, [r4, #20]
 800734c:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800734e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007350:	6822      	ldr	r2, [r4, #0]
 8007352:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007356:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007358:	69e3      	ldr	r3, [r4, #28]
 800735a:	6a21      	ldr	r1, [r4, #32]
 800735c:	6822      	ldr	r2, [r4, #0]
 800735e:	430b      	orrs	r3, r1
 8007360:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	6813      	ldr	r3, [r2, #0]
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800736c:	2000      	movs	r0, #0
 800736e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007370:	2320      	movs	r3, #32
 8007372:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007376:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007378:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800737c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800737e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8007382:	f7ff ffaf 	bl	80072e4 <HAL_I2C_MspInit>
 8007386:	e7b6      	b.n	80072f6 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007388:	68a3      	ldr	r3, [r4, #8]
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007390:	6093      	str	r3, [r2, #8]
 8007392:	e7ca      	b.n	800732a <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800739a:	605a      	str	r2, [r3, #4]
 800739c:	e7c8      	b.n	8007330 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800739e:	2001      	movs	r0, #1
}
 80073a0:	4770      	bx	lr

080073a2 <HAL_I2C_MspDeInit>:
}
 80073a2:	4770      	bx	lr

080073a4 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80073a4:	b1a8      	cbz	r0, 80073d2 <HAL_I2C_DeInit+0x2e>
{
 80073a6:	b510      	push	{r4, lr}
 80073a8:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80073aa:	2324      	movs	r3, #36	; 0x24
 80073ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80073b0:	6802      	ldr	r2, [r0, #0]
 80073b2:	6813      	ldr	r3, [r2, #0]
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80073ba:	f7ff fff2 	bl	80073a2 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073be:	2000      	movs	r0, #0
 80073c0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80073c2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80073c6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80073cc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80073d0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80073d2:	2001      	movs	r0, #1
}
 80073d4:	4770      	bx	lr

080073d6 <HAL_I2C_Mem_Write>:
{
 80073d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	b083      	sub	sp, #12
 80073dc:	460e      	mov	r6, r1
 80073de:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80073e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80073e4:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80073e8:	b2c9      	uxtb	r1, r1
 80073ea:	2920      	cmp	r1, #32
 80073ec:	f040 80bb 	bne.w	8007566 <HAL_I2C_Mem_Write+0x190>
 80073f0:	4604      	mov	r4, r0
 80073f2:	4690      	mov	r8, r2
 80073f4:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80073f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073f8:	b1cb      	cbz	r3, 800742e <HAL_I2C_Mem_Write+0x58>
 80073fa:	f1ba 0f00 	cmp.w	sl, #0
 80073fe:	d016      	beq.n	800742e <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8007400:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007404:	2b01      	cmp	r3, #1
 8007406:	f000 80b2 	beq.w	800756e <HAL_I2C_Mem_Write+0x198>
 800740a:	f04f 0b01 	mov.w	fp, #1
 800740e:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007412:	f7fa fdfb 	bl	800200c <HAL_GetTick>
 8007416:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007418:	9000      	str	r0, [sp, #0]
 800741a:	2319      	movs	r3, #25
 800741c:	465a      	mov	r2, fp
 800741e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007422:	4620      	mov	r0, r4
 8007424:	f7ff fe91 	bl	800714a <I2C_WaitOnFlagUntilTimeout>
 8007428:	b130      	cbz	r0, 8007438 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 800742a:	2001      	movs	r0, #1
 800742c:	e09c      	b.n	8007568 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800742e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007432:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8007434:	2001      	movs	r0, #1
 8007436:	e097      	b.n	8007568 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007438:	2321      	movs	r3, #33	; 0x21
 800743a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800743e:	2340      	movs	r3, #64	; 0x40
 8007440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007444:	2300      	movs	r3, #0
 8007446:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8007448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800744a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800744c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007450:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007452:	9701      	str	r7, [sp, #4]
 8007454:	9500      	str	r5, [sp, #0]
 8007456:	464b      	mov	r3, r9
 8007458:	4642      	mov	r2, r8
 800745a:	4631      	mov	r1, r6
 800745c:	4620      	mov	r0, r4
 800745e:	f7ff fe9f 	bl	80071a0 <I2C_RequestMemoryWrite>
 8007462:	b970      	cbnz	r0, 8007482 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007464:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007466:	b29b      	uxth	r3, r3
 8007468:	2bff      	cmp	r3, #255	; 0xff
 800746a:	d90f      	bls.n	800748c <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800746c:	22ff      	movs	r2, #255	; 0xff
 800746e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007470:	2300      	movs	r3, #0
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007478:	4631      	mov	r1, r6
 800747a:	4620      	mov	r0, r4
 800747c:	f7ff fd93 	bl	8006fa6 <I2C_TransferConfig>
 8007480:	e021      	b.n	80074c6 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8007482:	2300      	movs	r3, #0
 8007484:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007488:	4658      	mov	r0, fp
 800748a:	e06d      	b.n	8007568 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 800748c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800748e:	b292      	uxth	r2, r2
 8007490:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007492:	2300      	movs	r3, #0
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	4631      	mov	r1, r6
 800749e:	4620      	mov	r0, r4
 80074a0:	f7ff fd81 	bl	8006fa6 <I2C_TransferConfig>
 80074a4:	e00f      	b.n	80074c6 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80074a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80074a8:	b292      	uxth	r2, r2
 80074aa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074ac:	2300      	movs	r3, #0
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	4631      	mov	r1, r6
 80074b8:	4620      	mov	r0, r4
 80074ba:	f7ff fd74 	bl	8006fa6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80074be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d033      	beq.n	800752e <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074c6:	463a      	mov	r2, r7
 80074c8:	4629      	mov	r1, r5
 80074ca:	4620      	mov	r0, r4
 80074cc:	f7ff fe12 	bl	80070f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d14e      	bne.n	8007572 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80074d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	7812      	ldrb	r2, [r2, #0]
 80074da:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80074dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074de:	3301      	adds	r3, #1
 80074e0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80074e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80074ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80074f6:	b292      	uxth	r2, r2
 80074f8:	2a00      	cmp	r2, #0
 80074fa:	d0e0      	beq.n	80074be <HAL_I2C_Mem_Write+0xe8>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1de      	bne.n	80074be <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007500:	9700      	str	r7, [sp, #0]
 8007502:	462b      	mov	r3, r5
 8007504:	2200      	movs	r2, #0
 8007506:	2180      	movs	r1, #128	; 0x80
 8007508:	4620      	mov	r0, r4
 800750a:	f7ff fe1e 	bl	800714a <I2C_WaitOnFlagUntilTimeout>
 800750e:	bb90      	cbnz	r0, 8007576 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007510:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007512:	b29b      	uxth	r3, r3
 8007514:	2bff      	cmp	r3, #255	; 0xff
 8007516:	d9c6      	bls.n	80074a6 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007518:	22ff      	movs	r2, #255	; 0xff
 800751a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800751c:	2300      	movs	r3, #0
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007524:	4631      	mov	r1, r6
 8007526:	4620      	mov	r0, r4
 8007528:	f7ff fd3d 	bl	8006fa6 <I2C_TransferConfig>
 800752c:	e7c7      	b.n	80074be <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752e:	463a      	mov	r2, r7
 8007530:	4629      	mov	r1, r5
 8007532:	4620      	mov	r0, r4
 8007534:	f7ff feae 	bl	8007294 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007538:	b9f8      	cbnz	r0, 800757a <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	2220      	movs	r2, #32
 800753e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007540:	6821      	ldr	r1, [r4, #0]
 8007542:	684b      	ldr	r3, [r1, #4]
 8007544:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8007548:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800754c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007556:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800755a:	2300      	movs	r3, #0
 800755c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8007560:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8007564:	e000      	b.n	8007568 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8007566:	2002      	movs	r0, #2
}
 8007568:	b003      	add	sp, #12
 800756a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800756e:	2002      	movs	r0, #2
 8007570:	e7fa      	b.n	8007568 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8007572:	2001      	movs	r0, #1
 8007574:	e7f8      	b.n	8007568 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8007576:	2001      	movs	r0, #1
 8007578:	e7f6      	b.n	8007568 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 800757a:	2001      	movs	r0, #1
 800757c:	e7f4      	b.n	8007568 <HAL_I2C_Mem_Write+0x192>
	...

08007580 <HAL_I2C_Mem_Read>:
{
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	b083      	sub	sp, #12
 8007586:	460e      	mov	r6, r1
 8007588:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800758c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800758e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8007592:	b2c9      	uxtb	r1, r1
 8007594:	2920      	cmp	r1, #32
 8007596:	f040 80bc 	bne.w	8007712 <HAL_I2C_Mem_Read+0x192>
 800759a:	4604      	mov	r4, r0
 800759c:	4690      	mov	r8, r2
 800759e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80075a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075a2:	b1cb      	cbz	r3, 80075d8 <HAL_I2C_Mem_Read+0x58>
 80075a4:	f1ba 0f00 	cmp.w	sl, #0
 80075a8:	d016      	beq.n	80075d8 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80075aa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	f000 80b3 	beq.w	800771a <HAL_I2C_Mem_Read+0x19a>
 80075b4:	f04f 0b01 	mov.w	fp, #1
 80075b8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80075bc:	f7fa fd26 	bl	800200c <HAL_GetTick>
 80075c0:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075c2:	9000      	str	r0, [sp, #0]
 80075c4:	2319      	movs	r3, #25
 80075c6:	465a      	mov	r2, fp
 80075c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075cc:	4620      	mov	r0, r4
 80075ce:	f7ff fdbc 	bl	800714a <I2C_WaitOnFlagUntilTimeout>
 80075d2:	b130      	cbz	r0, 80075e2 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 80075d4:	2001      	movs	r0, #1
 80075d6:	e09d      	b.n	8007714 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075dc:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80075de:	2001      	movs	r0, #1
 80075e0:	e098      	b.n	8007714 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075e2:	2322      	movs	r3, #34	; 0x22
 80075e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075e8:	2340      	movs	r3, #64	; 0x40
 80075ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80075f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075f4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80075f6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075fa:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075fc:	9701      	str	r7, [sp, #4]
 80075fe:	9500      	str	r5, [sp, #0]
 8007600:	464b      	mov	r3, r9
 8007602:	4642      	mov	r2, r8
 8007604:	4631      	mov	r1, r6
 8007606:	4620      	mov	r0, r4
 8007608:	f7ff fe08 	bl	800721c <I2C_RequestMemoryRead>
 800760c:	b970      	cbnz	r0, 800762c <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800760e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007610:	b29b      	uxth	r3, r3
 8007612:	2bff      	cmp	r3, #255	; 0xff
 8007614:	d90f      	bls.n	8007636 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007616:	22ff      	movs	r2, #255	; 0xff
 8007618:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800761a:	4b44      	ldr	r3, [pc, #272]	; (800772c <HAL_I2C_Mem_Read+0x1ac>)
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007622:	4631      	mov	r1, r6
 8007624:	4620      	mov	r0, r4
 8007626:	f7ff fcbe 	bl	8006fa6 <I2C_TransferConfig>
 800762a:	e021      	b.n	8007670 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 800762c:	2300      	movs	r3, #0
 800762e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007632:	4658      	mov	r0, fp
 8007634:	e06e      	b.n	8007714 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8007636:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007638:	b292      	uxth	r2, r2
 800763a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800763c:	4b3b      	ldr	r3, [pc, #236]	; (800772c <HAL_I2C_Mem_Read+0x1ac>)
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	4631      	mov	r1, r6
 8007648:	4620      	mov	r0, r4
 800764a:	f7ff fcac 	bl	8006fa6 <I2C_TransferConfig>
 800764e:	e00f      	b.n	8007670 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8007650:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007652:	b292      	uxth	r2, r2
 8007654:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007656:	2300      	movs	r3, #0
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	4631      	mov	r1, r6
 8007662:	4620      	mov	r0, r4
 8007664:	f7ff fc9f 	bl	8006fa6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007668:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800766a:	b29b      	uxth	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d034      	beq.n	80076da <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007670:	9700      	str	r7, [sp, #0]
 8007672:	462b      	mov	r3, r5
 8007674:	2200      	movs	r2, #0
 8007676:	2104      	movs	r1, #4
 8007678:	4620      	mov	r0, r4
 800767a:	f7ff fd66 	bl	800714a <I2C_WaitOnFlagUntilTimeout>
 800767e:	2800      	cmp	r0, #0
 8007680:	d14d      	bne.n	800771e <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007688:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800768a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800768c:	3301      	adds	r3, #1
 800768e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007690:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007692:	3a01      	subs	r2, #1
 8007694:	b292      	uxth	r2, r2
 8007696:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007698:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800769a:	b29b      	uxth	r3, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	b29b      	uxth	r3, r3
 80076a0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0de      	beq.n	8007668 <HAL_I2C_Mem_Read+0xe8>
 80076aa:	2a00      	cmp	r2, #0
 80076ac:	d1dc      	bne.n	8007668 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076ae:	9700      	str	r7, [sp, #0]
 80076b0:	462b      	mov	r3, r5
 80076b2:	2180      	movs	r1, #128	; 0x80
 80076b4:	4620      	mov	r0, r4
 80076b6:	f7ff fd48 	bl	800714a <I2C_WaitOnFlagUntilTimeout>
 80076ba:	bb90      	cbnz	r0, 8007722 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2bff      	cmp	r3, #255	; 0xff
 80076c2:	d9c5      	bls.n	8007650 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076c4:	22ff      	movs	r2, #255	; 0xff
 80076c6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80076c8:	2300      	movs	r3, #0
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076d0:	4631      	mov	r1, r6
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7ff fc67 	bl	8006fa6 <I2C_TransferConfig>
 80076d8:	e7c6      	b.n	8007668 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076da:	463a      	mov	r2, r7
 80076dc:	4629      	mov	r1, r5
 80076de:	4620      	mov	r0, r4
 80076e0:	f7ff fdd8 	bl	8007294 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076e4:	b9f8      	cbnz	r0, 8007726 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	2220      	movs	r2, #32
 80076ea:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80076ec:	6821      	ldr	r1, [r4, #0]
 80076ee:	684b      	ldr	r3, [r1, #4]
 80076f0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80076f4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80076f8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80076fc:	f023 0301 	bic.w	r3, r3, #1
 8007700:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007702:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007706:	2300      	movs	r3, #0
 8007708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800770c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8007710:	e000      	b.n	8007714 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8007712:	2002      	movs	r0, #2
}
 8007714:	b003      	add	sp, #12
 8007716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800771a:	2002      	movs	r0, #2
 800771c:	e7fa      	b.n	8007714 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 800771e:	2001      	movs	r0, #1
 8007720:	e7f8      	b.n	8007714 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8007722:	2001      	movs	r0, #1
 8007724:	e7f6      	b.n	8007714 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8007726:	2001      	movs	r0, #1
 8007728:	e7f4      	b.n	8007714 <HAL_I2C_Mem_Read+0x194>
 800772a:	bf00      	nop
 800772c:	80002400 	.word	0x80002400

08007730 <HAL_I2C_GetState>:
  return hi2c->State;
 8007730:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007734:	4770      	bx	lr

08007736 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007736:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8007738:	4770      	bx	lr

0800773a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800773a:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800773c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	2a20      	cmp	r2, #32
 8007744:	d123      	bne.n	800778e <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007746:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800774a:	2a01      	cmp	r2, #1
 800774c:	d021      	beq.n	8007792 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800774e:	2201      	movs	r2, #1
 8007750:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007754:	2224      	movs	r2, #36	; 0x24
 8007756:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800775a:	6800      	ldr	r0, [r0, #0]
 800775c:	6802      	ldr	r2, [r0, #0]
 800775e:	f022 0201 	bic.w	r2, r2, #1
 8007762:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	6802      	ldr	r2, [r0, #0]
 8007768:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800776c:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	6802      	ldr	r2, [r0, #0]
 8007772:	4311      	orrs	r1, r2
 8007774:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007776:	6819      	ldr	r1, [r3, #0]
 8007778:	680a      	ldr	r2, [r1, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007780:	2220      	movs	r2, #32
 8007782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007786:	2000      	movs	r0, #0
 8007788:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 800778c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800778e:	2002      	movs	r0, #2
 8007790:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007792:	2002      	movs	r0, #2
  }
}
 8007794:	4770      	bx	lr

08007796 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007796:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007798:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800779c:	b2d2      	uxtb	r2, r2
 800779e:	2a20      	cmp	r2, #32
 80077a0:	d121      	bne.n	80077e6 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077a2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80077a6:	2a01      	cmp	r2, #1
 80077a8:	d01f      	beq.n	80077ea <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80077aa:	2201      	movs	r2, #1
 80077ac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077b0:	2224      	movs	r2, #36	; 0x24
 80077b2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077b6:	6800      	ldr	r0, [r0, #0]
 80077b8:	6802      	ldr	r2, [r0, #0]
 80077ba:	f022 0201 	bic.w	r2, r2, #1
 80077be:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077c4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077cc:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077ce:	6819      	ldr	r1, [r3, #0]
 80077d0:	680a      	ldr	r2, [r1, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d8:	2220      	movs	r2, #32
 80077da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077de:	2000      	movs	r0, #0
 80077e0:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80077e4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80077e6:	2002      	movs	r0, #2
 80077e8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80077ea:	2002      	movs	r0, #2
  }
}
 80077ec:	4770      	bx	lr
	...

080077f0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80077f0:	4684      	mov	ip, r0
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80077f2:	4b0c      	ldr	r3, [pc, #48]	; (8007824 <LPTIM_WaitForFlag+0x34>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a0c      	ldr	r2, [pc, #48]	; (8007828 <LPTIM_WaitForFlag+0x38>)
 80077f8:	fba2 2303 	umull	r2, r3, r2, r3
 80077fc:	0b9b      	lsrs	r3, r3, #14
 80077fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007802:	fb02 f303 	mul.w	r3, r2, r3
  HAL_StatusTypeDef result = HAL_OK;
 8007806:	2000      	movs	r0, #0
 8007808:	e006      	b.n	8007818 <LPTIM_WaitForFlag+0x28>
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800780a:	f8dc 2000 	ldr.w	r2, [ip]
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	ea31 0202 	bics.w	r2, r1, r2
 8007814:	d004      	beq.n	8007820 <LPTIM_WaitForFlag+0x30>
 8007816:	b11b      	cbz	r3, 8007820 <LPTIM_WaitForFlag+0x30>
    if (count == 0UL)
 8007818:	3b01      	subs	r3, #1
 800781a:	d1f6      	bne.n	800780a <LPTIM_WaitForFlag+0x1a>
      result = HAL_TIMEOUT;
 800781c:	2003      	movs	r0, #3
 800781e:	e7f4      	b.n	800780a <LPTIM_WaitForFlag+0x1a>

  return result;
}
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	200000f0 	.word	0x200000f0
 8007828:	d1b71759 	.word	0xd1b71759

0800782c <HAL_LPTIM_AutoReloadMatchCallback>:
}
 800782c:	4770      	bx	lr

0800782e <HAL_LPTIM_TriggerCallback>:
}
 800782e:	4770      	bx	lr

08007830 <HAL_LPTIM_CompareWriteCallback>:
}
 8007830:	4770      	bx	lr

08007832 <HAL_LPTIM_AutoReloadWriteCallback>:
}
 8007832:	4770      	bx	lr

08007834 <HAL_LPTIM_DirectionUpCallback>:
}
 8007834:	4770      	bx	lr

08007836 <HAL_LPTIM_DirectionDownCallback>:
}
 8007836:	4770      	bx	lr

08007838 <HAL_LPTIM_UpdateEventCallback>:
}
 8007838:	4770      	bx	lr

0800783a <HAL_LPTIM_RepCounterWriteCallback>:
}
 800783a:	4770      	bx	lr

0800783c <HAL_LPTIM_IRQHandler>:
{
 800783c:	b510      	push	{r4, lr}
 800783e:	4604      	mov	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007840:	6803      	ldr	r3, [r0, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	f012 0f01 	tst.w	r2, #1
 8007848:	d003      	beq.n	8007852 <HAL_LPTIM_IRQHandler+0x16>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	f012 0f01 	tst.w	r2, #1
 8007850:	d148      	bne.n	80078e4 <HAL_LPTIM_IRQHandler+0xa8>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	f012 0f02 	tst.w	r2, #2
 800785a:	d003      	beq.n	8007864 <HAL_LPTIM_IRQHandler+0x28>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	f012 0f02 	tst.w	r2, #2
 8007862:	d144      	bne.n	80078ee <HAL_LPTIM_IRQHandler+0xb2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	f012 0f04 	tst.w	r2, #4
 800786c:	d003      	beq.n	8007876 <HAL_LPTIM_IRQHandler+0x3a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	f012 0f04 	tst.w	r2, #4
 8007874:	d141      	bne.n	80078fa <HAL_LPTIM_IRQHandler+0xbe>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	f012 0f08 	tst.w	r2, #8
 800787e:	d003      	beq.n	8007888 <HAL_LPTIM_IRQHandler+0x4c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	f012 0f08 	tst.w	r2, #8
 8007886:	d13e      	bne.n	8007906 <HAL_LPTIM_IRQHandler+0xca>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	f012 0f10 	tst.w	r2, #16
 8007890:	d003      	beq.n	800789a <HAL_LPTIM_IRQHandler+0x5e>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	f012 0f10 	tst.w	r2, #16
 8007898:	d13b      	bne.n	8007912 <HAL_LPTIM_IRQHandler+0xd6>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	f012 0f20 	tst.w	r2, #32
 80078a2:	d003      	beq.n	80078ac <HAL_LPTIM_IRQHandler+0x70>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	f012 0f20 	tst.w	r2, #32
 80078aa:	d138      	bne.n	800791e <HAL_LPTIM_IRQHandler+0xe2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80078b4:	d003      	beq.n	80078be <HAL_LPTIM_IRQHandler+0x82>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80078bc:	d135      	bne.n	800792a <HAL_LPTIM_IRQHandler+0xee>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80078c6:	d003      	beq.n	80078d0 <HAL_LPTIM_IRQHandler+0x94>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 80078ce:	d132      	bne.n	8007936 <HAL_LPTIM_IRQHandler+0xfa>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80078d8:	d003      	beq.n	80078e2 <HAL_LPTIM_IRQHandler+0xa6>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80078e0:	d12f      	bne.n	8007942 <HAL_LPTIM_IRQHandler+0x106>
}
 80078e2:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80078e4:	2201      	movs	r2, #1
 80078e6:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80078e8:	f7fa f948 	bl	8001b7c <HAL_LPTIM_CompareMatchCallback>
 80078ec:	e7b1      	b.n	8007852 <HAL_LPTIM_IRQHandler+0x16>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80078ee:	2202      	movs	r2, #2
 80078f0:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80078f2:	4620      	mov	r0, r4
 80078f4:	f7ff ff9a 	bl	800782c <HAL_LPTIM_AutoReloadMatchCallback>
 80078f8:	e7b4      	b.n	8007864 <HAL_LPTIM_IRQHandler+0x28>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80078fa:	2204      	movs	r2, #4
 80078fc:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 80078fe:	4620      	mov	r0, r4
 8007900:	f7ff ff95 	bl	800782e <HAL_LPTIM_TriggerCallback>
 8007904:	e7b7      	b.n	8007876 <HAL_LPTIM_IRQHandler+0x3a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007906:	2208      	movs	r2, #8
 8007908:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800790a:	4620      	mov	r0, r4
 800790c:	f7ff ff90 	bl	8007830 <HAL_LPTIM_CompareWriteCallback>
 8007910:	e7ba      	b.n	8007888 <HAL_LPTIM_IRQHandler+0x4c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007912:	2210      	movs	r2, #16
 8007914:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007916:	4620      	mov	r0, r4
 8007918:	f7ff ff8b 	bl	8007832 <HAL_LPTIM_AutoReloadWriteCallback>
 800791c:	e7bd      	b.n	800789a <HAL_LPTIM_IRQHandler+0x5e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800791e:	2220      	movs	r2, #32
 8007920:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007922:	4620      	mov	r0, r4
 8007924:	f7ff ff86 	bl	8007834 <HAL_LPTIM_DirectionUpCallback>
 8007928:	e7c0      	b.n	80078ac <HAL_LPTIM_IRQHandler+0x70>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800792a:	2240      	movs	r2, #64	; 0x40
 800792c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff ff81 	bl	8007836 <HAL_LPTIM_DirectionDownCallback>
 8007934:	e7c3      	b.n	80078be <HAL_LPTIM_IRQHandler+0x82>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8007936:	2280      	movs	r2, #128	; 0x80
 8007938:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800793a:	4620      	mov	r0, r4
 800793c:	f7ff ff7c 	bl	8007838 <HAL_LPTIM_UpdateEventCallback>
 8007940:	e7c6      	b.n	80078d0 <HAL_LPTIM_IRQHandler+0x94>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8007942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007946:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8007948:	4620      	mov	r0, r4
 800794a:	f7ff ff76 	bl	800783a <HAL_LPTIM_RepCounterWriteCallback>
}
 800794e:	e7c8      	b.n	80078e2 <HAL_LPTIM_IRQHandler+0xa6>

08007950 <HAL_LPTIM_GetState>:
  return hlptim->State;
 8007950:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
}
 8007954:	4770      	bx	lr
	...

08007958 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8007958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800795e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007962:	2301      	movs	r3, #1
 8007964:	f383 8810 	msr	PRIMASK, r3
  primask_bit = __get_PRIMASK();
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8007968:	6803      	ldr	r3, [r0, #0]
 800796a:	4a90      	ldr	r2, [pc, #576]	; (8007bac <LPTIM_Disable+0x254>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d063      	beq.n	8007a38 <LPTIM_Disable+0xe0>
 8007970:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007974:	4293      	cmp	r3, r2
 8007976:	d069      	beq.n	8007a4c <LPTIM_Disable+0xf4>
 8007978:	f5a2 52e0 	sub.w	r2, r2, #7168	; 0x1c00
 800797c:	4293      	cmp	r3, r2
 800797e:	d051      	beq.n	8007a24 <LPTIM_Disable+0xcc>
 8007980:	2500      	movs	r5, #0
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8007982:	f8d3 b008 	ldr.w	fp, [r3, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 8007986:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 800798a:	695a      	ldr	r2, [r3, #20]
  tmpARR = hlptim->Instance->ARR;
 800798c:	699f      	ldr	r7, [r3, #24]
  tmpOR = hlptim->Instance->OR;
 800798e:	f8d3 9020 	ldr.w	r9, [r3, #32]
  tmpRCR = hlptim->Instance->RCR;
 8007992:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8007996:	4985      	ldr	r1, [pc, #532]	; (8007bac <LPTIM_Disable+0x254>)
 8007998:	428b      	cmp	r3, r1
 800799a:	d06c      	beq.n	8007a76 <LPTIM_Disable+0x11e>
 800799c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079a0:	428b      	cmp	r3, r1
 80079a2:	d073      	beq.n	8007a8c <LPTIM_Disable+0x134>
 80079a4:	f5a1 51e0 	sub.w	r1, r1, #7168	; 0x1c00
 80079a8:	428b      	cmp	r3, r1
 80079aa:	d059      	beq.n	8007a60 <LPTIM_Disable+0x108>
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 80079ac:	b91a      	cbnz	r2, 80079b6 <LPTIM_Disable+0x5e>
 80079ae:	b917      	cbnz	r7, 80079b6 <LPTIM_Disable+0x5e>
 80079b0:	f1b8 0f00 	cmp.w	r8, #0
 80079b4:	d024      	beq.n	8007a00 <LPTIM_Disable+0xa8>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	497c      	ldr	r1, [pc, #496]	; (8007bac <LPTIM_Disable+0x254>)
 80079ba:	428b      	cmp	r3, r1
 80079bc:	d07a      	beq.n	8007ab4 <LPTIM_Disable+0x15c>
 80079be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079c2:	428b      	cmp	r3, r1
 80079c4:	d07f      	beq.n	8007ac6 <LPTIM_Disable+0x16e>
 80079c6:	f5a1 51e0 	sub.w	r1, r1, #7168	; 0x1c00
 80079ca:	428b      	cmp	r3, r1
 80079cc:	d069      	beq.n	8007aa2 <LPTIM_Disable+0x14a>
        break;
      default:
        break;
    }

    if (tmpCMP != 0UL)
 80079ce:	2a00      	cmp	r2, #0
 80079d0:	f040 8082 	bne.w	8007ad8 <LPTIM_Disable+0x180>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
    }

    if (tmpARR != 0UL)
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	f040 8094 	bne.w	8007b02 <LPTIM_Disable+0x1aa>
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
    }

    if (tmpRCR != 0UL)
 80079da:	f1b8 0f00 	cmp.w	r8, #0
 80079de:	f040 80a5 	bne.w	8007b2c <LPTIM_Disable+0x1d4>
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	4a71      	ldr	r2, [pc, #452]	; (8007bac <LPTIM_Disable+0x254>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	f000 80c5 	beq.w	8007b76 <LPTIM_Disable+0x21e>
 80079ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079f0:	4293      	cmp	r3, r2
 80079f2:	f000 80cd 	beq.w	8007b90 <LPTIM_Disable+0x238>
 80079f6:	f5a2 52e0 	sub.w	r2, r2, #7168	; 0x1c00
 80079fa:	4293      	cmp	r3, r2
 80079fc:	f000 80ae 	beq.w	8007b5c <LPTIM_Disable+0x204>
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	6913      	ldr	r3, [r2, #16]
 8007a04:	f023 0301 	bic.w	r3, r3, #1
 8007a08:	6113      	str	r3, [r2, #16]
  hlptim->Instance->IER = tmpIER;
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	f8c3 b008 	str.w	fp, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	f8c3 a00c 	str.w	sl, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	f8c3 9020 	str.w	r9, [r3, #32]
 8007a1c:	f386 8810 	msr	PRIMASK, r6

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007a20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8007a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a28:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
 8007a2c:	0c2d      	lsrs	r5, r5, #16
 8007a2e:	f005 050c 	and.w	r5, r5, #12
 8007a32:	f445 2540 	orr.w	r5, r5, #786432	; 0xc0000
      break;
 8007a36:	e7a4      	b.n	8007982 <LPTIM_Disable+0x2a>
 8007a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a3c:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
 8007a40:	0c2d      	lsrs	r5, r5, #16
 8007a42:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8007a46:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
      break;
 8007a4a:	e79a      	b.n	8007982 <LPTIM_Disable+0x2a>
 8007a4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a50:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
 8007a54:	0c2d      	lsrs	r5, r5, #16
 8007a56:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
 8007a5a:	f445 0540 	orr.w	r5, r5, #12582912	; 0xc00000
      break;
 8007a5e:	e790      	b.n	8007982 <LPTIM_Disable+0x2a>
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8007a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a64:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007a66:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007a6a:	6399      	str	r1, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8007a6c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007a6e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007a72:	6399      	str	r1, [r3, #56]	; 0x38
}
 8007a74:	e79a      	b.n	80079ac <LPTIM_Disable+0x54>
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8007a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007a7c:	f041 0120 	orr.w	r1, r1, #32
 8007a80:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8007a82:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007a84:	f021 0120 	bic.w	r1, r1, #32
 8007a88:	63d9      	str	r1, [r3, #60]	; 0x3c
}
 8007a8a:	e78f      	b.n	80079ac <LPTIM_Disable+0x54>
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8007a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007a92:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007a96:	63d9      	str	r1, [r3, #60]	; 0x3c
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8007a98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007a9a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007a9e:	63d9      	str	r1, [r3, #60]	; 0x3c
}
 8007aa0:	e784      	b.n	80079ac <LPTIM_Disable+0x54>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aa6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007aaa:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ab2:	e78c      	b.n	80079ce <LPTIM_Disable+0x76>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ab8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007abc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ac4:	e783      	b.n	80079ce <LPTIM_Disable+0x76>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007ace:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ad6:	e77a      	b.n	80079ce <LPTIM_Disable+0x76>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007ad8:	6821      	ldr	r1, [r4, #0]
 8007ada:	690b      	ldr	r3, [r1, #16]
 8007adc:	f043 0301 	orr.w	r3, r3, #1
 8007ae0:	610b      	str	r3, [r1, #16]
      hlptim->Instance->CMP = tmpCMP;
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	615a      	str	r2, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007ae6:	2108      	movs	r1, #8
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f7ff fe81 	bl	80077f0 <LPTIM_WaitForFlag>
 8007aee:	2803      	cmp	r0, #3
 8007af0:	d003      	beq.n	8007afa <LPTIM_Disable+0x1a2>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	2208      	movs	r2, #8
 8007af6:	605a      	str	r2, [r3, #4]
 8007af8:	e76c      	b.n	80079d4 <LPTIM_Disable+0x7c>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8007b00:	e7f7      	b.n	8007af2 <LPTIM_Disable+0x19a>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	6913      	ldr	r3, [r2, #16]
 8007b06:	f043 0301 	orr.w	r3, r3, #1
 8007b0a:	6113      	str	r3, [r2, #16]
      hlptim->Instance->ARR = tmpARR;
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	619f      	str	r7, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007b10:	2110      	movs	r1, #16
 8007b12:	4620      	mov	r0, r4
 8007b14:	f7ff fe6c 	bl	80077f0 <LPTIM_WaitForFlag>
 8007b18:	2803      	cmp	r0, #3
 8007b1a:	d003      	beq.n	8007b24 <LPTIM_Disable+0x1cc>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	2210      	movs	r2, #16
 8007b20:	605a      	str	r2, [r3, #4]
 8007b22:	e75a      	b.n	80079da <LPTIM_Disable+0x82>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8007b2a:	e7f7      	b.n	8007b1c <LPTIM_Disable+0x1c4>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007b2c:	6822      	ldr	r2, [r4, #0]
 8007b2e:	6913      	ldr	r3, [r2, #16]
 8007b30:	f043 0301 	orr.w	r3, r3, #1
 8007b34:	6113      	str	r3, [r2, #16]
      hlptim->Instance->RCR = tmpRCR;
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8007b3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b40:	4620      	mov	r0, r4
 8007b42:	f7ff fe55 	bl	80077f0 <LPTIM_WaitForFlag>
 8007b46:	2803      	cmp	r0, #3
 8007b48:	d004      	beq.n	8007b54 <LPTIM_Disable+0x1fc>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	e746      	b.n	80079e2 <LPTIM_Disable+0x8a>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8007b5a:	e7f6      	b.n	8007b4a <LPTIM_Disable+0x1f2>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007b64:	f405 017c 	and.w	r1, r5, #16515072	; 0xfc0000
 8007b68:	ea23 0301 	bic.w	r3, r3, r1
 8007b6c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8007b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8007b74:	e744      	b.n	8007a00 <LPTIM_Disable+0xa8>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007b7e:	f405 017c 	and.w	r1, r5, #16515072	; 0xfc0000
 8007b82:	ea23 0301 	bic.w	r3, r3, r1
 8007b86:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8007b8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8007b8e:	e737      	b.n	8007a00 <LPTIM_Disable+0xa8>
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b94:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007b98:	f405 017c 	and.w	r1, r5, #16515072	; 0xfc0000
 8007b9c:	ea23 0301 	bic.w	r3, r3, r1
 8007ba0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8007ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8007ba8:	e72a      	b.n	8007a00 <LPTIM_Disable+0xa8>
 8007baa:	bf00      	nop
 8007bac:	40009400 	.word	0x40009400

08007bb0 <HAL_LPTIM_Init>:
  if (hlptim == NULL)
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d06d      	beq.n	8007c90 <HAL_LPTIM_Init+0xe0>
{
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	4604      	mov	r4, r0
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007bb8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d05d      	beq.n	8007c7c <HAL_LPTIM_Init+0xcc>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  __HAL_LPTIM_ENABLE(hlptim);
 8007bc6:	6822      	ldr	r2, [r4, #0]
 8007bc8:	6913      	ldr	r3, [r2, #16]
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	6113      	str	r3, [r2, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bd6:	6059      	str	r1, [r3, #4]
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007bdc:	629a      	str	r2, [r3, #40]	; 0x28
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff fe06 	bl	80077f0 <LPTIM_WaitForFlag>
 8007be4:	2803      	cmp	r0, #3
 8007be6:	d048      	beq.n	8007c7a <HAL_LPTIM_Init+0xca>
  __HAL_LPTIM_DISABLE(hlptim);
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7ff feb5 	bl	8007958 <LPTIM_Disable>
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f7ff feae 	bl	8007950 <HAL_LPTIM_GetState>
 8007bf4:	2803      	cmp	r0, #3
 8007bf6:	d040      	beq.n	8007c7a <HAL_LPTIM_Init+0xca>
  tmpcfgr = hlptim->Instance->CFGR;
 8007bf8:	6825      	ldr	r5, [r4, #0]
 8007bfa:	68eb      	ldr	r3, [r5, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007bfc:	6861      	ldr	r1, [r4, #4]
 8007bfe:	2901      	cmp	r1, #1
 8007c00:	d003      	beq.n	8007c0a <HAL_LPTIM_Init+0x5a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007c02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007c04:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007c08:	d101      	bne.n	8007c0e <HAL_LPTIM_Init+0x5e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007c0a:	f023 031e 	bic.w	r3, r3, #30
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007c0e:	6962      	ldr	r2, [r4, #20]
 8007c10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007c14:	4282      	cmp	r2, r0
 8007c16:	d003      	beq.n	8007c20 <HAL_LPTIM_Init+0x70>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007c18:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007c1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007c20:	481c      	ldr	r0, [pc, #112]	; (8007c94 <HAL_LPTIM_Init+0xe4>)
 8007c22:	4018      	ands	r0, r3
              hlptim->Init.Clock.Prescaler |
 8007c24:	68a3      	ldr	r3, [r4, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c26:	430b      	orrs	r3, r1
              hlptim->Init.OutputPolarity  |
 8007c28:	6a26      	ldr	r6, [r4, #32]
              hlptim->Init.Clock.Prescaler |
 8007c2a:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 8007c2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007c2e:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);
 8007c30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007c32:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c34:	4303      	orrs	r3, r0
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007c36:	b919      	cbnz	r1, 8007c40 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007c38:	69e0      	ldr	r0, [r4, #28]
 8007c3a:	6927      	ldr	r7, [r4, #16]
 8007c3c:	4338      	orrs	r0, r7
 8007c3e:	4303      	orrs	r3, r0
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007c40:	2901      	cmp	r1, #1
 8007c42:	d002      	beq.n	8007c4a <HAL_LPTIM_Init+0x9a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007c44:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8007c48:	d103      	bne.n	8007c52 <HAL_LPTIM_Init+0xa2>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007c4a:	68e1      	ldr	r1, [r4, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007c4c:	6920      	ldr	r0, [r4, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007c4e:	4301      	orrs	r1, r0
 8007c50:	430b      	orrs	r3, r1
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007c52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c56:	428a      	cmp	r2, r1
 8007c58:	d004      	beq.n	8007c64 <HAL_LPTIM_Init+0xb4>
                hlptim->Init.Trigger.ActiveEdge |
 8007c5a:	69a1      	ldr	r1, [r4, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c5c:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.SampleTime);
 8007c5e:	69e1      	ldr	r1, [r4, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007c60:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c62:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 8007c64:	60eb      	str	r3, [r5, #12]
  if (hlptim->Instance == LPTIM1)
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	4a0b      	ldr	r2, [pc, #44]	; (8007c98 <HAL_LPTIM_Init+0xe8>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00b      	beq.n	8007c86 <HAL_LPTIM_Init+0xd6>
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8007c6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007c70:	621a      	str	r2, [r3, #32]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007c72:	2301      	movs	r3, #1
 8007c74:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8007c78:	2000      	movs	r0, #0
}
 8007c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 8007c7c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    HAL_LPTIM_MspInit(hlptim);
 8007c80:	f7f9 ff4a 	bl	8001b18 <HAL_LPTIM_MspInit>
 8007c84:	e79c      	b.n	8007bc0 <HAL_LPTIM_Init+0x10>
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007c86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007c88:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	621a      	str	r2, [r3, #32]
 8007c8e:	e7f0      	b.n	8007c72 <HAL_LPTIM_Init+0xc2>
    return HAL_ERROR;
 8007c90:	2001      	movs	r0, #1
}
 8007c92:	4770      	bx	lr
 8007c94:	ff19f1fe 	.word	0xff19f1fe
 8007c98:	40007c00 	.word	0x40007c00

08007c9c <HAL_LPTIM_TimeOut_Start_IT>:
{
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4615      	mov	r5, r2
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8007caa:	6802      	ldr	r2, [r0, #0]
 8007cac:	492b      	ldr	r1, [pc, #172]	; (8007d5c <HAL_LPTIM_TimeOut_Start_IT+0xc0>)
 8007cae:	428a      	cmp	r2, r1
 8007cb0:	d043      	beq.n	8007d3a <HAL_LPTIM_TimeOut_Start_IT+0x9e>
 8007cb2:	492b      	ldr	r1, [pc, #172]	; (8007d60 <HAL_LPTIM_TimeOut_Start_IT+0xc4>)
 8007cb4:	428a      	cmp	r2, r1
 8007cb6:	d048      	beq.n	8007d4a <HAL_LPTIM_TimeOut_Start_IT+0xae>
 8007cb8:	492a      	ldr	r1, [pc, #168]	; (8007d64 <HAL_LPTIM_TimeOut_Start_IT+0xc8>)
 8007cba:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8007cbe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007cc2:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8007cc6:	6822      	ldr	r2, [r4, #0]
 8007cc8:	68d1      	ldr	r1, [r2, #12]
 8007cca:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8007cce:	60d1      	str	r1, [r2, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 8007cd0:	6822      	ldr	r2, [r4, #0]
 8007cd2:	6911      	ldr	r1, [r2, #16]
 8007cd4:	f041 0101 	orr.w	r1, r1, #1
 8007cd8:	6111      	str	r1, [r2, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	2110      	movs	r1, #16
 8007cde:	6051      	str	r1, [r2, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007ce0:	6822      	ldr	r2, [r4, #0]
 8007ce2:	6193      	str	r3, [r2, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f7ff fd83 	bl	80077f0 <LPTIM_WaitForFlag>
 8007cea:	2803      	cmp	r0, #3
 8007cec:	d024      	beq.n	8007d38 <HAL_LPTIM_TimeOut_Start_IT+0x9c>
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	2108      	movs	r1, #8
 8007cf2:	6059      	str	r1, [r3, #4]
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	615d      	str	r5, [r3, #20]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f7ff fd79 	bl	80077f0 <LPTIM_WaitForFlag>
 8007cfe:	2803      	cmp	r0, #3
 8007d00:	d01a      	beq.n	8007d38 <HAL_LPTIM_TimeOut_Start_IT+0x9c>
  __HAL_LPTIM_DISABLE(hlptim);
 8007d02:	4620      	mov	r0, r4
 8007d04:	f7ff fe28 	bl	8007958 <LPTIM_Disable>
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f7ff fe21 	bl	8007950 <HAL_LPTIM_GetState>
 8007d0e:	2803      	cmp	r0, #3
 8007d10:	d012      	beq.n	8007d38 <HAL_LPTIM_TimeOut_Start_IT+0x9c>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8007d12:	6822      	ldr	r2, [r4, #0]
 8007d14:	6893      	ldr	r3, [r2, #8]
 8007d16:	f043 0301 	orr.w	r3, r3, #1
 8007d1a:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 8007d1c:	6822      	ldr	r2, [r4, #0]
 8007d1e:	6913      	ldr	r3, [r2, #16]
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	6113      	str	r3, [r2, #16]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	6913      	ldr	r3, [r2, #16]
 8007d2a:	f043 0304 	orr.w	r3, r3, #4
 8007d2e:	6113      	str	r3, [r2, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8007d36:	2000      	movs	r0, #0
}
 8007d38:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8007d3a:	490a      	ldr	r1, [pc, #40]	; (8007d64 <HAL_LPTIM_TimeOut_Start_IT+0xc8>)
 8007d3c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8007d40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007d44:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 8007d48:	e7bd      	b.n	8007cc6 <HAL_LPTIM_TimeOut_Start_IT+0x2a>
 8007d4a:	4906      	ldr	r1, [pc, #24]	; (8007d64 <HAL_LPTIM_TimeOut_Start_IT+0xc8>)
 8007d4c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8007d50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007d54:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 8007d58:	e7b5      	b.n	8007cc6 <HAL_LPTIM_TimeOut_Start_IT+0x2a>
 8007d5a:	bf00      	nop
 8007d5c:	40007c00 	.word	0x40007c00
 8007d60:	40009400 	.word	0x40009400
 8007d64:	58000800 	.word	0x58000800

08007d68 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d68:	4a02      	ldr	r2, [pc, #8]	; (8007d74 <HAL_PWR_EnableBkUpAccess+0xc>)
 8007d6a:	6813      	ldr	r3, [r2, #0]
 8007d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d70:	6013      	str	r3, [r2, #0]
}
 8007d72:	4770      	bx	lr
 8007d74:	58000400 	.word	0x58000400

08007d78 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8007d7c:	b9a0      	cbnz	r0, 8007da8 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <HAL_PWR_EnterSLEEPMode+0x44>)
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007d86:	d10a      	bne.n	8007d9e <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007d88:	4a0d      	ldr	r2, [pc, #52]	; (8007dc0 <HAL_PWR_EnterSLEEPMode+0x48>)
 8007d8a:	6913      	ldr	r3, [r2, #16]
 8007d8c:	f023 0304 	bic.w	r3, r3, #4
 8007d90:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007d92:	2c01      	cmp	r4, #1
 8007d94:	d010      	beq.n	8007db8 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007d96:	bf40      	sev
    __WFE();
 8007d98:	bf20      	wfe
    __WFE();
 8007d9a:	bf20      	wfe
  }
}
 8007d9c:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8007d9e:	f000 f821 	bl	8007de4 <HAL_PWREx_DisableLowPowerRunMode>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d0f0      	beq.n	8007d88 <HAL_PWR_EnterSLEEPMode+0x10>
 8007da6:	e7f9      	b.n	8007d9c <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <HAL_PWR_EnterSLEEPMode+0x44>)
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007db0:	d1ea      	bne.n	8007d88 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8007db2:	f000 f80f 	bl	8007dd4 <HAL_PWREx_EnableLowPowerRunMode>
 8007db6:	e7e7      	b.n	8007d88 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8007db8:	bf30      	wfi
 8007dba:	e7ef      	b.n	8007d9c <HAL_PWR_EnterSLEEPMode+0x24>
 8007dbc:	58000400 	.word	0x58000400
 8007dc0:	e000ed00 	.word	0xe000ed00

08007dc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <HAL_PWREx_GetVoltageRange+0xc>)
 8007dc6:	6818      	ldr	r0, [r3, #0]
}
 8007dc8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	58000400 	.word	0x58000400

08007dd4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8007dd4:	4a02      	ldr	r2, [pc, #8]	; (8007de0 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8007dd6:	6813      	ldr	r3, [r2, #0]
 8007dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ddc:	6013      	str	r3, [r2, #0]
}
 8007dde:	4770      	bx	lr
 8007de0:	58000400 	.word	0x58000400

08007de4 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8007de4:	4a0f      	ldr	r2, [pc, #60]	; (8007e24 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dec:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8007dee:	4b0e      	ldr	r3, [pc, #56]	; (8007e28 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2232      	movs	r2, #50	; 0x32
 8007df4:	fb02 f303 	mul.w	r3, r2, r3
 8007df8:	4a0c      	ldr	r2, [pc, #48]	; (8007e2c <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8007dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfe:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007e00:	e000      	b.n	8007e04 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8007e02:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007e04:	4a07      	ldr	r2, [pc, #28]	; (8007e24 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8007e06:	6952      	ldr	r2, [r2, #20]
 8007e08:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007e0c:	d001      	beq.n	8007e12 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f7      	bne.n	8007e02 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8007e12:	4b04      	ldr	r3, [pc, #16]	; (8007e24 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007e1a:	d101      	bne.n	8007e20 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	4770      	bx	lr
    return HAL_TIMEOUT;
 8007e20:	2003      	movs	r0, #3
}
 8007e22:	4770      	bx	lr
 8007e24:	58000400 	.word	0x58000400
 8007e28:	200000f0 	.word	0x200000f0
 8007e2c:	431bde83 	.word	0x431bde83

08007e30 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8007e30:	4a0c      	ldr	r2, [pc, #48]	; (8007e64 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	f023 0307 	bic.w	r3, r3, #7
 8007e38:	f043 0302 	orr.w	r3, r3, #2
 8007e3c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	; (8007e68 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8007e40:	6913      	ldr	r3, [r2, #16]
 8007e42:	f043 0304 	orr.w	r3, r3, #4
 8007e46:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8007e48:	2801      	cmp	r0, #1
 8007e4a:	d008      	beq.n	8007e5e <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007e4c:	bf40      	sev
    __WFE();
 8007e4e:	bf20      	wfe
    __WFE();
 8007e50:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007e52:	4a05      	ldr	r2, [pc, #20]	; (8007e68 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8007e54:	6913      	ldr	r3, [r2, #16]
 8007e56:	f023 0304 	bic.w	r3, r3, #4
 8007e5a:	6113      	str	r3, [r2, #16]
}
 8007e5c:	4770      	bx	lr
    __WFI();
 8007e5e:	bf30      	wfi
 8007e60:	e7f7      	b.n	8007e52 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8007e62:	bf00      	nop
 8007e64:	58000400 	.word	0x58000400
 8007e68:	e000ed00 	.word	0xe000ed00

08007e6c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007e6c:	b530      	push	{r4, r5, lr}
 8007e6e:	b089      	sub	sp, #36	; 0x24
 8007e70:	4604      	mov	r4, r0
 8007e72:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007e74:	4b2a      	ldr	r3, [pc, #168]	; (8007f20 <RCC_SetFlashLatency+0xb4>)
 8007e76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e7a:	9006      	str	r0, [sp, #24]
 8007e7c:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007e80:	f103 0208 	add.w	r2, r3, #8
 8007e84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e88:	9004      	str	r0, [sp, #16]
 8007e8a:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007e8e:	ad01      	add	r5, sp, #4
 8007e90:	3310      	adds	r3, #16
 8007e92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e96:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e9a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8007e9e:	d007      	beq.n	8007eb0 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e014      	b.n	8007ece <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8007ea4:	aa08      	add	r2, sp, #32
 8007ea6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007eaa:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8007eae:	e01e      	b.n	8007eee <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d808      	bhi.n	8007ec8 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007eb6:	aa08      	add	r2, sp, #32
 8007eb8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8007ebc:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8007ec0:	42a2      	cmp	r2, r4
 8007ec2:	d2ef      	bcs.n	8007ea4 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	e7f4      	b.n	8007eb2 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007ec8:	2500      	movs	r5, #0
 8007eca:	e010      	b.n	8007eee <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007ecc:	3301      	adds	r3, #1
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d80c      	bhi.n	8007eec <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007ed2:	aa08      	add	r2, sp, #32
 8007ed4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8007ed8:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8007edc:	42a2      	cmp	r2, r4
 8007ede:	d3f5      	bcc.n	8007ecc <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007ee0:	aa08      	add	r2, sp, #32
 8007ee2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ee6:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8007eea:	e000      	b.n	8007eee <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007eec:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007eee:	4a0d      	ldr	r2, [pc, #52]	; (8007f24 <RCC_SetFlashLatency+0xb8>)
 8007ef0:	6813      	ldr	r3, [r2, #0]
 8007ef2:	f023 0307 	bic.w	r3, r3, #7
 8007ef6:	432b      	orrs	r3, r5
 8007ef8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007efa:	f7fa f887 	bl	800200c <HAL_GetTick>
 8007efe:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007f00:	4b08      	ldr	r3, [pc, #32]	; (8007f24 <RCC_SetFlashLatency+0xb8>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	d006      	beq.n	8007f1a <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007f0c:	f7fa f87e 	bl	800200c <HAL_GetTick>
 8007f10:	1b00      	subs	r0, r0, r4
 8007f12:	2802      	cmp	r0, #2
 8007f14:	d9f4      	bls.n	8007f00 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8007f16:	2003      	movs	r0, #3
 8007f18:	e000      	b.n	8007f1c <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8007f1a:	2000      	movs	r0, #0
}
 8007f1c:	b009      	add	sp, #36	; 0x24
 8007f1e:	bd30      	pop	{r4, r5, pc}
 8007f20:	080179b8 	.word	0x080179b8
 8007f24:	58004000 	.word	0x58004000

08007f28 <RCC_SetFlashLatencyFromMSIRange>:
{
 8007f28:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007f2a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8007f30:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	4a08      	ldr	r2, [pc, #32]	; (8007f64 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8007f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f46:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007f4a:	f7ff ff3b 	bl	8007dc4 <HAL_PWREx_GetVoltageRange>
 8007f4e:	4601      	mov	r1, r0
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8007f52:	fba3 3404 	umull	r3, r4, r3, r4
 8007f56:	0ca0      	lsrs	r0, r4, #18
 8007f58:	f7ff ff88 	bl	8007e6c <RCC_SetFlashLatency>
}
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	bf00      	nop
 8007f60:	08018008 	.word	0x08018008
 8007f64:	08017fa8 	.word	0x08017fa8
 8007f68:	431bde83 	.word	0x431bde83

08007f6c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f70:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007f78:	f011 010c 	ands.w	r1, r1, #12
 8007f7c:	d00a      	beq.n	8007f94 <HAL_RCC_GetSysClockFreq+0x28>
 8007f7e:	290c      	cmp	r1, #12
 8007f80:	d006      	beq.n	8007f90 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f82:	2904      	cmp	r1, #4
 8007f84:	d047      	beq.n	8008016 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f86:	2908      	cmp	r1, #8
 8007f88:	d03b      	beq.n	8008002 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8007f8a:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	e026      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d1f6      	bne.n	8007f82 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f013 0308 	ands.w	r3, r3, #8
 8007f9e:	d00d      	beq.n	8007fbc <HAL_RCC_GetSysClockFreq+0x50>
 8007fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f013 0308 	ands.w	r3, r3, #8
 8007faa:	d124      	bne.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fb0:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007fb4:	4a2e      	ldr	r2, [pc, #184]	; (8008070 <HAL_RCC_GetSysClockFreq+0x104>)
 8007fb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007fba:	e00e      	b.n	8007fda <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fc0:	6812      	ldr	r2, [r2, #0]
 8007fc2:	f012 0f08 	tst.w	r2, #8
 8007fc6:	d112      	bne.n	8007fee <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fd0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007fd4:	4a26      	ldr	r2, [pc, #152]	; (8008070 <HAL_RCC_GetSysClockFreq+0x104>)
 8007fd6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007fda:	b1d1      	cbz	r1, 8008012 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8007fdc:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fe8:	2b0c      	cmp	r3, #12
 8007fea:	d01a      	beq.n	8008022 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8007fec:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ff2:	6812      	ldr	r2, [r2, #0]
 8007ff4:	e7ee      	b.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x68>
 8007ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ffa:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007ffc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008000:	e7d8      	b.n	8007fb4 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 800800c:	d106      	bne.n	800801c <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800800e:	4819      	ldr	r0, [pc, #100]	; (8008074 <HAL_RCC_GetSysClockFreq+0x108>)
 8008010:	e7e5      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8008012:	4610      	mov	r0, r2
 8008014:	e7e3      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8008016:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8008018:	4817      	ldr	r0, [pc, #92]	; (8008078 <HAL_RCC_GetSysClockFreq+0x10c>)
 800801a:	e7e0      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800801c:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800801e:	4816      	ldr	r0, [pc, #88]	; (8008078 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008020:	e7dd      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800802c:	2b02      	cmp	r3, #2
 800802e:	d009      	beq.n	8008044 <HAL_RCC_GetSysClockFreq+0xd8>
 8008030:	2b03      	cmp	r3, #3
 8008032:	d108      	bne.n	8008046 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800803e:	d115      	bne.n	800806c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8008040:	4a0c      	ldr	r2, [pc, #48]	; (8008074 <HAL_RCC_GetSysClockFreq+0x108>)
 8008042:	e000      	b.n	8008046 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8008044:	4a0c      	ldr	r2, [pc, #48]	; (8008078 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800804a:	68cb      	ldr	r3, [r1, #12]
 800804c:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008050:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008054:	68cb      	ldr	r3, [r1, #12]
 8008056:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800805a:	3301      	adds	r3, #1
 800805c:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008060:	68c8      	ldr	r0, [r1, #12]
 8008062:	0f40      	lsrs	r0, r0, #29
 8008064:	3001      	adds	r0, #1
 8008066:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800806a:	e7bf      	b.n	8007fec <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 800806c:	4a02      	ldr	r2, [pc, #8]	; (8008078 <HAL_RCC_GetSysClockFreq+0x10c>)
 800806e:	e7ea      	b.n	8008046 <HAL_RCC_GetSysClockFreq+0xda>
 8008070:	08018008 	.word	0x08018008
 8008074:	01e84800 	.word	0x01e84800
 8008078:	00f42400 	.word	0x00f42400

0800807c <HAL_RCC_GetHCLKFreq>:
{
 800807c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800807e:	f7ff ff75 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800808c:	4a02      	ldr	r2, [pc, #8]	; (8008098 <HAL_RCC_GetHCLKFreq+0x1c>)
 800808e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8008092:	fbb0 f0f3 	udiv	r0, r0, r3
 8008096:	bd08      	pop	{r3, pc}
 8008098:	08017fa8 	.word	0x08017fa8

0800809c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800809c:	2800      	cmp	r0, #0
 800809e:	f000 8311 	beq.w	80086c4 <HAL_RCC_OscConfig+0x628>
{
 80080a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a4:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80080a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080aa:	689d      	ldr	r5, [r3, #8]
 80080ac:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80080b0:	68de      	ldr	r6, [r3, #12]
 80080b2:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080b6:	6803      	ldr	r3, [r0, #0]
 80080b8:	f013 0f20 	tst.w	r3, #32
 80080bc:	d02a      	beq.n	8008114 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80080be:	2d00      	cmp	r5, #0
 80080c0:	d065      	beq.n	800818e <HAL_RCC_OscConfig+0xf2>
 80080c2:	2d0c      	cmp	r5, #12
 80080c4:	d061      	beq.n	800818a <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80080c6:	6a23      	ldr	r3, [r4, #32]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 80bf 	beq.w	800824c <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80080ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080d2:	6813      	ldr	r3, [r2, #0]
 80080d4:	f043 0301 	orr.w	r3, r3, #1
 80080d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80080da:	f7f9 ff97 	bl	800200c <HAL_GetTick>
 80080de:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80080e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f013 0f02 	tst.w	r3, #2
 80080ea:	f000 80a7 	beq.w	800823c <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	f042 0208 	orr.w	r2, r2, #8
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008100:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008102:	430a      	orrs	r2, r1
 8008104:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008106:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800810e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008112:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	f013 0f01 	tst.w	r3, #1
 800811a:	f000 80b5 	beq.w	8008288 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800811e:	2d08      	cmp	r5, #8
 8008120:	f000 80ae 	beq.w	8008280 <HAL_RCC_OscConfig+0x1e4>
 8008124:	2d0c      	cmp	r5, #12
 8008126:	f000 80a8 	beq.w	800827a <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800812a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800812e:	6813      	ldr	r3, [r2, #0]
 8008130:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008134:	68a1      	ldr	r1, [r4, #8]
 8008136:	430b      	orrs	r3, r1
 8008138:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800813a:	6863      	ldr	r3, [r4, #4]
 800813c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008140:	f000 80c4 	beq.w	80082cc <HAL_RCC_OscConfig+0x230>
 8008144:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8008148:	f000 80c5 	beq.w	80082d6 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800814c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008156:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800815e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008160:	6863      	ldr	r3, [r4, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 80c2 	beq.w	80082ec <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8008168:	f7f9 ff50 	bl	800200c <HAL_GetTick>
 800816c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800816e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008178:	f040 8086 	bne.w	8008288 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800817c:	f7f9 ff46 	bl	800200c <HAL_GetTick>
 8008180:	1bc0      	subs	r0, r0, r7
 8008182:	2864      	cmp	r0, #100	; 0x64
 8008184:	d9f3      	bls.n	800816e <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8008186:	2003      	movs	r0, #3
 8008188:	e2a9      	b.n	80086de <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800818a:	2e01      	cmp	r6, #1
 800818c:	d19b      	bne.n	80080c6 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800818e:	6a23      	ldr	r3, [r4, #32]
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 8299 	beq.w	80086c8 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008196:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f013 0f08 	tst.w	r3, #8
 80081a2:	d029      	beq.n	80081f8 <HAL_RCC_OscConfig+0x15c>
 80081a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081ae:	4298      	cmp	r0, r3
 80081b0:	d92a      	bls.n	8008208 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081b2:	f7ff feb9 	bl	8007f28 <RCC_SetFlashLatencyFromMSIRange>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f040 8288 	bne.w	80086cc <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	f042 0208 	orr.w	r2, r2, #8
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80081ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80081d0:	430a      	orrs	r2, r1
 80081d2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80081dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80081e0:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80081e2:	f7ff ff4b 	bl	800807c <HAL_RCC_GetHCLKFreq>
 80081e6:	4bba      	ldr	r3, [pc, #744]	; (80084d0 <HAL_RCC_OscConfig+0x434>)
 80081e8:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80081ea:	4bba      	ldr	r3, [pc, #744]	; (80084d4 <HAL_RCC_OscConfig+0x438>)
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f7f9 ff0b 	bl	8002008 <HAL_InitTick>
        if (status != HAL_OK)
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d08e      	beq.n	8008114 <HAL_RCC_OscConfig+0x78>
 80081f6:	e272      	b.n	80086de <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80081f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008200:	091b      	lsrs	r3, r3, #4
 8008202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008206:	e7d2      	b.n	80081ae <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	f042 0208 	orr.w	r2, r2, #8
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800821a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800821c:	430a      	orrs	r2, r1
 800821e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008220:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008228:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800822c:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800822e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008230:	f7ff fe7a 	bl	8007f28 <RCC_SetFlashLatencyFromMSIRange>
 8008234:	2800      	cmp	r0, #0
 8008236:	d0d4      	beq.n	80081e2 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8008238:	2001      	movs	r0, #1
 800823a:	e250      	b.n	80086de <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800823c:	f7f9 fee6 	bl	800200c <HAL_GetTick>
 8008240:	1bc0      	subs	r0, r0, r7
 8008242:	2802      	cmp	r0, #2
 8008244:	f67f af4c 	bls.w	80080e0 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8008248:	2003      	movs	r0, #3
 800824a:	e248      	b.n	80086de <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800824c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008250:	6813      	ldr	r3, [r2, #0]
 8008252:	f023 0301 	bic.w	r3, r3, #1
 8008256:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008258:	f7f9 fed8 	bl	800200c <HAL_GetTick>
 800825c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800825e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f013 0f02 	tst.w	r3, #2
 8008268:	f43f af54 	beq.w	8008114 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800826c:	f7f9 fece 	bl	800200c <HAL_GetTick>
 8008270:	1bc0      	subs	r0, r0, r7
 8008272:	2802      	cmp	r0, #2
 8008274:	d9f3      	bls.n	800825e <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8008276:	2003      	movs	r0, #3
 8008278:	e231      	b.n	80086de <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800827a:	2e03      	cmp	r6, #3
 800827c:	f47f af55 	bne.w	800812a <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008280:	6863      	ldr	r3, [r4, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 8224 	beq.w	80086d0 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	f013 0f02 	tst.w	r3, #2
 800828e:	d056      	beq.n	800833e <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008290:	2d04      	cmp	r5, #4
 8008292:	d03d      	beq.n	8008310 <HAL_RCC_OscConfig+0x274>
 8008294:	2d0c      	cmp	r5, #12
 8008296:	d039      	beq.n	800830c <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 808a 	beq.w	80083b4 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80082a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082a4:	6813      	ldr	r3, [r2, #0]
 80082a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80082ac:	f7f9 feae 	bl	800200c <HAL_GetTick>
 80082b0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80082b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80082bc:	d136      	bne.n	800832c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082be:	f7f9 fea5 	bl	800200c <HAL_GetTick>
 80082c2:	1b80      	subs	r0, r0, r6
 80082c4:	2802      	cmp	r0, #2
 80082c6:	d9f4      	bls.n	80082b2 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 80082c8:	2003      	movs	r0, #3
 80082ca:	e208      	b.n	80086de <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80082cc:	6813      	ldr	r3, [r2, #0]
 80082ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d2:	6013      	str	r3, [r2, #0]
}
 80082d4:	e744      	b.n	8008160 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80082d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80082e0:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80082e8:	601a      	str	r2, [r3, #0]
}
 80082ea:	e739      	b.n	8008160 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80082ec:	f7f9 fe8e 	bl	800200c <HAL_GetTick>
 80082f0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80082f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80082fc:	d0c4      	beq.n	8008288 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082fe:	f7f9 fe85 	bl	800200c <HAL_GetTick>
 8008302:	1bc0      	subs	r0, r0, r7
 8008304:	2864      	cmp	r0, #100	; 0x64
 8008306:	d9f4      	bls.n	80082f2 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8008308:	2003      	movs	r0, #3
 800830a:	e1e8      	b.n	80086de <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800830c:	2e02      	cmp	r6, #2
 800830e:	d1c3      	bne.n	8008298 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008310:	6923      	ldr	r3, [r4, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 81de 	beq.w	80086d4 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008318:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800831a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800831e:	6853      	ldr	r3, [r2, #4]
 8008320:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008324:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008328:	6053      	str	r3, [r2, #4]
}
 800832a:	e008      	b.n	800833e <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800832c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800832e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008332:	6853      	ldr	r3, [r2, #4]
 8008334:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008338:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800833c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	f013 0f08 	tst.w	r3, #8
 8008344:	d07e      	beq.n	8008444 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008346:	69a3      	ldr	r3, [r4, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d062      	beq.n	8008412 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 800834c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008354:	69e1      	ldr	r1, [r4, #28]
 8008356:	f003 0210 	and.w	r2, r3, #16
 800835a:	4291      	cmp	r1, r2
 800835c:	d011      	beq.n	8008382 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800835e:	f003 0203 	and.w	r2, r3, #3
 8008362:	2a02      	cmp	r2, #2
 8008364:	f000 81b8 	beq.w	80086d8 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008368:	f013 0f01 	tst.w	r3, #1
 800836c:	d138      	bne.n	80083e0 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800836e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008372:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8008376:	f023 0310 	bic.w	r3, r3, #16
 800837a:	69e1      	ldr	r1, [r4, #28]
 800837c:	430b      	orrs	r3, r1
 800837e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8008382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008386:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800838a:	f043 0301 	orr.w	r3, r3, #1
 800838e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008392:	f7f9 fe3b 	bl	800200c <HAL_GetTick>
 8008396:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8008398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800839c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083a0:	f013 0f02 	tst.w	r3, #2
 80083a4:	d14e      	bne.n	8008444 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083a6:	f7f9 fe31 	bl	800200c <HAL_GetTick>
 80083aa:	1b80      	subs	r0, r0, r6
 80083ac:	2811      	cmp	r0, #17
 80083ae:	d9f3      	bls.n	8008398 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 80083b0:	2003      	movs	r0, #3
 80083b2:	e194      	b.n	80086de <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80083b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083b8:	6813      	ldr	r3, [r2, #0]
 80083ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083be:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80083c0:	f7f9 fe24 	bl	800200c <HAL_GetTick>
 80083c4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80083c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80083d0:	d0b5      	beq.n	800833e <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083d2:	f7f9 fe1b 	bl	800200c <HAL_GetTick>
 80083d6:	1b80      	subs	r0, r0, r6
 80083d8:	2802      	cmp	r0, #2
 80083da:	d9f4      	bls.n	80083c6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80083dc:	2003      	movs	r0, #3
 80083de:	e17e      	b.n	80086de <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80083e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083e4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80083e8:	f023 0301 	bic.w	r3, r3, #1
 80083ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 80083f0:	f7f9 fe0c 	bl	800200c <HAL_GetTick>
 80083f4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80083f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083fe:	f013 0f02 	tst.w	r3, #2
 8008402:	d0b4      	beq.n	800836e <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008404:	f7f9 fe02 	bl	800200c <HAL_GetTick>
 8008408:	1b80      	subs	r0, r0, r6
 800840a:	2811      	cmp	r0, #17
 800840c:	d9f3      	bls.n	80083f6 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 800840e:	2003      	movs	r0, #3
 8008410:	e165      	b.n	80086de <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8008412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008416:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800841a:	f023 0301 	bic.w	r3, r3, #1
 800841e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008422:	f7f9 fdf3 	bl	800200c <HAL_GetTick>
 8008426:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8008428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800842c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008430:	f013 0f02 	tst.w	r3, #2
 8008434:	d006      	beq.n	8008444 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008436:	f7f9 fde9 	bl	800200c <HAL_GetTick>
 800843a:	1b80      	subs	r0, r0, r6
 800843c:	2811      	cmp	r0, #17
 800843e:	d9f3      	bls.n	8008428 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8008440:	2003      	movs	r0, #3
 8008442:	e14c      	b.n	80086de <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	f013 0f04 	tst.w	r3, #4
 800844a:	f000 80b8 	beq.w	80085be <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800844e:	4b22      	ldr	r3, [pc, #136]	; (80084d8 <HAL_RCC_OscConfig+0x43c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008456:	d110      	bne.n	800847a <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8008458:	f7ff fc86 	bl	8007d68 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800845c:	f7f9 fdd6 	bl	800200c <HAL_GetTick>
 8008460:	4606      	mov	r6, r0
 8008462:	4b1d      	ldr	r3, [pc, #116]	; (80084d8 <HAL_RCC_OscConfig+0x43c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f413 7f80 	tst.w	r3, #256	; 0x100
 800846a:	d106      	bne.n	800847a <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800846c:	f7f9 fdce 	bl	800200c <HAL_GetTick>
 8008470:	1b80      	subs	r0, r0, r6
 8008472:	2802      	cmp	r0, #2
 8008474:	d9f5      	bls.n	8008462 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8008476:	2003      	movs	r0, #3
 8008478:	e131      	b.n	80086de <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800847a:	68e3      	ldr	r3, [r4, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d068      	beq.n	8008552 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8008480:	2b85      	cmp	r3, #133	; 0x85
 8008482:	d001      	beq.n	8008488 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8008484:	2b05      	cmp	r3, #5
 8008486:	d107      	bne.n	8008498 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800848c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008490:	f043 0304 	orr.w	r3, r3, #4
 8008494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8008498:	f7f9 fdb8 	bl	800200c <HAL_GetTick>
 800849c:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800849e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80084ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b6:	f013 0f02 	tst.w	r3, #2
 80084ba:	d10f      	bne.n	80084dc <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084bc:	f7f9 fda6 	bl	800200c <HAL_GetTick>
 80084c0:	1b80      	subs	r0, r0, r6
 80084c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80084c6:	4298      	cmp	r0, r3
 80084c8:	d9f1      	bls.n	80084ae <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 80084ca:	2003      	movs	r0, #3
 80084cc:	e107      	b.n	80086de <HAL_RCC_OscConfig+0x642>
 80084ce:	bf00      	nop
 80084d0:	200000f0 	.word	0x200000f0
 80084d4:	200000f4 	.word	0x200000f4
 80084d8:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80084dc:	68e3      	ldr	r3, [r4, #12]
 80084de:	2b81      	cmp	r3, #129	; 0x81
 80084e0:	d001      	beq.n	80084e6 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80084e2:	2b85      	cmp	r3, #133	; 0x85
 80084e4:	d11a      	bne.n	800851c <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 80084e6:	f7f9 fd91 	bl	800200c <HAL_GetTick>
 80084ea:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80084ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80084f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80084fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008504:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008508:	d159      	bne.n	80085be <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800850a:	f7f9 fd7f 	bl	800200c <HAL_GetTick>
 800850e:	1b80      	subs	r0, r0, r6
 8008510:	f241 3388 	movw	r3, #5000	; 0x1388
 8008514:	4298      	cmp	r0, r3
 8008516:	d9f1      	bls.n	80084fc <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8008518:	2003      	movs	r0, #3
 800851a:	e0e0      	b.n	80086de <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 800851c:	f7f9 fd76 	bl	800200c <HAL_GetTick>
 8008520:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008526:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800852a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800852e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800853e:	d03e      	beq.n	80085be <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008540:	f7f9 fd64 	bl	800200c <HAL_GetTick>
 8008544:	1b80      	subs	r0, r0, r6
 8008546:	f241 3388 	movw	r3, #5000	; 0x1388
 800854a:	4298      	cmp	r0, r3
 800854c:	d9f1      	bls.n	8008532 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 800854e:	2003      	movs	r0, #3
 8008550:	e0c5      	b.n	80086de <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8008552:	f7f9 fd5b 	bl	800200c <HAL_GetTick>
 8008556:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800855c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800856c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008570:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008574:	d008      	beq.n	8008588 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008576:	f7f9 fd49 	bl	800200c <HAL_GetTick>
 800857a:	1b80      	subs	r0, r0, r6
 800857c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008580:	4298      	cmp	r0, r3
 8008582:	d9f1      	bls.n	8008568 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8008584:	2003      	movs	r0, #3
 8008586:	e0aa      	b.n	80086de <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8008588:	f7f9 fd40 	bl	800200c <HAL_GetTick>
 800858c:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800858e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008592:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800859e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a6:	f013 0f02 	tst.w	r3, #2
 80085aa:	d008      	beq.n	80085be <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ac:	f7f9 fd2e 	bl	800200c <HAL_GetTick>
 80085b0:	1b80      	subs	r0, r0, r6
 80085b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80085b6:	4298      	cmp	r0, r3
 80085b8:	d9f1      	bls.n	800859e <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 80085ba:	2003      	movs	r0, #3
 80085bc:	e08f      	b.n	80086de <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80085be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 808b 	beq.w	80086dc <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085c6:	2d0c      	cmp	r5, #12
 80085c8:	d060      	beq.n	800868c <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d016      	beq.n	80085fc <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80085ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085d2:	6813      	ldr	r3, [r2, #0]
 80085d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80085da:	f7f9 fd17 	bl	800200c <HAL_GetTick>
 80085de:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80085e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80085ea:	d148      	bne.n	800867e <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80085ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085f0:	68d1      	ldr	r1, [r2, #12]
 80085f2:	4b41      	ldr	r3, [pc, #260]	; (80086f8 <HAL_RCC_OscConfig+0x65c>)
 80085f4:	400b      	ands	r3, r1
 80085f6:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80085f8:	2000      	movs	r0, #0
 80085fa:	e070      	b.n	80086de <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80085fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008600:	6813      	ldr	r3, [r2, #0]
 8008602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008606:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008608:	f7f9 fd00 	bl	800200c <HAL_GetTick>
 800860c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800860e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008618:	d12a      	bne.n	8008670 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800861a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800861e:	68d3      	ldr	r3, [r2, #12]
 8008620:	4936      	ldr	r1, [pc, #216]	; (80086fc <HAL_RCC_OscConfig+0x660>)
 8008622:	4019      	ands	r1, r3
 8008624:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008626:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008628:	4303      	orrs	r3, r0
 800862a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800862c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008630:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008632:	4303      	orrs	r3, r0
 8008634:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008636:	4303      	orrs	r3, r0
 8008638:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800863a:	4303      	orrs	r3, r0
 800863c:	4319      	orrs	r1, r3
 800863e:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008640:	6813      	ldr	r3, [r2, #0]
 8008642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008646:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008648:	68d3      	ldr	r3, [r2, #12]
 800864a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800864e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8008650:	f7f9 fcdc 	bl	800200c <HAL_GetTick>
 8008654:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008660:	d13e      	bne.n	80086e0 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008662:	f7f9 fcd3 	bl	800200c <HAL_GetTick>
 8008666:	1b00      	subs	r0, r0, r4
 8008668:	280a      	cmp	r0, #10
 800866a:	d9f4      	bls.n	8008656 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 800866c:	2003      	movs	r0, #3
 800866e:	e036      	b.n	80086de <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008670:	f7f9 fccc 	bl	800200c <HAL_GetTick>
 8008674:	1b40      	subs	r0, r0, r5
 8008676:	280a      	cmp	r0, #10
 8008678:	d9c9      	bls.n	800860e <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800867a:	2003      	movs	r0, #3
 800867c:	e02f      	b.n	80086de <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800867e:	f7f9 fcc5 	bl	800200c <HAL_GetTick>
 8008682:	1b00      	subs	r0, r0, r4
 8008684:	280a      	cmp	r0, #10
 8008686:	d9ab      	bls.n	80085e0 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8008688:	2003      	movs	r0, #3
 800868a:	e028      	b.n	80086de <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800868c:	2b01      	cmp	r3, #1
 800868e:	d029      	beq.n	80086e4 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8008690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008694:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8008696:	f003 0103 	and.w	r1, r3, #3
 800869a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800869c:	4291      	cmp	r1, r2
 800869e:	d123      	bne.n	80086e8 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80086a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80086a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086a6:	428a      	cmp	r2, r1
 80086a8:	d120      	bne.n	80086ec <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80086aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80086ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80086b0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80086b4:	d11c      	bne.n	80086f0 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80086b6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80086ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80086bc:	4293      	cmp	r3, r2
 80086be:	d119      	bne.n	80086f4 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 80086c0:	2000      	movs	r0, #0
 80086c2:	e00c      	b.n	80086de <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 80086c4:	2001      	movs	r0, #1
}
 80086c6:	4770      	bx	lr
        return HAL_ERROR;
 80086c8:	2001      	movs	r0, #1
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 80086cc:	2001      	movs	r0, #1
 80086ce:	e006      	b.n	80086de <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80086d0:	2001      	movs	r0, #1
 80086d2:	e004      	b.n	80086de <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80086d4:	2001      	movs	r0, #1
 80086d6:	e002      	b.n	80086de <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 80086d8:	2001      	movs	r0, #1
 80086da:	e000      	b.n	80086de <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 80086dc:	2000      	movs	r0, #0
}
 80086de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80086e0:	2000      	movs	r0, #0
 80086e2:	e7fc      	b.n	80086de <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80086e4:	2001      	movs	r0, #1
 80086e6:	e7fa      	b.n	80086de <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 80086e8:	2001      	movs	r0, #1
 80086ea:	e7f8      	b.n	80086de <HAL_RCC_OscConfig+0x642>
 80086ec:	2001      	movs	r0, #1
 80086ee:	e7f6      	b.n	80086de <HAL_RCC_OscConfig+0x642>
 80086f0:	2001      	movs	r0, #1
 80086f2:	e7f4      	b.n	80086de <HAL_RCC_OscConfig+0x642>
 80086f4:	2001      	movs	r0, #1
 80086f6:	e7f2      	b.n	80086de <HAL_RCC_OscConfig+0x642>
 80086f8:	eefefffc 	.word	0xeefefffc
 80086fc:	11c1808c 	.word	0x11c1808c

08008700 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008700:	2800      	cmp	r0, #0
 8008702:	f000 8127 	beq.w	8008954 <HAL_RCC_ClockConfig+0x254>
{
 8008706:	b570      	push	{r4, r5, r6, lr}
 8008708:	460c      	mov	r4, r1
 800870a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800870c:	4b93      	ldr	r3, [pc, #588]	; (800895c <HAL_RCC_ClockConfig+0x25c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0307 	and.w	r3, r3, #7
 8008714:	428b      	cmp	r3, r1
 8008716:	d32d      	bcc.n	8008774 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	f013 0f02 	tst.w	r3, #2
 800871e:	d13f      	bne.n	80087a0 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	f013 0f20 	tst.w	r3, #32
 8008726:	d153      	bne.n	80087d0 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800872e:	d16a      	bne.n	8008806 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	f013 0f04 	tst.w	r3, #4
 8008736:	f040 8083 	bne.w	8008840 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800873a:	682b      	ldr	r3, [r5, #0]
 800873c:	f013 0f08 	tst.w	r3, #8
 8008740:	f040 8097 	bne.w	8008872 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	f013 0f01 	tst.w	r3, #1
 800874a:	f000 80de 	beq.w	800890a <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800874e:	686b      	ldr	r3, [r5, #4]
 8008750:	2b02      	cmp	r3, #2
 8008752:	f000 80a8 	beq.w	80088a6 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008756:	2b03      	cmp	r3, #3
 8008758:	f000 80ad 	beq.w	80088b6 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800875c:	2b00      	cmp	r3, #0
 800875e:	f040 80b2 	bne.w	80088c6 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008766:	6812      	ldr	r2, [r2, #0]
 8008768:	f012 0f02 	tst.w	r2, #2
 800876c:	f040 80b1 	bne.w	80088d2 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8008770:	2001      	movs	r0, #1
 8008772:	e0ee      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008774:	4a79      	ldr	r2, [pc, #484]	; (800895c <HAL_RCC_ClockConfig+0x25c>)
 8008776:	6813      	ldr	r3, [r2, #0]
 8008778:	f023 0307 	bic.w	r3, r3, #7
 800877c:	430b      	orrs	r3, r1
 800877e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008780:	f7f9 fc44 	bl	800200c <HAL_GetTick>
 8008784:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008786:	4b75      	ldr	r3, [pc, #468]	; (800895c <HAL_RCC_ClockConfig+0x25c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0307 	and.w	r3, r3, #7
 800878e:	42a3      	cmp	r3, r4
 8008790:	d0c2      	beq.n	8008718 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008792:	f7f9 fc3b 	bl	800200c <HAL_GetTick>
 8008796:	1b80      	subs	r0, r0, r6
 8008798:	2802      	cmp	r0, #2
 800879a:	d9f4      	bls.n	8008786 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 800879c:	2003      	movs	r0, #3
 800879e:	e0d8      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80087a0:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80087a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087a6:	688a      	ldr	r2, [r1, #8]
 80087a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80087ac:	4313      	orrs	r3, r2
 80087ae:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80087b0:	f7f9 fc2c 	bl	800200c <HAL_GetTick>
 80087b4:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80087b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80087c0:	d1ae      	bne.n	8008720 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80087c2:	f7f9 fc23 	bl	800200c <HAL_GetTick>
 80087c6:	1b80      	subs	r0, r0, r6
 80087c8:	2802      	cmp	r0, #2
 80087ca:	d9f4      	bls.n	80087b6 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80087cc:	2003      	movs	r0, #3
 80087ce:	e0c0      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80087d0:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80087d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087d6:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 80087da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 80087e4:	f7f9 fc12 	bl	800200c <HAL_GetTick>
 80087e8:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80087ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80087f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80087f6:	d197      	bne.n	8008728 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80087f8:	f7f9 fc08 	bl	800200c <HAL_GetTick>
 80087fc:	1b80      	subs	r0, r0, r6
 80087fe:	2802      	cmp	r0, #2
 8008800:	d9f3      	bls.n	80087ea <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8008802:	2003      	movs	r0, #3
 8008804:	e0a5      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008806:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800880c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8008810:	f023 030f 	bic.w	r3, r3, #15
 8008814:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8008818:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 800881c:	f7f9 fbf6 	bl	800200c <HAL_GetTick>
 8008820:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008826:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800882a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800882e:	f47f af7f 	bne.w	8008730 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008832:	f7f9 fbeb 	bl	800200c <HAL_GetTick>
 8008836:	1b80      	subs	r0, r0, r6
 8008838:	2802      	cmp	r0, #2
 800883a:	d9f2      	bls.n	8008822 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 800883c:	2003      	movs	r0, #3
 800883e:	e088      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008840:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008846:	688a      	ldr	r2, [r1, #8]
 8008848:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800884c:	4313      	orrs	r3, r2
 800884e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008850:	f7f9 fbdc 	bl	800200c <HAL_GetTick>
 8008854:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008860:	f47f af6b 	bne.w	800873a <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008864:	f7f9 fbd2 	bl	800200c <HAL_GetTick>
 8008868:	1b80      	subs	r0, r0, r6
 800886a:	2802      	cmp	r0, #2
 800886c:	d9f3      	bls.n	8008856 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800886e:	2003      	movs	r0, #3
 8008870:	e06f      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008872:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008878:	6893      	ldr	r3, [r2, #8]
 800887a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800887e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008882:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8008884:	f7f9 fbc2 	bl	800200c <HAL_GetTick>
 8008888:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800888a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8008894:	f47f af56 	bne.w	8008744 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008898:	f7f9 fbb8 	bl	800200c <HAL_GetTick>
 800889c:	1b80      	subs	r0, r0, r6
 800889e:	2802      	cmp	r0, #2
 80088a0:	d9f3      	bls.n	800888a <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80088a2:	2003      	movs	r0, #3
 80088a4:	e055      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80088a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088aa:	6812      	ldr	r2, [r2, #0]
 80088ac:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80088b0:	d10f      	bne.n	80088d2 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80088b2:	2001      	movs	r0, #1
 80088b4:	e04d      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80088b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80088c0:	d107      	bne.n	80088d2 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80088c2:	2001      	movs	r0, #1
 80088c4:	e045      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80088c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088ca:	6812      	ldr	r2, [r2, #0]
 80088cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80088d0:	d042      	beq.n	8008958 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80088d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088d6:	688a      	ldr	r2, [r1, #8]
 80088d8:	f022 0203 	bic.w	r2, r2, #3
 80088dc:	4313      	orrs	r3, r2
 80088de:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80088e0:	f7f9 fb94 	bl	800200c <HAL_GetTick>
 80088e4:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80088e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088f0:	686a      	ldr	r2, [r5, #4]
 80088f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80088f6:	d008      	beq.n	800890a <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088f8:	f7f9 fb88 	bl	800200c <HAL_GetTick>
 80088fc:	1b80      	subs	r0, r0, r6
 80088fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8008902:	4298      	cmp	r0, r3
 8008904:	d9ef      	bls.n	80088e6 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8008906:	2003      	movs	r0, #3
 8008908:	e023      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800890a:	4b14      	ldr	r3, [pc, #80]	; (800895c <HAL_RCC_ClockConfig+0x25c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	42a3      	cmp	r3, r4
 8008914:	d915      	bls.n	8008942 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008916:	4a11      	ldr	r2, [pc, #68]	; (800895c <HAL_RCC_ClockConfig+0x25c>)
 8008918:	6813      	ldr	r3, [r2, #0]
 800891a:	f023 0307 	bic.w	r3, r3, #7
 800891e:	4323      	orrs	r3, r4
 8008920:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008922:	f7f9 fb73 	bl	800200c <HAL_GetTick>
 8008926:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008928:	4b0c      	ldr	r3, [pc, #48]	; (800895c <HAL_RCC_ClockConfig+0x25c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	42a3      	cmp	r3, r4
 8008932:	d006      	beq.n	8008942 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008934:	f7f9 fb6a 	bl	800200c <HAL_GetTick>
 8008938:	1b40      	subs	r0, r0, r5
 800893a:	2802      	cmp	r0, #2
 800893c:	d9f4      	bls.n	8008928 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 800893e:	2003      	movs	r0, #3
 8008940:	e007      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008942:	f7ff fb9b 	bl	800807c <HAL_RCC_GetHCLKFreq>
 8008946:	4b06      	ldr	r3, [pc, #24]	; (8008960 <HAL_RCC_ClockConfig+0x260>)
 8008948:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800894a:	4b06      	ldr	r3, [pc, #24]	; (8008964 <HAL_RCC_ClockConfig+0x264>)
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	f7f9 fb5b 	bl	8002008 <HAL_InitTick>
}
 8008952:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008954:	2001      	movs	r0, #1
}
 8008956:	4770      	bx	lr
        return HAL_ERROR;
 8008958:	2001      	movs	r0, #1
 800895a:	e7fa      	b.n	8008952 <HAL_RCC_ClockConfig+0x252>
 800895c:	58004000 	.word	0x58004000
 8008960:	200000f0 	.word	0x200000f0
 8008964:	200000f4 	.word	0x200000f4

08008968 <HAL_RCC_GetPCLK1Freq>:
{
 8008968:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800896a:	f7ff fb87 	bl	800807c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800896e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008978:	4a02      	ldr	r2, [pc, #8]	; (8008984 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800897a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800897e:	40d8      	lsrs	r0, r3
 8008980:	bd08      	pop	{r3, pc}
 8008982:	bf00      	nop
 8008984:	08017fe8 	.word	0x08017fe8

08008988 <HAL_RCC_GetPCLK2Freq>:
{
 8008988:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800898a:	f7ff fb77 	bl	800807c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800898e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008998:	4a02      	ldr	r2, [pc, #8]	; (80089a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800899a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800899e:	40d8      	lsrs	r0, r3
 80089a0:	bd08      	pop	{r3, pc}
 80089a2:	bf00      	nop
 80089a4:	08017fe8 	.word	0x08017fe8

080089a8 <RCC_PLL_GetFreqDomain_P>:
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80089a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
   * ADC Domain clock = PLL_VCO / PLLP
   */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d067      	beq.n	8008a86 <RCC_PLL_GetFreqDomain_P+0xde>
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d045      	beq.n	8008a46 <RCC_PLL_GetFreqDomain_P+0x9e>
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d015      	beq.n	80089ea <RCC_PLL_GetFreqDomain_P+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80089be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f013 0308 	ands.w	r3, r3, #8
 80089c8:	d145      	bne.n	8008a56 <RCC_PLL_GetFreqDomain_P+0xae>
 80089ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	f012 0f08 	tst.w	r2, #8
 80089d4:	d14d      	bne.n	8008a72 <RCC_PLL_GetFreqDomain_P+0xca>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80089d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
        pllinputfreq = HSE_VALUE;
      }
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80089de:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80089e2:	4a34      	ldr	r2, [pc, #208]	; (8008ab4 <RCC_PLL_GetFreqDomain_P+0x10c>)
 80089e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80089e8:	e04e      	b.n	8008a88 <RCC_PLL_GetFreqDomain_P+0xe0>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80089ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f013 0308 	ands.w	r3, r3, #8
 80089f4:	d00d      	beq.n	8008a12 <RCC_PLL_GetFreqDomain_P+0x6a>
 80089f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f013 0308 	ands.w	r3, r3, #8
 8008a00:	d11b      	bne.n	8008a3a <RCC_PLL_GetFreqDomain_P+0x92>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a06:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008a0a:	4a2a      	ldr	r2, [pc, #168]	; (8008ab4 <RCC_PLL_GetFreqDomain_P+0x10c>)
 8008a0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008a10:	e03a      	b.n	8008a88 <RCC_PLL_GetFreqDomain_P+0xe0>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8008a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a16:	6812      	ldr	r2, [r2, #0]
 8008a18:	f012 0f08 	tst.w	r2, #8
 8008a1c:	d109      	bne.n	8008a32 <RCC_PLL_GetFreqDomain_P+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a26:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008a2a:	4a22      	ldr	r2, [pc, #136]	; (8008ab4 <RCC_PLL_GetFreqDomain_P+0x10c>)
 8008a2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008a30:	e02a      	b.n	8008a88 <RCC_PLL_GetFreqDomain_P+0xe0>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a36:	6812      	ldr	r2, [r2, #0]
 8008a38:	e7f7      	b.n	8008a2a <RCC_PLL_GetFreqDomain_P+0x82>
 8008a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008a44:	e7e1      	b.n	8008a0a <RCC_PLL_GetFreqDomain_P+0x62>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008a50:	d12e      	bne.n	8008ab0 <RCC_PLL_GetFreqDomain_P+0x108>
        pllinputfreq = HSE_VALUE;
 8008a52:	4819      	ldr	r0, [pc, #100]	; (8008ab8 <RCC_PLL_GetFreqDomain_P+0x110>)
 8008a54:	e018      	b.n	8008a88 <RCC_PLL_GetFreqDomain_P+0xe0>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8008a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f013 0308 	ands.w	r3, r3, #8
 8008a60:	d10b      	bne.n	8008a7a <RCC_PLL_GetFreqDomain_P+0xd2>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008a62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a66:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008a6a:	4a12      	ldr	r2, [pc, #72]	; (8008ab4 <RCC_PLL_GetFreqDomain_P+0x10c>)
 8008a6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008a70:	e00a      	b.n	8008a88 <RCC_PLL_GetFreqDomain_P+0xe0>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a76:	6812      	ldr	r2, [r2, #0]
 8008a78:	e7b3      	b.n	80089e2 <RCC_PLL_GetFreqDomain_P+0x3a>
 8008a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008a84:	e7f1      	b.n	8008a6a <RCC_PLL_GetFreqDomain_P+0xc2>
  switch (pllsource)
 8008a86:	480d      	ldr	r0, [pc, #52]	; (8008abc <RCC_PLL_GetFreqDomain_P+0x114>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a8c:	68d3      	ldr	r3, [r2, #12]
 8008a8e:	f3c3 2306 	ubfx	r3, r3, #8, #7
                                            ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008a92:	fb03 f000 	mul.w	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008a96:	68d3      	ldr	r3, [r2, #12]
 8008a98:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8008aa2:	68d3      	ldr	r3, [r2, #12]
 8008aa4:	f3c3 4344 	ubfx	r3, r3, #17, #5
 8008aa8:	3301      	adds	r3, #1
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8008aaa:	fbb0 f0f3 	udiv	r0, r0, r3
 8008aae:	4770      	bx	lr
        pllinputfreq = HSE_VALUE / 2U;
 8008ab0:	4802      	ldr	r0, [pc, #8]	; (8008abc <RCC_PLL_GetFreqDomain_P+0x114>)
 8008ab2:	e7e9      	b.n	8008a88 <RCC_PLL_GetFreqDomain_P+0xe0>
 8008ab4:	08018008 	.word	0x08018008
 8008ab8:	01e84800 	.word	0x01e84800
 8008abc:	00f42400 	.word	0x00f42400

08008ac0 <RCC_PLL_GetFreqDomain_Q>:
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
   * 48M Domain clock = PLL_VCO / PLLQ
   */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d067      	beq.n	8008b9e <RCC_PLL_GetFreqDomain_Q+0xde>
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d045      	beq.n	8008b5e <RCC_PLL_GetFreqDomain_Q+0x9e>
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d015      	beq.n	8008b02 <RCC_PLL_GetFreqDomain_Q+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8008ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f013 0308 	ands.w	r3, r3, #8
 8008ae0:	d145      	bne.n	8008b6e <RCC_PLL_GetFreqDomain_Q+0xae>
 8008ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ae6:	6812      	ldr	r2, [r2, #0]
 8008ae8:	f012 0f08 	tst.w	r2, #8
 8008aec:	d14d      	bne.n	8008b8a <RCC_PLL_GetFreqDomain_Q+0xca>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
        pllinputfreq = HSE_VALUE;
      }
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008af6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008afa:	4a34      	ldr	r2, [pc, #208]	; (8008bcc <RCC_PLL_GetFreqDomain_Q+0x10c>)
 8008afc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008b00:	e04e      	b.n	8008ba0 <RCC_PLL_GetFreqDomain_Q+0xe0>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8008b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f013 0308 	ands.w	r3, r3, #8
 8008b0c:	d00d      	beq.n	8008b2a <RCC_PLL_GetFreqDomain_Q+0x6a>
 8008b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f013 0308 	ands.w	r3, r3, #8
 8008b18:	d11b      	bne.n	8008b52 <RCC_PLL_GetFreqDomain_Q+0x92>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b1e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008b22:	4a2a      	ldr	r2, [pc, #168]	; (8008bcc <RCC_PLL_GetFreqDomain_Q+0x10c>)
 8008b24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008b28:	e03a      	b.n	8008ba0 <RCC_PLL_GetFreqDomain_Q+0xe0>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8008b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b2e:	6812      	ldr	r2, [r2, #0]
 8008b30:	f012 0f08 	tst.w	r2, #8
 8008b34:	d109      	bne.n	8008b4a <RCC_PLL_GetFreqDomain_Q+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b3e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008b42:	4a22      	ldr	r2, [pc, #136]	; (8008bcc <RCC_PLL_GetFreqDomain_Q+0x10c>)
 8008b44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008b48:	e02a      	b.n	8008ba0 <RCC_PLL_GetFreqDomain_Q+0xe0>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b4e:	6812      	ldr	r2, [r2, #0]
 8008b50:	e7f7      	b.n	8008b42 <RCC_PLL_GetFreqDomain_Q+0x82>
 8008b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008b5c:	e7e1      	b.n	8008b22 <RCC_PLL_GetFreqDomain_Q+0x62>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008b68:	d12e      	bne.n	8008bc8 <RCC_PLL_GetFreqDomain_Q+0x108>
        pllinputfreq = HSE_VALUE;
 8008b6a:	4819      	ldr	r0, [pc, #100]	; (8008bd0 <RCC_PLL_GetFreqDomain_Q+0x110>)
 8008b6c:	e018      	b.n	8008ba0 <RCC_PLL_GetFreqDomain_Q+0xe0>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8008b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f013 0308 	ands.w	r3, r3, #8
 8008b78:	d10b      	bne.n	8008b92 <RCC_PLL_GetFreqDomain_Q+0xd2>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b7e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008b82:	4a12      	ldr	r2, [pc, #72]	; (8008bcc <RCC_PLL_GetFreqDomain_Q+0x10c>)
 8008b84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008b88:	e00a      	b.n	8008ba0 <RCC_PLL_GetFreqDomain_Q+0xe0>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b8e:	6812      	ldr	r2, [r2, #0]
 8008b90:	e7b3      	b.n	8008afa <RCC_PLL_GetFreqDomain_Q+0x3a>
 8008b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008b9c:	e7f1      	b.n	8008b82 <RCC_PLL_GetFreqDomain_Q+0xc2>
  switch (pllsource)
 8008b9e:	480d      	ldr	r0, [pc, #52]	; (8008bd4 <RCC_PLL_GetFreqDomain_Q+0x114>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ba4:	68d3      	ldr	r3, [r2, #12]
 8008ba6:	f3c3 2306 	ubfx	r3, r3, #8, #7
                                            ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
  }
  return __LL_RCC_CALC_PLLCLK_RNG_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008baa:	fb03 f000 	mul.w	r0, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008bae:	68d3      	ldr	r3, [r2, #12]
 8008bb0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8008bba:	68d3      	ldr	r3, [r2, #12]
 8008bbc:	f3c3 6342 	ubfx	r3, r3, #25, #3
 8008bc0:	3301      	adds	r3, #1
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8008bc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8008bc6:	4770      	bx	lr
        pllinputfreq = HSE_VALUE / 2U;
 8008bc8:	4802      	ldr	r0, [pc, #8]	; (8008bd4 <RCC_PLL_GetFreqDomain_Q+0x114>)
 8008bca:	e7e9      	b.n	8008ba0 <RCC_PLL_GetFreqDomain_Q+0xe0>
 8008bcc:	08018008 	.word	0x08018008
 8008bd0:	01e84800 	.word	0x01e84800
 8008bd4:	00f42400 	.word	0x00f42400

08008bd8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	4604      	mov	r4, r0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008bdc:	6803      	ldr	r3, [r0, #0]
 8008bde:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008be2:	f040 80ab 	bne.w	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008be6:	2500      	movs	r5, #0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	f013 0f01 	tst.w	r3, #1
 8008bee:	d00a      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008bf0:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8008bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bf6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008bfa:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8008bfe:	b292      	uxth	r2, r2
 8008c00:	4313      	orrs	r3, r2
 8008c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	f013 0f02 	tst.w	r3, #2
 8008c0c:	d00a      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c0e:	68a2      	ldr	r2, [r4, #8]
 8008c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c14:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008c18:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8008c1c:	b292      	uxth	r2, r2
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	f013 0f20 	tst.w	r3, #32
 8008c2a:	d009      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x68>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c2c:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c32:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008c36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008c46:	d00c      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c48:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008c52:	0c02      	lsrs	r2, r0, #16
 8008c54:	0412      	lsls	r2, r2, #16
 8008c56:	ea23 0302 	bic.w	r3, r3, r2
 8008c5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008c68:	d00c      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0xac>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c70:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008c74:	0c02      	lsrs	r2, r0, #16
 8008c76:	0412      	lsls	r2, r2, #16
 8008c78:	ea23 0302 	bic.w	r3, r3, r2
 8008c7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008c8a:	d00c      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008c8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c92:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008c96:	0c02      	lsrs	r2, r0, #16
 8008c98:	0412      	lsls	r2, r2, #16
 8008c9a:	ea23 0302 	bic.w	r3, r3, r2
 8008c9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008cac:	f040 809e 	bne.w	8008dec <HAL_RCCEx_PeriphCLKConfig+0x214>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008cb6:	f040 80aa 	bne.w	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x236>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008cc0:	f040 80b6 	bne.w	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x258>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	f013 0f10 	tst.w	r3, #16
 8008cca:	d00e      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008ccc:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cd2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008cd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008ce0:	68e3      	ldr	r3, [r4, #12]
 8008ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ce6:	f000 80b4 	beq.w	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008cf0:	d00f      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cf8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008cfc:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8008d00:	4313      	orrs	r3, r2
 8008d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d08:	b91b      	cbnz	r3, 8008d12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008d0a:	68cb      	ldr	r3, [r1, #12]
 8008d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d10:	60cb      	str	r3, [r1, #12]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008d18:	d00e      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x160>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d20:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008d2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d34:	f000 8092 	beq.w	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x284>
}
 8008d38:	4628      	mov	r0, r5
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8008d3c:	f7ff f814 	bl	8007d68 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8008d40:	f7f9 f964 	bl	800200c <HAL_GetTick>
 8008d44:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008d46:	4b48      	ldr	r3, [pc, #288]	; (8008e68 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008d4e:	d106      	bne.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d50:	f7f9 f95c 	bl	800200c <HAL_GetTick>
 8008d54:	1b40      	subs	r0, r0, r5
 8008d56:	2802      	cmp	r0, #2
 8008d58:	d9f5      	bls.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8008d5a:	2503      	movs	r5, #3
 8008d5c:	e000      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8008d5e:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8008d60:	2d00      	cmp	r5, #0
 8008d62:	f47f af41 	bne.w	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8008d72:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d024      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008d80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008d84:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008d88:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008d8c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008d90:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008d94:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008d98:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8008d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008da0:	f012 0f02 	tst.w	r2, #2
 8008da4:	d10f      	bne.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	f47f af1e 	bne.w	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dac:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008db2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008db6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008dc0:	e712      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	e7ec      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8008dc6:	f7f9 f921 	bl	800200c <HAL_GetTick>
 8008dca:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd4:	f013 0f02 	tst.w	r3, #2
 8008dd8:	d1e5      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dda:	f7f9 f917 	bl	800200c <HAL_GetTick>
 8008dde:	1b80      	subs	r0, r0, r6
 8008de0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008de4:	4298      	cmp	r0, r3
 8008de6:	d9f1      	bls.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8008de8:	2503      	movs	r5, #3
 8008dea:	e7dc      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008dec:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008dee:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8008df2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008df6:	0919      	lsrs	r1, r3, #4
 8008df8:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8008dfc:	ea22 0201 	bic.w	r2, r2, r1
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8008e0c:	e750      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e0e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008e10:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8008e14:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008e18:	0919      	lsrs	r1, r3, #4
 8008e1a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8008e1e:	ea22 0201 	bic.w	r2, r2, r1
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8008e2e:	e744      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e30:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008e32:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8008e36:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8008e3a:	0919      	lsrs	r1, r3, #4
 8008e3c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8008e40:	ea22 0201 	bic.w	r2, r2, r1
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8008e50:	e738      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8008e52:	68cb      	ldr	r3, [r1, #12]
 8008e54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e58:	60cb      	str	r3, [r1, #12]
 8008e5a:	e746      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008e5c:	68cb      	ldr	r3, [r1, #12]
 8008e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e62:	60cb      	str	r3, [r1, #12]
 8008e64:	e768      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008e66:	bf00      	nop
 8008e68:	58000400 	.word	0x58000400

08008e6c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8008e6c:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8008e6e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008e72:	f000 827e 	beq.w	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008e76:	4603      	mov	r3, r0
 8008e78:	d920      	bls.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 8008e7a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8008e7e:	f000 8215 	beq.w	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8008e82:	d973      	bls.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008e84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008e88:	f000 80e9 	beq.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8008e8c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8008e90:	f040 8344 	bne.w	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      switch (srcclk)
 8008ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea4:	f000 80cb 	beq.w	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8008ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eac:	f000 8338 	beq.w	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb4:	f000 80b8 	beq.w	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e32e      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  switch (PeriphClk)
 8008ebc:	2820      	cmp	r0, #32
 8008ebe:	d828      	bhi.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	f000 8327 	beq.w	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
 8008ec6:	1e43      	subs	r3, r0, #1
 8008ec8:	2b1f      	cmp	r3, #31
 8008eca:	f200 8325 	bhi.w	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008ece:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008ed2:	012a      	.short	0x012a
 8008ed4:	03230166 	.word	0x03230166
 8008ed8:	03230323 	.word	0x03230323
 8008edc:	03230323 	.word	0x03230323
 8008ee0:	03230323 	.word	0x03230323
 8008ee4:	03230323 	.word	0x03230323
 8008ee8:	03230323 	.word	0x03230323
 8008eec:	03230323 	.word	0x03230323
 8008ef0:	03230280 	.word	0x03230280
 8008ef4:	03230323 	.word	0x03230323
 8008ef8:	03230323 	.word	0x03230323
 8008efc:	03230323 	.word	0x03230323
 8008f00:	03230323 	.word	0x03230323
 8008f04:	03230323 	.word	0x03230323
 8008f08:	03230323 	.word	0x03230323
 8008f0c:	03230323 	.word	0x03230323
 8008f10:	01b3      	.short	0x01b3
 8008f12:	2840      	cmp	r0, #64	; 0x40
 8008f14:	f000 81f1 	beq.w	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008f18:	2880      	cmp	r0, #128	; 0x80
 8008f1a:	d125      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8008f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f24:	091b      	lsrs	r3, r3, #4
 8008f26:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f2a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
      switch (srcclk)
 8008f2e:	4aba      	ldr	r2, [pc, #744]	; (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	f000 8212 	beq.w	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8008f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	f000 8210 	beq.w	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8008f40:	f7ff f814 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f48:	6893      	ldr	r3, [r2, #8]
 8008f4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008f4e:	49b3      	ldr	r1, [pc, #716]	; (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>)
 8008f50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f54:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008f58:	6893      	ldr	r3, [r2, #8]
 8008f5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008f5e:	4ab0      	ldr	r2, [pc, #704]	; (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8008f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f64:	40d8      	lsrs	r0, r3
          break;
 8008f66:	e2d8      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  switch (PeriphClk)
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e2d6      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008f6c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008f70:	f000 826a 	beq.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8008f74:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008f78:	d128      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8008f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f82:	0c1b      	lsrs	r3, r3, #16
 8008f84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008f88:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
      switch (srcclk)
 8008f8c:	4aa5      	ldr	r2, [pc, #660]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	f000 82ae 	beq.w	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008f94:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8008f98:	f000 82b2 	beq.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
 8008f9c:	3a40      	subs	r2, #64	; 0x40
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	f000 8298 	beq.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8008fa4:	f7fe ffe2 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fac:	6893      	ldr	r3, [r2, #8]
 8008fae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008fb2:	499a      	ldr	r1, [pc, #616]	; (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>)
 8008fb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008fb8:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008fbc:	6893      	ldr	r3, [r2, #8]
 8008fbe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008fc2:	4a97      	ldr	r2, [pc, #604]	; (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8008fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fc8:	40d8      	lsrs	r0, r3
          break;
 8008fca:	e2a6      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  switch (PeriphClk)
 8008fcc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008fd0:	d128      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8008fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fda:	0c1b      	lsrs	r3, r3, #16
 8008fdc:	f003 030c 	and.w	r3, r3, #12
 8008fe0:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
      switch (srcclk)
 8008fe4:	4a90      	ldr	r2, [pc, #576]	; (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	f000 821c 	beq.w	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8008fec:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8008ff0:	f000 8220 	beq.w	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 8008ff4:	3a04      	subs	r2, #4
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	f000 8204 	beq.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8008ffc:	f7fe ffb6 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009004:	6893      	ldr	r3, [r2, #8]
 8009006:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800900a:	4984      	ldr	r1, [pc, #528]	; (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>)
 800900c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009010:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009014:	6893      	ldr	r3, [r2, #8]
 8009016:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800901a:	4a81      	ldr	r2, [pc, #516]	; (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 800901c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009020:	40d8      	lsrs	r0, r3
          break;
 8009022:	e27a      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  switch (PeriphClk)
 8009024:	2000      	movs	r0, #0
 8009026:	e278      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800902c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8009030:	f010 0002 	ands.w	r0, r0, #2
 8009034:	f000 8271 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = LSE_VALUE;
 8009038:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800903c:	e26d      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800903e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009042:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 8009046:	f010 0002 	ands.w	r0, r0, #2
 800904a:	f000 8266 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIPRE));
 800904e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            if (LL_RCC_LSI_GetPrediv() == LL_RCC_LSI_PREDIV_128)
 8009052:	f013 0f10 	tst.w	r3, #16
 8009056:	f000 8265 	beq.w	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
              frequency = LSI_VALUE / 128U;
 800905a:	20fa      	movs	r0, #250	; 0xfa
 800905c:	e25d      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 800905e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009062:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8009066:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
      switch (srcclk)
 800906a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800906e:	d028      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009070:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8009074:	d035      	beq.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009076:	b1d2      	cbz	r2, 80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x242>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	f010 0002 	ands.w	r0, r0, #2
 8009082:	f000 824a 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f013 0308 	ands.w	r3, r3, #8
 800908c:	d133      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800908e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009092:	6812      	ldr	r2, [r2, #0]
 8009094:	f012 0f08 	tst.w	r2, #8
 8009098:	d13b      	bne.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800909a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800909e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80090a2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80090a6:	4a61      	ldr	r2, [pc, #388]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>)
 80090a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80090ac:	e235      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80090ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80090b8:	f000 822f 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = RCC_PLL_GetFreqDomain_Q();
 80090bc:	f7ff fd00 	bl	8008ac0 <RCC_PLL_GetFreqDomain_Q>
 80090c0:	e22b      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80090c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090c6:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80090ca:	f010 0002 	ands.w	r0, r0, #2
 80090ce:	f000 8224 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIPRE));
 80090d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            if (LL_RCC_LSI_GetPrediv() == LL_RCC_LSI_PREDIV_128)
 80090d6:	f013 0f10 	tst.w	r3, #16
 80090da:	f000 8226 	beq.w	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
              frequency = LSI_VALUE / 128U;
 80090de:	20fa      	movs	r0, #250	; 0xfa
 80090e0:	e21b      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80090e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090e6:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 80090ea:	f010 0002 	ands.w	r0, r0, #2
 80090ee:	f000 8214 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = LSE_VALUE;
 80090f2:	4618      	mov	r0, r3
 80090f4:	e211      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80090f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f013 0308 	ands.w	r3, r3, #8
 8009100:	d10b      	bne.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8009102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009106:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
            frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800910a:	4a48      	ldr	r2, [pc, #288]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>)
 800910c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009110:	e203      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8009112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009116:	6812      	ldr	r2, [r2, #0]
 8009118:	e7c5      	b.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800911a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009124:	e7f1      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8009126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800912a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912e:	f003 0303 	and.w	r3, r3, #3
 8009132:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8009136:	4a3e      	ldr	r2, [pc, #248]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d01c      	beq.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 800913c:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8009140:	d022      	beq.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8009142:	3a01      	subs	r2, #1
 8009144:	4293      	cmp	r3, r2
 8009146:	d013      	beq.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8009148:	f7fe ff10 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800914c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009150:	6893      	ldr	r3, [r2, #8]
 8009152:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009156:	4931      	ldr	r1, [pc, #196]	; (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>)
 8009158:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800915c:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009160:	6893      	ldr	r3, [r2, #8]
 8009162:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009166:	4a2e      	ldr	r2, [pc, #184]	; (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 8009168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800916c:	40d8      	lsrs	r0, r3
          break;
 800916e:	e1d4      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          frequency = HAL_RCC_GetSysClockFreq();
 8009170:	f7fe fefc 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
          break;
 8009174:	e1d1      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8009180:	f000 81cb 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 8009184:	482b      	ldr	r0, [pc, #172]	; (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>)
 8009186:	e1c8      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800918c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8009190:	f010 0002 	ands.w	r0, r0, #2
 8009194:	f000 81c1 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = LSE_VALUE;
 8009198:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800919c:	e1bd      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800919e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a6:	f003 030c 	and.w	r3, r3, #12
 80091aa:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
      switch (srcclk)
 80091ae:	4a1e      	ldr	r2, [pc, #120]	; (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d01c      	beq.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 80091b4:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80091b8:	d022      	beq.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80091ba:	3a04      	subs	r2, #4
 80091bc:	4293      	cmp	r3, r2
 80091be:	d013      	beq.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80091c0:	f7fe fed4 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80091c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091c8:	6893      	ldr	r3, [r2, #8]
 80091ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80091ce:	4913      	ldr	r1, [pc, #76]	; (800921c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>)
 80091d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80091d4:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80091d8:	6893      	ldr	r3, [r2, #8]
 80091da:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80091de:	4a10      	ldr	r2, [pc, #64]	; (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 80091e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e4:	40d8      	lsrs	r0, r3
          break;
 80091e6:	e198      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          frequency = HAL_RCC_GetSysClockFreq();
 80091e8:	f7fe fec0 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
          break;
 80091ec:	e195      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80091ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80091f8:	f000 818f 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 80091fc:	480d      	ldr	r0, [pc, #52]	; (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>)
 80091fe:	e18c      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009204:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8009208:	f010 0002 	ands.w	r0, r0, #2
 800920c:	f000 8185 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = LSE_VALUE;
 8009210:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009214:	e181      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009216:	bf00      	nop
 8009218:	000c0400 	.word	0x000c0400
 800921c:	08017fa8 	.word	0x08017fa8
 8009220:	08017fe8 	.word	0x08017fe8
 8009224:	00c00080 	.word	0x00c00080
 8009228:	000c0008 	.word	0x000c0008
 800922c:	08018008 	.word	0x08018008
 8009230:	00030002 	.word	0x00030002
 8009234:	00f42400 	.word	0x00f42400
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800923c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      switch (srcclk)
 8009244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009248:	d01c      	beq.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800924a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800924e:	d022      	beq.n	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
 8009250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009254:	d013      	beq.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8009256:	f7fe fe89 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800925a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800925e:	6893      	ldr	r3, [r2, #8]
 8009260:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009264:	49b8      	ldr	r1, [pc, #736]	; (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8009266:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800926a:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800926e:	6893      	ldr	r3, [r2, #8]
 8009270:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009274:	4ab5      	ldr	r2, [pc, #724]	; (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 8009276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800927a:	40d8      	lsrs	r0, r3
          break;
 800927c:	e14d      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          frequency = HAL_RCC_GetSysClockFreq();
 800927e:	f7fe fe75 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
          break;
 8009282:	e14a      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800928e:	f000 8144 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 8009292:	48af      	ldr	r0, [pc, #700]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 8009294:	e141      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800929a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800929e:	f010 0002 	ands.w	r0, r0, #2
 80092a2:	f000 813a 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = LSE_VALUE;
 80092a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80092aa:	e136      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 80092ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 80092b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092bc:	d013      	beq.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80092be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092c2:	d00d      	beq.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
 80092c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092c8:	d001      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80092ca:	2000      	movs	r0, #0
 80092cc:	e125      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80092ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80092d8:	f000 811f 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 80092dc:	489c      	ldr	r0, [pc, #624]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80092de:	e11c      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          frequency = HAL_RCC_GetSysClockFreq();
 80092e0:	f7fe fe44 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
          break;
 80092e4:	e119      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80092e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80092f0:	f000 8113 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = RCC_PLL_GetFreqDomain_P();
 80092f4:	f7ff fb58 	bl	80089a8 <RCC_PLL_GetFreqDomain_P>
 80092f8:	e10f      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 80092fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009302:	091b      	lsrs	r3, r3, #4
 8009304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009308:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800930c:	4a91      	ldr	r2, [pc, #580]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d017      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
 8009312:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8009316:	4293      	cmp	r3, r2
 8009318:	d016      	beq.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
          frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800931a:	f7fe fe27 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800931e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009322:	6893      	ldr	r3, [r2, #8]
 8009324:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009328:	4987      	ldr	r1, [pc, #540]	; (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800932a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800932e:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009332:	6893      	ldr	r3, [r2, #8]
 8009334:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009338:	4a84      	ldr	r2, [pc, #528]	; (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 800933a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800933e:	40d8      	lsrs	r0, r3
          break;
 8009340:	e0eb      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          frequency = HAL_RCC_GetSysClockFreq();
 8009342:	f7fe fe13 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
          break;
 8009346:	e0e8      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8009352:	f000 80e2 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 8009356:	487e      	ldr	r0, [pc, #504]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 8009358:	e0df      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          frequency = HAL_RCC_GetSysClockFreq();
 800935a:	f7fe fe07 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
          break;
 800935e:	e0dc      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009364:	6818      	ldr	r0, [r3, #0]
 8009366:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800936a:	f000 80d6 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 800936e:	4878      	ldr	r0, [pc, #480]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 8009370:	e0d3      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8009372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800937a:	091b      	lsrs	r3, r3, #4
 800937c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009380:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
      switch (srcclk)
 8009384:	4a74      	ldr	r2, [pc, #464]	; (8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d017      	beq.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 800938a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800938e:	4293      	cmp	r3, r2
 8009390:	d016      	beq.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
          frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8009392:	f7fe fdeb 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800939a:	6893      	ldr	r3, [r2, #8]
 800939c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80093a0:	4969      	ldr	r1, [pc, #420]	; (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80093a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80093a6:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80093aa:	6893      	ldr	r3, [r2, #8]
 80093ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80093b0:	4a66      	ldr	r2, [pc, #408]	; (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 80093b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093b6:	40d8      	lsrs	r0, r3
          break;
 80093b8:	e0af      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          frequency = HAL_RCC_GetSysClockFreq();
 80093ba:	f7fe fdd7 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
          break;
 80093be:	e0ac      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80093c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093c4:	6818      	ldr	r0, [r3, #0]
 80093c6:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80093ca:	f000 80a6 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 80093ce:	4860      	ldr	r0, [pc, #384]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80093d0:	e0a3      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (uint32_t)(READ_BIT(RCC->CCIPR, I2Sx));
 80093d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093da:	f403 7340 	and.w	r3, r3, #768	; 0x300
      switch (srcclk)
 80093de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e2:	d006      	beq.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80093e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093e8:	f000 80a2 	beq.w	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
          frequency = RCC_PLL_GetFreqDomain_Q();
 80093ec:	f7ff fb68 	bl	8008ac0 <RCC_PLL_GetFreqDomain_Q>
          break;
 80093f0:	e093      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80093f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80093fc:	f000 808d 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 8009400:	4853      	ldr	r0, [pc, #332]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 8009402:	e08a      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8009404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009408:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800940c:	f010 0002 	ands.w	r0, r0, #2
 8009410:	f000 8083 	beq.w	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIPRE));
 8009414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            if (LL_RCC_LSI_GetPrediv() == LL_RCC_LSI_PREDIV_128)
 8009418:	f013 0f10 	tst.w	r3, #16
 800941c:	f000 808b 	beq.w	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
              frequency = LSI_VALUE / 128U;
 8009420:	20fa      	movs	r0, #250	; 0xfa
 8009422:	e07a      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009428:	6818      	ldr	r0, [r3, #0]
 800942a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800942e:	d074      	beq.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 8009430:	4847      	ldr	r0, [pc, #284]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 8009432:	e072      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009438:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800943c:	f010 0002 	ands.w	r0, r0, #2
 8009440:	d06b      	beq.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = LSE_VALUE;
 8009442:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009446:	e068      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8009448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800944c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009450:	0c1b      	lsrs	r3, r3, #16
 8009452:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009456:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
      switch (srcclk)
 800945a:	4a40      	ldr	r2, [pc, #256]	; (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d027      	beq.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009460:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8009464:	d02c      	beq.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8009466:	3a10      	subs	r2, #16
 8009468:	4293      	cmp	r3, r2
 800946a:	d013      	beq.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800946c:	f7fe fd7e 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009474:	6893      	ldr	r3, [r2, #8]
 8009476:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800947a:	4933      	ldr	r1, [pc, #204]	; (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800947c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009480:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009484:	6893      	ldr	r3, [r2, #8]
 8009486:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800948a:	4a30      	ldr	r2, [pc, #192]	; (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 800948c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009490:	40d8      	lsrs	r0, r3
          break;
 8009492:	e042      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8009494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009498:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800949c:	f010 0002 	ands.w	r0, r0, #2
 80094a0:	d03b      	beq.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIPRE));
 80094a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            if (LL_RCC_LSI_GetPrediv() == LL_RCC_LSI_PREDIV_128)
 80094a6:	f013 0f10 	tst.w	r3, #16
 80094aa:	d047      	beq.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              frequency = LSI_VALUE / 128U;
 80094ac:	20fa      	movs	r0, #250	; 0xfa
 80094ae:	e034      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80094b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094b4:	6818      	ldr	r0, [r3, #0]
 80094b6:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80094ba:	d02e      	beq.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 80094bc:	4824      	ldr	r0, [pc, #144]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80094be:	e02c      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80094c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094c4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80094c8:	f010 0002 	ands.w	r0, r0, #2
 80094cc:	d025      	beq.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = LSE_VALUE;
 80094ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80094d2:	e022      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80094d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094d8:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80094dc:	f010 0002 	ands.w	r0, r0, #2
 80094e0:	d01b      	beq.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIPRE));
 80094e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            if (LL_RCC_LSI_GetPrediv() == LL_RCC_LSI_PREDIV_128)
 80094e6:	f013 0f10 	tst.w	r3, #16
 80094ea:	d02a      	beq.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
              frequency = LSI_VALUE / 128U;
 80094ec:	20fa      	movs	r0, #250	; 0xfa
 80094ee:	e014      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80094f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094f4:	6818      	ldr	r0, [r3, #0]
 80094f6:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80094fa:	d00e      	beq.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = HSI_VALUE;
 80094fc:	4814      	ldr	r0, [pc, #80]	; (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80094fe:	e00c      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009504:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8009508:	f010 0002 	ands.w	r0, r0, #2
 800950c:	d005      	beq.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = LSE_VALUE;
 800950e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return (frequency);
 8009512:	e002      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
  switch (PeriphClk)
 8009514:	2000      	movs	r0, #0
 8009516:	e000      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009518:	2000      	movs	r0, #0
}
 800951a:	bd08      	pop	{r3, pc}
  switch (PeriphClk)
 800951c:	2000      	movs	r0, #0
 800951e:	e7fc      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          frequency = HSE_VALUE / 32U;
 8009520:	480f      	ldr	r0, [pc, #60]	; (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 8009522:	e7fa      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
              frequency = LSI_VALUE;
 8009524:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8009528:	e7f7      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
              frequency = LSI_VALUE;
 800952a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800952e:	e7f4      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009530:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8009534:	e7f1      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
              frequency = LSI_VALUE;
 8009536:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800953a:	e7ee      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
              frequency = LSI_VALUE;
 800953c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8009540:	e7eb      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
              frequency = LSI_VALUE;
 8009542:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8009546:	e7e8      	b.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009548:	08017fa8 	.word	0x08017fa8
 800954c:	08017fe8 	.word	0x08017fe8
 8009550:	00f42400 	.word	0x00f42400
 8009554:	00030100 	.word	0x00030100
 8009558:	00301000 	.word	0x00301000
 800955c:	00300020 	.word	0x00300020
 8009560:	000f4240 	.word	0x000f4240

08009564 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009564:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009566:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 800956a:	2a01      	cmp	r2, #1
 800956c:	d035      	beq.n	80095da <HAL_RTC_DeactivateAlarm+0x76>
 800956e:	2201      	movs	r2, #1
 8009570:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009574:	2202      	movs	r2, #2
 8009576:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800957a:	4a19      	ldr	r2, [pc, #100]	; (80095e0 <HAL_RTC_DeactivateAlarm+0x7c>)
 800957c:	20ca      	movs	r0, #202	; 0xca
 800957e:	6250      	str	r0, [r2, #36]	; 0x24
 8009580:	2053      	movs	r0, #83	; 0x53
 8009582:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009584:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009588:	d018      	beq.n	80095bc <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800958a:	4a15      	ldr	r2, [pc, #84]	; (80095e0 <HAL_RTC_DeactivateAlarm+0x7c>)
 800958c:	6991      	ldr	r1, [r2, #24]
 800958e:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 8009592:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009594:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8009596:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800959a:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800959c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800959e:	f021 0102 	bic.w	r1, r1, #2
 80095a2:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80095a4:	2102      	movs	r1, #2
 80095a6:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095a8:	4a0d      	ldr	r2, [pc, #52]	; (80095e0 <HAL_RTC_DeactivateAlarm+0x7c>)
 80095aa:	21ff      	movs	r1, #255	; 0xff
 80095ac:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095b4:	2000      	movs	r0, #0
 80095b6:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 80095ba:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80095bc:	6991      	ldr	r1, [r2, #24]
 80095be:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80095c2:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80095c4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80095c6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80095ca:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80095cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80095ce:	f021 0101 	bic.w	r1, r1, #1
 80095d2:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80095d4:	2101      	movs	r1, #1
 80095d6:	65d1      	str	r1, [r2, #92]	; 0x5c
 80095d8:	e7e6      	b.n	80095a8 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 80095da:	2002      	movs	r0, #2
}
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	40002800 	.word	0x40002800

080095e4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80095e8:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80095ea:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80095ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80095ee:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80095f0:	f015 0f01 	tst.w	r5, #1
 80095f4:	d106      	bne.n	8009604 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80095f6:	f015 0f02 	tst.w	r5, #2
 80095fa:	d109      	bne.n	8009610 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80095fc:	2301      	movs	r3, #1
 80095fe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8009602:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009604:	4b06      	ldr	r3, [pc, #24]	; (8009620 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8009606:	2201      	movs	r2, #1
 8009608:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800960a:	f7f8 fed1 	bl	80023b0 <HAL_RTC_AlarmAEventCallback>
 800960e:	e7f2      	b.n	80095f6 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009610:	4b03      	ldr	r3, [pc, #12]	; (8009620 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8009612:	2202      	movs	r2, #2
 8009614:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009616:	4620      	mov	r0, r4
 8009618:	f000 f9ec 	bl	80099f4 <HAL_RTCEx_AlarmBEventCallback>
 800961c:	e7ee      	b.n	80095fc <HAL_RTC_AlarmIRQHandler+0x18>
 800961e:	bf00      	nop
 8009620:	40002800 	.word	0x40002800

08009624 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009624:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009626:	4a0b      	ldr	r2, [pc, #44]	; (8009654 <HAL_RTC_WaitForSynchro+0x30>)
 8009628:	68d3      	ldr	r3, [r2, #12]
 800962a:	f023 0320 	bic.w	r3, r3, #32
 800962e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009630:	f7f8 fcec 	bl	800200c <HAL_GetTick>
 8009634:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009636:	4b07      	ldr	r3, [pc, #28]	; (8009654 <HAL_RTC_WaitForSynchro+0x30>)
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	f013 0f20 	tst.w	r3, #32
 800963e:	d107      	bne.n	8009650 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009640:	f7f8 fce4 	bl	800200c <HAL_GetTick>
 8009644:	1b00      	subs	r0, r0, r4
 8009646:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800964a:	d9f4      	bls.n	8009636 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 800964c:	2003      	movs	r0, #3
 800964e:	e000      	b.n	8009652 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8009650:	2000      	movs	r0, #0
}
 8009652:	bd10      	pop	{r4, pc}
 8009654:	40002800 	.word	0x40002800

08009658 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009658:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800965a:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <RTC_EnterInitMode+0x48>)
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009662:	d002      	beq.n	800966a <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8009664:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8009666:	4620      	mov	r0, r4
 8009668:	bd70      	pop	{r4, r5, r6, pc}
 800966a:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800966c:	4a0c      	ldr	r2, [pc, #48]	; (80096a0 <RTC_EnterInitMode+0x48>)
 800966e:	68d3      	ldr	r3, [r2, #12]
 8009670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009674:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8009676:	f7f8 fcc9 	bl	800200c <HAL_GetTick>
 800967a:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 800967c:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800967e:	4b08      	ldr	r3, [pc, #32]	; (80096a0 <RTC_EnterInitMode+0x48>)
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009686:	d1ee      	bne.n	8009666 <RTC_EnterInitMode+0xe>
 8009688:	2c03      	cmp	r4, #3
 800968a:	d0ec      	beq.n	8009666 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800968c:	f7f8 fcbe 	bl	800200c <HAL_GetTick>
 8009690:	1b43      	subs	r3, r0, r5
 8009692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009696:	d9f2      	bls.n	800967e <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009698:	2403      	movs	r4, #3
 800969a:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800969e:	e7ee      	b.n	800967e <RTC_EnterInitMode+0x26>
 80096a0:	40002800 	.word	0x40002800

080096a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80096a4:	b510      	push	{r4, lr}
 80096a6:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80096a8:	4b10      	ldr	r3, [pc, #64]	; (80096ec <RTC_ExitInitMode+0x48>)
 80096aa:	68da      	ldr	r2, [r3, #12]
 80096ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096b0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	f013 0f20 	tst.w	r3, #32
 80096b8:	d106      	bne.n	80096c8 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096ba:	f7ff ffb3 	bl	8009624 <HAL_RTC_WaitForSynchro>
 80096be:	b198      	cbz	r0, 80096e8 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096c0:	2003      	movs	r0, #3
 80096c2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80096c6:	e00f      	b.n	80096e8 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80096c8:	4a08      	ldr	r2, [pc, #32]	; (80096ec <RTC_ExitInitMode+0x48>)
 80096ca:	6993      	ldr	r3, [r2, #24]
 80096cc:	f023 0320 	bic.w	r3, r3, #32
 80096d0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096d2:	f7ff ffa7 	bl	8009624 <HAL_RTC_WaitForSynchro>
 80096d6:	b110      	cbz	r0, 80096de <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096d8:	2003      	movs	r0, #3
 80096da:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80096de:	4a03      	ldr	r2, [pc, #12]	; (80096ec <RTC_ExitInitMode+0x48>)
 80096e0:	6993      	ldr	r3, [r2, #24]
 80096e2:	f043 0320 	orr.w	r3, r3, #32
 80096e6:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80096e8:	bd10      	pop	{r4, pc}
 80096ea:	bf00      	nop
 80096ec:	40002800 	.word	0x40002800

080096f0 <HAL_RTC_Init>:
  if (hrtc != NULL)
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d052      	beq.n	800979a <HAL_RTC_Init+0xaa>
{
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80096f8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80096fc:	b163      	cbz	r3, 8009718 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80096fe:	2302      	movs	r3, #2
 8009700:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009704:	4b26      	ldr	r3, [pc, #152]	; (80097a0 <HAL_RTC_Init+0xb0>)
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f013 0f10 	tst.w	r3, #16
 800970c:	d009      	beq.n	8009722 <HAL_RTC_Init+0x32>
      status = HAL_OK;
 800970e:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8009710:	2301      	movs	r3, #1
 8009712:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8009716:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8009718:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800971c:	f7f8 fad2 	bl	8001cc4 <HAL_RTC_MspInit>
 8009720:	e7ed      	b.n	80096fe <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009722:	4b1f      	ldr	r3, [pc, #124]	; (80097a0 <HAL_RTC_Init+0xb0>)
 8009724:	22ca      	movs	r2, #202	; 0xca
 8009726:	625a      	str	r2, [r3, #36]	; 0x24
 8009728:	2253      	movs	r2, #83	; 0x53
 800972a:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 800972c:	4620      	mov	r0, r4
 800972e:	f7ff ff93 	bl	8009658 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8009732:	b128      	cbz	r0, 8009740 <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009734:	4b1a      	ldr	r3, [pc, #104]	; (80097a0 <HAL_RTC_Init+0xb0>)
 8009736:	22ff      	movs	r2, #255	; 0xff
 8009738:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800973a:	2800      	cmp	r0, #0
 800973c:	d1eb      	bne.n	8009716 <HAL_RTC_Init+0x26>
 800973e:	e7e7      	b.n	8009710 <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009740:	4b17      	ldr	r3, [pc, #92]	; (80097a0 <HAL_RTC_Init+0xb0>)
 8009742:	699a      	ldr	r2, [r3, #24]
 8009744:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8009748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800974c:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800974e:	6999      	ldr	r1, [r3, #24]
 8009750:	6862      	ldr	r2, [r4, #4]
 8009752:	6920      	ldr	r0, [r4, #16]
 8009754:	4302      	orrs	r2, r0
 8009756:	69a0      	ldr	r0, [r4, #24]
 8009758:	4302      	orrs	r2, r0
 800975a:	430a      	orrs	r2, r1
 800975c:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800975e:	68e2      	ldr	r2, [r4, #12]
 8009760:	68a1      	ldr	r1, [r4, #8]
 8009762:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009766:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800976e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009770:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009772:	4301      	orrs	r1, r0
 8009774:	430a      	orrs	r2, r1
 8009776:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8009778:	4620      	mov	r0, r4
 800977a:	f7ff ff93 	bl	80096a4 <RTC_ExitInitMode>
        if (status == HAL_OK)
 800977e:	2800      	cmp	r0, #0
 8009780:	d1d8      	bne.n	8009734 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 8009782:	4907      	ldr	r1, [pc, #28]	; (80097a0 <HAL_RTC_Init+0xb0>)
 8009784:	698b      	ldr	r3, [r1, #24]
 8009786:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800978a:	6a22      	ldr	r2, [r4, #32]
 800978c:	69e5      	ldr	r5, [r4, #28]
 800978e:	432a      	orrs	r2, r5
 8009790:	6965      	ldr	r5, [r4, #20]
 8009792:	432a      	orrs	r2, r5
 8009794:	4313      	orrs	r3, r2
 8009796:	618b      	str	r3, [r1, #24]
 8009798:	e7cc      	b.n	8009734 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 800979a:	2001      	movs	r0, #1
}
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	40002800 	.word	0x40002800

080097a4 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80097a4:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80097a6:	e002      	b.n	80097ae <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80097a8:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80097aa:	380a      	subs	r0, #10
 80097ac:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80097ae:	2809      	cmp	r0, #9
 80097b0:	d8fa      	bhi.n	80097a8 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80097b2:	011b      	lsls	r3, r3, #4
 80097b4:	b2db      	uxtb	r3, r3
}
 80097b6:	4318      	orrs	r0, r3
 80097b8:	4770      	bx	lr
	...

080097bc <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80097bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	f000 80b0 	beq.w	8009926 <HAL_RTC_SetAlarm_IT+0x16a>
{
 80097c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	4605      	mov	r5, r0
 80097cc:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80097ce:	2301      	movs	r3, #1
 80097d0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80097d4:	2302      	movs	r3, #2
 80097d6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80097da:	4b54      	ldr	r3, [pc, #336]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 80097dc:	68de      	ldr	r6, [r3, #12]
 80097de:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80097e2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80097e6:	d043      	beq.n	8009870 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80097e8:	bb12      	cbnz	r2, 8009830 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80097f0:	d101      	bne.n	80097f6 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80097f6:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80097fa:	7820      	ldrb	r0, [r4, #0]
 80097fc:	f7ff ffd2 	bl	80097a4 <RTC_ByteToBcd2>
 8009800:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009802:	7860      	ldrb	r0, [r4, #1]
 8009804:	f7ff ffce 	bl	80097a4 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009808:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800980c:	78a0      	ldrb	r0, [r4, #2]
 800980e:	f7ff ffc9 	bl	80097a4 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009812:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009814:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009816:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800981a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800981e:	f7ff ffc1 	bl	80097a4 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009822:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009826:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009828:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800982a:	ea48 0000 	orr.w	r0, r8, r0
 800982e:	e020      	b.n	8009872 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8009830:	6948      	ldr	r0, [r1, #20]
 8009832:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8009836:	d009      	beq.n	800984c <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8009838:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800983c:	d006      	beq.n	800984c <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800983e:	4b3b      	ldr	r3, [pc, #236]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009846:	d101      	bne.n	800984c <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009848:	2300      	movs	r3, #0
 800984a:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800984c:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800984e:	7863      	ldrb	r3, [r4, #1]
 8009850:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009856:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009858:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800985a:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800985c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009860:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009864:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009868:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800986a:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800986c:	4318      	orrs	r0, r3
 800986e:	e000      	b.n	8009872 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8009870:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009872:	4b2e      	ldr	r3, [pc, #184]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 8009874:	22ca      	movs	r2, #202	; 0xca
 8009876:	625a      	str	r2, [r3, #36]	; 0x24
 8009878:	2253      	movs	r2, #83	; 0x53
 800987a:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800987c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800987e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009882:	d02a      	beq.n	80098da <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009884:	4b29      	ldr	r3, [pc, #164]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 8009886:	699a      	ldr	r2, [r3, #24]
 8009888:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800988c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800988e:	2202      	movs	r2, #2
 8009890:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8009892:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8009896:	d040      	beq.n	800991a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8009898:	4b24      	ldr	r3, [pc, #144]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 800989a:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800989c:	69a2      	ldr	r2, [r4, #24]
 800989e:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80098a0:	6862      	ldr	r2, [r4, #4]
 80098a2:	4b22      	ldr	r3, [pc, #136]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 80098a4:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80098a6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80098a8:	f042 0202 	orr.w	r2, r2, #2
 80098ac:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80098ae:	699a      	ldr	r2, [r3, #24]
 80098b0:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80098b4:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80098b6:	4a1e      	ldr	r2, [pc, #120]	; (8009930 <HAL_RTC_SetAlarm_IT+0x174>)
 80098b8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80098bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098c4:	4b19      	ldr	r3, [pc, #100]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 80098c6:	22ff      	movs	r2, #255	; 0xff
 80098c8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80098ca:	2301      	movs	r3, #1
 80098cc:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80098d0:	2000      	movs	r0, #0
 80098d2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80098d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80098da:	4b14      	ldr	r3, [pc, #80]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 80098dc:	699a      	ldr	r2, [r3, #24]
 80098de:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80098e2:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80098e4:	2201      	movs	r2, #1
 80098e6:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80098e8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80098ec:	d00f      	beq.n	800990e <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80098ee:	4b0f      	ldr	r3, [pc, #60]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 80098f0:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80098f2:	69a2      	ldr	r2, [r4, #24]
 80098f4:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80098f6:	6862      	ldr	r2, [r4, #4]
 80098f8:	4b0c      	ldr	r3, [pc, #48]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 80098fa:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80098fc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80098fe:	f042 0201 	orr.w	r2, r2, #1
 8009902:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009904:	699a      	ldr	r2, [r3, #24]
 8009906:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800990a:	619a      	str	r2, [r3, #24]
 800990c:	e7d3      	b.n	80098b6 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800990e:	69a3      	ldr	r3, [r4, #24]
 8009910:	69e2      	ldr	r2, [r4, #28]
 8009912:	4313      	orrs	r3, r2
 8009914:	4a05      	ldr	r2, [pc, #20]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 8009916:	6453      	str	r3, [r2, #68]	; 0x44
 8009918:	e7ed      	b.n	80098f6 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800991a:	69a3      	ldr	r3, [r4, #24]
 800991c:	69e2      	ldr	r2, [r4, #28]
 800991e:	4313      	orrs	r3, r2
 8009920:	4a02      	ldr	r2, [pc, #8]	; (800992c <HAL_RTC_SetAlarm_IT+0x170>)
 8009922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009924:	e7bc      	b.n	80098a0 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8009926:	2002      	movs	r0, #2
}
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	40002800 	.word	0x40002800
 8009930:	58000800 	.word	0x58000800

08009934 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009934:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d017      	beq.n	800996c <HAL_RTCEx_EnableBypassShadow+0x38>
 800993c:	2101      	movs	r1, #1
 800993e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009942:	2302      	movs	r3, #2
 8009944:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009948:	4b09      	ldr	r3, [pc, #36]	; (8009970 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800994a:	22ca      	movs	r2, #202	; 0xca
 800994c:	625a      	str	r2, [r3, #36]	; 0x24
 800994e:	2253      	movs	r2, #83	; 0x53
 8009950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009952:	699a      	ldr	r2, [r3, #24]
 8009954:	f042 0220 	orr.w	r2, r2, #32
 8009958:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800995a:	22ff      	movs	r2, #255	; 0xff
 800995c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800995e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009962:	2300      	movs	r3, #0
 8009964:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8009968:	4618      	mov	r0, r3
 800996a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800996c:	2002      	movs	r0, #2
}
 800996e:	4770      	bx	lr
 8009970:	40002800 	.word	0x40002800

08009974 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009974:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009978:	2b01      	cmp	r3, #1
 800997a:	d020      	beq.n	80099be <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 800997c:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800997e:	2101      	movs	r1, #1
 8009980:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009984:	2302      	movs	r3, #2
 8009986:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800998a:	4b0e      	ldr	r3, [pc, #56]	; (80099c4 <HAL_RTCEx_SetSSRU_IT+0x50>)
 800998c:	22ca      	movs	r2, #202	; 0xca
 800998e:	625a      	str	r2, [r3, #36]	; 0x24
 8009990:	2253      	movs	r2, #83	; 0x53
 8009992:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800999a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800999c:	4c0a      	ldr	r4, [pc, #40]	; (80099c8 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800999e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80099a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80099a6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099aa:	22ff      	movs	r2, #255	; 0xff
 80099ac:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80099ae:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099b2:	2300      	movs	r3, #0
 80099b4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80099b8:	4618      	mov	r0, r3
}
 80099ba:	bc10      	pop	{r4}
 80099bc:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80099be:	2002      	movs	r0, #2
}
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	40002800 	.word	0x40002800
 80099c8:	58000800 	.word	0x58000800

080099cc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80099cc:	b510      	push	{r4, lr}
 80099ce:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80099d0:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80099d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80099d8:	d103      	bne.n	80099e2 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80099da:	2301      	movs	r3, #1
 80099dc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80099e0:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80099e2:	4b03      	ldr	r3, [pc, #12]	; (80099f0 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80099e4:	2240      	movs	r2, #64	; 0x40
 80099e6:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80099e8:	f7f8 fce6 	bl	80023b8 <HAL_RTCEx_SSRUEventCallback>
 80099ec:	e7f5      	b.n	80099da <HAL_RTCEx_SSRUIRQHandler+0xe>
 80099ee:	bf00      	nop
 80099f0:	40002800 	.word	0x40002800

080099f4 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80099f4:	4770      	bx	lr

080099f6 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80099f6:	0089      	lsls	r1, r1, #2
 80099f8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80099fc:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009a00:	600a      	str	r2, [r1, #0]
}
 8009a02:	4770      	bx	lr

08009a04 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8009a04:	0089      	lsls	r1, r1, #2
 8009a06:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8009a0a:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009a0e:	6808      	ldr	r0, [r1, #0]
}
 8009a10:	4770      	bx	lr
	...

08009a14 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009a14:	4b07      	ldr	r3, [pc, #28]	; (8009a34 <SUBGHZSPI_Init+0x20>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a1c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8009a1e:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8009a22:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8009a24:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8009a28:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a30:	601a      	str	r2, [r3, #0]
}
 8009a32:	4770      	bx	lr
 8009a34:	58010000 	.word	0x58010000

08009a38 <HAL_SUBGHZ_Init>:
{
 8009a38:	b530      	push	{r4, r5, lr}
 8009a3a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d058      	beq.n	8009af2 <HAL_SUBGHZ_Init+0xba>
 8009a40:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8009a42:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009a44:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8009a48:	b10b      	cbz	r3, 8009a4e <HAL_SUBGHZ_Init+0x16>
 8009a4a:	2d03      	cmp	r5, #3
 8009a4c:	d10b      	bne.n	8009a66 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8009a52:	4620      	mov	r0, r4
 8009a54:	f7f8 f9e8 	bl	8001e28 <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009a58:	4a27      	ldr	r2, [pc, #156]	; (8009af8 <HAL_SUBGHZ_Init+0xc0>)
 8009a5a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009a5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009a66:	b185      	cbz	r5, 8009a8a <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009a68:	4b24      	ldr	r3, [pc, #144]	; (8009afc <HAL_SUBGHZ_Init+0xc4>)
 8009a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a6e:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8009a70:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009a72:	6820      	ldr	r0, [r4, #0]
 8009a74:	f7ff ffce 	bl	8009a14 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009a80:	2301      	movs	r3, #1
 8009a82:	71a3      	strb	r3, [r4, #6]
}
 8009a84:	4628      	mov	r0, r5
 8009a86:	b003      	add	sp, #12
 8009a88:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a92:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8009a96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009a9e:	4b18      	ldr	r3, [pc, #96]	; (8009b00 <HAL_SUBGHZ_Init+0xc8>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009aa6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8009aaa:	2264      	movs	r2, #100	; 0x64
 8009aac:	fb02 f303 	mul.w	r3, r2, r3
 8009ab0:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8009ab2:	9b01      	ldr	r3, [sp, #4]
 8009ab4:	b1d3      	cbz	r3, 8009aec <HAL_SUBGHZ_Init+0xb4>
      count--;
 8009ab6:	9b01      	ldr	r3, [sp, #4]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ac4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009ac8:	d1f3      	bne.n	8009ab2 <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009aca:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <HAL_SUBGHZ_Init+0xc4>)
 8009acc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009ad0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ad4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009ad8:	689a      	ldr	r2, [r3, #8]
 8009ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ade:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ae4:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8009ae6:	2d00      	cmp	r5, #0
 8009ae8:	d1ca      	bne.n	8009a80 <HAL_SUBGHZ_Init+0x48>
 8009aea:	e7c2      	b.n	8009a72 <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009aec:	2501      	movs	r5, #1
 8009aee:	60a5      	str	r5, [r4, #8]
        break;
 8009af0:	e7eb      	b.n	8009aca <HAL_SUBGHZ_Init+0x92>
    return status;
 8009af2:	2501      	movs	r5, #1
 8009af4:	e7c6      	b.n	8009a84 <HAL_SUBGHZ_Init+0x4c>
 8009af6:	bf00      	nop
 8009af8:	58000800 	.word	0x58000800
 8009afc:	58000400 	.word	0x58000400
 8009b00:	200000f0 	.word	0x200000f0

08009b04 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8009b04:	b082      	sub	sp, #8
 8009b06:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009b08:	4b1a      	ldr	r3, [pc, #104]	; (8009b74 <SUBGHZSPI_Transmit+0x70>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009b10:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8009b14:	2064      	movs	r0, #100	; 0x64
 8009b16:	fb00 f303 	mul.w	r3, r0, r3
 8009b1a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009b1c:	9b01      	ldr	r3, [sp, #4]
 8009b1e:	b14b      	cbz	r3, 8009b34 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8009b20:	9b01      	ldr	r3, [sp, #4]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009b26:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <SUBGHZSPI_Transmit+0x74>)
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f013 0f02 	tst.w	r3, #2
 8009b2e:	d0f5      	beq.n	8009b1c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8009b30:	2000      	movs	r0, #0
 8009b32:	e001      	b.n	8009b38 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009b34:	2001      	movs	r0, #1
 8009b36:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8009b38:	4b0f      	ldr	r3, [pc, #60]	; (8009b78 <SUBGHZSPI_Transmit+0x74>)
 8009b3a:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	; (8009b74 <SUBGHZSPI_Transmit+0x70>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009b44:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8009b48:	2164      	movs	r1, #100	; 0x64
 8009b4a:	fb01 f303 	mul.w	r3, r1, r3
 8009b4e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009b50:	9b01      	ldr	r3, [sp, #4]
 8009b52:	b143      	cbz	r3, 8009b66 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8009b54:	9b01      	ldr	r3, [sp, #4]
 8009b56:	3b01      	subs	r3, #1
 8009b58:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009b5a:	4b07      	ldr	r3, [pc, #28]	; (8009b78 <SUBGHZSPI_Transmit+0x74>)
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	f013 0f01 	tst.w	r3, #1
 8009b62:	d0f5      	beq.n	8009b50 <SUBGHZSPI_Transmit+0x4c>
 8009b64:	e001      	b.n	8009b6a <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009b66:	2001      	movs	r0, #1
 8009b68:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8009b6a:	4b03      	ldr	r3, [pc, #12]	; (8009b78 <SUBGHZSPI_Transmit+0x74>)
 8009b6c:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8009b6e:	b002      	add	sp, #8
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	200000f0 	.word	0x200000f0
 8009b78:	58010000 	.word	0x58010000

08009b7c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009b80:	4b1c      	ldr	r3, [pc, #112]	; (8009bf4 <SUBGHZSPI_Receive+0x78>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009b88:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8009b8c:	2064      	movs	r0, #100	; 0x64
 8009b8e:	fb00 f303 	mul.w	r3, r0, r3
 8009b92:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009b94:	9b01      	ldr	r3, [sp, #4]
 8009b96:	b14b      	cbz	r3, 8009bac <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8009b98:	9b01      	ldr	r3, [sp, #4]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009b9e:	4b16      	ldr	r3, [pc, #88]	; (8009bf8 <SUBGHZSPI_Receive+0x7c>)
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f013 0f02 	tst.w	r3, #2
 8009ba6:	d0f5      	beq.n	8009b94 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8009ba8:	2000      	movs	r0, #0
 8009baa:	e001      	b.n	8009bb0 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009bac:	2001      	movs	r0, #1
 8009bae:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8009bb0:	4b11      	ldr	r3, [pc, #68]	; (8009bf8 <SUBGHZSPI_Receive+0x7c>)
 8009bb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009bb6:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009bba:	4b0e      	ldr	r3, [pc, #56]	; (8009bf4 <SUBGHZSPI_Receive+0x78>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009bc2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8009bc6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8009bca:	fb0c f303 	mul.w	r3, ip, r3
 8009bce:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009bd0:	9b01      	ldr	r3, [sp, #4]
 8009bd2:	b143      	cbz	r3, 8009be6 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8009bd4:	9b01      	ldr	r3, [sp, #4]
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009bda:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <SUBGHZSPI_Receive+0x7c>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f013 0f01 	tst.w	r3, #1
 8009be2:	d0f5      	beq.n	8009bd0 <SUBGHZSPI_Receive+0x54>
 8009be4:	e001      	b.n	8009bea <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009be6:	2001      	movs	r0, #1
 8009be8:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8009bea:	4b03      	ldr	r3, [pc, #12]	; (8009bf8 <SUBGHZSPI_Receive+0x7c>)
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	700b      	strb	r3, [r1, #0]

  return status;
}
 8009bf0:	b002      	add	sp, #8
 8009bf2:	4770      	bx	lr
 8009bf4:	200000f0 	.word	0x200000f0
 8009bf8:	58010000 	.word	0x58010000

08009bfc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009bfc:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8009bfe:	4b13      	ldr	r3, [pc, #76]	; (8009c4c <SUBGHZ_WaitOnBusy+0x50>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009c06:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8009c0a:	2264      	movs	r2, #100	; 0x64
 8009c0c:	fb02 f303 	mul.w	r3, r2, r3
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	e006      	b.n	8009c22 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009c14:	2302      	movs	r3, #2
 8009c16:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8009c18:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8009c1a:	b002      	add	sp, #8
 8009c1c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009c1e:	4213      	tst	r3, r2
 8009c20:	d012      	beq.n	8009c48 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009c22:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <SUBGHZ_WaitOnBusy+0x54>)
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	f013 0304 	ands.w	r3, r3, #4
 8009c2a:	d000      	beq.n	8009c2e <SUBGHZ_WaitOnBusy+0x32>
 8009c2c:	2301      	movs	r3, #1
    if (count == 0U)
 8009c2e:	9a01      	ldr	r2, [sp, #4]
 8009c30:	2a00      	cmp	r2, #0
 8009c32:	d0ef      	beq.n	8009c14 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8009c34:	9a01      	ldr	r2, [sp, #4]
 8009c36:	3a01      	subs	r2, #1
 8009c38:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009c3a:	4a05      	ldr	r2, [pc, #20]	; (8009c50 <SUBGHZ_WaitOnBusy+0x54>)
 8009c3c:	6952      	ldr	r2, [r2, #20]
 8009c3e:	f012 0202 	ands.w	r2, r2, #2
 8009c42:	d0ec      	beq.n	8009c1e <SUBGHZ_WaitOnBusy+0x22>
 8009c44:	2201      	movs	r2, #1
 8009c46:	e7ea      	b.n	8009c1e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8009c48:	2000      	movs	r0, #0
 8009c4a:	e7e6      	b.n	8009c1a <SUBGHZ_WaitOnBusy+0x1e>
 8009c4c:	200000f0 	.word	0x200000f0
 8009c50:	58000400 	.word	0x58000400

08009c54 <SUBGHZ_CheckDeviceReady>:
{
 8009c54:	b500      	push	{lr}
 8009c56:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8009c58:	7903      	ldrb	r3, [r0, #4]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d004      	beq.n	8009c68 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8009c5e:	f7ff ffcd 	bl	8009bfc <SUBGHZ_WaitOnBusy>
}
 8009c62:	b003      	add	sp, #12
 8009c64:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8009c68:	4b0d      	ldr	r3, [pc, #52]	; (8009ca0 <SUBGHZ_CheckDeviceReady+0x4c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009c70:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8009c74:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009c76:	4a0b      	ldr	r2, [pc, #44]	; (8009ca4 <SUBGHZ_CheckDeviceReady+0x50>)
 8009c78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009c7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8009c84:	9b01      	ldr	r3, [sp, #4]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8009c8a:	9b01      	ldr	r3, [sp, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1f9      	bne.n	8009c84 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009c90:	4a04      	ldr	r2, [pc, #16]	; (8009ca4 <SUBGHZ_CheckDeviceReady+0x50>)
 8009c92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009c9e:	e7de      	b.n	8009c5e <SUBGHZ_CheckDeviceReady+0xa>
 8009ca0:	200000f0 	.word	0x200000f0
 8009ca4:	58000400 	.word	0x58000400

08009ca8 <HAL_SUBGHZ_WriteRegisters>:
{
 8009ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cac:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009cae:	7980      	ldrb	r0, [r0, #6]
 8009cb0:	fa5f f880 	uxtb.w	r8, r0
 8009cb4:	f1b8 0f01 	cmp.w	r8, #1
 8009cb8:	d13e      	bne.n	8009d38 <HAL_SUBGHZ_WriteRegisters+0x90>
 8009cba:	460c      	mov	r4, r1
 8009cbc:	4617      	mov	r7, r2
 8009cbe:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8009cc0:	796b      	ldrb	r3, [r5, #5]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d03b      	beq.n	8009d3e <HAL_SUBGHZ_WriteRegisters+0x96>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f7ff ffc0 	bl	8009c54 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009cd4:	4a1b      	ldr	r2, [pc, #108]	; (8009d44 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8009cd6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009cda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009ce2:	210d      	movs	r1, #13
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	f7ff ff0d 	bl	8009b04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009cea:	0a21      	lsrs	r1, r4, #8
 8009cec:	4628      	mov	r0, r5
 8009cee:	f7ff ff09 	bl	8009b04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009cf2:	b2e1      	uxtb	r1, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f7ff ff05 	bl	8009b04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009cfa:	2400      	movs	r4, #0
 8009cfc:	e005      	b.n	8009d0a <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009cfe:	5d39      	ldrb	r1, [r7, r4]
 8009d00:	4628      	mov	r0, r5
 8009d02:	f7ff feff 	bl	8009b04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009d06:	3401      	adds	r4, #1
 8009d08:	b2a4      	uxth	r4, r4
 8009d0a:	42b4      	cmp	r4, r6
 8009d0c:	d3f7      	bcc.n	8009cfe <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009d0e:	4a0d      	ldr	r2, [pc, #52]	; (8009d44 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8009d10:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f7ff ff6d 	bl	8009bfc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009d22:	68ab      	ldr	r3, [r5, #8]
 8009d24:	b90b      	cbnz	r3, 8009d2a <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8009d26:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8009d2e:	2300      	movs	r3, #0
 8009d30:	716b      	strb	r3, [r5, #5]
}
 8009d32:	4640      	mov	r0, r8
 8009d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8009d38:	f04f 0802 	mov.w	r8, #2
 8009d3c:	e7f9      	b.n	8009d32 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8009d3e:	f04f 0802 	mov.w	r8, #2
 8009d42:	e7f6      	b.n	8009d32 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8009d44:	58000400 	.word	0x58000400

08009d48 <HAL_SUBGHZ_ReadRegisters>:
{
 8009d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009d4e:	7980      	ldrb	r0, [r0, #6]
 8009d50:	fa5f f880 	uxtb.w	r8, r0
 8009d54:	f1b8 0f01 	cmp.w	r8, #1
 8009d58:	d141      	bne.n	8009dde <HAL_SUBGHZ_ReadRegisters+0x96>
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	4615      	mov	r5, r2
 8009d5e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8009d60:	7973      	ldrb	r3, [r6, #5]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d03e      	beq.n	8009de4 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8009d66:	2301      	movs	r3, #1
 8009d68:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7ff ff72 	bl	8009c54 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009d70:	4a1e      	ldr	r2, [pc, #120]	; (8009dec <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8009d72:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009d76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009d7e:	211d      	movs	r1, #29
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff febf 	bl	8009b04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009d86:	0a21      	lsrs	r1, r4, #8
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f7ff febb 	bl	8009b04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009d8e:	b2e1      	uxtb	r1, r4
 8009d90:	4630      	mov	r0, r6
 8009d92:	f7ff feb7 	bl	8009b04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8009d96:	2100      	movs	r1, #0
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f7ff feb3 	bl	8009b04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009d9e:	2400      	movs	r4, #0
 8009da0:	e006      	b.n	8009db0 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009da2:	4629      	mov	r1, r5
 8009da4:	4630      	mov	r0, r6
 8009da6:	f7ff fee9 	bl	8009b7c <SUBGHZSPI_Receive>
      pData++;
 8009daa:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8009dac:	3401      	adds	r4, #1
 8009dae:	b2a4      	uxth	r4, r4
 8009db0:	42bc      	cmp	r4, r7
 8009db2:	d3f6      	bcc.n	8009da2 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009db4:	4a0d      	ldr	r2, [pc, #52]	; (8009dec <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8009db6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7ff ff1a 	bl	8009bfc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009dc8:	68b3      	ldr	r3, [r6, #8]
 8009dca:	b90b      	cbnz	r3, 8009dd0 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8009dcc:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	7173      	strb	r3, [r6, #5]
}
 8009dd8:	4640      	mov	r0, r8
 8009dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8009dde:	f04f 0802 	mov.w	r8, #2
 8009de2:	e7f9      	b.n	8009dd8 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8009de4:	f04f 0802 	mov.w	r8, #2
 8009de8:	e7f6      	b.n	8009dd8 <HAL_SUBGHZ_ReadRegisters+0x90>
 8009dea:	bf00      	nop
 8009dec:	58000400 	.word	0x58000400

08009df0 <HAL_SUBGHZ_ExecSetCmd>:
{
 8009df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009df4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009df6:	7980      	ldrb	r0, [r0, #6]
 8009df8:	fa5f f980 	uxtb.w	r9, r0
 8009dfc:	f1b9 0f01 	cmp.w	r9, #1
 8009e00:	d143      	bne.n	8009e8a <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8009e02:	4688      	mov	r8, r1
 8009e04:	4617      	mov	r7, r2
 8009e06:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8009e08:	796b      	ldrb	r3, [r5, #5]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d040      	beq.n	8009e90 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009e12:	4628      	mov	r0, r5
 8009e14:	f7ff ff1e 	bl	8009c54 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8009e18:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8009e1c:	d005      	beq.n	8009e2a <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8009e1e:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8009e22:	d002      	beq.n	8009e2a <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8009e24:	2300      	movs	r3, #0
 8009e26:	712b      	strb	r3, [r5, #4]
 8009e28:	e001      	b.n	8009e2e <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009e2e:	4a1a      	ldr	r2, [pc, #104]	; (8009e98 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8009e30:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009e34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009e3c:	4641      	mov	r1, r8
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f7ff fe60 	bl	8009b04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009e44:	2400      	movs	r4, #0
 8009e46:	e005      	b.n	8009e54 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009e48:	5d39      	ldrb	r1, [r7, r4]
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f7ff fe5a 	bl	8009b04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009e50:	3401      	adds	r4, #1
 8009e52:	b2a4      	uxth	r4, r4
 8009e54:	42b4      	cmp	r4, r6
 8009e56:	d3f7      	bcc.n	8009e48 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009e58:	4a0f      	ldr	r2, [pc, #60]	; (8009e98 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8009e5a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8009e66:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8009e6a:	d10a      	bne.n	8009e82 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009e6c:	68ab      	ldr	r3, [r5, #8]
 8009e6e:	b90b      	cbnz	r3, 8009e74 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8009e70:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009e74:	2301      	movs	r3, #1
 8009e76:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8009e78:	2300      	movs	r3, #0
 8009e7a:	716b      	strb	r3, [r5, #5]
}
 8009e7c:	4648      	mov	r0, r9
 8009e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009e82:	4628      	mov	r0, r5
 8009e84:	f7ff feba 	bl	8009bfc <SUBGHZ_WaitOnBusy>
 8009e88:	e7f0      	b.n	8009e6c <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8009e8a:	f04f 0902 	mov.w	r9, #2
 8009e8e:	e7f5      	b.n	8009e7c <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8009e90:	f04f 0902 	mov.w	r9, #2
 8009e94:	e7f2      	b.n	8009e7c <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8009e96:	bf00      	nop
 8009e98:	58000400 	.word	0x58000400

08009e9c <HAL_SUBGHZ_ExecGetCmd>:
{
 8009e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009ea2:	7980      	ldrb	r0, [r0, #6]
 8009ea4:	fa5f f880 	uxtb.w	r8, r0
 8009ea8:	f1b8 0f01 	cmp.w	r8, #1
 8009eac:	d139      	bne.n	8009f22 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8009eae:	460c      	mov	r4, r1
 8009eb0:	4615      	mov	r5, r2
 8009eb2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8009eb4:	7973      	ldrb	r3, [r6, #5]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d036      	beq.n	8009f28 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f7ff fec8 	bl	8009c54 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009ec4:	4a1a      	ldr	r2, [pc, #104]	; (8009f30 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8009ec6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009eca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f7ff fe15 	bl	8009b04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009eda:	2100      	movs	r1, #0
 8009edc:	4630      	mov	r0, r6
 8009ede:	f7ff fe11 	bl	8009b04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009ee2:	2400      	movs	r4, #0
 8009ee4:	e006      	b.n	8009ef4 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff fe47 	bl	8009b7c <SUBGHZSPI_Receive>
      pData++;
 8009eee:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8009ef0:	3401      	adds	r4, #1
 8009ef2:	b2a4      	uxth	r4, r4
 8009ef4:	42bc      	cmp	r4, r7
 8009ef6:	d3f6      	bcc.n	8009ee6 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009ef8:	4a0d      	ldr	r2, [pc, #52]	; (8009f30 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8009efa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8009efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009f06:	4630      	mov	r0, r6
 8009f08:	f7ff fe78 	bl	8009bfc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009f0c:	68b3      	ldr	r3, [r6, #8]
 8009f0e:	b90b      	cbnz	r3, 8009f14 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8009f10:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f14:	2301      	movs	r3, #1
 8009f16:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8009f18:	2300      	movs	r3, #0
 8009f1a:	7173      	strb	r3, [r6, #5]
}
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8009f22:	f04f 0802 	mov.w	r8, #2
 8009f26:	e7f9      	b.n	8009f1c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8009f28:	f04f 0802 	mov.w	r8, #2
 8009f2c:	e7f6      	b.n	8009f1c <HAL_SUBGHZ_ExecGetCmd+0x80>
 8009f2e:	bf00      	nop
 8009f30:	58000400 	.word	0x58000400

08009f34 <HAL_SUBGHZ_IRQHandler>:
{
 8009f34:	b530      	push	{r4, r5, lr}
 8009f36:	b083      	sub	sp, #12
 8009f38:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8009f40:	2302      	movs	r3, #2
 8009f42:	aa01      	add	r2, sp, #4
 8009f44:	2112      	movs	r1, #18
 8009f46:	f7ff ffa9 	bl	8009e9c <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8009f4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8009f4e:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8009f52:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8009f56:	2302      	movs	r3, #2
 8009f58:	aa01      	add	r2, sp, #4
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f7ff ff47 	bl	8009df0 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8009f62:	f014 0f01 	tst.w	r4, #1
 8009f66:	d123      	bne.n	8009fb0 <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8009f68:	f014 0f02 	tst.w	r4, #2
 8009f6c:	d124      	bne.n	8009fb8 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8009f6e:	f014 0f04 	tst.w	r4, #4
 8009f72:	d125      	bne.n	8009fc0 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8009f74:	f014 0f08 	tst.w	r4, #8
 8009f78:	d126      	bne.n	8009fc8 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8009f7a:	f014 0f10 	tst.w	r4, #16
 8009f7e:	d127      	bne.n	8009fd0 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8009f80:	f014 0f20 	tst.w	r4, #32
 8009f84:	d128      	bne.n	8009fd8 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8009f86:	f014 0f40 	tst.w	r4, #64	; 0x40
 8009f8a:	d129      	bne.n	8009fe0 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8009f8c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8009f90:	d006      	beq.n	8009fa0 <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8009f92:	f414 7f80 	tst.w	r4, #256	; 0x100
 8009f96:	d027      	beq.n	8009fe8 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8009f98:	2101      	movs	r1, #1
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f00b fc6e 	bl	801587c <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8009fa0:	f414 7f00 	tst.w	r4, #512	; 0x200
 8009fa4:	d125      	bne.n	8009ff2 <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8009fa6:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8009faa:	d126      	bne.n	8009ffa <HAL_SUBGHZ_IRQHandler+0xc6>
}
 8009fac:	b003      	add	sp, #12
 8009fae:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	f00b fc4b 	bl	801584c <HAL_SUBGHZ_TxCpltCallback>
 8009fb6:	e7d7      	b.n	8009f68 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8009fb8:	4628      	mov	r0, r5
 8009fba:	f00b fc4f 	bl	801585c <HAL_SUBGHZ_RxCpltCallback>
 8009fbe:	e7d6      	b.n	8009f6e <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f00b fc7f 	bl	80158c4 <HAL_SUBGHZ_PreambleDetectedCallback>
 8009fc6:	e7d5      	b.n	8009f74 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f00b fc83 	bl	80158d4 <HAL_SUBGHZ_SyncWordValidCallback>
 8009fce:	e7d4      	b.n	8009f7a <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f00b fc87 	bl	80158e4 <HAL_SUBGHZ_HeaderValidCallback>
 8009fd6:	e7d3      	b.n	8009f80 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f00b fc6b 	bl	80158b4 <HAL_SUBGHZ_HeaderErrorCallback>
 8009fde:	e7d2      	b.n	8009f86 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f00b fc43 	bl	801586c <HAL_SUBGHZ_CRCErrorCallback>
 8009fe6:	e7d1      	b.n	8009f8c <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8009fe8:	2100      	movs	r1, #0
 8009fea:	4628      	mov	r0, r5
 8009fec:	f00b fc46 	bl	801587c <HAL_SUBGHZ_CADStatusCallback>
 8009ff0:	e7d6      	b.n	8009fa0 <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f00b fc54 	bl	80158a0 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8009ff8:	e7d5      	b.n	8009fa6 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f00b fc7a 	bl	80158f4 <HAL_SUBGHZ_LrFhssHopCallback>
}
 800a000:	e7d4      	b.n	8009fac <HAL_SUBGHZ_IRQHandler+0x78>
	...

0800a004 <HAL_SUBGHZ_WriteBuffer>:
{
 800a004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a008:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a00a:	7980      	ldrb	r0, [r0, #6]
 800a00c:	fa5f f880 	uxtb.w	r8, r0
 800a010:	f1b8 0f01 	cmp.w	r8, #1
 800a014:	d138      	bne.n	800a088 <HAL_SUBGHZ_WriteBuffer+0x84>
 800a016:	460c      	mov	r4, r1
 800a018:	4617      	mov	r7, r2
 800a01a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800a01c:	796b      	ldrb	r3, [r5, #5]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d035      	beq.n	800a08e <HAL_SUBGHZ_WriteBuffer+0x8a>
 800a022:	2301      	movs	r3, #1
 800a024:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a026:	4628      	mov	r0, r5
 800a028:	f7ff fe14 	bl	8009c54 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a02c:	4a19      	ldr	r2, [pc, #100]	; (800a094 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800a02e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a032:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a03a:	210e      	movs	r1, #14
 800a03c:	4628      	mov	r0, r5
 800a03e:	f7ff fd61 	bl	8009b04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f7ff fd5d 	bl	8009b04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a04a:	2400      	movs	r4, #0
 800a04c:	e005      	b.n	800a05a <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a04e:	5d39      	ldrb	r1, [r7, r4]
 800a050:	4628      	mov	r0, r5
 800a052:	f7ff fd57 	bl	8009b04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a056:	3401      	adds	r4, #1
 800a058:	b2a4      	uxth	r4, r4
 800a05a:	42b4      	cmp	r4, r6
 800a05c:	d3f7      	bcc.n	800a04e <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a05e:	4a0d      	ldr	r2, [pc, #52]	; (800a094 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800a060:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a06c:	4628      	mov	r0, r5
 800a06e:	f7ff fdc5 	bl	8009bfc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a072:	68ab      	ldr	r3, [r5, #8]
 800a074:	b90b      	cbnz	r3, 800a07a <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800a076:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a07a:	2301      	movs	r3, #1
 800a07c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800a07e:	2300      	movs	r3, #0
 800a080:	716b      	strb	r3, [r5, #5]
}
 800a082:	4640      	mov	r0, r8
 800a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800a088:	f04f 0802 	mov.w	r8, #2
 800a08c:	e7f9      	b.n	800a082 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800a08e:	f04f 0802 	mov.w	r8, #2
 800a092:	e7f6      	b.n	800a082 <HAL_SUBGHZ_WriteBuffer+0x7e>
 800a094:	58000400 	.word	0x58000400

0800a098 <HAL_SUBGHZ_ReadBuffer>:
{
 800a098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a09c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a09e:	7980      	ldrb	r0, [r0, #6]
 800a0a0:	fa5f f880 	uxtb.w	r8, r0
 800a0a4:	f1b8 0f01 	cmp.w	r8, #1
 800a0a8:	d13d      	bne.n	800a126 <HAL_SUBGHZ_ReadBuffer+0x8e>
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	4615      	mov	r5, r2
 800a0ae:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800a0b0:	7973      	ldrb	r3, [r6, #5]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d03a      	beq.n	800a12c <HAL_SUBGHZ_ReadBuffer+0x94>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7ff fdca 	bl	8009c54 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a0c0:	4a1c      	ldr	r2, [pc, #112]	; (800a134 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800a0c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a0c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a0ce:	211e      	movs	r1, #30
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f7ff fd17 	bl	8009b04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f7ff fd13 	bl	8009b04 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a0de:	2100      	movs	r1, #0
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7ff fd0f 	bl	8009b04 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a0e6:	2400      	movs	r4, #0
 800a0e8:	e006      	b.n	800a0f8 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f7ff fd45 	bl	8009b7c <SUBGHZSPI_Receive>
      pData++;
 800a0f2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800a0f4:	3401      	adds	r4, #1
 800a0f6:	b2a4      	uxth	r4, r4
 800a0f8:	42bc      	cmp	r4, r7
 800a0fa:	d3f6      	bcc.n	800a0ea <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a0fc:	4a0d      	ldr	r2, [pc, #52]	; (800a134 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800a0fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7ff fd76 	bl	8009bfc <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a110:	68b3      	ldr	r3, [r6, #8]
 800a112:	b90b      	cbnz	r3, 800a118 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 800a114:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a118:	2301      	movs	r3, #1
 800a11a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800a11c:	2300      	movs	r3, #0
 800a11e:	7173      	strb	r3, [r6, #5]
}
 800a120:	4640      	mov	r0, r8
 800a122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800a126:	f04f 0802 	mov.w	r8, #2
 800a12a:	e7f9      	b.n	800a120 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 800a12c:	f04f 0802 	mov.w	r8, #2
 800a130:	e7f6      	b.n	800a120 <HAL_SUBGHZ_ReadBuffer+0x88>
 800a132:	bf00      	nop
 800a134:	58000400 	.word	0x58000400

0800a138 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a138:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13a:	e852 3f00 	ldrex	r3, [r2]
 800a13e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	e842 3100 	strex	r1, r3, [r2]
 800a146:	2900      	cmp	r1, #0
 800a148:	d1f6      	bne.n	800a138 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a14a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	f102 0308 	add.w	r3, r2, #8
 800a150:	e853 3f00 	ldrex	r3, [r3]
 800a154:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a158:	3208      	adds	r2, #8
 800a15a:	e842 3100 	strex	r1, r3, [r2]
 800a15e:	2900      	cmp	r1, #0
 800a160:	d1f3      	bne.n	800a14a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a162:	2320      	movs	r3, #32
 800a164:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800a168:	4770      	bx	lr

0800a16a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a16a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	e852 3f00 	ldrex	r3, [r2]
 800a170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a174:	e842 3100 	strex	r1, r3, [r2]
 800a178:	2900      	cmp	r1, #0
 800a17a:	d1f6      	bne.n	800a16a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a17c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17e:	f102 0308 	add.w	r3, r2, #8
 800a182:	e853 3f00 	ldrex	r3, [r3]
 800a186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a18a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	3208      	adds	r2, #8
 800a190:	e842 3100 	strex	r1, r3, [r2]
 800a194:	2900      	cmp	r1, #0
 800a196:	d1f1      	bne.n	800a17c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a198:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d006      	beq.n	800a1ac <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a19e:	2320      	movs	r3, #32
 800a1a0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1a8:	6743      	str	r3, [r0, #116]	; 0x74
}
 800a1aa:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ae:	e852 3f00 	ldrex	r3, [r2]
 800a1b2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b6:	e842 3100 	strex	r1, r3, [r2]
 800a1ba:	2900      	cmp	r1, #0
 800a1bc:	d1f6      	bne.n	800a1ac <UART_EndRxTransfer+0x42>
 800a1be:	e7ee      	b.n	800a19e <UART_EndRxTransfer+0x34>

0800a1c0 <HAL_UART_Transmit_DMA>:
{
 800a1c0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800a1c2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a1c6:	2a20      	cmp	r2, #32
 800a1c8:	d13d      	bne.n	800a246 <HAL_UART_Transmit_DMA+0x86>
{
 800a1ca:	b510      	push	{r4, lr}
 800a1cc:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800a1ce:	2900      	cmp	r1, #0
 800a1d0:	d03b      	beq.n	800a24a <HAL_UART_Transmit_DMA+0x8a>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d03b      	beq.n	800a24e <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 800a1d6:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a1d8:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800a1dc:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1e6:	2221      	movs	r2, #33	; 0x21
 800a1e8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 800a1ec:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800a1ee:	b1ca      	cbz	r2, 800a224 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a1f0:	4918      	ldr	r1, [pc, #96]	; (800a254 <HAL_UART_Transmit_DMA+0x94>)
 800a1f2:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a1f4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800a1f6:	4918      	ldr	r1, [pc, #96]	; (800a258 <HAL_UART_Transmit_DMA+0x98>)
 800a1f8:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a1fa:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800a1fc:	4917      	ldr	r1, [pc, #92]	; (800a25c <HAL_UART_Transmit_DMA+0x9c>)
 800a1fe:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800a200:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800a202:	2100      	movs	r1, #0
 800a204:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a206:	6802      	ldr	r2, [r0, #0]
 800a208:	3228      	adds	r2, #40	; 0x28
 800a20a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800a20c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800a20e:	f7fc fa9b 	bl	8006748 <HAL_DMA_Start_IT>
 800a212:	b138      	cbz	r0, 800a224 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a214:	2310      	movs	r3, #16
 800a216:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 800a21a:	2320      	movs	r3, #32
 800a21c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 800a220:	2001      	movs	r0, #1
 800a222:	e00f      	b.n	800a244 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	2240      	movs	r2, #64	; 0x40
 800a228:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a22a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22c:	f102 0308 	add.w	r3, r2, #8
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	3208      	adds	r2, #8
 800a23a:	e842 3100 	strex	r1, r3, [r2]
 800a23e:	2900      	cmp	r1, #0
 800a240:	d1f3      	bne.n	800a22a <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 800a242:	2000      	movs	r0, #0
}
 800a244:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800a246:	2002      	movs	r0, #2
}
 800a248:	4770      	bx	lr
      return HAL_ERROR;
 800a24a:	2001      	movs	r0, #1
 800a24c:	e7fa      	b.n	800a244 <HAL_UART_Transmit_DMA+0x84>
 800a24e:	2001      	movs	r0, #1
 800a250:	e7f8      	b.n	800a244 <HAL_UART_Transmit_DMA+0x84>
 800a252:	bf00      	nop
 800a254:	0800a261 	.word	0x0800a261
 800a258:	0800a2cf 	.word	0x0800a2cf
 800a25c:	0800a2db 	.word	0x0800a2db

0800a260 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a260:	b508      	push	{r3, lr}
 800a262:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a264:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f013 0f20 	tst.w	r3, #32
 800a26e:	d118      	bne.n	800a2a2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a276:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a278:	f102 0308 	add.w	r3, r2, #8
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a284:	3208      	adds	r2, #8
 800a286:	e842 3100 	strex	r1, r3, [r2]
 800a28a:	2900      	cmp	r1, #0
 800a28c:	d1f3      	bne.n	800a276 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a28e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	e852 3f00 	ldrex	r3, [r2]
 800a294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a298:	e842 3100 	strex	r1, r3, [r2]
 800a29c:	2900      	cmp	r1, #0
 800a29e:	d1f6      	bne.n	800a28e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2a0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800a2a2:	f7f8 f9c9 	bl	8002638 <HAL_UART_TxCpltCallback>
}
 800a2a6:	e7fb      	b.n	800a2a0 <UART_DMATransmitCplt+0x40>

0800a2a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2a8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	e852 3f00 	ldrex	r3, [r2]
 800a2b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	e842 3100 	strex	r1, r3, [r2]
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	d1f6      	bne.n	800a2aa <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2bc:	2320      	movs	r3, #32
 800a2be:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2c6:	f7f8 f9b7 	bl	8002638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ca:	bd08      	pop	{r3, pc}

0800a2cc <HAL_UART_TxHalfCpltCallback>:
}
 800a2cc:	4770      	bx	lr

0800a2ce <UART_DMATxHalfCplt>:
{
 800a2ce:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800a2d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a2d2:	f7ff fffb 	bl	800a2cc <HAL_UART_TxHalfCpltCallback>
}
 800a2d6:	bd08      	pop	{r3, pc}

0800a2d8 <HAL_UART_ErrorCallback>:
}
 800a2d8:	4770      	bx	lr

0800a2da <UART_DMAError>:
{
 800a2da:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a2de:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a2e2:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a2ee:	d001      	beq.n	800a2f4 <UART_DMAError+0x1a>
 800a2f0:	2a21      	cmp	r2, #33	; 0x21
 800a2f2:	d010      	beq.n	800a316 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a2fc:	d001      	beq.n	800a302 <UART_DMAError+0x28>
 800a2fe:	2d22      	cmp	r5, #34	; 0x22
 800a300:	d010      	beq.n	800a324 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a302:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a306:	f043 0310 	orr.w	r3, r3, #16
 800a30a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 800a30e:	4620      	mov	r0, r4
 800a310:	f7ff ffe2 	bl	800a2d8 <HAL_UART_ErrorCallback>
}
 800a314:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a31c:	4620      	mov	r0, r4
 800a31e:	f7ff ff0b 	bl	800a138 <UART_EndTxTransfer>
 800a322:	e7e7      	b.n	800a2f4 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800a324:	2300      	movs	r3, #0
 800a326:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a32a:	4620      	mov	r0, r4
 800a32c:	f7ff ff1d 	bl	800a16a <UART_EndRxTransfer>
 800a330:	e7e7      	b.n	800a302 <UART_DMAError+0x28>

0800a332 <UART_DMAAbortOnError>:
{
 800a332:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a334:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a33c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800a340:	f7ff ffca 	bl	800a2d8 <HAL_UART_ErrorCallback>
}
 800a344:	bd08      	pop	{r3, pc}

0800a346 <HAL_UARTEx_RxEventCallback>:
}
 800a346:	4770      	bx	lr

0800a348 <HAL_UART_IRQHandler>:
{
 800a348:	b570      	push	{r4, r5, r6, lr}
 800a34a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a34c:	6801      	ldr	r1, [r0, #0]
 800a34e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a350:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a352:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a354:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800a358:	401a      	ands	r2, r3
 800a35a:	d108      	bne.n	800a36e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a35c:	f013 0f20 	tst.w	r3, #32
 800a360:	d005      	beq.n	800a36e <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a362:	f010 0f20 	tst.w	r0, #32
 800a366:	d134      	bne.n	800a3d2 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a368:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800a36c:	d131      	bne.n	800a3d2 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800a36e:	b12a      	cbz	r2, 800a37c <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a370:	4a99      	ldr	r2, [pc, #612]	; (800a5d8 <HAL_UART_IRQHandler+0x290>)
 800a372:	402a      	ands	r2, r5
 800a374:	d133      	bne.n	800a3de <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a376:	4e99      	ldr	r6, [pc, #612]	; (800a5dc <HAL_UART_IRQHandler+0x294>)
 800a378:	4230      	tst	r0, r6
 800a37a:	d130      	bne.n	800a3de <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a37c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a37e:	2a01      	cmp	r2, #1
 800a380:	f000 80c6 	beq.w	800a510 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a384:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800a388:	d003      	beq.n	800a392 <HAL_UART_IRQHandler+0x4a>
 800a38a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800a38e:	f040 8165 	bne.w	800a65c <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a392:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a396:	d007      	beq.n	800a3a8 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a398:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a39c:	f040 8165 	bne.w	800a66a <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a3a0:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 800a3a4:	f040 8161 	bne.w	800a66a <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a3a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a3ac:	d003      	beq.n	800a3b6 <HAL_UART_IRQHandler+0x6e>
 800a3ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3b2:	f040 8161 	bne.w	800a678 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a3b6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800a3ba:	d003      	beq.n	800a3c4 <HAL_UART_IRQHandler+0x7c>
 800a3bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a3c0:	f040 815e 	bne.w	800a680 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a3c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800a3c8:	d002      	beq.n	800a3d0 <HAL_UART_IRQHandler+0x88>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	f2c0 815c 	blt.w	800a688 <HAL_UART_IRQHandler+0x340>
}
 800a3d0:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800a3d2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0fb      	beq.n	800a3d0 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 800a3d8:	4620      	mov	r0, r4
 800a3da:	4798      	blx	r3
      return;
 800a3dc:	e7f8      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3de:	f013 0f01 	tst.w	r3, #1
 800a3e2:	d009      	beq.n	800a3f8 <HAL_UART_IRQHandler+0xb0>
 800a3e4:	f410 7f80 	tst.w	r0, #256	; 0x100
 800a3e8:	d006      	beq.n	800a3f8 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3ea:	2601      	movs	r6, #1
 800a3ec:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3ee:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a3f2:	4331      	orrs	r1, r6
 800a3f4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3f8:	f013 0f02 	tst.w	r3, #2
 800a3fc:	d00b      	beq.n	800a416 <HAL_UART_IRQHandler+0xce>
 800a3fe:	f015 0f01 	tst.w	r5, #1
 800a402:	d008      	beq.n	800a416 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a404:	6821      	ldr	r1, [r4, #0]
 800a406:	2602      	movs	r6, #2
 800a408:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a40a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a40e:	f041 0104 	orr.w	r1, r1, #4
 800a412:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a416:	f013 0f04 	tst.w	r3, #4
 800a41a:	d00b      	beq.n	800a434 <HAL_UART_IRQHandler+0xec>
 800a41c:	f015 0f01 	tst.w	r5, #1
 800a420:	d008      	beq.n	800a434 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a422:	6821      	ldr	r1, [r4, #0]
 800a424:	2604      	movs	r6, #4
 800a426:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a428:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a42c:	f041 0102 	orr.w	r1, r1, #2
 800a430:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a434:	f013 0f08 	tst.w	r3, #8
 800a438:	d00b      	beq.n	800a452 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a43a:	f010 0f20 	tst.w	r0, #32
 800a43e:	d100      	bne.n	800a442 <HAL_UART_IRQHandler+0xfa>
 800a440:	b13a      	cbz	r2, 800a452 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a442:	6822      	ldr	r2, [r4, #0]
 800a444:	2108      	movs	r1, #8
 800a446:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a448:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a44c:	430a      	orrs	r2, r1
 800a44e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a452:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a456:	d00c      	beq.n	800a472 <HAL_UART_IRQHandler+0x12a>
 800a458:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800a45c:	d009      	beq.n	800a472 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a45e:	6822      	ldr	r2, [r4, #0]
 800a460:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a464:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a466:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a46a:	f042 0220 	orr.w	r2, r2, #32
 800a46e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a472:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a476:	2a00      	cmp	r2, #0
 800a478:	d0aa      	beq.n	800a3d0 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a47a:	f013 0f20 	tst.w	r3, #32
 800a47e:	d009      	beq.n	800a494 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a480:	f010 0f20 	tst.w	r0, #32
 800a484:	d102      	bne.n	800a48c <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a486:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800a48a:	d003      	beq.n	800a494 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 800a48c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a48e:	b10b      	cbz	r3, 800a494 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800a490:	4620      	mov	r0, r4
 800a492:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800a494:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a4a0:	d102      	bne.n	800a4a8 <HAL_UART_IRQHandler+0x160>
 800a4a2:	f012 0f28 	tst.w	r2, #40	; 0x28
 800a4a6:	d02c      	beq.n	800a502 <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f7ff fe5e 	bl	800a16a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a4b6:	d020      	beq.n	800a4fa <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ba:	f102 0308 	add.w	r3, r2, #8
 800a4be:	e853 3f00 	ldrex	r3, [r3]
 800a4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c6:	3208      	adds	r2, #8
 800a4c8:	e842 3100 	strex	r1, r3, [r2]
 800a4cc:	2900      	cmp	r1, #0
 800a4ce:	d1f3      	bne.n	800a4b8 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 800a4d0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a4d4:	b16b      	cbz	r3, 800a4f2 <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4d6:	4a42      	ldr	r2, [pc, #264]	; (800a5e0 <HAL_UART_IRQHandler+0x298>)
 800a4d8:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4da:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a4de:	f7fc f9b9 	bl	8006854 <HAL_DMA_Abort_IT>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	f43f af74 	beq.w	800a3d0 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4e8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a4ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a4ee:	4798      	blx	r3
 800a4f0:	e76e      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f7ff fef0 	bl	800a2d8 <HAL_UART_ErrorCallback>
 800a4f8:	e76a      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f7ff feec 	bl	800a2d8 <HAL_UART_ErrorCallback>
 800a500:	e766      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800a502:	4620      	mov	r0, r4
 800a504:	f7ff fee8 	bl	800a2d8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a508:	2300      	movs	r3, #0
 800a50a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 800a50e:	e75f      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a510:	f013 0f10 	tst.w	r3, #16
 800a514:	f43f af36 	beq.w	800a384 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a518:	f010 0f10 	tst.w	r0, #16
 800a51c:	f43f af32 	beq.w	800a384 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a520:	2310      	movs	r3, #16
 800a522:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a52c:	d05a      	beq.n	800a5e4 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a52e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800a532:	6813      	ldr	r3, [r2, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f43f af49 	beq.w	800a3d0 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a53e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a542:	4299      	cmp	r1, r3
 800a544:	f67f af44 	bls.w	800a3d0 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 800a548:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a54c:	6813      	ldr	r3, [r2, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f013 0f20 	tst.w	r3, #32
 800a554:	d132      	bne.n	800a5bc <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a556:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a558:	e852 3f00 	ldrex	r3, [r2]
 800a55c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	e842 3100 	strex	r1, r3, [r2]
 800a564:	2900      	cmp	r1, #0
 800a566:	d1f6      	bne.n	800a556 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a568:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	f102 0308 	add.w	r3, r2, #8
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	3208      	adds	r2, #8
 800a578:	e842 3100 	strex	r1, r3, [r2]
 800a57c:	2900      	cmp	r1, #0
 800a57e:	d1f3      	bne.n	800a568 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a580:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a582:	f102 0308 	add.w	r3, r2, #8
 800a586:	e853 3f00 	ldrex	r3, [r3]
 800a58a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58e:	3208      	adds	r2, #8
 800a590:	e842 3100 	strex	r1, r3, [r2]
 800a594:	2900      	cmp	r1, #0
 800a596:	d1f3      	bne.n	800a580 <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 800a598:	2320      	movs	r3, #32
 800a59a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	e852 3f00 	ldrex	r3, [r2]
 800a5a8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ac:	e842 3100 	strex	r1, r3, [r2]
 800a5b0:	2900      	cmp	r1, #0
 800a5b2:	d1f6      	bne.n	800a5a2 <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5b4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a5b8:	f7fc f912 	bl	80067e0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5c0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a5c4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	1ac9      	subs	r1, r1, r3
 800a5cc:	b289      	uxth	r1, r1
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f7ff feb9 	bl	800a346 <HAL_UARTEx_RxEventCallback>
      return;
 800a5d4:	e6fc      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
 800a5d6:	bf00      	nop
 800a5d8:	10000001 	.word	0x10000001
 800a5dc:	04000120 	.word	0x04000120
 800a5e0:	0800a333 	.word	0x0800a333
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5e4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a5e8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	1ac9      	subs	r1, r1, r3
 800a5f0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800a5f2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f43f aee9 	beq.w	800a3d0 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 800a5fe:	2900      	cmp	r1, #0
 800a600:	f43f aee6 	beq.w	800a3d0 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a604:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	e852 3f00 	ldrex	r3, [r2]
 800a60a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60e:	e842 3000 	strex	r0, r3, [r2]
 800a612:	2800      	cmp	r0, #0
 800a614:	d1f6      	bne.n	800a604 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a616:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	f102 0308 	add.w	r3, r2, #8
 800a61c:	e853 3f00 	ldrex	r3, [r3]
 800a620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a624:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a628:	3208      	adds	r2, #8
 800a62a:	e842 3000 	strex	r0, r3, [r2]
 800a62e:	2800      	cmp	r0, #0
 800a630:	d1f1      	bne.n	800a616 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 800a632:	2320      	movs	r3, #32
 800a634:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a638:	2300      	movs	r3, #0
 800a63a:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800a63c:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a63e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a640:	e852 3f00 	ldrex	r3, [r2]
 800a644:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a648:	e842 3000 	strex	r0, r3, [r2]
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d1f6      	bne.n	800a63e <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a650:	2302      	movs	r3, #2
 800a652:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a654:	4620      	mov	r0, r4
 800a656:	f7ff fe76 	bl	800a346 <HAL_UARTEx_RxEventCallback>
      return;
 800a65a:	e6b9      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a65c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a660:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800a662:	4620      	mov	r0, r4
 800a664:	f000 fe60 	bl	800b328 <HAL_UARTEx_WakeupCallback>
    return;
 800a668:	e6b2      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800a66a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f43f aeaf 	beq.w	800a3d0 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800a672:	4620      	mov	r0, r4
 800a674:	4798      	blx	r3
    return;
 800a676:	e6ab      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 800a678:	4620      	mov	r0, r4
 800a67a:	f7ff fe15 	bl	800a2a8 <UART_EndTransmit_IT>
    return;
 800a67e:	e6a7      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a680:	4620      	mov	r0, r4
 800a682:	f000 fe53 	bl	800b32c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800a686:	e6a3      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 fe4e 	bl	800b32a <HAL_UARTEx_RxFifoFullCallback>
    return;
 800a68e:	e69f      	b.n	800a3d0 <HAL_UART_IRQHandler+0x88>

0800a690 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a690:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800a692:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a696:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800a69a:	2a22      	cmp	r2, #34	; 0x22
 800a69c:	d005      	beq.n	800a6aa <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a69e:	6802      	ldr	r2, [r0, #0]
 800a6a0:	6993      	ldr	r3, [r2, #24]
 800a6a2:	f043 0308 	orr.w	r3, r3, #8
 800a6a6:	6193      	str	r3, [r2, #24]
  }
}
 800a6a8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6aa:	6802      	ldr	r2, [r0, #0]
 800a6ac:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800a6b2:	400b      	ands	r3, r1
 800a6b4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800a6b6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a6bc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800a6ca:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1e9      	bne.n	800a6a8 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d6:	e852 3f00 	ldrex	r3, [r2]
 800a6da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	e842 3100 	strex	r1, r3, [r2]
 800a6e2:	2900      	cmp	r1, #0
 800a6e4:	d1f6      	bne.n	800a6d4 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6e6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e8:	f102 0308 	add.w	r3, r2, #8
 800a6ec:	e853 3f00 	ldrex	r3, [r3]
 800a6f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	3208      	adds	r2, #8
 800a6f6:	e842 3100 	strex	r1, r3, [r2]
 800a6fa:	2900      	cmp	r1, #0
 800a6fc:	d1f3      	bne.n	800a6e6 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800a6fe:	2320      	movs	r3, #32
 800a700:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800a704:	2300      	movs	r3, #0
 800a706:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a708:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a70a:	6803      	ldr	r3, [r0, #0]
 800a70c:	4a16      	ldr	r2, [pc, #88]	; (800a768 <UART_RxISR_8BIT+0xd8>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d00c      	beq.n	800a72c <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800a718:	d008      	beq.n	800a72c <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a71a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	e852 3f00 	ldrex	r3, [r2]
 800a720:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a724:	e842 3100 	strex	r1, r3, [r2]
 800a728:	2900      	cmp	r1, #0
 800a72a:	d1f6      	bne.n	800a71a <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a72c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d116      	bne.n	800a760 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a732:	2300      	movs	r3, #0
 800a734:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a736:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a738:	e852 3f00 	ldrex	r3, [r2]
 800a73c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a740:	e842 3100 	strex	r1, r3, [r2]
 800a744:	2900      	cmp	r1, #0
 800a746:	d1f6      	bne.n	800a736 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a748:	6803      	ldr	r3, [r0, #0]
 800a74a:	69da      	ldr	r2, [r3, #28]
 800a74c:	f012 0f10 	tst.w	r2, #16
 800a750:	d001      	beq.n	800a756 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a752:	2210      	movs	r2, #16
 800a754:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a756:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800a75a:	f7ff fdf4 	bl	800a346 <HAL_UARTEx_RxEventCallback>
 800a75e:	e7a3      	b.n	800a6a8 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800a760:	f7f7 ff7a 	bl	8002658 <HAL_UART_RxCpltCallback>
 800a764:	e7a0      	b.n	800a6a8 <UART_RxISR_8BIT+0x18>
 800a766:	bf00      	nop
 800a768:	40008000 	.word	0x40008000

0800a76c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a76c:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a76e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a772:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800a776:	2b22      	cmp	r3, #34	; 0x22
 800a778:	d005      	beq.n	800a786 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a77a:	6802      	ldr	r2, [r0, #0]
 800a77c:	6993      	ldr	r3, [r2, #24]
 800a77e:	f043 0308 	orr.w	r3, r3, #8
 800a782:	6193      	str	r3, [r2, #24]
  }
}
 800a784:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a786:	6803      	ldr	r3, [r0, #0]
 800a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a78a:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800a78c:	4013      	ands	r3, r2
 800a78e:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800a790:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800a792:	3302      	adds	r3, #2
 800a794:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a796:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	3b01      	subs	r3, #1
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800a7a4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1ea      	bne.n	800a784 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7ae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b0:	e852 3f00 	ldrex	r3, [r2]
 800a7b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b8:	e842 3100 	strex	r1, r3, [r2]
 800a7bc:	2900      	cmp	r1, #0
 800a7be:	d1f6      	bne.n	800a7ae <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c2:	f102 0308 	add.w	r3, r2, #8
 800a7c6:	e853 3f00 	ldrex	r3, [r3]
 800a7ca:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ce:	3208      	adds	r2, #8
 800a7d0:	e842 3100 	strex	r1, r3, [r2]
 800a7d4:	2900      	cmp	r1, #0
 800a7d6:	d1f3      	bne.n	800a7c0 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800a7d8:	2320      	movs	r3, #32
 800a7da:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7e2:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7e4:	6803      	ldr	r3, [r0, #0]
 800a7e6:	4a16      	ldr	r2, [pc, #88]	; (800a840 <UART_RxISR_16BIT+0xd4>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d00c      	beq.n	800a806 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800a7f2:	d008      	beq.n	800a806 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7f4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f6:	e852 3f00 	ldrex	r3, [r2]
 800a7fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fe:	e842 3100 	strex	r1, r3, [r2]
 800a802:	2900      	cmp	r1, #0
 800a804:	d1f6      	bne.n	800a7f4 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a806:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d116      	bne.n	800a83a <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a80c:	2300      	movs	r3, #0
 800a80e:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a810:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	e852 3f00 	ldrex	r3, [r2]
 800a816:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	e842 3100 	strex	r1, r3, [r2]
 800a81e:	2900      	cmp	r1, #0
 800a820:	d1f6      	bne.n	800a810 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a822:	6803      	ldr	r3, [r0, #0]
 800a824:	69da      	ldr	r2, [r3, #28]
 800a826:	f012 0f10 	tst.w	r2, #16
 800a82a:	d001      	beq.n	800a830 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a82c:	2210      	movs	r2, #16
 800a82e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a830:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800a834:	f7ff fd87 	bl	800a346 <HAL_UARTEx_RxEventCallback>
 800a838:	e7a4      	b.n	800a784 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800a83a:	f7f7 ff0d 	bl	8002658 <HAL_UART_RxCpltCallback>
 800a83e:	e7a1      	b.n	800a784 <UART_RxISR_16BIT+0x18>
 800a840:	40008000 	.word	0x40008000

0800a844 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800a848:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a84c:	6803      	ldr	r3, [r0, #0]
 800a84e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a850:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a854:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a858:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800a85c:	2a22      	cmp	r2, #34	; 0x22
 800a85e:	d005      	beq.n	800a86c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a860:	699a      	ldr	r2, [r3, #24]
 800a862:	f042 0208 	orr.w	r2, r2, #8
 800a866:	619a      	str	r2, [r3, #24]
  }
}
 800a868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a86c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800a86e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a872:	e008      	b.n	800a886 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a874:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d14c      	bne.n	800a916 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800a87c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a880:	b29b      	uxth	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d04e      	beq.n	800a924 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a886:	2f00      	cmp	r7, #0
 800a888:	f000 809a 	beq.w	800a9c0 <UART_RxISR_8BIT_FIFOEN+0x17c>
 800a88c:	f015 0f20 	tst.w	r5, #32
 800a890:	f000 8096 	beq.w	800a9c0 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a898:	b2f3      	uxtb	r3, r6
 800a89a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a89c:	400b      	ands	r3, r1
 800a89e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800a8a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800a8a6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a8b8:	f015 0f07 	tst.w	r5, #7
 800a8bc:	d0de      	beq.n	800a87c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8be:	f015 0f01 	tst.w	r5, #1
 800a8c2:	d009      	beq.n	800a8d8 <UART_RxISR_8BIT_FIFOEN+0x94>
 800a8c4:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a8c8:	d006      	beq.n	800a8d8 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8d8:	f015 0f02 	tst.w	r5, #2
 800a8dc:	d00b      	beq.n	800a8f6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800a8de:	f018 0f01 	tst.w	r8, #1
 800a8e2:	d008      	beq.n	800a8f6 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a8ee:	f043 0304 	orr.w	r3, r3, #4
 800a8f2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8f6:	f015 0f04 	tst.w	r5, #4
 800a8fa:	d0bb      	beq.n	800a874 <UART_RxISR_8BIT_FIFOEN+0x30>
 800a8fc:	f018 0f01 	tst.w	r8, #1
 800a900:	d0b8      	beq.n	800a874 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	2204      	movs	r2, #4
 800a906:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a908:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a90c:	f043 0302 	orr.w	r3, r3, #2
 800a910:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800a914:	e7ae      	b.n	800a874 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800a916:	4620      	mov	r0, r4
 800a918:	f7ff fcde 	bl	800a2d8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a91c:	2300      	movs	r3, #0
 800a91e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800a922:	e7ab      	b.n	800a87c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a924:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a926:	e852 3f00 	ldrex	r3, [r2]
 800a92a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	e842 3100 	strex	r1, r3, [r2]
 800a932:	2900      	cmp	r1, #0
 800a934:	d1f6      	bne.n	800a924 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a936:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	f102 0308 	add.w	r3, r2, #8
 800a93c:	e853 3f00 	ldrex	r3, [r3]
 800a940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a944:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a948:	3208      	adds	r2, #8
 800a94a:	e842 3100 	strex	r1, r3, [r2]
 800a94e:	2900      	cmp	r1, #0
 800a950:	d1f1      	bne.n	800a936 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800a952:	2320      	movs	r3, #32
 800a954:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800a958:	2300      	movs	r3, #0
 800a95a:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a95c:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	4a29      	ldr	r2, [pc, #164]	; (800aa08 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d003      	beq.n	800a96e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800a96c:	d106      	bne.n	800a97c <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a96e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a970:	2b01      	cmp	r3, #1
 800a972:	d00d      	beq.n	800a990 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 800a974:	4620      	mov	r0, r4
 800a976:	f7f7 fe6f 	bl	8002658 <HAL_UART_RxCpltCallback>
 800a97a:	e784      	b.n	800a886 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a97c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97e:	e852 3f00 	ldrex	r3, [r2]
 800a982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a986:	e842 3100 	strex	r1, r3, [r2]
 800a98a:	2900      	cmp	r1, #0
 800a98c:	d1f6      	bne.n	800a97c <UART_RxISR_8BIT_FIFOEN+0x138>
 800a98e:	e7ee      	b.n	800a96e <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a990:	2300      	movs	r3, #0
 800a992:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a994:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a996:	e852 3f00 	ldrex	r3, [r2]
 800a99a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99e:	e842 3100 	strex	r1, r3, [r2]
 800a9a2:	2900      	cmp	r1, #0
 800a9a4:	d1f6      	bne.n	800a994 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9a6:	6823      	ldr	r3, [r4, #0]
 800a9a8:	69da      	ldr	r2, [r3, #28]
 800a9aa:	f012 0f10 	tst.w	r2, #16
 800a9ae:	d001      	beq.n	800a9b4 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9b0:	2210      	movs	r2, #16
 800a9b2:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9b4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f7ff fcc4 	bl	800a346 <HAL_UARTEx_RxEventCallback>
 800a9be:	e762      	b.n	800a886 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800a9c0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a9c4:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f43f af4e 	beq.w	800a868 <UART_RxISR_8BIT_FIFOEN+0x24>
 800a9cc:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	f67f af49 	bls.w	800a868 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d8:	f102 0308 	add.w	r3, r2, #8
 800a9dc:	e853 3f00 	ldrex	r3, [r3]
 800a9e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e4:	3208      	adds	r2, #8
 800a9e6:	e842 3100 	strex	r1, r3, [r2]
 800a9ea:	2900      	cmp	r1, #0
 800a9ec:	d1f3      	bne.n	800a9d6 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 800a9ee:	4b07      	ldr	r3, [pc, #28]	; (800aa0c <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 800a9f0:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a9f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f4:	e852 3f00 	ldrex	r3, [r2]
 800a9f8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fc:	e842 3100 	strex	r1, r3, [r2]
 800aa00:	2900      	cmp	r1, #0
 800aa02:	d1f6      	bne.n	800a9f2 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 800aa04:	e730      	b.n	800a868 <UART_RxISR_8BIT_FIFOEN+0x24>
 800aa06:	bf00      	nop
 800aa08:	40008000 	.word	0x40008000
 800aa0c:	0800a691 	.word	0x0800a691

0800aa10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aa14:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aa18:	6803      	ldr	r3, [r0, #0]
 800aa1a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aa1c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aa20:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa24:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800aa28:	2a22      	cmp	r2, #34	; 0x22
 800aa2a:	d005      	beq.n	800aa38 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa2c:	699a      	ldr	r2, [r3, #24]
 800aa2e:	f042 0208 	orr.w	r2, r2, #8
 800aa32:	619a      	str	r2, [r3, #24]
  }
}
 800aa34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa38:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800aa3a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa3e:	e008      	b.n	800aa52 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa40:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d14b      	bne.n	800aae0 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800aa48:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d04d      	beq.n	800aaee <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa52:	2f00      	cmp	r7, #0
 800aa54:	f000 8099 	beq.w	800ab8a <UART_RxISR_16BIT_FIFOEN+0x17a>
 800aa58:	f015 0f20 	tst.w	r5, #32
 800aa5c:	f000 8095 	beq.w	800ab8a <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aa64:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800aa66:	4033      	ands	r3, r6
 800aa68:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800aa6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa6c:	3302      	adds	r3, #2
 800aa6e:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800aa70:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	3b01      	subs	r3, #1
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aa82:	f015 0f07 	tst.w	r5, #7
 800aa86:	d0df      	beq.n	800aa48 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa88:	f015 0f01 	tst.w	r5, #1
 800aa8c:	d009      	beq.n	800aaa2 <UART_RxISR_16BIT_FIFOEN+0x92>
 800aa8e:	f419 7f80 	tst.w	r9, #256	; 0x100
 800aa92:	d006      	beq.n	800aaa2 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa94:	2201      	movs	r2, #1
 800aa96:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa98:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaa2:	f015 0f02 	tst.w	r5, #2
 800aaa6:	d00b      	beq.n	800aac0 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800aaa8:	f018 0f01 	tst.w	r8, #1
 800aaac:	d008      	beq.n	800aac0 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	2202      	movs	r2, #2
 800aab2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aab4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aab8:	f043 0304 	orr.w	r3, r3, #4
 800aabc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aac0:	f015 0f04 	tst.w	r5, #4
 800aac4:	d0bc      	beq.n	800aa40 <UART_RxISR_16BIT_FIFOEN+0x30>
 800aac6:	f018 0f01 	tst.w	r8, #1
 800aaca:	d0b9      	beq.n	800aa40 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	2204      	movs	r2, #4
 800aad0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aad2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800aad6:	f043 0302 	orr.w	r3, r3, #2
 800aada:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800aade:	e7af      	b.n	800aa40 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800aae0:	4620      	mov	r0, r4
 800aae2:	f7ff fbf9 	bl	800a2d8 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800aaec:	e7ac      	b.n	800aa48 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf0:	e852 3f00 	ldrex	r3, [r2]
 800aaf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	e842 3100 	strex	r1, r3, [r2]
 800aafc:	2900      	cmp	r1, #0
 800aafe:	d1f6      	bne.n	800aaee <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab00:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab02:	f102 0308 	add.w	r3, r2, #8
 800ab06:	e853 3f00 	ldrex	r3, [r3]
 800ab0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab0e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab12:	3208      	adds	r2, #8
 800ab14:	e842 3100 	strex	r1, r3, [r2]
 800ab18:	2900      	cmp	r1, #0
 800ab1a:	d1f1      	bne.n	800ab00 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 800ab1c:	2320      	movs	r3, #32
 800ab1e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab26:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab28:	6823      	ldr	r3, [r4, #0]
 800ab2a:	4a29      	ldr	r2, [pc, #164]	; (800abd0 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d003      	beq.n	800ab38 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800ab36:	d106      	bne.n	800ab46 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d00d      	beq.n	800ab5a <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f7f7 fd8a 	bl	8002658 <HAL_UART_RxCpltCallback>
 800ab44:	e785      	b.n	800aa52 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab46:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab48:	e852 3f00 	ldrex	r3, [r2]
 800ab4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab50:	e842 3100 	strex	r1, r3, [r2]
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d1f6      	bne.n	800ab46 <UART_RxISR_16BIT_FIFOEN+0x136>
 800ab58:	e7ee      	b.n	800ab38 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab5e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab60:	e852 3f00 	ldrex	r3, [r2]
 800ab64:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab68:	e842 3100 	strex	r1, r3, [r2]
 800ab6c:	2900      	cmp	r1, #0
 800ab6e:	d1f6      	bne.n	800ab5e <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab70:	6823      	ldr	r3, [r4, #0]
 800ab72:	69da      	ldr	r2, [r3, #28]
 800ab74:	f012 0f10 	tst.w	r2, #16
 800ab78:	d001      	beq.n	800ab7e <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab7a:	2210      	movs	r2, #16
 800ab7c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab7e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ab82:	4620      	mov	r0, r4
 800ab84:	f7ff fbdf 	bl	800a346 <HAL_UARTEx_RxEventCallback>
 800ab88:	e763      	b.n	800aa52 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800ab8a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800ab8e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f43f af4f 	beq.w	800aa34 <UART_RxISR_16BIT_FIFOEN+0x24>
 800ab96:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	f67f af4a 	bls.w	800aa34 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aba0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	f102 0308 	add.w	r3, r2, #8
 800aba6:	e853 3f00 	ldrex	r3, [r3]
 800abaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abae:	3208      	adds	r2, #8
 800abb0:	e842 3100 	strex	r1, r3, [r2]
 800abb4:	2900      	cmp	r1, #0
 800abb6:	d1f3      	bne.n	800aba0 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 800abb8:	4b06      	ldr	r3, [pc, #24]	; (800abd4 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 800abba:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800abbc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbe:	e852 3f00 	ldrex	r3, [r2]
 800abc2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc6:	e842 3100 	strex	r1, r3, [r2]
 800abca:	2900      	cmp	r1, #0
 800abcc:	d1f6      	bne.n	800abbc <UART_RxISR_16BIT_FIFOEN+0x1ac>
 800abce:	e731      	b.n	800aa34 <UART_RxISR_16BIT_FIFOEN+0x24>
 800abd0:	40008000 	.word	0x40008000
 800abd4:	0800a76d 	.word	0x0800a76d

0800abd8 <UART_SetConfig>:
{
 800abd8:	b570      	push	{r4, r5, r6, lr}
 800abda:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800abdc:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abde:	6883      	ldr	r3, [r0, #8]
 800abe0:	6902      	ldr	r2, [r0, #16]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	6942      	ldr	r2, [r0, #20]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	69c2      	ldr	r2, [r0, #28]
 800abea:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abec:	6808      	ldr	r0, [r1, #0]
 800abee:	4a9d      	ldr	r2, [pc, #628]	; (800ae64 <UART_SetConfig+0x28c>)
 800abf0:	4002      	ands	r2, r0
 800abf2:	431a      	orrs	r2, r3
 800abf4:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abf6:	6822      	ldr	r2, [r4, #0]
 800abf8:	6853      	ldr	r3, [r2, #4]
 800abfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800abfe:	68e1      	ldr	r1, [r4, #12]
 800ac00:	430b      	orrs	r3, r1
 800ac02:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac04:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac06:	6822      	ldr	r2, [r4, #0]
 800ac08:	4b97      	ldr	r3, [pc, #604]	; (800ae68 <UART_SetConfig+0x290>)
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d001      	beq.n	800ac12 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800ac0e:	6a23      	ldr	r3, [r4, #32]
 800ac10:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac12:	6893      	ldr	r3, [r2, #8]
 800ac14:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ac18:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac20:	6822      	ldr	r2, [r4, #0]
 800ac22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ac24:	f023 030f 	bic.w	r3, r3, #15
 800ac28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ac2a:	430b      	orrs	r3, r1
 800ac2c:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	4a8e      	ldr	r2, [pc, #568]	; (800ae6c <UART_SetConfig+0x294>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d01c      	beq.n	800ac70 <UART_SetConfig+0x98>
 800ac36:	4a8e      	ldr	r2, [pc, #568]	; (800ae70 <UART_SetConfig+0x298>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d031      	beq.n	800aca0 <UART_SetConfig+0xc8>
 800ac3c:	4a8a      	ldr	r2, [pc, #552]	; (800ae68 <UART_SetConfig+0x290>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d04b      	beq.n	800acda <UART_SetConfig+0x102>
 800ac42:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac44:	4988      	ldr	r1, [pc, #544]	; (800ae68 <UART_SetConfig+0x290>)
 800ac46:	428b      	cmp	r3, r1
 800ac48:	d068      	beq.n	800ad1c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac4a:	69e0      	ldr	r0, [r4, #28]
 800ac4c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ac50:	f000 80a5 	beq.w	800ad9e <UART_SetConfig+0x1c6>
    switch (clocksource)
 800ac54:	2a08      	cmp	r2, #8
 800ac56:	f200 811f 	bhi.w	800ae98 <UART_SetConfig+0x2c0>
 800ac5a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ac5e:	00d3      	.short	0x00d3
 800ac60:	00d100f5 	.word	0x00d100f5
 800ac64:	00f8011d 	.word	0x00f8011d
 800ac68:	011d011d 	.word	0x011d011d
 800ac6c:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800ac70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac74:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800ac78:	f002 0203 	and.w	r2, r2, #3
 800ac7c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac80:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 800ac84:	2a03      	cmp	r2, #3
 800ac86:	d809      	bhi.n	800ac9c <UART_SetConfig+0xc4>
 800ac88:	e8df f002 	tbb	[pc, r2]
 800ac8c:	063c0402 	.word	0x063c0402
 800ac90:	2201      	movs	r2, #1
 800ac92:	e7d7      	b.n	800ac44 <UART_SetConfig+0x6c>
 800ac94:	2204      	movs	r2, #4
 800ac96:	e7d5      	b.n	800ac44 <UART_SetConfig+0x6c>
 800ac98:	2208      	movs	r2, #8
 800ac9a:	e7d3      	b.n	800ac44 <UART_SetConfig+0x6c>
 800ac9c:	2210      	movs	r2, #16
 800ac9e:	e7d1      	b.n	800ac44 <UART_SetConfig+0x6c>
 800aca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aca4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800aca8:	f002 020c 	and.w	r2, r2, #12
 800acac:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800acb0:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 800acb4:	2a0c      	cmp	r2, #12
 800acb6:	d80e      	bhi.n	800acd6 <UART_SetConfig+0xfe>
 800acb8:	e8df f002 	tbb	[pc, r2]
 800acbc:	0d0d0d07 	.word	0x0d0d0d07
 800acc0:	0d0d0d09 	.word	0x0d0d0d09
 800acc4:	0d0d0d26 	.word	0x0d0d0d26
 800acc8:	0b          	.byte	0x0b
 800acc9:	00          	.byte	0x00
 800acca:	2200      	movs	r2, #0
 800accc:	e7ba      	b.n	800ac44 <UART_SetConfig+0x6c>
 800acce:	2204      	movs	r2, #4
 800acd0:	e7b8      	b.n	800ac44 <UART_SetConfig+0x6c>
 800acd2:	2208      	movs	r2, #8
 800acd4:	e7b6      	b.n	800ac44 <UART_SetConfig+0x6c>
 800acd6:	2210      	movs	r2, #16
 800acd8:	e7b4      	b.n	800ac44 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800acda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800acde:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800ace2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800ace6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800acea:	d00f      	beq.n	800ad0c <UART_SetConfig+0x134>
 800acec:	d805      	bhi.n	800acfa <UART_SetConfig+0x122>
 800acee:	b17a      	cbz	r2, 800ad10 <UART_SetConfig+0x138>
 800acf0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800acf4:	d10e      	bne.n	800ad14 <UART_SetConfig+0x13c>
 800acf6:	2204      	movs	r2, #4
 800acf8:	e7a4      	b.n	800ac44 <UART_SetConfig+0x6c>
 800acfa:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800acfe:	d10b      	bne.n	800ad18 <UART_SetConfig+0x140>
 800ad00:	2208      	movs	r2, #8
 800ad02:	e79f      	b.n	800ac44 <UART_SetConfig+0x6c>
 800ad04:	2202      	movs	r2, #2
 800ad06:	e79d      	b.n	800ac44 <UART_SetConfig+0x6c>
 800ad08:	2202      	movs	r2, #2
 800ad0a:	e79b      	b.n	800ac44 <UART_SetConfig+0x6c>
 800ad0c:	2202      	movs	r2, #2
 800ad0e:	e799      	b.n	800ac44 <UART_SetConfig+0x6c>
 800ad10:	2200      	movs	r2, #0
 800ad12:	e797      	b.n	800ac44 <UART_SetConfig+0x6c>
 800ad14:	2210      	movs	r2, #16
 800ad16:	e795      	b.n	800ac44 <UART_SetConfig+0x6c>
 800ad18:	2210      	movs	r2, #16
 800ad1a:	e793      	b.n	800ac44 <UART_SetConfig+0x6c>
    switch (clocksource)
 800ad1c:	2a08      	cmp	r2, #8
 800ad1e:	f200 809c 	bhi.w	800ae5a <UART_SetConfig+0x282>
 800ad22:	e8df f002 	tbb	[pc, r2]
 800ad26:	9a08      	.short	0x9a08
 800ad28:	9a379a3a 	.word	0x9a379a3a
 800ad2c:	9a9a      	.short	0x9a9a
 800ad2e:	05          	.byte	0x05
 800ad2f:	00          	.byte	0x00
 800ad30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ad34:	e004      	b.n	800ad40 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad36:	f7fd fe17 	bl	8008968 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	f000 808f 	beq.w	800ae5e <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ad42:	4b4c      	ldr	r3, [pc, #304]	; (800ae74 <UART_SetConfig+0x29c>)
 800ad44:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ad48:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad4c:	6865      	ldr	r5, [r4, #4]
 800ad4e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ad52:	4299      	cmp	r1, r3
 800ad54:	f200 8094 	bhi.w	800ae80 <UART_SetConfig+0x2a8>
 800ad58:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800ad5c:	f200 8092 	bhi.w	800ae84 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad60:	2600      	movs	r6, #0
 800ad62:	4633      	mov	r3, r6
 800ad64:	4631      	mov	r1, r6
 800ad66:	f7f6 fa23 	bl	80011b0 <__aeabi_uldivmod>
 800ad6a:	0209      	lsls	r1, r1, #8
 800ad6c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800ad70:	0200      	lsls	r0, r0, #8
 800ad72:	086b      	lsrs	r3, r5, #1
 800ad74:	18c0      	adds	r0, r0, r3
 800ad76:	462a      	mov	r2, r5
 800ad78:	4633      	mov	r3, r6
 800ad7a:	f141 0100 	adc.w	r1, r1, #0
 800ad7e:	f7f6 fa17 	bl	80011b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad82:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800ad86:	4b3c      	ldr	r3, [pc, #240]	; (800ae78 <UART_SetConfig+0x2a0>)
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d87d      	bhi.n	800ae88 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800ad8c:	6823      	ldr	r3, [r4, #0]
 800ad8e:	60d8      	str	r0, [r3, #12]
 800ad90:	4630      	mov	r0, r6
 800ad92:	e050      	b.n	800ae36 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 800ad94:	f7fd f8ea 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
        break;
 800ad98:	e7cf      	b.n	800ad3a <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800ad9a:	4838      	ldr	r0, [pc, #224]	; (800ae7c <UART_SetConfig+0x2a4>)
 800ad9c:	e7d0      	b.n	800ad40 <UART_SetConfig+0x168>
    switch (clocksource)
 800ad9e:	2a08      	cmp	r2, #8
 800ada0:	d874      	bhi.n	800ae8c <UART_SetConfig+0x2b4>
 800ada2:	e8df f002 	tbb	[pc, r2]
 800ada6:	2707      	.short	0x2707
 800ada8:	732a7305 	.word	0x732a7305
 800adac:	7373      	.short	0x7373
 800adae:	0b          	.byte	0x0b
 800adaf:	00          	.byte	0x00
 800adb0:	4832      	ldr	r0, [pc, #200]	; (800ae7c <UART_SetConfig+0x2a4>)
 800adb2:	e003      	b.n	800adbc <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800adb4:	f7fd fdd8 	bl	8008968 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800adb8:	2800      	cmp	r0, #0
 800adba:	d069      	beq.n	800ae90 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800adbe:	4b2d      	ldr	r3, [pc, #180]	; (800ae74 <UART_SetConfig+0x29c>)
 800adc0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800adc4:	fbb0 f0f3 	udiv	r0, r0, r3
 800adc8:	6862      	ldr	r2, [r4, #4]
 800adca:	0853      	lsrs	r3, r2, #1
 800adcc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800add0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800add4:	f1a3 0110 	sub.w	r1, r3, #16
 800add8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800addc:	4291      	cmp	r1, r2
 800adde:	d859      	bhi.n	800ae94 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ade6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800adea:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800adec:	6822      	ldr	r2, [r4, #0]
 800adee:	60d3      	str	r3, [r2, #12]
 800adf0:	2000      	movs	r0, #0
 800adf2:	e020      	b.n	800ae36 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800adf4:	f7fd fdc8 	bl	8008988 <HAL_RCC_GetPCLK2Freq>
        break;
 800adf8:	e7de      	b.n	800adb8 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800adfa:	f7fd f8b7 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
        break;
 800adfe:	e7db      	b.n	800adb8 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800ae00:	481e      	ldr	r0, [pc, #120]	; (800ae7c <UART_SetConfig+0x2a4>)
 800ae02:	e003      	b.n	800ae0c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae04:	f7fd fdb0 	bl	8008968 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d047      	beq.n	800ae9c <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ae0e:	4b19      	ldr	r3, [pc, #100]	; (800ae74 <UART_SetConfig+0x29c>)
 800ae10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ae14:	fbb0 f0f3 	udiv	r0, r0, r3
 800ae18:	6863      	ldr	r3, [r4, #4]
 800ae1a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800ae1e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae22:	f1a0 0210 	sub.w	r2, r0, #16
 800ae26:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d838      	bhi.n	800aea0 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	b280      	uxth	r0, r0
 800ae32:	60d8      	str	r0, [r3, #12]
 800ae34:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800ae36:	2301      	movs	r3, #1
 800ae38:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ae3c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800ae40:	2300      	movs	r3, #0
 800ae42:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800ae44:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae48:	f7fd fd9e 	bl	8008988 <HAL_RCC_GetPCLK2Freq>
        break;
 800ae4c:	e7dc      	b.n	800ae08 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800ae4e:	f7fd f88d 	bl	8007f6c <HAL_RCC_GetSysClockFreq>
        break;
 800ae52:	e7d9      	b.n	800ae08 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 800ae54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ae58:	e7d8      	b.n	800ae0c <UART_SetConfig+0x234>
    switch (clocksource)
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	e7eb      	b.n	800ae36 <UART_SetConfig+0x25e>
 800ae5e:	2000      	movs	r0, #0
 800ae60:	e7e9      	b.n	800ae36 <UART_SetConfig+0x25e>
 800ae62:	bf00      	nop
 800ae64:	cfff69f3 	.word	0xcfff69f3
 800ae68:	40008000 	.word	0x40008000
 800ae6c:	40013800 	.word	0x40013800
 800ae70:	40004400 	.word	0x40004400
 800ae74:	08018048 	.word	0x08018048
 800ae78:	000ffcff 	.word	0x000ffcff
 800ae7c:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800ae80:	2001      	movs	r0, #1
 800ae82:	e7d8      	b.n	800ae36 <UART_SetConfig+0x25e>
 800ae84:	2001      	movs	r0, #1
 800ae86:	e7d6      	b.n	800ae36 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 800ae88:	2001      	movs	r0, #1
 800ae8a:	e7d4      	b.n	800ae36 <UART_SetConfig+0x25e>
    switch (clocksource)
 800ae8c:	2001      	movs	r0, #1
 800ae8e:	e7d2      	b.n	800ae36 <UART_SetConfig+0x25e>
 800ae90:	2000      	movs	r0, #0
 800ae92:	e7d0      	b.n	800ae36 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800ae94:	2001      	movs	r0, #1
 800ae96:	e7ce      	b.n	800ae36 <UART_SetConfig+0x25e>
    switch (clocksource)
 800ae98:	2001      	movs	r0, #1
 800ae9a:	e7cc      	b.n	800ae36 <UART_SetConfig+0x25e>
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	e7ca      	b.n	800ae36 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800aea0:	2001      	movs	r0, #1
 800aea2:	e7c8      	b.n	800ae36 <UART_SetConfig+0x25e>

0800aea4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aea4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aea6:	f013 0f01 	tst.w	r3, #1
 800aeaa:	d006      	beq.n	800aeba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aeac:	6802      	ldr	r2, [r0, #0]
 800aeae:	6853      	ldr	r3, [r2, #4]
 800aeb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aeb4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800aeb6:	430b      	orrs	r3, r1
 800aeb8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aeba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aebc:	f013 0f02 	tst.w	r3, #2
 800aec0:	d006      	beq.n	800aed0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aec2:	6802      	ldr	r2, [r0, #0]
 800aec4:	6853      	ldr	r3, [r2, #4]
 800aec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aeca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800aecc:	430b      	orrs	r3, r1
 800aece:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aed0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aed2:	f013 0f04 	tst.w	r3, #4
 800aed6:	d006      	beq.n	800aee6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aed8:	6802      	ldr	r2, [r0, #0]
 800aeda:	6853      	ldr	r3, [r2, #4]
 800aedc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aee0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800aee2:	430b      	orrs	r3, r1
 800aee4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aee6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aee8:	f013 0f08 	tst.w	r3, #8
 800aeec:	d006      	beq.n	800aefc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aeee:	6802      	ldr	r2, [r0, #0]
 800aef0:	6853      	ldr	r3, [r2, #4]
 800aef2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aef6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800aef8:	430b      	orrs	r3, r1
 800aefa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aefc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aefe:	f013 0f10 	tst.w	r3, #16
 800af02:	d006      	beq.n	800af12 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af04:	6802      	ldr	r2, [r0, #0]
 800af06:	6893      	ldr	r3, [r2, #8]
 800af08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af0c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800af0e:	430b      	orrs	r3, r1
 800af10:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800af14:	f013 0f20 	tst.w	r3, #32
 800af18:	d006      	beq.n	800af28 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af1a:	6802      	ldr	r2, [r0, #0]
 800af1c:	6893      	ldr	r3, [r2, #8]
 800af1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af22:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800af24:	430b      	orrs	r3, r1
 800af26:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800af2a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800af2e:	d00a      	beq.n	800af46 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af30:	6802      	ldr	r2, [r0, #0]
 800af32:	6853      	ldr	r3, [r2, #4]
 800af34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af38:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800af3a:	430b      	orrs	r3, r1
 800af3c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af3e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800af40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af44:	d00b      	beq.n	800af5e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800af48:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af4c:	d006      	beq.n	800af5c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af4e:	6802      	ldr	r2, [r0, #0]
 800af50:	6853      	ldr	r3, [r2, #4]
 800af52:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800af56:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800af58:	430b      	orrs	r3, r1
 800af5a:	6053      	str	r3, [r2, #4]
}
 800af5c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af5e:	6802      	ldr	r2, [r0, #0]
 800af60:	6853      	ldr	r3, [r2, #4]
 800af62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800af66:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800af68:	430b      	orrs	r3, r1
 800af6a:	6053      	str	r3, [r2, #4]
 800af6c:	e7eb      	b.n	800af46 <UART_AdvFeatureConfig+0xa2>

0800af6e <UART_WaitOnFlagUntilTimeout>:
{
 800af6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af72:	4605      	mov	r5, r0
 800af74:	460f      	mov	r7, r1
 800af76:	4616      	mov	r6, r2
 800af78:	4699      	mov	r9, r3
 800af7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af7e:	682b      	ldr	r3, [r5, #0]
 800af80:	69dc      	ldr	r4, [r3, #28]
 800af82:	ea37 0404 	bics.w	r4, r7, r4
 800af86:	bf0c      	ite	eq
 800af88:	2401      	moveq	r4, #1
 800af8a:	2400      	movne	r4, #0
 800af8c:	42b4      	cmp	r4, r6
 800af8e:	d157      	bne.n	800b040 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800af90:	f1b8 3fff 	cmp.w	r8, #4294967295
 800af94:	d0f3      	beq.n	800af7e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af96:	f7f7 f839 	bl	800200c <HAL_GetTick>
 800af9a:	eba0 0009 	sub.w	r0, r0, r9
 800af9e:	4540      	cmp	r0, r8
 800afa0:	d82f      	bhi.n	800b002 <UART_WaitOnFlagUntilTimeout+0x94>
 800afa2:	f1b8 0f00 	cmp.w	r8, #0
 800afa6:	d02c      	beq.n	800b002 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	f012 0f04 	tst.w	r2, #4
 800afb0:	d0e5      	beq.n	800af7e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afb2:	69da      	ldr	r2, [r3, #28]
 800afb4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800afb8:	d0e1      	beq.n	800af7e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afbe:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800afc0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc2:	e852 3f00 	ldrex	r3, [r2]
 800afc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afca:	e842 3100 	strex	r1, r3, [r2]
 800afce:	2900      	cmp	r1, #0
 800afd0:	d1f6      	bne.n	800afc0 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd4:	f102 0308 	add.w	r3, r2, #8
 800afd8:	e853 3f00 	ldrex	r3, [r3]
 800afdc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe0:	3208      	adds	r2, #8
 800afe2:	e842 3100 	strex	r1, r3, [r2]
 800afe6:	2900      	cmp	r1, #0
 800afe8:	d1f3      	bne.n	800afd2 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800afea:	2320      	movs	r3, #32
 800afec:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800aff0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aff4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 800aff8:	2300      	movs	r3, #0
 800affa:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800affe:	2003      	movs	r0, #3
 800b000:	e01f      	b.n	800b042 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b002:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b004:	e852 3f00 	ldrex	r3, [r2]
 800b008:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00c:	e842 3100 	strex	r1, r3, [r2]
 800b010:	2900      	cmp	r1, #0
 800b012:	d1f6      	bne.n	800b002 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b014:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b016:	f102 0308 	add.w	r3, r2, #8
 800b01a:	e853 3f00 	ldrex	r3, [r3]
 800b01e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	3208      	adds	r2, #8
 800b024:	e842 3100 	strex	r1, r3, [r2]
 800b028:	2900      	cmp	r1, #0
 800b02a:	d1f3      	bne.n	800b014 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800b02c:	2320      	movs	r3, #32
 800b02e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800b032:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800b036:	2300      	movs	r3, #0
 800b038:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 800b03c:	2003      	movs	r0, #3
 800b03e:	e000      	b.n	800b042 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800b040:	2000      	movs	r0, #0
}
 800b042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b046 <UART_CheckIdleState>:
{
 800b046:	b530      	push	{r4, r5, lr}
 800b048:	b083      	sub	sp, #12
 800b04a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b04c:	2300      	movs	r3, #0
 800b04e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800b052:	f7f6 ffdb 	bl	800200c <HAL_GetTick>
 800b056:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b058:	6822      	ldr	r2, [r4, #0]
 800b05a:	6812      	ldr	r2, [r2, #0]
 800b05c:	f012 0f08 	tst.w	r2, #8
 800b060:	d110      	bne.n	800b084 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f013 0f04 	tst.w	r3, #4
 800b06a:	d119      	bne.n	800b0a0 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 800b06c:	2320      	movs	r3, #32
 800b06e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b072:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b076:	2000      	movs	r0, #0
 800b078:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b07a:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800b07c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800b080:	b003      	add	sp, #12
 800b082:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	4603      	mov	r3, r0
 800b08c:	2200      	movs	r2, #0
 800b08e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b092:	4620      	mov	r0, r4
 800b094:	f7ff ff6b 	bl	800af6e <UART_WaitOnFlagUntilTimeout>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d0e2      	beq.n	800b062 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800b09c:	2003      	movs	r0, #3
 800b09e:	e7ef      	b.n	800b080 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	462b      	mov	r3, r5
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f7ff ff5d 	bl	800af6e <UART_WaitOnFlagUntilTimeout>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d0d9      	beq.n	800b06c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800b0b8:	2003      	movs	r0, #3
 800b0ba:	e7e1      	b.n	800b080 <UART_CheckIdleState+0x3a>

0800b0bc <HAL_UART_Init>:
  if (huart == NULL)
 800b0bc:	b378      	cbz	r0, 800b11e <HAL_UART_Init+0x62>
{
 800b0be:	b510      	push	{r4, lr}
 800b0c0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b0c2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800b0c6:	b30b      	cbz	r3, 800b10c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800b0c8:	2324      	movs	r3, #36	; 0x24
 800b0ca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800b0ce:	6822      	ldr	r2, [r4, #0]
 800b0d0:	6813      	ldr	r3, [r2, #0]
 800b0d2:	f023 0301 	bic.w	r3, r3, #1
 800b0d6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f7ff fd7d 	bl	800abd8 <UART_SetConfig>
 800b0de:	2801      	cmp	r0, #1
 800b0e0:	d013      	beq.n	800b10a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0e4:	b9bb      	cbnz	r3, 800b116 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	6853      	ldr	r3, [r2, #4]
 800b0ea:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800b0ee:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0f0:	6822      	ldr	r2, [r4, #0]
 800b0f2:	6893      	ldr	r3, [r2, #8]
 800b0f4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800b0f8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800b0fa:	6822      	ldr	r2, [r4, #0]
 800b0fc:	6813      	ldr	r3, [r2, #0]
 800b0fe:	f043 0301 	orr.w	r3, r3, #1
 800b102:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800b104:	4620      	mov	r0, r4
 800b106:	f7ff ff9e 	bl	800b046 <UART_CheckIdleState>
}
 800b10a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800b10c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800b110:	f7f7 f98e 	bl	8002430 <HAL_UART_MspInit>
 800b114:	e7d8      	b.n	800b0c8 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800b116:	4620      	mov	r0, r4
 800b118:	f7ff fec4 	bl	800aea4 <UART_AdvFeatureConfig>
 800b11c:	e7e3      	b.n	800b0e6 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800b11e:	2001      	movs	r0, #1
}
 800b120:	4770      	bx	lr
	...

0800b124 <UART_Start_Receive_IT>:
{
 800b124:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800b126:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b128:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b12c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b130:	2300      	movs	r3, #0
 800b132:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 800b134:	6883      	ldr	r3, [r0, #8]
 800b136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b13a:	d006      	beq.n	800b14a <UART_Start_Receive_IT+0x26>
 800b13c:	b9a3      	cbnz	r3, 800b168 <UART_Start_Receive_IT+0x44>
 800b13e:	6903      	ldr	r3, [r0, #16]
 800b140:	b973      	cbnz	r3, 800b160 <UART_Start_Receive_IT+0x3c>
 800b142:	23ff      	movs	r3, #255	; 0xff
 800b144:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800b148:	e014      	b.n	800b174 <UART_Start_Receive_IT+0x50>
 800b14a:	6903      	ldr	r3, [r0, #16]
 800b14c:	b923      	cbnz	r3, 800b158 <UART_Start_Receive_IT+0x34>
 800b14e:	f240 13ff 	movw	r3, #511	; 0x1ff
 800b152:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800b156:	e00d      	b.n	800b174 <UART_Start_Receive_IT+0x50>
 800b158:	23ff      	movs	r3, #255	; 0xff
 800b15a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800b15e:	e009      	b.n	800b174 <UART_Start_Receive_IT+0x50>
 800b160:	237f      	movs	r3, #127	; 0x7f
 800b162:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800b166:	e005      	b.n	800b174 <UART_Start_Receive_IT+0x50>
 800b168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b16c:	d02d      	beq.n	800b1ca <UART_Start_Receive_IT+0xa6>
 800b16e:	2300      	movs	r3, #0
 800b170:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b174:	2300      	movs	r3, #0
 800b176:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b17a:	2322      	movs	r3, #34	; 0x22
 800b17c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b180:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b182:	f101 0308 	add.w	r3, r1, #8
 800b186:	e853 3f00 	ldrex	r3, [r3]
 800b18a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18e:	3108      	adds	r1, #8
 800b190:	e841 3400 	strex	r4, r3, [r1]
 800b194:	2c00      	cmp	r4, #0
 800b196:	d1f3      	bne.n	800b180 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b198:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800b19a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b19e:	d01e      	beq.n	800b1de <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1a0:	6883      	ldr	r3, [r0, #8]
 800b1a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a6:	d042      	beq.n	800b22e <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 800b1a8:	4b29      	ldr	r3, [pc, #164]	; (800b250 <UART_Start_Receive_IT+0x12c>)
 800b1aa:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b1ac:	6903      	ldr	r3, [r0, #16]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d043      	beq.n	800b23a <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b1b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b4:	e852 3f00 	ldrex	r3, [r2]
 800b1b8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1bc:	e842 3100 	strex	r1, r3, [r2]
 800b1c0:	2900      	cmp	r1, #0
 800b1c2:	d1f6      	bne.n	800b1b2 <UART_Start_Receive_IT+0x8e>
}
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	bc10      	pop	{r4}
 800b1c8:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800b1ca:	6903      	ldr	r3, [r0, #16]
 800b1cc:	b91b      	cbnz	r3, 800b1d6 <UART_Start_Receive_IT+0xb2>
 800b1ce:	237f      	movs	r3, #127	; 0x7f
 800b1d0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800b1d4:	e7ce      	b.n	800b174 <UART_Start_Receive_IT+0x50>
 800b1d6:	233f      	movs	r3, #63	; 0x3f
 800b1d8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800b1dc:	e7ca      	b.n	800b174 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b1de:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d8dc      	bhi.n	800b1a0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1e6:	6883      	ldr	r3, [r0, #8]
 800b1e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ec:	d019      	beq.n	800b222 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b1ee:	4b19      	ldr	r3, [pc, #100]	; (800b254 <UART_Start_Receive_IT+0x130>)
 800b1f0:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b1f2:	6903      	ldr	r3, [r0, #16]
 800b1f4:	b143      	cbz	r3, 800b208 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f8:	e852 3f00 	ldrex	r3, [r2]
 800b1fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	e842 3100 	strex	r1, r3, [r2]
 800b204:	2900      	cmp	r1, #0
 800b206:	d1f6      	bne.n	800b1f6 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b208:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20a:	f102 0308 	add.w	r3, r2, #8
 800b20e:	e853 3f00 	ldrex	r3, [r3]
 800b212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b216:	3208      	adds	r2, #8
 800b218:	e842 3100 	strex	r1, r3, [r2]
 800b21c:	2900      	cmp	r1, #0
 800b21e:	d1f3      	bne.n	800b208 <UART_Start_Receive_IT+0xe4>
 800b220:	e7d0      	b.n	800b1c4 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b222:	6903      	ldr	r3, [r0, #16]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1e2      	bne.n	800b1ee <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b228:	4b0b      	ldr	r3, [pc, #44]	; (800b258 <UART_Start_Receive_IT+0x134>)
 800b22a:	6743      	str	r3, [r0, #116]	; 0x74
 800b22c:	e7e1      	b.n	800b1f2 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b22e:	6903      	ldr	r3, [r0, #16]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1b9      	bne.n	800b1a8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 800b234:	4b09      	ldr	r3, [pc, #36]	; (800b25c <UART_Start_Receive_IT+0x138>)
 800b236:	6743      	str	r3, [r0, #116]	; 0x74
 800b238:	e7b8      	b.n	800b1ac <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b23a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	e852 3f00 	ldrex	r3, [r2]
 800b240:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b244:	e842 3100 	strex	r1, r3, [r2]
 800b248:	2900      	cmp	r1, #0
 800b24a:	d1f6      	bne.n	800b23a <UART_Start_Receive_IT+0x116>
 800b24c:	e7ba      	b.n	800b1c4 <UART_Start_Receive_IT+0xa0>
 800b24e:	bf00      	nop
 800b250:	0800a691 	.word	0x0800a691
 800b254:	0800a845 	.word	0x0800a845
 800b258:	0800aa11 	.word	0x0800aa11
 800b25c:	0800a76d 	.word	0x0800a76d

0800b260 <HAL_UART_Receive_IT>:
{
 800b260:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b262:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800b266:	2b20      	cmp	r3, #32
 800b268:	d117      	bne.n	800b29a <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 800b26a:	b1c1      	cbz	r1, 800b29e <HAL_UART_Receive_IT+0x3e>
 800b26c:	b1ca      	cbz	r2, 800b2a2 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b26e:	2300      	movs	r3, #0
 800b270:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b272:	6803      	ldr	r3, [r0, #0]
 800b274:	4c0c      	ldr	r4, [pc, #48]	; (800b2a8 <HAL_UART_Receive_IT+0x48>)
 800b276:	42a3      	cmp	r3, r4
 800b278:	d00c      	beq.n	800b294 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800b280:	d008      	beq.n	800b294 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b282:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	e854 3f00 	ldrex	r3, [r4]
 800b288:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28c:	e844 3500 	strex	r5, r3, [r4]
 800b290:	2d00      	cmp	r5, #0
 800b292:	d1f6      	bne.n	800b282 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 800b294:	f7ff ff46 	bl	800b124 <UART_Start_Receive_IT>
 800b298:	e000      	b.n	800b29c <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 800b29a:	2002      	movs	r0, #2
}
 800b29c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800b29e:	2001      	movs	r0, #1
 800b2a0:	e7fc      	b.n	800b29c <HAL_UART_Receive_IT+0x3c>
 800b2a2:	2001      	movs	r0, #1
 800b2a4:	e7fa      	b.n	800b29c <HAL_UART_Receive_IT+0x3c>
 800b2a6:	bf00      	nop
 800b2a8:	40008000 	.word	0x40008000

0800b2ac <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b2ac:	b082      	sub	sp, #8
 800b2ae:	ab02      	add	r3, sp, #8
 800b2b0:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b2b4:	6802      	ldr	r2, [r0, #0]
 800b2b6:	6853      	ldr	r3, [r2, #4]
 800b2b8:	f023 0310 	bic.w	r3, r3, #16
 800b2bc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800b2c0:	430b      	orrs	r3, r1
 800b2c2:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b2c4:	6802      	ldr	r2, [r0, #0]
 800b2c6:	6853      	ldr	r3, [r2, #4]
 800b2c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b2cc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800b2d0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b2d4:	6053      	str	r3, [r2, #4]
}
 800b2d6:	b002      	add	sp, #8
 800b2d8:	4770      	bx	lr
	...

0800b2dc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b2dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800b2de:	b92b      	cbnz	r3, 800b2ec <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b2e6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800b2ea:	4770      	bx	lr
{
 800b2ec:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b2ee:	6803      	ldr	r3, [r0, #0]
 800b2f0:	689a      	ldr	r2, [r3, #8]
 800b2f2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b2f6:	6899      	ldr	r1, [r3, #8]
 800b2f8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2fa:	4d09      	ldr	r5, [pc, #36]	; (800b320 <UARTEx_SetNbDataToProcess+0x44>)
 800b2fc:	5c6b      	ldrb	r3, [r5, r1]
 800b2fe:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b300:	4c08      	ldr	r4, [pc, #32]	; (800b324 <UARTEx_SetNbDataToProcess+0x48>)
 800b302:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b304:	fb93 f3f1 	sdiv	r3, r3, r1
 800b308:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b30c:	5cab      	ldrb	r3, [r5, r2]
 800b30e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b310:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b312:	fb93 f3f2 	sdiv	r3, r3, r2
 800b316:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800b31a:	bc30      	pop	{r4, r5}
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	08018068 	.word	0x08018068
 800b324:	08018060 	.word	0x08018060

0800b328 <HAL_UARTEx_WakeupCallback>:
}
 800b328:	4770      	bx	lr

0800b32a <HAL_UARTEx_RxFifoFullCallback>:
}
 800b32a:	4770      	bx	lr

0800b32c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800b32c:	4770      	bx	lr

0800b32e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800b32e:	b510      	push	{r4, lr}
 800b330:	b084      	sub	sp, #16
 800b332:	ab04      	add	r3, sp, #16
 800b334:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 800b338:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d035      	beq.n	800b3ac <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 800b340:	4604      	mov	r4, r0
 800b342:	2301      	movs	r3, #1
 800b344:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800b348:	2324      	movs	r3, #36	; 0x24
 800b34a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800b34e:	6802      	ldr	r2, [r0, #0]
 800b350:	6813      	ldr	r3, [r2, #0]
 800b352:	f023 0301 	bic.w	r3, r3, #1
 800b356:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b358:	6801      	ldr	r1, [r0, #0]
 800b35a:	688b      	ldr	r3, [r1, #8]
 800b35c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b360:	9a02      	ldr	r2, [sp, #8]
 800b362:	4313      	orrs	r3, r2
 800b364:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b366:	b1aa      	cbz	r2, 800b394 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 800b368:	6822      	ldr	r2, [r4, #0]
 800b36a:	6813      	ldr	r3, [r2, #0]
 800b36c:	f043 0301 	orr.w	r3, r3, #1
 800b370:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800b372:	f7f6 fe4b 	bl	800200c <HAL_GetTick>
 800b376:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b378:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800b37c:	9200      	str	r2, [sp, #0]
 800b37e:	2200      	movs	r2, #0
 800b380:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b384:	4620      	mov	r0, r4
 800b386:	f7ff fdf2 	bl	800af6e <UART_WaitOnFlagUntilTimeout>
 800b38a:	b948      	cbnz	r0, 800b3a0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800b38c:	2320      	movs	r3, #32
 800b38e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800b392:	e006      	b.n	800b3a2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b394:	ab04      	add	r3, sp, #16
 800b396:	e913 0006 	ldmdb	r3, {r1, r2}
 800b39a:	f7ff ff87 	bl	800b2ac <UARTEx_Wakeup_AddressConfig>
 800b39e:	e7e3      	b.n	800b368 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 800b3a0:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 800b3a8:	b004      	add	sp, #16
 800b3aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800b3ac:	2002      	movs	r0, #2
 800b3ae:	e7fb      	b.n	800b3a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

0800b3b0 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800b3b0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d010      	beq.n	800b3da <HAL_UARTEx_EnableStopMode+0x2a>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b3be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c0:	e852 3f00 	ldrex	r3, [r2]
 800b3c4:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c8:	e842 3100 	strex	r1, r3, [r2]
 800b3cc:	2900      	cmp	r1, #0
 800b3ce:	d1f6      	bne.n	800b3be <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b3da:	2002      	movs	r0, #2
}
 800b3dc:	4770      	bx	lr

0800b3de <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800b3de:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d01d      	beq.n	800b422 <HAL_UARTEx_EnableFifoMode+0x44>
{
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800b3f0:	2324      	movs	r3, #36	; 0x24
 800b3f2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3f6:	6802      	ldr	r2, [r0, #0]
 800b3f8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800b3fa:	6811      	ldr	r1, [r2, #0]
 800b3fc:	f021 0101 	bic.w	r1, r1, #1
 800b400:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b402:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b406:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b40a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b40c:	6802      	ldr	r2, [r0, #0]
 800b40e:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800b410:	f7ff ff64 	bl	800b2dc <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800b414:	2320      	movs	r3, #32
 800b416:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800b41a:	2000      	movs	r0, #0
 800b41c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800b420:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800b422:	2002      	movs	r0, #2
}
 800b424:	4770      	bx	lr

0800b426 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800b426:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800b428:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d01d      	beq.n	800b46c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b430:	4604      	mov	r4, r0
 800b432:	2301      	movs	r3, #1
 800b434:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800b438:	2324      	movs	r3, #36	; 0x24
 800b43a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b43e:	6803      	ldr	r3, [r0, #0]
 800b440:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	f022 0201 	bic.w	r2, r2, #1
 800b448:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b44a:	6802      	ldr	r2, [r0, #0]
 800b44c:	6893      	ldr	r3, [r2, #8]
 800b44e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800b452:	4319      	orrs	r1, r3
 800b454:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800b456:	f7ff ff41 	bl	800b2dc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b45e:	2320      	movs	r3, #32
 800b460:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800b464:	2000      	movs	r0, #0
 800b466:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800b46c:	2002      	movs	r0, #2
 800b46e:	e7fc      	b.n	800b46a <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800b470 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800b470:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800b472:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800b476:	2b01      	cmp	r3, #1
 800b478:	d01d      	beq.n	800b4b6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b47a:	4604      	mov	r4, r0
 800b47c:	2301      	movs	r3, #1
 800b47e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800b482:	2324      	movs	r3, #36	; 0x24
 800b484:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b488:	6803      	ldr	r3, [r0, #0]
 800b48a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	f022 0201 	bic.w	r2, r2, #1
 800b492:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b494:	6802      	ldr	r2, [r0, #0]
 800b496:	6893      	ldr	r3, [r2, #8]
 800b498:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800b49c:	4319      	orrs	r1, r3
 800b49e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800b4a0:	f7ff ff1c 	bl	800b2dc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b4a8:	2320      	movs	r3, #32
 800b4aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800b4b4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800b4b6:	2002      	movs	r0, #2
 800b4b8:	e7fc      	b.n	800b4b4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800b4bc <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800b4bc:	2804      	cmp	r0, #4
 800b4be:	d807      	bhi.n	800b4d0 <LmHandlerPackageIsInitialized+0x14>
{
 800b4c0:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800b4c2:	4b05      	ldr	r3, [pc, #20]	; (800b4d8 <LmHandlerPackageIsInitialized+0x1c>)
 800b4c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	b11b      	cbz	r3, 800b4d4 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800b4cc:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800b4ce:	bd08      	pop	{r3, pc}
        return false;
 800b4d0:	2000      	movs	r0, #0
}
 800b4d2:	4770      	bx	lr
        return false;
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e7fa      	b.n	800b4ce <LmHandlerPackageIsInitialized+0x12>
 800b4d8:	20003b48 	.word	0x20003b48

0800b4dc <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	4605      	mov	r5, r0
 800b4e0:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b4e2:	2400      	movs	r4, #0
 800b4e4:	e005      	b.n	800b4f2 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	b10b      	cbz	r3, 800b4ee <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b4ee:	3401      	adds	r4, #1
 800b4f0:	b264      	sxtb	r4, r4
 800b4f2:	2c04      	cmp	r4, #4
 800b4f4:	dc24      	bgt.n	800b540 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 800b4f6:	4b13      	ldr	r3, [pc, #76]	; (800b544 <LmHandlerPackagesNotify+0x68>)
 800b4f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0f6      	beq.n	800b4ee <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 800b500:	2d03      	cmp	r5, #3
 800b502:	d8f4      	bhi.n	800b4ee <LmHandlerPackagesNotify+0x12>
 800b504:	a201      	add	r2, pc, #4	; (adr r2, 800b50c <LmHandlerPackagesNotify+0x30>)
 800b506:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800b50a:	bf00      	nop
 800b50c:	0800b4e7 	.word	0x0800b4e7
 800b510:	0800b51d 	.word	0x0800b51d
 800b514:	0800b529 	.word	0x0800b529
 800b518:	0800b535 	.word	0x0800b535
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d0e5      	beq.n	800b4ee <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800b522:	4630      	mov	r0, r6
 800b524:	4798      	blx	r3
 800b526:	e7e2      	b.n	800b4ee <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d0df      	beq.n	800b4ee <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800b52e:	4630      	mov	r0, r6
 800b530:	4798      	blx	r3
 800b532:	e7dc      	b.n	800b4ee <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0d9      	beq.n	800b4ee <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800b53a:	4630      	mov	r0, r6
 800b53c:	4798      	blx	r3
 800b53e:	e7d6      	b.n	800b4ee <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 800b540:	bd70      	pop	{r4, r5, r6, pc}
 800b542:	bf00      	nop
 800b544:	20003b48 	.word	0x20003b48

0800b548 <MlmeIndication>:
{
 800b548:	b510      	push	{r4, lr}
 800b54a:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800b54c:	4b11      	ldr	r3, [pc, #68]	; (800b594 <MlmeIndication+0x4c>)
 800b54e:	2200      	movs	r2, #0
 800b550:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800b552:	7842      	ldrb	r2, [r0, #1]
 800b554:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800b556:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800b55a:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800b55c:	f9b1 2000 	ldrsh.w	r2, [r1]
 800b560:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800b562:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800b566:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800b568:	78ca      	ldrb	r2, [r1, #3]
 800b56a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800b56c:	6842      	ldr	r2, [r0, #4]
 800b56e:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800b570:	4b09      	ldr	r3, [pc, #36]	; (800b598 <MlmeIndication+0x50>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b576:	b13b      	cbz	r3, 800b588 <MlmeIndication+0x40>
 800b578:	7802      	ldrb	r2, [r0, #0]
 800b57a:	2a0a      	cmp	r2, #10
 800b57c:	d004      	beq.n	800b588 <MlmeIndication+0x40>
 800b57e:	2a0e      	cmp	r2, #14
 800b580:	d002      	beq.n	800b588 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800b582:	4904      	ldr	r1, [pc, #16]	; (800b594 <MlmeIndication+0x4c>)
 800b584:	2000      	movs	r0, #0
 800b586:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800b588:	4621      	mov	r1, r4
 800b58a:	2003      	movs	r0, #3
 800b58c:	f7ff ffa6 	bl	800b4dc <LmHandlerPackagesNotify>
}
 800b590:	bd10      	pop	{r4, pc}
 800b592:	bf00      	nop
 800b594:	20000104 	.word	0x20000104
 800b598:	20003b44 	.word	0x20003b44

0800b59c <McpsConfirm>:
{
 800b59c:	b510      	push	{r4, lr}
 800b59e:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 800b5a0:	4b0d      	ldr	r3, [pc, #52]	; (800b5d8 <McpsConfirm+0x3c>)
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800b5a6:	7842      	ldrb	r2, [r0, #1]
 800b5a8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800b5aa:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800b5ae:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800b5b0:	68c2      	ldr	r2, [r0, #12]
 800b5b2:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800b5b4:	f990 2003 	ldrsb.w	r2, [r0, #3]
 800b5b8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800b5ba:	6902      	ldr	r2, [r0, #16]
 800b5bc:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800b5be:	7902      	ldrb	r2, [r0, #4]
 800b5c0:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800b5c2:	4b06      	ldr	r3, [pc, #24]	; (800b5dc <McpsConfirm+0x40>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c8:	b10b      	cbz	r3, 800b5ce <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800b5ca:	4803      	ldr	r0, [pc, #12]	; (800b5d8 <McpsConfirm+0x3c>)
 800b5cc:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	f7ff ff83 	bl	800b4dc <LmHandlerPackagesNotify>
}
 800b5d6:	bd10      	pop	{r4, pc}
 800b5d8:	20000118 	.word	0x20000118
 800b5dc:	20003b44 	.word	0x20003b44

0800b5e0 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800b5e0:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b5e2:	2400      	movs	r4, #0
 800b5e4:	e001      	b.n	800b5ea <LmHandlerPackageIsTxPending+0xa>
 800b5e6:	3401      	adds	r4, #1
 800b5e8:	b264      	sxtb	r4, r4
 800b5ea:	2c04      	cmp	r4, #4
 800b5ec:	dc0a      	bgt.n	800b604 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800b5ee:	4b07      	ldr	r3, [pc, #28]	; (800b60c <LmHandlerPackageIsTxPending+0x2c>)
 800b5f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d0f6      	beq.n	800b5e6 <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	4798      	blx	r3
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d0f1      	beq.n	800b5e6 <LmHandlerPackageIsTxPending+0x6>
 800b602:	e000      	b.n	800b606 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	bd10      	pop	{r4, pc}
 800b60a:	bf00      	nop
 800b60c:	20003b48 	.word	0x20003b48

0800b610 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800b610:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b612:	2400      	movs	r4, #0
 800b614:	e001      	b.n	800b61a <LmHandlerPackagesProcess+0xa>
 800b616:	3401      	adds	r4, #1
 800b618:	b264      	sxtb	r4, r4
 800b61a:	2c04      	cmp	r4, #4
 800b61c:	dc12      	bgt.n	800b644 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800b61e:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <LmHandlerPackagesProcess+0x38>)
 800b620:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d0f6      	beq.n	800b616 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800b628:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d0f3      	beq.n	800b616 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800b62e:	b2e0      	uxtb	r0, r4
 800b630:	f7ff ff44 	bl	800b4bc <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800b634:	2800      	cmp	r0, #0
 800b636:	d0ee      	beq.n	800b616 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800b638:	4b03      	ldr	r3, [pc, #12]	; (800b648 <LmHandlerPackagesProcess+0x38>)
 800b63a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	4798      	blx	r3
 800b642:	e7e8      	b.n	800b616 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800b644:	bd38      	pop	{r3, r4, r5, pc}
 800b646:	bf00      	nop
 800b648:	20003b48 	.word	0x20003b48

0800b64c <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800b64c:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800b64e:	4b04      	ldr	r3, [pc, #16]	; (800b660 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 800b650:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800b652:	4b04      	ldr	r3, [pc, #16]	; (800b664 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b658:	b103      	cbz	r3, 800b65c <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800b65a:	4798      	blx	r3
    }
}
 800b65c:	bd08      	pop	{r3, pc}
 800b65e:	bf00      	nop
 800b660:	20003b5c 	.word	0x20003b5c
 800b664:	20003b44 	.word	0x20003b44

0800b668 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800b668:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800b66a:	4b04      	ldr	r3, [pc, #16]	; (800b67c <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 800b66c:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800b66e:	4b04      	ldr	r3, [pc, #16]	; (800b680 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b674:	b103      	cbz	r3, 800b678 <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800b676:	4798      	blx	r3
    }
}
 800b678:	bd08      	pop	{r3, pc}
 800b67a:	bf00      	nop
 800b67c:	20003b5c 	.word	0x20003b5c
 800b680:	20003b44 	.word	0x20003b44

0800b684 <LmHandlerJoin>:
{
 800b684:	b530      	push	{r4, r5, lr}
 800b686:	b091      	sub	sp, #68	; 0x44
 800b688:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800b68a:	2301      	movs	r3, #1
 800b68c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800b690:	4b33      	ldr	r3, [pc, #204]	; (800b760 <LmHandlerJoin+0xdc>)
 800b692:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800b696:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800b69a:	f993 1005 	ldrsb.w	r1, [r3, #5]
 800b69e:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 800b6a2:	2802      	cmp	r0, #2
 800b6a4:	d022      	beq.n	800b6ec <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b6a6:	2001      	movs	r0, #1
 800b6a8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800b6ac:	4b2d      	ldr	r3, [pc, #180]	; (800b764 <LmHandlerJoin+0xe0>)
 800b6ae:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800b6b0:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800b6b2:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800b6b8:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 800b6ba:	4b2b      	ldr	r3, [pc, #172]	; (800b768 <LmHandlerJoin+0xe4>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	b1f3      	cbz	r3, 800b6fe <LmHandlerJoin+0x7a>
        LoRaMacStart();
 800b6c0:	f003 fb0c 	bl	800ecdc <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b6ca:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800b6ce:	a801      	add	r0, sp, #4
 800b6d0:	f003 fd5c 	bl	800f18c <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800b6d4:	4b24      	ldr	r3, [pc, #144]	; (800b768 <LmHandlerJoin+0xe4>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	b103      	cbz	r3, 800b6dc <LmHandlerJoin+0x58>
 800b6da:	b114      	cbz	r4, 800b6e2 <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 800b6dc:	a80b      	add	r0, sp, #44	; 0x2c
 800b6de:	f004 f825 	bl	800f72c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800b6e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6e4:	4b21      	ldr	r3, [pc, #132]	; (800b76c <LmHandlerJoin+0xe8>)
 800b6e6:	601a      	str	r2, [r3, #0]
}
 800b6e8:	b011      	add	sp, #68	; 0x44
 800b6ea:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800b6ec:	2202      	movs	r2, #2
 800b6ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800b6f2:	4b1c      	ldr	r3, [pc, #112]	; (800b764 <LmHandlerJoin+0xe0>)
 800b6f4:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800b6f6:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 800b6f8:	f003 faf0 	bl	800ecdc <LoRaMacStart>
 800b6fc:	e7ea      	b.n	800b6d4 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800b6fe:	231f      	movs	r3, #31
 800b700:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800b704:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b708:	a801      	add	r0, sp, #4
 800b70a:	f003 fd3f 	bl	800f18c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800b70e:	2320      	movs	r3, #32
 800b710:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800b714:	4d12      	ldr	r5, [pc, #72]	; (800b760 <LmHandlerJoin+0xdc>)
 800b716:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800b71a:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b71e:	a801      	add	r0, sp, #4
 800b720:	f003 fd34 	bl	800f18c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800b724:	2322      	movs	r3, #34	; 0x22
 800b726:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800b72a:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800b72e:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b732:	a801      	add	r0, sp, #4
 800b734:	f003 fd2a 	bl	800f18c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800b738:	2321      	movs	r3, #33	; 0x21
 800b73a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800b73e:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800b742:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b746:	a801      	add	r0, sp, #4
 800b748:	f003 fd20 	bl	800f18c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800b74c:	2329      	movs	r3, #41	; 0x29
 800b74e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800b752:	4b07      	ldr	r3, [pc, #28]	; (800b770 <LmHandlerJoin+0xec>)
 800b754:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b756:	a801      	add	r0, sp, #4
 800b758:	f003 fd18 	bl	800f18c <LoRaMacMibSetRequestConfirm>
 800b75c:	e7b0      	b.n	800b6c0 <LmHandlerJoin+0x3c>
 800b75e:	bf00      	nop
 800b760:	20003b5c 	.word	0x20003b5c
 800b764:	200000f8 	.word	0x200000f8
 800b768:	20003b38 	.word	0x20003b38
 800b76c:	20003b3c 	.word	0x20003b3c
 800b770:	01000400 	.word	0x01000400

0800b774 <LmHandlerDeviceTimeReq>:
{
 800b774:	b500      	push	{lr}
 800b776:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800b778:	2309      	movs	r3, #9
 800b77a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800b77e:	a801      	add	r0, sp, #4
 800b780:	f003 ffd4 	bl	800f72c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800b784:	9a05      	ldr	r2, [sp, #20]
 800b786:	4b04      	ldr	r3, [pc, #16]	; (800b798 <LmHandlerDeviceTimeReq+0x24>)
 800b788:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800b78a:	b910      	cbnz	r0, 800b792 <LmHandlerDeviceTimeReq+0x1e>
}
 800b78c:	b007      	add	sp, #28
 800b78e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800b792:	f04f 30ff 	mov.w	r0, #4294967295
 800b796:	e7f9      	b.n	800b78c <LmHandlerDeviceTimeReq+0x18>
 800b798:	20003b3c 	.word	0x20003b3c

0800b79c <LmHandlerGetDutyCycleWaitTime>:
}
 800b79c:	4b01      	ldr	r3, [pc, #4]	; (800b7a4 <LmHandlerGetDutyCycleWaitTime+0x8>)
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	20003b3c 	.word	0x20003b3c

0800b7a8 <LmHandlerJoinStatus>:
{
 800b7a8:	b500      	push	{lr}
 800b7aa:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800b7b2:	4668      	mov	r0, sp
 800b7b4:	f003 fb5c 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800b7b8:	b920      	cbnz	r0, 800b7c4 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b7ba:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b7be:	b110      	cbz	r0, 800b7c6 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800b7c0:	2001      	movs	r0, #1
 800b7c2:	e000      	b.n	800b7c6 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800b7c4:	2000      	movs	r0, #0
}
 800b7c6:	b00b      	add	sp, #44	; 0x2c
 800b7c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800b7cc <LmHandlerIsBusy>:
{
 800b7cc:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 800b7ce:	f003 f833 	bl	800e838 <LoRaMacIsBusy>
 800b7d2:	b100      	cbz	r0, 800b7d6 <LmHandlerIsBusy+0xa>
}
 800b7d4:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800b7d6:	f7ff ffe7 	bl	800b7a8 <LmHandlerJoinStatus>
 800b7da:	2801      	cmp	r0, #1
 800b7dc:	d006      	beq.n	800b7ec <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800b7de:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <LmHandlerIsBusy+0x28>)
 800b7e0:	7a19      	ldrb	r1, [r3, #8]
 800b7e2:	79d8      	ldrb	r0, [r3, #7]
 800b7e4:	f7ff ff4e 	bl	800b684 <LmHandlerJoin>
        return true;
 800b7e8:	2001      	movs	r0, #1
 800b7ea:	e7f3      	b.n	800b7d4 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 800b7ec:	f7ff fef8 	bl	800b5e0 <LmHandlerPackageIsTxPending>
 800b7f0:	e7f0      	b.n	800b7d4 <LmHandlerIsBusy+0x8>
 800b7f2:	bf00      	nop
 800b7f4:	200000f8 	.word	0x200000f8

0800b7f8 <LmHandlerSend>:
{
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	460d      	mov	r5, r1
 800b800:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 800b802:	f003 f819 	bl	800e838 <LoRaMacIsBusy>
 800b806:	2800      	cmp	r0, #0
 800b808:	d168      	bne.n	800b8dc <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 800b80a:	f003 f833 	bl	800e874 <LoRaMacIsStopped>
 800b80e:	2800      	cmp	r0, #0
 800b810:	d167      	bne.n	800b8e2 <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800b812:	f7ff ffc9 	bl	800b7a8 <LmHandlerJoinStatus>
 800b816:	2801      	cmp	r0, #1
 800b818:	d137      	bne.n	800b88a <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 800b81a:	4b35      	ldr	r3, [pc, #212]	; (800b8f0 <LmHandlerSend+0xf8>)
 800b81c:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800b81e:	3d00      	subs	r5, #0
 800b820:	bf18      	it	ne
 800b822:	2501      	movne	r5, #1
 800b824:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800b828:	4b32      	ldr	r3, [pc, #200]	; (800b8f4 <LmHandlerSend+0xfc>)
 800b82a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b82e:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800b832:	4669      	mov	r1, sp
 800b834:	7860      	ldrb	r0, [r4, #1]
 800b836:	f003 fab1 	bl	800ed9c <LoRaMacQueryTxPossible>
 800b83a:	b370      	cbz	r0, 800b89a <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800b83c:	2300      	movs	r3, #0
 800b83e:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800b842:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800b844:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800b848:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800b84c:	4b28      	ldr	r3, [pc, #160]	; (800b8f0 <LmHandlerSend+0xf8>)
 800b84e:	f103 0c10 	add.w	ip, r3, #16
 800b852:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b856:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800b85a:	4a26      	ldr	r2, [pc, #152]	; (800b8f4 <LmHandlerSend+0xfc>)
 800b85c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800b860:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800b862:	4631      	mov	r1, r6
 800b864:	a801      	add	r0, sp, #4
 800b866:	f004 f865 	bl	800f934 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800b86a:	9a05      	ldr	r2, [sp, #20]
 800b86c:	4b22      	ldr	r3, [pc, #136]	; (800b8f8 <LmHandlerSend+0x100>)
 800b86e:	601a      	str	r2, [r3, #0]
    switch( status )
 800b870:	2811      	cmp	r0, #17
 800b872:	d830      	bhi.n	800b8d6 <LmHandlerSend+0xde>
 800b874:	e8df f000 	tbb	[pc, r0]
 800b878:	2f2f1c21 	.word	0x2f2f1c21
 800b87c:	382f2f2f 	.word	0x382f2f2f
 800b880:	2c2f2f2f 	.word	0x2c2f2f2f
 800b884:	1c1c2f2f 	.word	0x1c1c2f2f
 800b888:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800b88a:	4b1c      	ldr	r3, [pc, #112]	; (800b8fc <LmHandlerSend+0x104>)
 800b88c:	7a19      	ldrb	r1, [r3, #8]
 800b88e:	79d8      	ldrb	r0, [r3, #7]
 800b890:	f7ff fef8 	bl	800b684 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b894:	f06f 0502 	mvn.w	r5, #2
 800b898:	e00c      	b.n	800b8b4 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800b89a:	7823      	ldrb	r3, [r4, #0]
 800b89c:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800b8a0:	7863      	ldrb	r3, [r4, #1]
 800b8a2:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800b8a6:	6863      	ldr	r3, [r4, #4]
 800b8a8:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800b8aa:	f04f 35ff 	mov.w	r5, #4294967295
 800b8ae:	e7cd      	b.n	800b84c <LmHandlerSend+0x54>
    switch( status )
 800b8b0:	f06f 0501 	mvn.w	r5, #1
}
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	b006      	add	sp, #24
 800b8b8:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 800b8ba:	4b11      	ldr	r3, [pc, #68]	; (800b900 <LmHandlerSend+0x108>)
 800b8bc:	2200      	movs	r2, #0
 800b8be:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800b8c0:	f115 0f07 	cmn.w	r5, #7
 800b8c4:	d0f6      	beq.n	800b8b4 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800b8c6:	2500      	movs	r5, #0
 800b8c8:	e7f4      	b.n	800b8b4 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800b8ca:	f06f 0504 	mvn.w	r5, #4
            break;
 800b8ce:	e7f1      	b.n	800b8b4 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800b8d0:	f06f 0505 	mvn.w	r5, #5
            break;
 800b8d4:	e7ee      	b.n	800b8b4 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800b8d6:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800b8da:	e7eb      	b.n	800b8b4 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b8dc:	f06f 0501 	mvn.w	r5, #1
 800b8e0:	e7e8      	b.n	800b8b4 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b8e2:	f06f 0502 	mvn.w	r5, #2
 800b8e6:	e7e5      	b.n	800b8b4 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b8e8:	f06f 0502 	mvn.w	r5, #2
 800b8ec:	e7e2      	b.n	800b8b4 <LmHandlerSend+0xbc>
 800b8ee:	bf00      	nop
 800b8f0:	20000118 	.word	0x20000118
 800b8f4:	20003b5c 	.word	0x20003b5c
 800b8f8:	20003b3c 	.word	0x20003b3c
 800b8fc:	200000f8 	.word	0x200000f8
 800b900:	20003b40 	.word	0x20003b40

0800b904 <LmHandlerProcess>:
{
 800b904:	b500      	push	{lr}
 800b906:	b083      	sub	sp, #12
    LoRaMacProcess( );
 800b908:	f002 ffc0 	bl	800e88c <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800b90c:	f7ff fe80 	bl	800b610 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800b910:	f7ff fe66 	bl	800b5e0 <LmHandlerPackageIsTxPending>
 800b914:	b910      	cbnz	r0, 800b91c <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <LmHandlerProcess+0x40>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	b913      	cbnz	r3, 800b922 <LmHandlerProcess+0x1e>
}
 800b91c:	b003      	add	sp, #12
 800b91e:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800b922:	2200      	movs	r2, #0
 800b924:	f88d 2000 	strb.w	r2, [sp]
 800b928:	f88d 2001 	strb.w	r2, [sp, #1]
 800b92c:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800b92e:	4b06      	ldr	r3, [pc, #24]	; (800b948 <LmHandlerProcess+0x44>)
 800b930:	78d9      	ldrb	r1, [r3, #3]
 800b932:	4668      	mov	r0, sp
 800b934:	f7ff ff60 	bl	800b7f8 <LmHandlerSend>
 800b938:	2800      	cmp	r0, #0
 800b93a:	d1ef      	bne.n	800b91c <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800b93c:	4b01      	ldr	r3, [pc, #4]	; (800b944 <LmHandlerProcess+0x40>)
 800b93e:	2200      	movs	r2, #0
 800b940:	701a      	strb	r2, [r3, #0]
 800b942:	e7eb      	b.n	800b91c <LmHandlerProcess+0x18>
 800b944:	20003b40 	.word	0x20003b40
 800b948:	20003b5c 	.word	0x20003b5c

0800b94c <LmHandlerRequestClass>:
{
 800b94c:	b510      	push	{r4, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 800b952:	f002 ff71 	bl	800e838 <LoRaMacIsBusy>
 800b956:	bbb0      	cbnz	r0, 800b9c6 <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800b958:	f7ff ff26 	bl	800b7a8 <LmHandlerJoinStatus>
 800b95c:	2801      	cmp	r0, #1
 800b95e:	d135      	bne.n	800b9cc <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 800b960:	2300      	movs	r3, #0
 800b962:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b966:	4668      	mov	r0, sp
 800b968:	f003 fa82 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
 800b96c:	bb88      	cbnz	r0, 800b9d2 <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 800b96e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 800b972:	42a3      	cmp	r3, r4
 800b974:	d030      	beq.n	800b9d8 <LmHandlerRequestClass+0x8c>
        switch( newClass )
 800b976:	2c01      	cmp	r4, #1
 800b978:	d030      	beq.n	800b9dc <LmHandlerRequestClass+0x90>
 800b97a:	2c02      	cmp	r4, #2
 800b97c:	d014      	beq.n	800b9a8 <LmHandlerRequestClass+0x5c>
 800b97e:	b114      	cbz	r4, 800b986 <LmHandlerRequestClass+0x3a>
 800b980:	2000      	movs	r0, #0
}
 800b982:	b00a      	add	sp, #40	; 0x28
 800b984:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 800b986:	b90b      	cbnz	r3, 800b98c <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b988:	2000      	movs	r0, #0
 800b98a:	e7fa      	b.n	800b982 <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 800b98c:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b990:	4668      	mov	r0, sp
 800b992:	f003 fbfb 	bl	800f18c <LoRaMacMibSetRequestConfirm>
 800b996:	bb20      	cbnz	r0, 800b9e2 <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800b998:	4b18      	ldr	r3, [pc, #96]	; (800b9fc <LmHandlerRequestClass+0xb0>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b99e:	b31b      	cbz	r3, 800b9e8 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	e7ec      	b.n	800b982 <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 800b9a8:	bb03      	cbnz	r3, 800b9ec <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 800b9aa:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b9ae:	4668      	mov	r0, sp
 800b9b0:	f003 fbec 	bl	800f18c <LoRaMacMibSetRequestConfirm>
 800b9b4:	b9e8      	cbnz	r0, 800b9f2 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800b9b6:	4b11      	ldr	r3, [pc, #68]	; (800b9fc <LmHandlerRequestClass+0xb0>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9bc:	b1e3      	cbz	r3, 800b9f8 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800b9be:	4620      	mov	r0, r4
 800b9c0:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	e7dd      	b.n	800b982 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b9c6:	f06f 0001 	mvn.w	r0, #1
 800b9ca:	e7da      	b.n	800b982 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b9cc:	f06f 0002 	mvn.w	r0, #2
 800b9d0:	e7d7      	b.n	800b982 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 800b9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d6:	e7d4      	b.n	800b982 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b9d8:	2000      	movs	r0, #0
 800b9da:	e7d2      	b.n	800b982 <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800b9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e0:	e7cf      	b.n	800b982 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800b9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e6:	e7cc      	b.n	800b982 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	e7ca      	b.n	800b982 <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f0:	e7c7      	b.n	800b982 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800b9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f6:	e7c4      	b.n	800b982 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	e7c2      	b.n	800b982 <LmHandlerRequestClass+0x36>
 800b9fc:	20003b44 	.word	0x20003b44

0800ba00 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 800ba00:	b170      	cbz	r0, 800ba20 <LmHandlerGetCurrentClass+0x20>
{
 800ba02:	b510      	push	{r4, lr}
 800ba04:	b08a      	sub	sp, #40	; 0x28
 800ba06:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ba0e:	4668      	mov	r0, sp
 800ba10:	f003 fa2e 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
 800ba14:	b938      	cbnz	r0, 800ba26 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800ba16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ba1a:	7023      	strb	r3, [r4, #0]
}
 800ba1c:	b00a      	add	sp, #40	; 0x28
 800ba1e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800ba20:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ba24:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800ba26:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2a:	e7f7      	b.n	800ba1c <LmHandlerGetCurrentClass+0x1c>

0800ba2c <McpsIndication>:
{
 800ba2c:	b510      	push	{r4, lr}
 800ba2e:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 800ba30:	2300      	movs	r3, #0
 800ba32:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800ba36:	4a1d      	ldr	r2, [pc, #116]	; (800baac <McpsIndication+0x80>)
 800ba38:	2301      	movs	r3, #1
 800ba3a:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 800ba3c:	7843      	ldrb	r3, [r0, #1]
 800ba3e:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d131      	bne.n	800baa8 <McpsIndication+0x7c>
 800ba44:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ba46:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800ba4a:	4b18      	ldr	r3, [pc, #96]	; (800baac <McpsIndication+0x80>)
 800ba4c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ba4e:	f9b1 2000 	ldrsh.w	r2, [r1]
 800ba52:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ba54:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800ba58:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ba5a:	78ca      	ldrb	r2, [r1, #3]
 800ba5c:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ba5e:	6902      	ldr	r2, [r0, #16]
 800ba60:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 800ba62:	78c3      	ldrb	r3, [r0, #3]
 800ba64:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ba68:	7b03      	ldrb	r3, [r0, #12]
 800ba6a:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800ba6e:	6883      	ldr	r3, [r0, #8]
 800ba70:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 800ba72:	4b0f      	ldr	r3, [pc, #60]	; (800bab0 <McpsIndication+0x84>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	b113      	cbz	r3, 800ba80 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ba7a:	490c      	ldr	r1, [pc, #48]	; (800baac <McpsIndication+0x80>)
 800ba7c:	a802      	add	r0, sp, #8
 800ba7e:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ba80:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <McpsIndication+0x84>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba86:	b113      	cbz	r3, 800ba8e <McpsIndication+0x62>
 800ba88:	7e22      	ldrb	r2, [r4, #24]
 800ba8a:	b102      	cbz	r2, 800ba8e <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ba8c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ba8e:	4621      	mov	r1, r4
 800ba90:	2001      	movs	r0, #1
 800ba92:	f7ff fd23 	bl	800b4dc <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800ba96:	f10d 0007 	add.w	r0, sp, #7
 800ba9a:	f7ff ffb1 	bl	800ba00 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ba9e:	7963      	ldrb	r3, [r4, #5]
 800baa0:	b113      	cbz	r3, 800baa8 <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 800baa2:	4b04      	ldr	r3, [pc, #16]	; (800bab4 <McpsIndication+0x88>)
 800baa4:	2201      	movs	r2, #1
 800baa6:	701a      	strb	r2, [r3, #0]
}
 800baa8:	b004      	add	sp, #16
 800baaa:	bd10      	pop	{r4, pc}
 800baac:	20000104 	.word	0x20000104
 800bab0:	20003b44 	.word	0x20003b44
 800bab4:	20003b40 	.word	0x20003b40

0800bab8 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 800bab8:	b180      	cbz	r0, 800badc <LmHandlerGetTxDatarate+0x24>
{
 800baba:	b510      	push	{r4, lr}
 800babc:	b08a      	sub	sp, #40	; 0x28
 800babe:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800bac0:	2320      	movs	r3, #32
 800bac2:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800bac6:	4668      	mov	r0, sp
 800bac8:	f003 f9d2 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
 800bacc:	b948      	cbnz	r0, 800bae2 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800bace:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800bad2:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800bad4:	4a04      	ldr	r2, [pc, #16]	; (800bae8 <LmHandlerGetTxDatarate+0x30>)
 800bad6:	7113      	strb	r3, [r2, #4]
}
 800bad8:	b00a      	add	sp, #40	; 0x28
 800bada:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800badc:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bae0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800bae2:	f04f 30ff 	mov.w	r0, #4294967295
 800bae6:	e7f7      	b.n	800bad8 <LmHandlerGetTxDatarate+0x20>
 800bae8:	20003b5c 	.word	0x20003b5c

0800baec <LmHandlerSetSystemMaxRxError>:
{
 800baec:	b500      	push	{lr}
 800baee:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800baf0:	2323      	movs	r3, #35	; 0x23
 800baf2:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800baf6:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800baf8:	4668      	mov	r0, sp
 800bafa:	f003 fb47 	bl	800f18c <LoRaMacMibSetRequestConfirm>
 800bafe:	b910      	cbnz	r0, 800bb06 <LmHandlerSetSystemMaxRxError+0x1a>
}
 800bb00:	b00b      	add	sp, #44	; 0x2c
 800bb02:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800bb06:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0a:	e7f9      	b.n	800bb00 <LmHandlerSetSystemMaxRxError+0x14>

0800bb0c <LmHandlerConfigure>:
{
 800bb0c:	b570      	push	{r4, r5, r6, lr}
 800bb0e:	b08e      	sub	sp, #56	; 0x38
 800bb10:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800bb12:	4c6d      	ldr	r4, [pc, #436]	; (800bcc8 <LmHandlerConfigure+0x1bc>)
 800bb14:	2218      	movs	r2, #24
 800bb16:	4620      	mov	r0, r4
 800bb18:	f008 f963 	bl	8013de2 <memcpy1>
    IsUplinkTxPending = false;
 800bb1c:	4b6b      	ldr	r3, [pc, #428]	; (800bccc <LmHandlerConfigure+0x1c0>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 800bb22:	f7f7 fd27 	bl	8003574 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800bb26:	7822      	ldrb	r2, [r4, #0]
 800bb28:	2301      	movs	r3, #1
 800bb2a:	4093      	lsls	r3, r2
 800bb2c:	6841      	ldr	r1, [r0, #4]
 800bb2e:	420b      	tst	r3, r1
 800bb30:	d106      	bne.n	800bb40 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800bb32:	4b67      	ldr	r3, [pc, #412]	; (800bcd0 <LmHandlerConfigure+0x1c4>)
 800bb34:	2201      	movs	r2, #1
 800bb36:	2100      	movs	r1, #0
 800bb38:	4608      	mov	r0, r1
 800bb3a:	f00a f82f 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800bb3e:	e7fe      	b.n	800bb3e <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800bb40:	4964      	ldr	r1, [pc, #400]	; (800bcd4 <LmHandlerConfigure+0x1c8>)
 800bb42:	4865      	ldr	r0, [pc, #404]	; (800bcd8 <LmHandlerConfigure+0x1cc>)
 800bb44:	f002 feea 	bl	800e91c <LoRaMacInitialization>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	f040 80b7 	bne.w	800bcbc <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 800bb4e:	2327      	movs	r3, #39	; 0x27
 800bb50:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800bb54:	a804      	add	r0, sp, #16
 800bb56:	f003 fb19 	bl	800f18c <LoRaMacMibSetRequestConfirm>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d17c      	bne.n	800bc58 <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 800bb5e:	4b5f      	ldr	r3, [pc, #380]	; (800bcdc <LmHandlerConfigure+0x1d0>)
 800bb60:	2201      	movs	r2, #1
 800bb62:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 800bb64:	4b5d      	ldr	r3, [pc, #372]	; (800bcdc <LmHandlerConfigure+0x1d0>)
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f000 809e 	beq.w	800bcaa <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800bb6e:	4b5c      	ldr	r3, [pc, #368]	; (800bce0 <LmHandlerConfigure+0x1d4>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	b10b      	cbz	r3, 800bb7a <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800bb76:	2000      	movs	r0, #0
 800bb78:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800bb7a:	2327      	movs	r3, #39	; 0x27
 800bb7c:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800bb80:	a804      	add	r0, sp, #16
 800bb82:	f003 f975 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800bb86:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800bb88:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 800bb8c:	4b4e      	ldr	r3, [pc, #312]	; (800bcc8 <LmHandlerConfigure+0x1bc>)
 800bb8e:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800bb90:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 800bb94:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800bb96:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 800bb9a:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800bb9c:	4b4d      	ldr	r3, [pc, #308]	; (800bcd4 <LmHandlerConfigure+0x1c8>)
 800bb9e:	68d9      	ldr	r1, [r3, #12]
 800bba0:	6898      	ldr	r0, [r3, #8]
 800bba2:	f008 f831 	bl	8013c08 <SecureElementInitMcuID>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	f040 808b 	bne.w	800bcc2 <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 800bbac:	2306      	movs	r3, #6
 800bbae:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800bbb2:	a804      	add	r0, sp, #16
 800bbb4:	f003 f95c 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800bbb8:	4c4a      	ldr	r4, [pc, #296]	; (800bce4 <LmHandlerConfigure+0x1d8>)
 800bbba:	9b05      	ldr	r3, [sp, #20]
 800bbbc:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bbbe:	a804      	add	r0, sp, #16
 800bbc0:	f003 fae4 	bl	800f18c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800bbca:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800bbcc:	a804      	add	r0, sp, #16
 800bbce:	f003 f94f 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 800bbd2:	2303      	movs	r3, #3
 800bbd4:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800bbd8:	3408      	adds	r4, #8
 800bbda:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800bbdc:	a804      	add	r0, sp, #16
 800bbde:	f003 f947 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 800bbe2:	f008 f8ab 	bl	8013d3c <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800bbe6:	260f      	movs	r6, #15
 800bbe8:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800bbec:	2301      	movs	r3, #1
 800bbee:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bbf2:	a804      	add	r0, sp, #16
 800bbf4:	f003 faca 	bl	800f18c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800bbf8:	2310      	movs	r3, #16
 800bbfa:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800bbfe:	2500      	movs	r5, #0
 800bc00:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bc04:	eb0d 0003 	add.w	r0, sp, r3
 800bc08:	f003 fac0 	bl	800f18c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800bc0c:	2304      	movs	r3, #4
 800bc0e:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800bc12:	4c2d      	ldr	r4, [pc, #180]	; (800bcc8 <LmHandlerConfigure+0x1bc>)
 800bc14:	78a3      	ldrb	r3, [r4, #2]
 800bc16:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bc1a:	a804      	add	r0, sp, #16
 800bc1c:	f003 fab6 	bl	800f18c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800bc20:	233a      	movs	r3, #58	; 0x3a
 800bc22:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800bc26:	6963      	ldr	r3, [r4, #20]
 800bc28:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bc2a:	a804      	add	r0, sp, #16
 800bc2c:	f003 faae 	bl	800f18c <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800bc30:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800bc34:	a902      	add	r1, sp, #8
 800bc36:	7820      	ldrb	r0, [r4, #0]
 800bc38:	f005 f81f 	bl	8010c7a <RegionGetPhyParam>
 800bc3c:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800bc3e:	1b43      	subs	r3, r0, r5
 800bc40:	bf18      	it	ne
 800bc42:	2301      	movne	r3, #1
 800bc44:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 800bc46:	2014      	movs	r0, #20
 800bc48:	f7ff ff50 	bl	800baec <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800bc4c:	79e0      	ldrb	r0, [r4, #7]
 800bc4e:	f003 ff5f 	bl	800fb10 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800bc52:	4628      	mov	r0, r5
}
 800bc54:	b00e      	add	sp, #56	; 0x38
 800bc56:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800bc58:	2328      	movs	r3, #40	; 0x28
 800bc5a:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800bc5e:	4b20      	ldr	r3, [pc, #128]	; (800bce0 <LmHandlerConfigure+0x1d4>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	b14b      	cbz	r3, 800bc7a <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800bc66:	a804      	add	r0, sp, #16
 800bc68:	f003 f902 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800bc6c:	4b1c      	ldr	r3, [pc, #112]	; (800bce0 <LmHandlerConfigure+0x1d4>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	f240 51d4 	movw	r1, #1492	; 0x5d4
 800bc76:	9805      	ldr	r0, [sp, #20]
 800bc78:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800bc7a:	2327      	movs	r3, #39	; 0x27
 800bc7c:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800bc80:	a804      	add	r0, sp, #16
 800bc82:	f003 fa83 	bl	800f18c <LoRaMacMibSetRequestConfirm>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	f47f af6c 	bne.w	800bb64 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800bc92:	a804      	add	r0, sp, #16
 800bc94:	f003 f8ec 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800bc98:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f43f af61 	beq.w	800bb64 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 800bca2:	4b0e      	ldr	r3, [pc, #56]	; (800bcdc <LmHandlerConfigure+0x1d0>)
 800bca4:	2201      	movs	r2, #1
 800bca6:	701a      	strb	r2, [r3, #0]
 800bca8:	e75c      	b.n	800bb64 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 800bcaa:	2305      	movs	r3, #5
 800bcac:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800bcb4:	a804      	add	r0, sp, #16
 800bcb6:	f003 fa69 	bl	800f18c <LoRaMacMibSetRequestConfirm>
 800bcba:	e76f      	b.n	800bb9c <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 800bcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc0:	e7c8      	b.n	800bc54 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 800bcc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc6:	e7c5      	b.n	800bc54 <LmHandlerConfigure+0x148>
 800bcc8:	20003b5c 	.word	0x20003b5c
 800bccc:	20003b40 	.word	0x20003b40
 800bcd0:	08018070 	.word	0x08018070
 800bcd4:	20003b84 	.word	0x20003b84
 800bcd8:	20003b9c 	.word	0x20003b9c
 800bcdc:	20003b38 	.word	0x20003b38
 800bce0:	20003b44 	.word	0x20003b44
 800bce4:	20003b20 	.word	0x20003b20

0800bce8 <LmHandlerPackageRegister>:
{
 800bce8:	b530      	push	{r4, r5, lr}
 800bcea:	b083      	sub	sp, #12
 800bcec:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	9301      	str	r3, [sp, #4]
    switch( id )
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	b9d8      	cbnz	r0, 800bd2e <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 800bcf6:	f000 fc1b 	bl	800c530 <LmhpCompliancePackageFactory>
 800bcfa:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	b1f3      	cbz	r3, 800bd3e <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 800bd00:	4a10      	ldr	r2, [pc, #64]	; (800bd44 <LmHandlerPackageRegister+0x5c>)
 800bd02:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800bd06:	4a10      	ldr	r2, [pc, #64]	; (800bd48 <LmHandlerPackageRegister+0x60>)
 800bd08:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800bd0a:	4a10      	ldr	r2, [pc, #64]	; (800bd4c <LmHandlerPackageRegister+0x64>)
 800bd0c:	6812      	ldr	r2, [r2, #0]
 800bd0e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800bd10:	6319      	str	r1, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800bd12:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800bd14:	6359      	str	r1, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800bd16:	490e      	ldr	r1, [pc, #56]	; (800bd50 <LmHandlerPackageRegister+0x68>)
 800bd18:	62d9      	str	r1, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800bd1a:	6992      	ldr	r2, [r2, #24]
 800bd1c:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	22f2      	movs	r2, #242	; 0xf2
 800bd22:	490c      	ldr	r1, [pc, #48]	; (800bd54 <LmHandlerPackageRegister+0x6c>)
 800bd24:	4628      	mov	r0, r5
 800bd26:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800bd28:	2000      	movs	r0, #0
}
 800bd2a:	b003      	add	sp, #12
 800bd2c:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800bd2e:	a901      	add	r1, sp, #4
 800bd30:	f000 fc04 	bl	800c53c <LmhpPackagesRegister>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d0e1      	beq.n	800bcfc <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 800bd38:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3c:	e7f5      	b.n	800bd2a <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 800bd3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd42:	e7f2      	b.n	800bd2a <LmHandlerPackageRegister+0x42>
 800bd44:	20003b48 	.word	0x20003b48
 800bd48:	0800b685 	.word	0x0800b685
 800bd4c:	20003b44 	.word	0x20003b44
 800bd50:	0800b775 	.word	0x0800b775
 800bd54:	20003a2c 	.word	0x20003a2c

0800bd58 <LmHandlerInit>:
{
 800bd58:	b500      	push	{lr}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800bd5e:	4b19      	ldr	r3, [pc, #100]	; (800bdc4 <LmHandlerInit+0x6c>)
 800bd60:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bd62:	4b19      	ldr	r3, [pc, #100]	; (800bdc8 <LmHandlerInit+0x70>)
 800bd64:	4a19      	ldr	r2, [pc, #100]	; (800bdcc <LmHandlerInit+0x74>)
 800bd66:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800bd68:	4a19      	ldr	r2, [pc, #100]	; (800bdd0 <LmHandlerInit+0x78>)
 800bd6a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800bd6c:	4a19      	ldr	r2, [pc, #100]	; (800bdd4 <LmHandlerInit+0x7c>)
 800bd6e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800bd70:	4a19      	ldr	r2, [pc, #100]	; (800bdd8 <LmHandlerInit+0x80>)
 800bd72:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800bd74:	6802      	ldr	r2, [r0, #0]
 800bd76:	4b19      	ldr	r3, [pc, #100]	; (800bddc <LmHandlerInit+0x84>)
 800bd78:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800bd7a:	6842      	ldr	r2, [r0, #4]
 800bd7c:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800bd7e:	6882      	ldr	r2, [r0, #8]
 800bd80:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800bd82:	68c2      	ldr	r2, [r0, #12]
 800bd84:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800bd86:	4a16      	ldr	r2, [pc, #88]	; (800bde0 <LmHandlerInit+0x88>)
 800bd88:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800bd8a:	6982      	ldr	r2, [r0, #24]
 800bd8c:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800bd8e:	4b15      	ldr	r3, [pc, #84]	; (800bde4 <LmHandlerInit+0x8c>)
 800bd90:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800bd92:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bd94:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800bd96:	4a14      	ldr	r2, [pc, #80]	; (800bde8 <LmHandlerInit+0x90>)
 800bd98:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800bd9a:	4a14      	ldr	r2, [pc, #80]	; (800bdec <LmHandlerInit+0x94>)
 800bd9c:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800bd9e:	4619      	mov	r1, r3
 800bda0:	2000      	movs	r0, #0
 800bda2:	f7ff ffa1 	bl	800bce8 <LmHandlerPackageRegister>
 800bda6:	b930      	cbnz	r0, 800bdb6 <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800bda8:	a801      	add	r0, sp, #4
 800bdaa:	f000 fbc5 	bl	800c538 <LmhpPackagesRegistrationInit>
 800bdae:	b928      	cbnz	r0, 800bdbc <LmHandlerInit+0x64>
}
 800bdb0:	b003      	add	sp, #12
 800bdb2:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800bdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdba:	e7f9      	b.n	800bdb0 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc0:	e7f6      	b.n	800bdb0 <LmHandlerInit+0x58>
 800bdc2:	bf00      	nop
 800bdc4:	20003b44 	.word	0x20003b44
 800bdc8:	20003b9c 	.word	0x20003b9c
 800bdcc:	0800b59d 	.word	0x0800b59d
 800bdd0:	0800ba2d 	.word	0x0800ba2d
 800bdd4:	0800be71 	.word	0x0800be71
 800bdd8:	0800b549 	.word	0x0800b549
 800bddc:	20003b84 	.word	0x20003b84
 800bde0:	08010c25 	.word	0x08010c25
 800bde4:	20003b74 	.word	0x20003b74
 800bde8:	0800b64d 	.word	0x0800b64d
 800bdec:	0800b669 	.word	0x0800b669

0800bdf0 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 800bdf0:	b161      	cbz	r1, 800be0c <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800bdf2:	b118      	cbz	r0, 800bdfc <LmHandlerGetVersion+0xc>
 800bdf4:	2801      	cmp	r0, #1
 800bdf6:	d005      	beq.n	800be04 <LmHandlerGetVersion+0x14>
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800bdfc:	4a05      	ldr	r2, [pc, #20]	; (800be14 <LmHandlerGetVersion+0x24>)
 800bdfe:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800be00:	2000      	movs	r0, #0
            break;
 800be02:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800be04:	4a04      	ldr	r2, [pc, #16]	; (800be18 <LmHandlerGetVersion+0x28>)
 800be06:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800be08:	2000      	movs	r0, #0
            break;
 800be0a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800be0c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	01000400 	.word	0x01000400
 800be18:	02010001 	.word	0x02010001

0800be1c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800be1c:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800be1e:	f003 fe95 	bl	800fb4c <LoRaMacDeInitialization>
 800be22:	b900      	cbnz	r0, 800be26 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800be24:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800be26:	f06f 0001 	mvn.w	r0, #1
 800be2a:	e7fb      	b.n	800be24 <LmHandlerStop+0x8>

0800be2c <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800be2c:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800be2e:	f002 ff83 	bl	800ed38 <LoRaMacHalt>
 800be32:	b900      	cbnz	r0, 800be36 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800be34:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800be36:	f06f 0001 	mvn.w	r0, #1
 800be3a:	e7fb      	b.n	800be34 <LmHandlerHalt+0x8>

0800be3c <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800be3c:	b180      	cbz	r0, 800be60 <LmHandlerGetTxPower+0x24>
{
 800be3e:	b510      	push	{r4, lr}
 800be40:	b08a      	sub	sp, #40	; 0x28
 800be42:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800be44:	2321      	movs	r3, #33	; 0x21
 800be46:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800be4a:	4668      	mov	r0, sp
 800be4c:	f003 f810 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
 800be50:	b948      	cbnz	r0, 800be66 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800be52:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800be56:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 800be58:	4a04      	ldr	r2, [pc, #16]	; (800be6c <LmHandlerGetTxPower+0x30>)
 800be5a:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 800be5c:	b00a      	add	sp, #40	; 0x28
 800be5e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800be60:	f04f 30ff 	mov.w	r0, #4294967295
}
 800be64:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800be66:	f04f 30ff 	mov.w	r0, #4294967295
 800be6a:	e7f7      	b.n	800be5c <LmHandlerGetTxPower+0x20>
 800be6c:	20003b5c 	.word	0x20003b5c

0800be70 <MlmeConfirm>:
{
 800be70:	b510      	push	{r4, lr}
 800be72:	b08a      	sub	sp, #40	; 0x28
 800be74:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800be76:	4b2c      	ldr	r3, [pc, #176]	; (800bf28 <MlmeConfirm+0xb8>)
 800be78:	2200      	movs	r2, #0
 800be7a:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800be7c:	7842      	ldrb	r2, [r0, #1]
 800be7e:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800be80:	4b2a      	ldr	r3, [pc, #168]	; (800bf2c <MlmeConfirm+0xbc>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be86:	b10b      	cbz	r3, 800be8c <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800be88:	4827      	ldr	r0, [pc, #156]	; (800bf28 <MlmeConfirm+0xb8>)
 800be8a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800be8c:	4621      	mov	r1, r4
 800be8e:	2002      	movs	r0, #2
 800be90:	f7ff fb24 	bl	800b4dc <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 800be94:	7823      	ldrb	r3, [r4, #0]
 800be96:	2b05      	cmp	r3, #5
 800be98:	d037      	beq.n	800bf0a <MlmeConfirm+0x9a>
 800be9a:	2b0b      	cmp	r3, #11
 800be9c:	d03d      	beq.n	800bf1a <MlmeConfirm+0xaa>
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d001      	beq.n	800bea6 <MlmeConfirm+0x36>
}
 800bea2:	b00a      	add	sp, #40	; 0x28
 800bea4:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 800bea6:	2306      	movs	r3, #6
 800bea8:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800beac:	4668      	mov	r0, sp
 800beae:	f002 ffdf 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800beb2:	9901      	ldr	r1, [sp, #4]
 800beb4:	4b1e      	ldr	r3, [pc, #120]	; (800bf30 <MlmeConfirm+0xc0>)
 800beb6:	79d8      	ldrb	r0, [r3, #7]
 800beb8:	f007 fe84 	bl	8013bc4 <SecureElementSetDevAddr>
 800bebc:	b910      	cbnz	r0, 800bec4 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800bebe:	9a01      	ldr	r2, [sp, #4]
 800bec0:	4b1c      	ldr	r3, [pc, #112]	; (800bf34 <MlmeConfirm+0xc4>)
 800bec2:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800bec4:	4c1a      	ldr	r4, [pc, #104]	; (800bf30 <MlmeConfirm+0xc0>)
 800bec6:	1d20      	adds	r0, r4, #4
 800bec8:	f7ff fdf6 	bl	800bab8 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800becc:	1d60      	adds	r0, r4, #5
 800bece:	f7ff ffb5 	bl	800be3c <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800bed2:	4b15      	ldr	r3, [pc, #84]	; (800bf28 <MlmeConfirm+0xb8>)
 800bed4:	785b      	ldrb	r3, [r3, #1]
 800bed6:	b18b      	cbz	r3, 800befc <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800bed8:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <MlmeConfirm+0xc0>)
 800beda:	22ff      	movs	r2, #255	; 0xff
 800bedc:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800bede:	4b13      	ldr	r3, [pc, #76]	; (800bf2c <MlmeConfirm+0xbc>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	b10b      	cbz	r3, 800beea <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800bee6:	4812      	ldr	r0, [pc, #72]	; (800bf30 <MlmeConfirm+0xc0>)
 800bee8:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800beea:	4b0f      	ldr	r3, [pc, #60]	; (800bf28 <MlmeConfirm+0xb8>)
 800beec:	785b      	ldrb	r3, [r3, #1]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1d7      	bne.n	800bea2 <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800bef2:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <MlmeConfirm+0xc0>)
 800bef4:	79d8      	ldrb	r0, [r3, #7]
 800bef6:	f007 ff33 	bl	8013d60 <SecureElementPrintSessionKeys>
            break;
 800befa:	e7d2      	b.n	800bea2 <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800befc:	2200      	movs	r2, #0
 800befe:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800bf00:	4b0d      	ldr	r3, [pc, #52]	; (800bf38 <MlmeConfirm+0xc8>)
 800bf02:	7858      	ldrb	r0, [r3, #1]
 800bf04:	f7ff fd22 	bl	800b94c <LmHandlerRequestClass>
 800bf08:	e7e9      	b.n	800bede <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 800bf0a:	4b0c      	ldr	r3, [pc, #48]	; (800bf3c <MlmeConfirm+0xcc>)
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800bf10:	7a22      	ldrb	r2, [r4, #8]
 800bf12:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800bf14:	7a62      	ldrb	r2, [r4, #9]
 800bf16:	74da      	strb	r2, [r3, #19]
            break;
 800bf18:	e7c3      	b.n	800bea2 <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800bf1a:	7863      	ldrb	r3, [r4, #1]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d0c0      	beq.n	800bea2 <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 800bf20:	f7ff fc28 	bl	800b774 <LmHandlerDeviceTimeReq>
}
 800bf24:	e7bd      	b.n	800bea2 <MlmeConfirm+0x32>
 800bf26:	bf00      	nop
 800bf28:	20000118 	.word	0x20000118
 800bf2c:	20003b44 	.word	0x20003b44
 800bf30:	200000f8 	.word	0x200000f8
 800bf34:	20003b20 	.word	0x20003b20
 800bf38:	20003b5c 	.word	0x20003b5c
 800bf3c:	20000104 	.word	0x20000104

0800bf40 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800bf40:	b510      	push	{r4, lr}
 800bf42:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800bf44:	f7ff ff72 	bl	800be2c <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800bf48:	4604      	mov	r4, r0
 800bf4a:	b148      	cbz	r0, 800bf60 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800bf4c:	b92c      	cbnz	r4, 800bf5a <LmHandlerNvmDataStore+0x1a>
 800bf4e:	4b18      	ldr	r3, [pc, #96]	; (800bfb0 <LmHandlerNvmDataStore+0x70>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	69db      	ldr	r3, [r3, #28]
 800bf54:	b10b      	cbz	r3, 800bf5a <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800bf56:	2001      	movs	r0, #1
 800bf58:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	b00a      	add	sp, #40	; 0x28
 800bf5e:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800bf60:	f004 fe68 	bl	8010c34 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 800bf64:	f110 0f02 	cmn.w	r0, #2
 800bf68:	d012      	beq.n	800bf90 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800bf6a:	b9d0      	cbnz	r0, 800bfa2 <LmHandlerNvmDataStore+0x62>
 800bf6c:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <LmHandlerNvmDataStore+0x70>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	b1cb      	cbz	r3, 800bfa8 <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 800bf74:	2327      	movs	r3, #39	; 0x27
 800bf76:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800bf7a:	4668      	mov	r0, sp
 800bf7c:	f002 ff78 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800bf80:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <LmHandlerNvmDataStore+0x70>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	695b      	ldr	r3, [r3, #20]
 800bf86:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
 800bf8a:	9801      	ldr	r0, [sp, #4]
 800bf8c:	4798      	blx	r3
 800bf8e:	e001      	b.n	800bf94 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800bf90:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800bf94:	f004 fe5e 	bl	8010c54 <NvmDataMgmtStoreEnd>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d0d7      	beq.n	800bf4c <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800bf9c:	f04f 34ff 	mov.w	r4, #4294967295
 800bfa0:	e7db      	b.n	800bf5a <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800bfa2:	f04f 34ff 	mov.w	r4, #4294967295
 800bfa6:	e7f5      	b.n	800bf94 <LmHandlerNvmDataStore+0x54>
 800bfa8:	f04f 34ff 	mov.w	r4, #4294967295
 800bfac:	e7f2      	b.n	800bf94 <LmHandlerNvmDataStore+0x54>
 800bfae:	bf00      	nop
 800bfb0:	20003b44 	.word	0x20003b44

0800bfb4 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800bfb4:	4b01      	ldr	r3, [pc, #4]	; (800bfbc <LmhpComplianceIsInitialized+0x8>)
 800bfb6:	7818      	ldrb	r0, [r3, #0]
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	20003bb0 	.word	0x20003bb0

0800bfc0 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800bfc0:	4b01      	ldr	r3, [pc, #4]	; (800bfc8 <LmhpComplianceIsTxPending+0x8>)
 800bfc2:	7858      	ldrb	r0, [r3, #1]
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	20003bb0 	.word	0x20003bb0

0800bfcc <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800bfcc:	4770      	bx	lr

0800bfce <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800bfce:	4770      	bx	lr

0800bfd0 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800bfd0:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 800bfd2:	4b05      	ldr	r3, [pc, #20]	; (800bfe8 <OnProcessTimer+0x18>)
 800bfd4:	7a9b      	ldrb	r3, [r3, #10]
 800bfd6:	b113      	cbz	r3, 800bfde <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 800bfd8:	4b03      	ldr	r3, [pc, #12]	; (800bfe8 <OnProcessTimer+0x18>)
 800bfda:	2201      	movs	r2, #1
 800bfdc:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800bfde:	4b03      	ldr	r3, [pc, #12]	; (800bfec <OnProcessTimer+0x1c>)
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	b103      	cbz	r3, 800bfe6 <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 800bfe4:	4798      	blx	r3
    }
}
 800bfe6:	bd08      	pop	{r3, pc}
 800bfe8:	20003bb0 	.word	0x20003bb0
 800bfec:	20000134 	.word	0x20000134

0800bff0 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800bff0:	4b8c      	ldr	r3, [pc, #560]	; (800c224 <LmhpComplianceOnMcpsIndication+0x234>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 8205 	beq.w	800c404 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800bffa:	78c3      	ldrb	r3, [r0, #3]
 800bffc:	b90b      	cbnz	r3, 800c002 <LmhpComplianceOnMcpsIndication+0x12>
 800bffe:	7b83      	ldrb	r3, [r0, #14]
 800c000:	b11b      	cbz	r3, 800c00a <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800c002:	4a88      	ldr	r2, [pc, #544]	; (800c224 <LmhpComplianceOnMcpsIndication+0x234>)
 800c004:	8a13      	ldrh	r3, [r2, #16]
 800c006:	3301      	adds	r3, #1
 800c008:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800c00a:	7b43      	ldrb	r3, [r0, #13]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 81f9 	beq.w	800c404 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800c012:	78c3      	ldrb	r3, [r0, #3]
 800c014:	2be0      	cmp	r3, #224	; 0xe0
 800c016:	f040 81f5 	bne.w	800c404 <LmhpComplianceOnMcpsIndication+0x414>
{
 800c01a:	b570      	push	{r4, r5, r6, lr}
 800c01c:	b096      	sub	sp, #88	; 0x58
    ComplianceTestState.DataBufferSize = 0;
 800c01e:	4b81      	ldr	r3, [pc, #516]	; (800c224 <LmhpComplianceOnMcpsIndication+0x234>)
 800c020:	2200      	movs	r2, #0
 800c022:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 800c024:	6884      	ldr	r4, [r0, #8]
 800c026:	7823      	ldrb	r3, [r4, #0]
 800c028:	2b7f      	cmp	r3, #127	; 0x7f
 800c02a:	f200 8093 	bhi.w	800c154 <LmhpComplianceOnMcpsIndication+0x164>
 800c02e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c032:	0080      	.short	0x0080
 800c034:	00a2009d 	.word	0x00a2009d
 800c038:	00b200aa 	.word	0x00b200aa
 800c03c:	00c600bf 	.word	0x00c600bf
 800c040:	00f000df 	.word	0x00f000df
 800c044:	0131011d 	.word	0x0131011d
 800c048:	00910091 	.word	0x00910091
 800c04c:	00910091 	.word	0x00910091
 800c050:	00910091 	.word	0x00910091
 800c054:	00910091 	.word	0x00910091
 800c058:	00910091 	.word	0x00910091
 800c05c:	00910091 	.word	0x00910091
 800c060:	00910091 	.word	0x00910091
 800c064:	00910091 	.word	0x00910091
 800c068:	00910091 	.word	0x00910091
 800c06c:	00910091 	.word	0x00910091
 800c070:	01350091 	.word	0x01350091
 800c074:	0140013c 	.word	0x0140013c
 800c078:	00910091 	.word	0x00910091
 800c07c:	00910091 	.word	0x00910091
 800c080:	00910091 	.word	0x00910091
 800c084:	00910091 	.word	0x00910091
 800c088:	00910091 	.word	0x00910091
 800c08c:	00910091 	.word	0x00910091
 800c090:	00910091 	.word	0x00910091
 800c094:	00910091 	.word	0x00910091
 800c098:	00910091 	.word	0x00910091
 800c09c:	00910091 	.word	0x00910091
 800c0a0:	00910091 	.word	0x00910091
 800c0a4:	00910091 	.word	0x00910091
 800c0a8:	00910091 	.word	0x00910091
 800c0ac:	00910091 	.word	0x00910091
 800c0b0:	00910091 	.word	0x00910091
 800c0b4:	00910091 	.word	0x00910091
 800c0b8:	00910091 	.word	0x00910091
 800c0bc:	00910091 	.word	0x00910091
 800c0c0:	00910091 	.word	0x00910091
 800c0c4:	00910091 	.word	0x00910091
 800c0c8:	00910091 	.word	0x00910091
 800c0cc:	00910091 	.word	0x00910091
 800c0d0:	00910091 	.word	0x00910091
 800c0d4:	00910091 	.word	0x00910091
 800c0d8:	00910091 	.word	0x00910091
 800c0dc:	00910091 	.word	0x00910091
 800c0e0:	00910091 	.word	0x00910091
 800c0e4:	00910091 	.word	0x00910091
 800c0e8:	00910091 	.word	0x00910091
 800c0ec:	00910091 	.word	0x00910091
 800c0f0:	00910091 	.word	0x00910091
 800c0f4:	00910091 	.word	0x00910091
 800c0f8:	00910091 	.word	0x00910091
 800c0fc:	00910091 	.word	0x00910091
 800c100:	00910091 	.word	0x00910091
 800c104:	00910091 	.word	0x00910091
 800c108:	00910091 	.word	0x00910091
 800c10c:	00910091 	.word	0x00910091
 800c110:	00910091 	.word	0x00910091
 800c114:	00910091 	.word	0x00910091
 800c118:	00910091 	.word	0x00910091
 800c11c:	00910091 	.word	0x00910091
 800c120:	00910091 	.word	0x00910091
 800c124:	00910091 	.word	0x00910091
 800c128:	00910091 	.word	0x00910091
 800c12c:	016c014b 	.word	0x016c014b
 800c130:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800c132:	4b3c      	ldr	r3, [pc, #240]	; (800c224 <LmhpComplianceOnMcpsIndication+0x234>)
 800c134:	68da      	ldr	r2, [r3, #12]
 800c136:	2101      	movs	r1, #1
 800c138:	7299      	strb	r1, [r3, #10]
 800c13a:	2000      	movs	r0, #0
 800c13c:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800c13e:	68d8      	ldr	r0, [r3, #12]
 800c140:	7a9a      	ldrb	r2, [r3, #10]
 800c142:	1854      	adds	r4, r2, r1
 800c144:	729c      	strb	r4, [r3, #10]
 800c146:	2406      	movs	r4, #6
 800c148:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800c14a:	68d8      	ldr	r0, [r3, #12]
 800c14c:	7a9a      	ldrb	r2, [r3, #10]
 800c14e:	1854      	adds	r4, r2, r1
 800c150:	729c      	strb	r4, [r3, #10]
 800c152:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 800c154:	4b33      	ldr	r3, [pc, #204]	; (800c224 <LmhpComplianceOnMcpsIndication+0x234>)
 800c156:	7a9b      	ldrb	r3, [r3, #10]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f000 814c 	beq.w	800c3f6 <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 800c15e:	4b32      	ldr	r3, [pc, #200]	; (800c228 <LmhpComplianceOnMcpsIndication+0x238>)
 800c160:	7a5b      	ldrb	r3, [r3, #9]
 800c162:	2b00      	cmp	r3, #0
 800c164:	f000 813d 	beq.w	800c3e2 <LmhpComplianceOnMcpsIndication+0x3f2>
}
 800c168:	b016      	add	sp, #88	; 0x58
 800c16a:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 800c16c:	4b2d      	ldr	r3, [pc, #180]	; (800c224 <LmhpComplianceOnMcpsIndication+0x234>)
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800c174:	e7ee      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 800c176:	4b2d      	ldr	r3, [pc, #180]	; (800c22c <LmhpComplianceOnMcpsIndication+0x23c>)
 800c178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d0ea      	beq.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800c17e:	2101      	movs	r1, #1
 800c180:	2002      	movs	r0, #2
 800c182:	4798      	blx	r3
 800c184:	e7e6      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800c186:	7862      	ldrb	r2, [r4, #1]
 800c188:	4b26      	ldr	r3, [pc, #152]	; (800c224 <LmhpComplianceOnMcpsIndication+0x234>)
 800c18a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800c194:	e7de      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 800c196:	2304      	movs	r3, #4
 800c198:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800c19c:	7863      	ldrb	r3, [r4, #1]
 800c19e:	3b00      	subs	r3, #0
 800c1a0:	bf18      	it	ne
 800c1a2:	2301      	movne	r3, #1
 800c1a4:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c1a8:	a801      	add	r0, sp, #4
 800c1aa:	f002 ffef 	bl	800f18c <LoRaMacMibSetRequestConfirm>
                break;
 800c1ae:	e7d1      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800c1b0:	7860      	ldrb	r0, [r4, #1]
 800c1b2:	3800      	subs	r0, #0
 800c1b4:	bf18      	it	ne
 800c1b6:	2001      	movne	r0, #1
 800c1b8:	f003 fcaa 	bl	800fb10 <LoRaMacTestSetDutyCycleOn>
                break;
 800c1bc:	e7ca      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800c1be:	ad01      	add	r5, sp, #4
 800c1c0:	4e1b      	ldr	r6, [pc, #108]	; (800c230 <LmhpComplianceOnMcpsIndication+0x240>)
 800c1c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c1c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c1c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1ca:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800c1ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800c1d2:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800c1d4:	2b0a      	cmp	r3, #10
 800c1d6:	d8bd      	bhi.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800c1d8:	4a16      	ldr	r2, [pc, #88]	; (800c234 <LmhpComplianceOnMcpsIndication+0x244>)
 800c1da:	6812      	ldr	r2, [r2, #0]
 800c1dc:	6852      	ldr	r2, [r2, #4]
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	d0b8      	beq.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800c1e2:	a916      	add	r1, sp, #88	; 0x58
 800c1e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c1e8:	f853 0c54 	ldr.w	r0, [r3, #-84]
 800c1ec:	4790      	blx	r2
                break;
 800c1ee:	e7b1      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800c1f0:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800c1f2:	1e53      	subs	r3, r2, #1
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d8ac      	bhi.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c1fa:	1e50      	subs	r0, r2, #1
 800c1fc:	bf18      	it	ne
 800c1fe:	2001      	movne	r0, #1
 800c200:	4b08      	ldr	r3, [pc, #32]	; (800c224 <LmhpComplianceOnMcpsIndication+0x234>)
 800c202:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800c204:	4b0b      	ldr	r3, [pc, #44]	; (800c234 <LmhpComplianceOnMcpsIndication+0x244>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d0a2      	beq.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800c20e:	4798      	blx	r3
 800c210:	e7a0      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800c212:	4b04      	ldr	r3, [pc, #16]	; (800c224 <LmhpComplianceOnMcpsIndication+0x234>)
 800c214:	68da      	ldr	r2, [r3, #12]
 800c216:	2101      	movs	r1, #1
 800c218:	7299      	strb	r1, [r3, #10]
 800c21a:	2308      	movs	r3, #8
 800c21c:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800c21e:	460b      	mov	r3, r1
 800c220:	e01b      	b.n	800c25a <LmhpComplianceOnMcpsIndication+0x26a>
 800c222:	bf00      	nop
 800c224:	20003bb0 	.word	0x20003bb0
 800c228:	20003be8 	.word	0x20003be8
 800c22c:	20000134 	.word	0x20000134
 800c230:	080179d4 	.word	0x080179d4
 800c234:	20003bac 	.word	0x20003bac
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800c238:	6882      	ldr	r2, [r0, #8]
 800c23a:	f101 0c01 	add.w	ip, r1, #1
 800c23e:	5c52      	ldrb	r2, [r2, r1]
 800c240:	4971      	ldr	r1, [pc, #452]	; (800c408 <LmhpComplianceOnMcpsIndication+0x418>)
 800c242:	68cd      	ldr	r5, [r1, #12]
 800c244:	7a8c      	ldrb	r4, [r1, #10]
 800c246:	f104 0e01 	add.w	lr, r4, #1
 800c24a:	f881 e00a 	strb.w	lr, [r1, #10]
 800c24e:	3201      	adds	r2, #1
 800c250:	552a      	strb	r2, [r5, r4]
                     i++ )
 800c252:	3301      	adds	r3, #1
 800c254:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800c256:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800c25a:	4a6b      	ldr	r2, [pc, #428]	; (800c408 <LmhpComplianceOnMcpsIndication+0x418>)
 800c25c:	7a52      	ldrb	r2, [r2, #9]
 800c25e:	7b04      	ldrb	r4, [r0, #12]
 800c260:	42a2      	cmp	r2, r4
 800c262:	bf28      	it	cs
 800c264:	4622      	movcs	r2, r4
 800c266:	429a      	cmp	r2, r3
 800c268:	d8e6      	bhi.n	800c238 <LmhpComplianceOnMcpsIndication+0x248>
 800c26a:	e773      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800c26c:	4b66      	ldr	r3, [pc, #408]	; (800c408 <LmhpComplianceOnMcpsIndication+0x418>)
 800c26e:	68da      	ldr	r2, [r3, #12]
 800c270:	2101      	movs	r1, #1
 800c272:	7299      	strb	r1, [r3, #10]
 800c274:	2109      	movs	r1, #9
 800c276:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800c278:	8a18      	ldrh	r0, [r3, #16]
 800c27a:	68d9      	ldr	r1, [r3, #12]
 800c27c:	7a9a      	ldrb	r2, [r3, #10]
 800c27e:	1c54      	adds	r4, r2, #1
 800c280:	729c      	strb	r4, [r3, #10]
 800c282:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800c284:	8a1a      	ldrh	r2, [r3, #16]
 800c286:	68d8      	ldr	r0, [r3, #12]
 800c288:	7a99      	ldrb	r1, [r3, #10]
 800c28a:	1c4c      	adds	r4, r1, #1
 800c28c:	729c      	strb	r4, [r3, #10]
 800c28e:	0a13      	lsrs	r3, r2, #8
 800c290:	5443      	strb	r3, [r0, r1]
                break;
 800c292:	e75f      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 800c294:	4b5c      	ldr	r3, [pc, #368]	; (800c408 <LmhpComplianceOnMcpsIndication+0x418>)
 800c296:	2200      	movs	r2, #0
 800c298:	821a      	strh	r2, [r3, #16]
                break;
 800c29a:	e75b      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 800c29c:	2305      	movs	r3, #5
 800c29e:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 800c2a2:	a801      	add	r0, sp, #4
 800c2a4:	f003 fa42 	bl	800f72c <LoRaMacMlmeRequest>
                break;
 800c2a8:	e754      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 800c2aa:	4b58      	ldr	r3, [pc, #352]	; (800c40c <LmhpComplianceOnMcpsIndication+0x41c>)
 800c2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ae:	4798      	blx	r3
                break;
 800c2b0:	e750      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800c2b2:	7860      	ldrb	r0, [r4, #1]
 800c2b4:	4b54      	ldr	r3, [pc, #336]	; (800c408 <LmhpComplianceOnMcpsIndication+0x418>)
 800c2b6:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800c2b8:	4b55      	ldr	r3, [pc, #340]	; (800c410 <LmhpComplianceOnMcpsIndication+0x420>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f43f af48 	beq.w	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800c2c4:	4798      	blx	r3
 800c2c6:	e745      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 800c2c8:	7b03      	ldrb	r3, [r0, #12]
 800c2ca:	2b07      	cmp	r3, #7
 800c2cc:	f47f af42 	bne.w	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 800c2d0:	2306      	movs	r3, #6
 800c2d2:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800c2d6:	7863      	ldrb	r3, [r4, #1]
 800c2d8:	78a2      	ldrb	r2, [r4, #2]
 800c2da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 800c2de:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800c2e2:	78e3      	ldrb	r3, [r4, #3]
 800c2e4:	7922      	ldrb	r2, [r4, #4]
 800c2e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800c2ea:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800c2ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800c2f0:	2264      	movs	r2, #100	; 0x64
 800c2f2:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800c2f6:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800c2f8:	6883      	ldr	r3, [r0, #8]
 800c2fa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800c2fe:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 800c302:	a801      	add	r0, sp, #4
 800c304:	f003 fa12 	bl	800f72c <LoRaMacMlmeRequest>
                break;
 800c308:	e724      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800c30a:	233b      	movs	r3, #59	; 0x3b
 800c30c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                mibReq.Param.IsCertPortOn = false;
 800c310:	2300      	movs	r3, #0
 800c312:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c316:	a80c      	add	r0, sp, #48	; 0x30
 800c318:	f002 ff38 	bl	800f18c <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 800c31c:	4b3a      	ldr	r3, [pc, #232]	; (800c408 <LmhpComplianceOnMcpsIndication+0x418>)
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800c324:	e716      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 800c326:	232a      	movs	r3, #42	; 0x2a
 800c328:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800c32c:	a801      	add	r0, sp, #4
 800c32e:	f002 fd9f 	bl	800ee70 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800c332:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800c334:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800c336:	4b34      	ldr	r3, [pc, #208]	; (800c408 <LmhpComplianceOnMcpsIndication+0x418>)
 800c338:	68dc      	ldr	r4, [r3, #12]
 800c33a:	7a98      	ldrb	r0, [r3, #10]
 800c33c:	1c45      	adds	r5, r0, #1
 800c33e:	729d      	strb	r5, [r3, #10]
 800c340:	257f      	movs	r5, #127	; 0x7f
 800c342:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800c344:	4832      	ldr	r0, [pc, #200]	; (800c410 <LmhpComplianceOnMcpsIndication+0x420>)
 800c346:	6800      	ldr	r0, [r0, #0]
 800c348:	68dd      	ldr	r5, [r3, #12]
 800c34a:	7a9c      	ldrb	r4, [r3, #10]
 800c34c:	1c66      	adds	r6, r4, #1
 800c34e:	729e      	strb	r6, [r3, #10]
 800c350:	78c6      	ldrb	r6, [r0, #3]
 800c352:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800c354:	68dd      	ldr	r5, [r3, #12]
 800c356:	7a9c      	ldrb	r4, [r3, #10]
 800c358:	1c66      	adds	r6, r4, #1
 800c35a:	729e      	strb	r6, [r3, #10]
 800c35c:	7886      	ldrb	r6, [r0, #2]
 800c35e:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800c360:	68dd      	ldr	r5, [r3, #12]
 800c362:	7a9c      	ldrb	r4, [r3, #10]
 800c364:	1c66      	adds	r6, r4, #1
 800c366:	729e      	strb	r6, [r3, #10]
 800c368:	7846      	ldrb	r6, [r0, #1]
 800c36a:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800c36c:	68dd      	ldr	r5, [r3, #12]
 800c36e:	7a9c      	ldrb	r4, [r3, #10]
 800c370:	1c66      	adds	r6, r4, #1
 800c372:	729e      	strb	r6, [r3, #10]
 800c374:	7800      	ldrb	r0, [r0, #0]
 800c376:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800c378:	68dc      	ldr	r4, [r3, #12]
 800c37a:	7a98      	ldrb	r0, [r3, #10]
 800c37c:	1c45      	adds	r5, r0, #1
 800c37e:	729d      	strb	r5, [r3, #10]
 800c380:	f3c1 6507 	ubfx	r5, r1, #24, #8
 800c384:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800c386:	68dc      	ldr	r4, [r3, #12]
 800c388:	7a98      	ldrb	r0, [r3, #10]
 800c38a:	1c45      	adds	r5, r0, #1
 800c38c:	729d      	strb	r5, [r3, #10]
 800c38e:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800c392:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800c394:	68dc      	ldr	r4, [r3, #12]
 800c396:	7a98      	ldrb	r0, [r3, #10]
 800c398:	1c45      	adds	r5, r0, #1
 800c39a:	729d      	strb	r5, [r3, #10]
 800c39c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800c3a0:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800c3a2:	68dc      	ldr	r4, [r3, #12]
 800c3a4:	7a98      	ldrb	r0, [r3, #10]
 800c3a6:	1c45      	adds	r5, r0, #1
 800c3a8:	729d      	strb	r5, [r3, #10]
 800c3aa:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800c3ac:	68d8      	ldr	r0, [r3, #12]
 800c3ae:	7a99      	ldrb	r1, [r3, #10]
 800c3b0:	1c4c      	adds	r4, r1, #1
 800c3b2:	729c      	strb	r4, [r3, #10]
 800c3b4:	f3c2 6407 	ubfx	r4, r2, #24, #8
 800c3b8:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800c3ba:	68d8      	ldr	r0, [r3, #12]
 800c3bc:	7a99      	ldrb	r1, [r3, #10]
 800c3be:	1c4c      	adds	r4, r1, #1
 800c3c0:	729c      	strb	r4, [r3, #10]
 800c3c2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800c3c6:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800c3c8:	68d8      	ldr	r0, [r3, #12]
 800c3ca:	7a99      	ldrb	r1, [r3, #10]
 800c3cc:	1c4c      	adds	r4, r1, #1
 800c3ce:	729c      	strb	r4, [r3, #10]
 800c3d0:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c3d4:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800c3d6:	68d8      	ldr	r0, [r3, #12]
 800c3d8:	7a99      	ldrb	r1, [r3, #10]
 800c3da:	1c4c      	adds	r4, r1, #1
 800c3dc:	729c      	strb	r4, [r3, #10]
 800c3de:	5442      	strb	r2, [r0, r1]
                break;
 800c3e0:	e6b8      	b.n	800c154 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 800c3e2:	4c0c      	ldr	r4, [pc, #48]	; (800c414 <LmhpComplianceOnMcpsIndication+0x424>)
 800c3e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f009 ffc9 	bl	8016380 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f009 ff80 	bl	80162f4 <UTIL_TIMER_Start>
 800c3f4:	e6b8      	b.n	800c168 <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 800c3f6:	4807      	ldr	r0, [pc, #28]	; (800c414 <LmhpComplianceOnMcpsIndication+0x424>)
 800c3f8:	f009 ff22 	bl	8016240 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800c3fc:	4b02      	ldr	r3, [pc, #8]	; (800c408 <LmhpComplianceOnMcpsIndication+0x418>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	705a      	strb	r2, [r3, #1]
 800c402:	e6b1      	b.n	800c168 <LmhpComplianceOnMcpsIndication+0x178>
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	20003bb0 	.word	0x20003bb0
 800c40c:	20000134 	.word	0x20000134
 800c410:	20003bac 	.word	0x20003bac
 800c414:	20003be8 	.word	0x20003be8

0800c418 <LmhpComplianceProcess>:
{
 800c418:	b530      	push	{r4, r5, lr}
 800c41a:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 800c41c:	4b27      	ldr	r3, [pc, #156]	; (800c4bc <LmhpComplianceProcess+0xa4>)
 800c41e:	785b      	ldrb	r3, [r3, #1]
 800c420:	b993      	cbnz	r3, 800c448 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800c422:	4b26      	ldr	r3, [pc, #152]	; (800c4bc <LmhpComplianceProcess+0xa4>)
 800c424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d13d      	bne.n	800c4a8 <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 800c42c:	4b23      	ldr	r3, [pc, #140]	; (800c4bc <LmhpComplianceProcess+0xa4>)
 800c42e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c432:	b13b      	cbz	r3, 800c444 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 800c434:	4b21      	ldr	r3, [pc, #132]	; (800c4bc <LmhpComplianceProcess+0xa4>)
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 800c43c:	4b20      	ldr	r3, [pc, #128]	; (800c4c0 <LmhpComplianceProcess+0xa8>)
 800c43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c440:	b103      	cbz	r3, 800c444 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 800c442:	4798      	blx	r3
}
 800c444:	b003      	add	sp, #12
 800c446:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 800c448:	f009 feba 	bl	80161c0 <UTIL_TIMER_GetCurrentTime>
 800c44c:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800c44e:	4b1b      	ldr	r3, [pc, #108]	; (800c4bc <LmhpComplianceProcess+0xa4>)
 800c450:	685d      	ldr	r5, [r3, #4]
 800c452:	f7ff f9a3 	bl	800b79c <LmHandlerGetDutyCycleWaitTime>
 800c456:	4405      	add	r5, r0
 800c458:	42a5      	cmp	r5, r4
 800c45a:	d2e7      	bcs.n	800c42c <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 800c45c:	4b17      	ldr	r3, [pc, #92]	; (800c4bc <LmhpComplianceProcess+0xa4>)
 800c45e:	7a9b      	ldrb	r3, [r3, #10]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d0e3      	beq.n	800c42c <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 800c464:	22e0      	movs	r2, #224	; 0xe0
 800c466:	f88d 2000 	strb.w	r2, [sp]
 800c46a:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800c46e:	4b13      	ldr	r3, [pc, #76]	; (800c4bc <LmhpComplianceProcess+0xa4>)
 800c470:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 800c472:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800c474:	2201      	movs	r2, #1
 800c476:	7a19      	ldrb	r1, [r3, #8]
 800c478:	4668      	mov	r0, sp
 800c47a:	f7ff f9bd 	bl	800b7f8 <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800c47e:	b110      	cbz	r0, 800c486 <LmhpComplianceProcess+0x6e>
 800c480:	f110 0f07 	cmn.w	r0, #7
 800c484:	d106      	bne.n	800c494 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 800c486:	4b0d      	ldr	r3, [pc, #52]	; (800c4bc <LmhpComplianceProcess+0xa4>)
 800c488:	2200      	movs	r2, #0
 800c48a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800c48c:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 800c48e:	4b0b      	ldr	r3, [pc, #44]	; (800c4bc <LmhpComplianceProcess+0xa4>)
 800c490:	605c      	str	r4, [r3, #4]
 800c492:	e7cb      	b.n	800c42c <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 800c494:	4d0b      	ldr	r5, [pc, #44]	; (800c4c4 <LmhpComplianceProcess+0xac>)
 800c496:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800c49a:	4628      	mov	r0, r5
 800c49c:	f009 ff70 	bl	8016380 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	f009 ff27 	bl	80162f4 <UTIL_TIMER_Start>
 800c4a6:	e7f2      	b.n	800c48e <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 800c4a8:	4b04      	ldr	r3, [pc, #16]	; (800c4bc <LmhpComplianceProcess+0xa4>)
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800c4b0:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 800c4b4:	f7ff fa4a 	bl	800b94c <LmHandlerRequestClass>
 800c4b8:	e7b8      	b.n	800c42c <LmhpComplianceProcess+0x14>
 800c4ba:	bf00      	nop
 800c4bc:	20003bb0 	.word	0x20003bb0
 800c4c0:	20000134 	.word	0x20000134
 800c4c4:	20003be8 	.word	0x20003be8

0800c4c8 <LmhpComplianceInit>:
{
 800c4c8:	b530      	push	{r4, r5, lr}
 800c4ca:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800c4cc:	b188      	cbz	r0, 800c4f2 <LmhpComplianceInit+0x2a>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	b179      	cbz	r1, 800c4f2 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800c4d2:	4813      	ldr	r0, [pc, #76]	; (800c520 <LmhpComplianceInit+0x58>)
 800c4d4:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800c4d6:	4b13      	ldr	r3, [pc, #76]	; (800c524 <LmhpComplianceInit+0x5c>)
 800c4d8:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800c4da:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 800c4dc:	2201      	movs	r2, #1
 800c4de:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	9200      	str	r2, [sp, #0]
 800c4e4:	4b10      	ldr	r3, [pc, #64]	; (800c528 <LmhpComplianceInit+0x60>)
 800c4e6:	f04f 31ff 	mov.w	r1, #4294967295
 800c4ea:	4810      	ldr	r0, [pc, #64]	; (800c52c <LmhpComplianceInit+0x64>)
 800c4ec:	f009 fe4a 	bl	8016184 <UTIL_TIMER_Create>
 800c4f0:	e004      	b.n	800c4fc <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	4a0a      	ldr	r2, [pc, #40]	; (800c520 <LmhpComplianceInit+0x58>)
 800c4f6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800c4f8:	4a0a      	ldr	r2, [pc, #40]	; (800c524 <LmhpComplianceInit+0x5c>)
 800c4fa:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 800c4fc:	4c09      	ldr	r4, [pc, #36]	; (800c524 <LmhpComplianceInit+0x5c>)
 800c4fe:	2500      	movs	r5, #0
 800c500:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800c502:	2220      	movs	r2, #32
 800c504:	4629      	mov	r1, r5
 800c506:	f104 0014 	add.w	r0, r4, #20
 800c50a:	f007 fc82 	bl	8013e12 <memset1>
    ComplianceTestState.IsTxPending = false;
 800c50e:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800c510:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800c512:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800c516:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800c51a:	b003      	add	sp, #12
 800c51c:	bd30      	pop	{r4, r5, pc}
 800c51e:	bf00      	nop
 800c520:	20003bac 	.word	0x20003bac
 800c524:	20003bb0 	.word	0x20003bb0
 800c528:	0800bfd1 	.word	0x0800bfd1
 800c52c:	20003be8 	.word	0x20003be8

0800c530 <LmhpCompliancePackageFactory>:
}
 800c530:	4800      	ldr	r0, [pc, #0]	; (800c534 <LmhpCompliancePackageFactory+0x4>)
 800c532:	4770      	bx	lr
 800c534:	20000134 	.word	0x20000134

0800c538 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800c538:	2000      	movs	r0, #0
 800c53a:	4770      	bx	lr

0800c53c <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800c53c:	f04f 30ff 	mov.w	r0, #4294967295
 800c540:	4770      	bx	lr
	...

0800c544 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c544:	4b07      	ldr	r3, [pc, #28]	; (800c564 <UpdateRxSlotIdleState+0x20>)
 800c546:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d004      	beq.n	800c558 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800c54e:	4b06      	ldr	r3, [pc, #24]	; (800c568 <UpdateRxSlotIdleState+0x24>)
 800c550:	2206      	movs	r2, #6
 800c552:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 800c556:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c558:	4b03      	ldr	r3, [pc, #12]	; (800c568 <UpdateRxSlotIdleState+0x24>)
 800c55a:	2202      	movs	r2, #2
 800c55c:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	20008000 	.word	0x20008000
 800c568:	20003c04 	.word	0x20003c04

0800c56c <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800c56c:	4b01      	ldr	r3, [pc, #4]	; (800c574 <LoRaMacEnableRequests+0x8>)
 800c56e:	f883 0492 	strb.w	r0, [r3, #1170]	; 0x492
}
 800c572:	4770      	bx	lr
 800c574:	20003c04 	.word	0x20003c04

0800c578 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800c578:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800c57a:	4b15      	ldr	r3, [pc, #84]	; (800c5d0 <LoRaMacHandleIndicationEvents+0x58>)
 800c57c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800c580:	f013 0f08 	tst.w	r3, #8
 800c584:	d00e      	beq.n	800c5a4 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800c586:	4812      	ldr	r0, [pc, #72]	; (800c5d0 <LoRaMacHandleIndicationEvents+0x58>)
 800c588:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800c58c:	f36f 03c3 	bfc	r3, #3, #1
 800c590:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800c594:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800c59e:	f500 608d 	add.w	r0, r0, #1128	; 0x468
 800c5a2:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c5a4:	4b0a      	ldr	r3, [pc, #40]	; (800c5d0 <LoRaMacHandleIndicationEvents+0x58>)
 800c5a6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800c5aa:	f013 0f02 	tst.w	r3, #2
 800c5ae:	d00e      	beq.n	800c5ce <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800c5b0:	4807      	ldr	r0, [pc, #28]	; (800c5d0 <LoRaMacHandleIndicationEvents+0x58>)
 800c5b2:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800c5b6:	f36f 0341 	bfc	r3, #1, #1
 800c5ba:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800c5be:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800c5c8:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 800c5cc:	4798      	blx	r3
    }
}
 800c5ce:	bd08      	pop	{r3, pc}
 800c5d0:	20003c04 	.word	0x20003c04

0800c5d4 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800c5d4:	b110      	cbz	r0, 800c5dc <CheckForMinimumAbpDatarate+0x8>
 800c5d6:	2901      	cmp	r1, #1
 800c5d8:	d001      	beq.n	800c5de <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800c5da:	2000      	movs	r0, #0
}
 800c5dc:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800c5de:	2a00      	cmp	r2, #0
 800c5e0:	d0fc      	beq.n	800c5dc <CheckForMinimumAbpDatarate+0x8>
    return false;
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	4770      	bx	lr
	...

0800c5e8 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800c5e8:	4b07      	ldr	r3, [pc, #28]	; (800c608 <LoRaMacCheckForRxAbort+0x20>)
 800c5ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c5ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c5f2:	d008      	beq.n	800c606 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800c5f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c5f8:	4a03      	ldr	r2, [pc, #12]	; (800c608 <LoRaMacCheckForRxAbort+0x20>)
 800c5fa:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c5fe:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800c602:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800c606:	4770      	bx	lr
 800c608:	20003c04 	.word	0x20003c04

0800c60c <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800c60c:	4b06      	ldr	r3, [pc, #24]	; (800c628 <CalculateBackOff+0x1c>)
 800c60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c610:	b94b      	cbnz	r3, 800c626 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800c612:	4a05      	ldr	r2, [pc, #20]	; (800c628 <CalculateBackOff+0x1c>)
 800c614:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
 800c618:	4904      	ldr	r1, [pc, #16]	; (800c62c <CalculateBackOff+0x20>)
 800c61a:	f8d1 141c 	ldr.w	r1, [r1, #1052]	; 0x41c
 800c61e:	3b01      	subs	r3, #1
 800c620:	fb01 f303 	mul.w	r3, r1, r3
 800c624:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800c626:	4770      	bx	lr
 800c628:	20008000 	.word	0x20008000
 800c62c:	20003c04 	.word	0x20003c04

0800c630 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800c630:	b508      	push	{r3, lr}
 800c632:	4684      	mov	ip, r0
 800c634:	4608      	mov	r0, r1
 800c636:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800c638:	4b06      	ldr	r3, [pc, #24]	; (800c654 <SetTxContinuousWave+0x24>)
 800c63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c63c:	4662      	mov	r2, ip
 800c63e:	b249      	sxtb	r1, r1
 800c640:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800c642:	4a05      	ldr	r2, [pc, #20]	; (800c658 <SetTxContinuousWave+0x28>)
 800c644:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c648:	f043 0302 	orr.w	r3, r3, #2
 800c64c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800c650:	2000      	movs	r0, #0
 800c652:	bd08      	pop	{r3, pc}
 800c654:	0801885c 	.word	0x0801885c
 800c658:	20003c04 	.word	0x20003c04

0800c65c <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800c65c:	4602      	mov	r2, r0
 800c65e:	b1f8      	cbz	r0, 800c6a0 <DetermineFrameType+0x44>
 800c660:	b301      	cbz	r1, 800c6a4 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800c662:	7b03      	ldrb	r3, [r0, #12]
 800c664:	f013 030f 	ands.w	r3, r3, #15
 800c668:	d005      	beq.n	800c676 <DetermineFrameType+0x1a>
 800c66a:	f890 0020 	ldrb.w	r0, [r0, #32]
 800c66e:	b110      	cbz	r0, 800c676 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800c670:	2000      	movs	r0, #0
 800c672:	7008      	strb	r0, [r1, #0]
 800c674:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800c676:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800c67a:	b910      	cbnz	r0, 800c682 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800c67c:	2301      	movs	r3, #1
 800c67e:	700b      	strb	r3, [r1, #0]
 800c680:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800c682:	b92b      	cbnz	r3, 800c690 <DetermineFrameType+0x34>
 800c684:	f892 0020 	ldrb.w	r0, [r2, #32]
 800c688:	b910      	cbnz	r0, 800c690 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800c68a:	2302      	movs	r3, #2
 800c68c:	700b      	strb	r3, [r1, #0]
 800c68e:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800c690:	b953      	cbnz	r3, 800c6a8 <DetermineFrameType+0x4c>
 800c692:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c696:	b14a      	cbz	r2, 800c6ac <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800c698:	2203      	movs	r2, #3
 800c69a:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800c69c:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800c69e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c6a0:	2003      	movs	r0, #3
 800c6a2:	4770      	bx	lr
 800c6a4:	2003      	movs	r0, #3
 800c6a6:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800c6a8:	2018      	movs	r0, #24
 800c6aa:	4770      	bx	lr
 800c6ac:	2018      	movs	r0, #24
}
 800c6ae:	4770      	bx	lr

0800c6b0 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 800c6b0:	4288      	cmp	r0, r1
 800c6b2:	d201      	bcs.n	800c6b8 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	4770      	bx	lr
        return true;
 800c6b8:	2001      	movs	r0, #1
}
 800c6ba:	4770      	bx	lr

0800c6bc <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800c6bc:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800c6be:	4b0b      	ldr	r3, [pc, #44]	; (800c6ec <CheckRetransUnconfirmedUplink+0x30>)
 800c6c0:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800c6c4:	4b0a      	ldr	r3, [pc, #40]	; (800c6f0 <CheckRetransUnconfirmedUplink+0x34>)
 800c6c6:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800c6ca:	f7ff fff1 	bl	800c6b0 <CheckRetrans>
 800c6ce:	b950      	cbnz	r0, 800c6e6 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c6d0:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <CheckRetransUnconfirmedUplink+0x34>)
 800c6d2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800c6d6:	f013 0f02 	tst.w	r3, #2
 800c6da:	d004      	beq.n	800c6e6 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c6dc:	4b04      	ldr	r3, [pc, #16]	; (800c6f0 <CheckRetransUnconfirmedUplink+0x34>)
 800c6de:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d900      	bls.n	800c6e8 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800c6e6:	bd08      	pop	{r3, pc}
            return true;
 800c6e8:	2001      	movs	r0, #1
 800c6ea:	e7fc      	b.n	800c6e6 <CheckRetransUnconfirmedUplink+0x2a>
 800c6ec:	20008000 	.word	0x20008000
 800c6f0:	20003c04 	.word	0x20003c04

0800c6f4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800c6f4:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800c6f6:	4b09      	ldr	r3, [pc, #36]	; (800c71c <CheckRetransConfirmedUplink+0x28>)
 800c6f8:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800c6fc:	4b08      	ldr	r3, [pc, #32]	; (800c720 <CheckRetransConfirmedUplink+0x2c>)
 800c6fe:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800c702:	f7ff ffd5 	bl	800c6b0 <CheckRetrans>
 800c706:	b940      	cbnz	r0, 800c71a <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c708:	4b05      	ldr	r3, [pc, #20]	; (800c720 <CheckRetransConfirmedUplink+0x2c>)
 800c70a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800c70e:	f013 0f02 	tst.w	r3, #2
 800c712:	d002      	beq.n	800c71a <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800c714:	4b02      	ldr	r3, [pc, #8]	; (800c720 <CheckRetransConfirmedUplink+0x2c>)
 800c716:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
        {
            return true;
        }
    }
    return false;
}
 800c71a:	bd08      	pop	{r3, pc}
 800c71c:	20008000 	.word	0x20008000
 800c720:	20003c04 	.word	0x20003c04

0800c724 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 800c724:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c728:	d000      	beq.n	800c72c <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800c72a:	3001      	adds	r0, #1
    }
    return counter;
}
 800c72c:	4770      	bx	lr
	...

0800c730 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800c730:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800c732:	4b12      	ldr	r3, [pc, #72]	; (800c77c <StopRetransmission+0x4c>)
 800c734:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800c738:	f013 0f02 	tst.w	r3, #2
 800c73c:	d004      	beq.n	800c748 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800c73e:	4b0f      	ldr	r3, [pc, #60]	; (800c77c <StopRetransmission+0x4c>)
 800c740:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800c744:	2b01      	cmp	r3, #1
 800c746:	d908      	bls.n	800c75a <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800c748:	4b0d      	ldr	r3, [pc, #52]	; (800c780 <StopRetransmission+0x50>)
 800c74a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800c74e:	b123      	cbz	r3, 800c75a <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800c750:	4c0b      	ldr	r4, [pc, #44]	; (800c780 <StopRetransmission+0x50>)
 800c752:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c754:	f7ff ffe6 	bl	800c724 <IncreaseAdrAckCounter>
 800c758:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800c75a:	4b08      	ldr	r3, [pc, #32]	; (800c77c <StopRetransmission+0x4c>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 800c762:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800c766:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c76a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800c76e:	f022 0202 	bic.w	r2, r2, #2
 800c772:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800c776:	2001      	movs	r0, #1
 800c778:	bd10      	pop	{r4, pc}
 800c77a:	bf00      	nop
 800c77c:	20003c04 	.word	0x20003c04
 800c780:	20008000 	.word	0x20008000

0800c784 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800c784:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c786:	4b04      	ldr	r3, [pc, #16]	; (800c798 <OnMacProcessNotify+0x14>)
 800c788:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c78c:	b113      	cbz	r3, 800c794 <OnMacProcessNotify+0x10>
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	b103      	cbz	r3, 800c794 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c792:	4798      	blx	r3
    }
}
 800c794:	bd08      	pop	{r3, pc}
 800c796:	bf00      	nop
 800c798:	20003c04 	.word	0x20003c04

0800c79c <OnRadioRxError>:
{
 800c79c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800c79e:	4a04      	ldr	r2, [pc, #16]	; (800c7b0 <OnRadioRxError+0x14>)
 800c7a0:	7813      	ldrb	r3, [r2, #0]
 800c7a2:	f043 0304 	orr.w	r3, r3, #4
 800c7a6:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800c7a8:	f7ff ffec 	bl	800c784 <OnMacProcessNotify>
}
 800c7ac:	bd08      	pop	{r3, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20003c00 	.word	0x20003c00

0800c7b4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800c7b4:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800c7b6:	4b04      	ldr	r3, [pc, #16]	; (800c7c8 <CallNvmDataChangeCallback+0x14>)
 800c7b8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c7bc:	b113      	cbz	r3, 800c7c4 <CallNvmDataChangeCallback+0x10>
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	b103      	cbz	r3, 800c7c4 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800c7c2:	4798      	blx	r3
    }
}
 800c7c4:	bd08      	pop	{r3, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20003c04 	.word	0x20003c04

0800c7cc <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800c7cc:	4b04      	ldr	r3, [pc, #16]	; (800c7e0 <IsRequestPending+0x14>)
 800c7ce:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
 800c7d2:	f010 0005 	ands.w	r0, r0, #5
 800c7d6:	d100      	bne.n	800c7da <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800c7d8:	4770      	bx	lr
        return 1;
 800c7da:	2001      	movs	r0, #1
 800c7dc:	e7fc      	b.n	800c7d8 <IsRequestPending+0xc>
 800c7de:	bf00      	nop
 800c7e0:	20003c04 	.word	0x20003c04

0800c7e4 <GetMaxAppPayloadWithoutFOptsLength>:
{
 800c7e4:	b500      	push	{lr}
 800c7e6:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c7e8:	4b0d      	ldr	r3, [pc, #52]	; (800c820 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800c7ea:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800c7ee:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800c7f2:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800c7f6:	220d      	movs	r2, #13
 800c7f8:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800c7fc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c800:	b113      	cbz	r3, 800c808 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800c802:	230e      	movs	r3, #14
 800c804:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c808:	a902      	add	r1, sp, #8
 800c80a:	4b05      	ldr	r3, [pc, #20]	; (800c820 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800c80c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c810:	f004 fa33 	bl	8010c7a <RegionGetPhyParam>
 800c814:	9001      	str	r0, [sp, #4]
}
 800c816:	b2c0      	uxtb	r0, r0
 800c818:	b005      	add	sp, #20
 800c81a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c81e:	bf00      	nop
 800c820:	20008000 	.word	0x20008000

0800c824 <ValidatePayloadLength>:
{
 800c824:	b538      	push	{r3, r4, r5, lr}
 800c826:	4605      	mov	r5, r0
 800c828:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c82a:	4608      	mov	r0, r1
 800c82c:	f7ff ffda 	bl	800c7e4 <GetMaxAppPayloadWithoutFOptsLength>
 800c830:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800c832:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800c834:	4293      	cmp	r3, r2
 800c836:	d303      	bcc.n	800c840 <ValidatePayloadLength+0x1c>
 800c838:	2aff      	cmp	r2, #255	; 0xff
 800c83a:	d903      	bls.n	800c844 <ValidatePayloadLength+0x20>
    return false;
 800c83c:	2000      	movs	r0, #0
 800c83e:	e000      	b.n	800c842 <ValidatePayloadLength+0x1e>
 800c840:	2000      	movs	r0, #0
}
 800c842:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800c844:	2001      	movs	r0, #1
 800c846:	e7fc      	b.n	800c842 <ValidatePayloadLength+0x1e>

0800c848 <ProcessRadioTxDone>:
{
 800c848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c84a:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c84c:	4b3b      	ldr	r3, [pc, #236]	; (800c93c <ProcessRadioTxDone+0xf4>)
 800c84e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c852:	2b02      	cmp	r3, #2
 800c854:	d002      	beq.n	800c85c <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800c856:	4b3a      	ldr	r3, [pc, #232]	; (800c940 <ProcessRadioTxDone+0xf8>)
 800c858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85a:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c85c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c860:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800c862:	f009 fcad 	bl	80161c0 <UTIL_TIMER_GetCurrentTime>
 800c866:	4b37      	ldr	r3, [pc, #220]	; (800c944 <ProcessRadioTxDone+0xfc>)
 800c868:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800c86a:	4c37      	ldr	r4, [pc, #220]	; (800c948 <ProcessRadioTxDone+0x100>)
 800c86c:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800c870:	1a2d      	subs	r5, r5, r0
 800c872:	f504 7660 	add.w	r6, r4, #896	; 0x380
 800c876:	4429      	add	r1, r5
 800c878:	4630      	mov	r0, r6
 800c87a:	f009 fd81 	bl	8016380 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800c87e:	4630      	mov	r0, r6
 800c880:	f009 fd38 	bl	80162f4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800c884:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800c888:	f504 7666 	add.w	r6, r4, #920	; 0x398
 800c88c:	4429      	add	r1, r5
 800c88e:	4630      	mov	r0, r6
 800c890:	f009 fd76 	bl	8016380 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800c894:	4630      	mov	r0, r6
 800c896:	f009 fd2d 	bl	80162f4 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c89a:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 800c89e:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d134      	bne.n	800c910 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c8a6:	4b28      	ldr	r3, [pc, #160]	; (800c948 <ProcessRadioTxDone+0x100>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800c8ae:	4b25      	ldr	r3, [pc, #148]	; (800c944 <ProcessRadioTxDone+0xfc>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4c22      	ldr	r4, [pc, #136]	; (800c93c <ProcessRadioTxDone+0xf4>)
 800c8b4:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800c8b6:	4f24      	ldr	r7, [pc, #144]	; (800c948 <ProcessRadioTxDone+0x100>)
 800c8b8:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 800c8bc:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800c8c0:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800c8c2:	ae0c      	add	r6, sp, #48	; 0x30
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f009 fbef 	bl	80160a8 <SysTimeGetMcuTime>
 800c8ca:	ad02      	add	r5, sp, #8
 800c8cc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800c8d6:	e896 0006 	ldmia.w	r6, {r1, r2}
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f009 fb81 	bl	8015fe2 <SysTimeSub>
 800c8e0:	ab07      	add	r3, sp, #28
 800c8e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c8e6:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800c8ea:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800c8ee:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c8f6:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800c8fa:	b90b      	cbnz	r3, 800c900 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 800c8fc:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800c900:	a904      	add	r1, sp, #16
 800c902:	4b0e      	ldr	r3, [pc, #56]	; (800c93c <ProcessRadioTxDone+0xf4>)
 800c904:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c908:	f004 f9ce 	bl	8010ca8 <RegionSetBandTxDone>
}
 800c90c:	b00f      	add	sp, #60	; 0x3c
 800c90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800c910:	2315      	movs	r3, #21
 800c912:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c916:	a90a      	add	r1, sp, #40	; 0x28
 800c918:	4b08      	ldr	r3, [pc, #32]	; (800c93c <ProcessRadioTxDone+0xf4>)
 800c91a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c91e:	f004 f9ac 	bl	8010c7a <RegionGetPhyParam>
 800c922:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800c924:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800c928:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800c92c:	4401      	add	r1, r0
 800c92e:	4620      	mov	r0, r4
 800c930:	f009 fd26 	bl	8016380 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800c934:	4620      	mov	r0, r4
 800c936:	f009 fcdd 	bl	80162f4 <UTIL_TIMER_Start>
 800c93a:	e7b8      	b.n	800c8ae <ProcessRadioTxDone+0x66>
 800c93c:	20008000 	.word	0x20008000
 800c940:	0801885c 	.word	0x0801885c
 800c944:	200041c0 	.word	0x200041c0
 800c948:	20003c04 	.word	0x20003c04

0800c94c <OnRetransmitTimeoutTimerEvent>:
{
 800c94c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800c94e:	4c07      	ldr	r4, [pc, #28]	; (800c96c <OnRetransmitTimeoutTimerEvent+0x20>)
 800c950:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800c954:	f009 fc74 	bl	8016240 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800c958:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800c95c:	b113      	cbz	r3, 800c964 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800c95e:	2201      	movs	r2, #1
 800c960:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    OnMacProcessNotify( );
 800c964:	f7ff ff0e 	bl	800c784 <OnMacProcessNotify>
}
 800c968:	bd10      	pop	{r4, pc}
 800c96a:	bf00      	nop
 800c96c:	20003c04 	.word	0x20003c04

0800c970 <PrepareRxDoneAbort>:
{
 800c970:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800c972:	4b0e      	ldr	r3, [pc, #56]	; (800c9ac <PrepareRxDoneAbort+0x3c>)
 800c974:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800c978:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c97c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800c980:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800c984:	b973      	cbnz	r3, 800c9a4 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800c986:	4b09      	ldr	r3, [pc, #36]	; (800c9ac <PrepareRxDoneAbort+0x3c>)
 800c988:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800c98c:	f042 0202 	orr.w	r2, r2, #2
 800c990:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c994:	b2d2      	uxtb	r2, r2
 800c996:	f042 0210 	orr.w	r2, r2, #16
 800c99a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800c99e:	f7ff fdd1 	bl	800c544 <UpdateRxSlotIdleState>
}
 800c9a2:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	f7ff ffd1 	bl	800c94c <OnRetransmitTimeoutTimerEvent>
 800c9aa:	e7ec      	b.n	800c986 <PrepareRxDoneAbort+0x16>
 800c9ac:	20003c04 	.word	0x20003c04

0800c9b0 <LoRaMacCheckForBeaconAcquisition>:
{
 800c9b0:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c9b2:	200b      	movs	r0, #11
 800c9b4:	f003 fbe8 	bl	8010188 <LoRaMacConfirmQueueIsCmdActive>
 800c9b8:	b188      	cbz	r0, 800c9de <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800c9ba:	4b0b      	ldr	r3, [pc, #44]	; (800c9e8 <LoRaMacCheckForBeaconAcquisition+0x38>)
 800c9bc:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c9c0:	f010 0f01 	tst.w	r0, #1
 800c9c4:	d10d      	bne.n	800c9e2 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c9c6:	f010 0004 	ands.w	r0, r0, #4
 800c9ca:	d009      	beq.n	800c9e0 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c9d2:	f023 0302 	bic.w	r3, r3, #2
 800c9d6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800c9da:	2001      	movs	r0, #1
 800c9dc:	e000      	b.n	800c9e0 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800c9de:	2000      	movs	r0, #0
}
 800c9e0:	bd08      	pop	{r3, pc}
    return 0x00;
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	e7fc      	b.n	800c9e0 <LoRaMacCheckForBeaconAcquisition+0x30>
 800c9e6:	bf00      	nop
 800c9e8:	20003c04 	.word	0x20003c04

0800c9ec <GetFCntDown>:
{
 800c9ec:	b538      	push	{r3, r4, r5, lr}
 800c9ee:	9c04      	ldr	r4, [sp, #16]
 800c9f0:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800c9f2:	b1f2      	cbz	r2, 800ca32 <GetFCntDown+0x46>
 800c9f4:	4694      	mov	ip, r2
 800c9f6:	b1f4      	cbz	r4, 800ca36 <GetFCntDown+0x4a>
 800c9f8:	b1fd      	cbz	r5, 800ca3a <GetFCntDown+0x4e>
    switch( addrID )
 800c9fa:	b188      	cbz	r0, 800ca20 <GetFCntDown+0x34>
 800c9fc:	2801      	cmp	r0, #1
 800c9fe:	d11e      	bne.n	800ca3e <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 800ca00:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d002      	beq.n	800ca0e <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	7023      	strb	r3, [r4, #0]
 800ca0c:	e00a      	b.n	800ca24 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ca0e:	b121      	cbz	r1, 800ca1a <GetFCntDown+0x2e>
 800ca10:	2903      	cmp	r1, #3
 800ca12:	d002      	beq.n	800ca1a <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800ca14:	2301      	movs	r3, #1
 800ca16:	7023      	strb	r3, [r4, #0]
 800ca18:	e004      	b.n	800ca24 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800ca1a:	2302      	movs	r3, #2
 800ca1c:	7023      	strb	r3, [r4, #0]
 800ca1e:	e001      	b.n	800ca24 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800ca20:	2304      	movs	r3, #4
 800ca22:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800ca24:	462a      	mov	r2, r5
 800ca26:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800ca2a:	7820      	ldrb	r0, [r4, #0]
 800ca2c:	f003 fdd6 	bl	80105dc <LoRaMacCryptoGetFCntDown>
}
 800ca30:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ca32:	2009      	movs	r0, #9
 800ca34:	e7fc      	b.n	800ca30 <GetFCntDown+0x44>
 800ca36:	2009      	movs	r0, #9
 800ca38:	e7fa      	b.n	800ca30 <GetFCntDown+0x44>
 800ca3a:	2009      	movs	r0, #9
 800ca3c:	e7f8      	b.n	800ca30 <GetFCntDown+0x44>
    switch( addrID )
 800ca3e:	2005      	movs	r0, #5
 800ca40:	e7f6      	b.n	800ca30 <GetFCntDown+0x44>

0800ca42 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800ca42:	2801      	cmp	r0, #1
 800ca44:	d900      	bls.n	800ca48 <RemoveMacCommands+0x6>
 800ca46:	4770      	bx	lr
{
 800ca48:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800ca4a:	2a01      	cmp	r2, #1
 800ca4c:	d105      	bne.n	800ca5a <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800ca4e:	f011 0f20 	tst.w	r1, #32
 800ca52:	d004      	beq.n	800ca5e <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800ca54:	f003 fa44 	bl	800fee0 <LoRaMacCommandsRemoveStickyAnsCmds>
 800ca58:	e001      	b.n	800ca5e <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800ca5a:	f003 fa41 	bl	800fee0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800ca5e:	bd08      	pop	{r3, pc}

0800ca60 <ProcessMacCommands>:
{
 800ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca64:	b08f      	sub	sp, #60	; 0x3c
 800ca66:	4698      	mov	r8, r3
    uint8_t status = 0;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ca6e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800ca72:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	f200 82da 	bhi.w	800d030 <ProcessMacCommands+0x5d0>
 800ca7c:	4605      	mov	r5, r0
 800ca7e:	460c      	mov	r4, r1
 800ca80:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800ca82:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800ca86:	42bc      	cmp	r4, r7
 800ca88:	f080 82d2 	bcs.w	800d030 <ProcessMacCommands+0x5d0>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ca8c:	5d28      	ldrb	r0, [r5, r4]
 800ca8e:	f003 fa7f 	bl	800ff90 <LoRaMacCommandsGetCmdSize>
 800ca92:	4420      	add	r0, r4
 800ca94:	42b8      	cmp	r0, r7
 800ca96:	f300 82cb 	bgt.w	800d030 <ProcessMacCommands+0x5d0>
        switch( payload[macIndex++] )
 800ca9a:	1c66      	adds	r6, r4, #1
 800ca9c:	b2f6      	uxtb	r6, r6
 800ca9e:	5d2b      	ldrb	r3, [r5, r4]
 800caa0:	3b02      	subs	r3, #2
 800caa2:	2b11      	cmp	r3, #17
 800caa4:	f200 82c4 	bhi.w	800d030 <ProcessMacCommands+0x5d0>
 800caa8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800caac:	00280012 	.word	0x00280012
 800cab0:	00c000ad 	.word	0x00c000ad
 800cab4:	011e0106 	.word	0x011e0106
 800cab8:	01740157 	.word	0x01740157
 800cabc:	02c201c0 	.word	0x02c201c0
 800cac0:	01f002c2 	.word	0x01f002c2
 800cac4:	02c202c2 	.word	0x02c202c2
 800cac8:	02690252 	.word	0x02690252
 800cacc:	02a20288 	.word	0x02a20288
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800cad0:	2005      	movs	r0, #5
 800cad2:	f003 fb59 	bl	8010188 <LoRaMacConfirmQueueIsCmdActive>
 800cad6:	b908      	cbnz	r0, 800cadc <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800cad8:	4634      	mov	r4, r6
 800cada:	e7d4      	b.n	800ca86 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800cadc:	2105      	movs	r1, #5
 800cade:	2000      	movs	r0, #0
 800cae0:	f003 fb06 	bl	80100f0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800cae4:	1ca3      	adds	r3, r4, #2
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	5da9      	ldrb	r1, [r5, r6]
 800caea:	4aa7      	ldr	r2, [pc, #668]	; (800cd88 <ProcessMacCommands+0x328>)
 800caec:	f882 145c 	strb.w	r1, [r2, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800caf0:	3403      	adds	r4, #3
 800caf2:	b2e4      	uxtb	r4, r4
 800caf4:	5ceb      	ldrb	r3, [r5, r3]
 800caf6:	f882 345d 	strb.w	r3, [r2, #1117]	; 0x45d
 800cafa:	e7c4      	b.n	800ca86 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800cb02:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800cb06:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800cb0a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800cb0e:	f1b9 0f00 	cmp.w	r9, #0
 800cb12:	d036      	beq.n	800cb82 <ProcessMacCommands+0x122>
                    macIndex += 4;
 800cb14:	3405      	adds	r4, #5
 800cb16:	b2e4      	uxtb	r4, r4
 800cb18:	e7b5      	b.n	800ca86 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800cb1a:	2305      	movs	r3, #5
 800cb1c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800cb20:	e050      	b.n	800cbc4 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800cb22:	4b9a      	ldr	r3, [pc, #616]	; (800cd8c <ProcessMacCommands+0x32c>)
 800cb24:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800cb28:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	da03      	bge.n	800cb38 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800cb30:	4b96      	ldr	r3, [pc, #600]	; (800cd8c <ProcessMacCommands+0x32c>)
 800cb32:	2101      	movs	r1, #1
 800cb34:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800cb38:	4b94      	ldr	r3, [pc, #592]	; (800cd8c <ProcessMacCommands+0x32c>)
 800cb3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800cb3e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800cb42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800cb46:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800cb4a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800cb4e:	e04d      	b.n	800cbec <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800cb50:	2201      	movs	r2, #1
 800cb52:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800cb56:	2003      	movs	r0, #3
 800cb58:	f003 f94e 	bl	800fdf8 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800cb5c:	3401      	adds	r4, #1
 800cb5e:	b2e4      	uxtb	r4, r4
 800cb60:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800cb64:	498a      	ldr	r1, [pc, #552]	; (800cd90 <ProcessMacCommands+0x330>)
 800cb66:	fba1 2103 	umull	r2, r1, r1, r3
 800cb6a:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800cb6e:	d3ef      	bcc.n	800cb50 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 800cb70:	4433      	add	r3, r6
 800cb72:	b2de      	uxtb	r6, r3
 800cb74:	1e74      	subs	r4, r6, #1
 800cb76:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 800cb78:	42a7      	cmp	r7, r4
 800cb7a:	d93a      	bls.n	800cbf2 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800cb7c:	5d2b      	ldrb	r3, [r5, r4]
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	d136      	bne.n	800cbf0 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800cb82:	1e73      	subs	r3, r6, #1
 800cb84:	442b      	add	r3, r5
 800cb86:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800cb88:	4b80      	ldr	r3, [pc, #512]	; (800cd8c <ProcessMacCommands+0x32c>)
 800cb8a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800cb8e:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800cb92:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800cb96:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800cb9a:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800cb9e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800cba2:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800cba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800cbaa:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800cbae:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800cbb2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800cbb6:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800cbb8:	2a00      	cmp	r2, #0
 800cbba:	d0ae      	beq.n	800cb1a <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800cbbc:	1bbb      	subs	r3, r7, r6
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800cbc4:	ab05      	add	r3, sp, #20
 800cbc6:	9301      	str	r3, [sp, #4]
 800cbc8:	ab03      	add	r3, sp, #12
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	f10d 030b 	add.w	r3, sp, #11
 800cbd0:	f10d 020a 	add.w	r2, sp, #10
 800cbd4:	a907      	add	r1, sp, #28
 800cbd6:	486d      	ldr	r0, [pc, #436]	; (800cd8c <ProcessMacCommands+0x32c>)
 800cbd8:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800cbdc:	f004 f8dc 	bl	8010d98 <RegionLinkAdrReq>
 800cbe0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800cbe4:	f000 0007 	and.w	r0, r0, #7
 800cbe8:	2807      	cmp	r0, #7
 800cbea:	d09a      	beq.n	800cb22 <ProcessMacCommands+0xc2>
{
 800cbec:	2400      	movs	r4, #0
 800cbee:	e7b7      	b.n	800cb60 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800cbf0:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800cbf2:	42bc      	cmp	r4, r7
 800cbf4:	d204      	bcs.n	800cc00 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800cbf6:	3c01      	subs	r4, #1
 800cbf8:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800cbfa:	f04f 0901 	mov.w	r9, #1
 800cbfe:	e742      	b.n	800ca86 <ProcessMacCommands+0x26>
 800cc00:	f04f 0901 	mov.w	r9, #1
                break;
 800cc04:	e73f      	b.n	800ca86 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800cc06:	3402      	adds	r4, #2
 800cc08:	b2e4      	uxtb	r4, r4
 800cc0a:	5dab      	ldrb	r3, [r5, r6]
 800cc0c:	f003 030f 	and.w	r3, r3, #15
 800cc10:	495e      	ldr	r1, [pc, #376]	; (800cd8c <ProcessMacCommands+0x32c>)
 800cc12:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800cc16:	2201      	movs	r2, #1
 800cc18:	fa02 f303 	lsl.w	r3, r2, r3
 800cc1c:	f8a1 3120 	strh.w	r3, [r1, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800cc20:	2200      	movs	r2, #0
 800cc22:	a90b      	add	r1, sp, #44	; 0x2c
 800cc24:	2004      	movs	r0, #4
 800cc26:	f003 f8e7 	bl	800fdf8 <LoRaMacCommandsAddCmd>
                break;
 800cc2a:	e72c      	b.n	800ca86 <ProcessMacCommands+0x26>
                status = 0x07;
 800cc2c:	2307      	movs	r3, #7
 800cc2e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800cc32:	5dab      	ldrb	r3, [r5, r6]
 800cc34:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800cc38:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800cc3c:	57ab      	ldrsb	r3, [r5, r6]
 800cc3e:	f003 030f 	and.w	r3, r3, #15
 800cc42:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800cc46:	1ca3      	adds	r3, r4, #2
 800cc48:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800cc4a:	1ce1      	adds	r1, r4, #3
 800cc4c:	b2c9      	uxtb	r1, r1
 800cc4e:	5ceb      	ldrb	r3, [r5, r3]
 800cc50:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800cc52:	1d22      	adds	r2, r4, #4
 800cc54:	b2d2      	uxtb	r2, r2
 800cc56:	5c69      	ldrb	r1, [r5, r1]
 800cc58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cc5c:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800cc5e:	3405      	adds	r4, #5
 800cc60:	b2e4      	uxtb	r4, r4
 800cc62:	5caa      	ldrb	r2, [r5, r2]
 800cc64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc68:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800cc6a:	2264      	movs	r2, #100	; 0x64
 800cc6c:	fb02 f303 	mul.w	r3, r2, r3
 800cc70:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800cc72:	a907      	add	r1, sp, #28
 800cc74:	4b45      	ldr	r3, [pc, #276]	; (800cd8c <ProcessMacCommands+0x32c>)
 800cc76:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cc7a:	f004 f8a7 	bl	8010dcc <RegionRxParamSetupReq>
 800cc7e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800cc82:	f000 0307 	and.w	r3, r0, #7
 800cc86:	2b07      	cmp	r3, #7
 800cc88:	d007      	beq.n	800cc9a <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800cc8a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800cc8e:	2201      	movs	r2, #1
 800cc90:	a90b      	add	r1, sp, #44	; 0x2c
 800cc92:	2005      	movs	r0, #5
 800cc94:	f003 f8b0 	bl	800fdf8 <LoRaMacCommandsAddCmd>
                break;
 800cc98:	e6f5      	b.n	800ca86 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800cc9a:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800cc9e:	4b3b      	ldr	r3, [pc, #236]	; (800cd8c <ProcessMacCommands+0x32c>)
 800cca0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800cca4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800cca8:	9a08      	ldr	r2, [sp, #32]
 800ccaa:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800ccac:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800ccae:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800ccb2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800ccb6:	e7e8      	b.n	800cc8a <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800ccb8:	4b33      	ldr	r3, [pc, #204]	; (800cd88 <ProcessMacCommands+0x328>)
 800ccba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ccbe:	b17b      	cbz	r3, 800cce0 <ProcessMacCommands+0x280>
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	b17b      	cbz	r3, 800cce4 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800ccc4:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800ccc6:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800ccca:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800ccce:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800ccd2:	2202      	movs	r2, #2
 800ccd4:	a90b      	add	r1, sp, #44	; 0x2c
 800ccd6:	2006      	movs	r0, #6
 800ccd8:	f003 f88e 	bl	800fdf8 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800ccdc:	4634      	mov	r4, r6
                break;
 800ccde:	e6d2      	b.n	800ca86 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800cce0:	20ff      	movs	r0, #255	; 0xff
 800cce2:	e7f0      	b.n	800ccc6 <ProcessMacCommands+0x266>
 800cce4:	20ff      	movs	r0, #255	; 0xff
 800cce6:	e7ee      	b.n	800ccc6 <ProcessMacCommands+0x266>
                status = 0x03;
 800cce8:	2303      	movs	r3, #3
 800ccea:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800ccee:	1ca3      	adds	r3, r4, #2
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	57aa      	ldrsb	r2, [r5, r6]
 800ccf4:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800ccf8:	aa07      	add	r2, sp, #28
 800ccfa:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800ccfc:	1ce2      	adds	r2, r4, #3
 800ccfe:	b2d2      	uxtb	r2, r2
 800cd00:	5ceb      	ldrb	r3, [r5, r3]
 800cd02:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800cd04:	1d21      	adds	r1, r4, #4
 800cd06:	b2c9      	uxtb	r1, r1
 800cd08:	5caa      	ldrb	r2, [r5, r2]
 800cd0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cd0e:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800cd10:	1d62      	adds	r2, r4, #5
 800cd12:	b2d2      	uxtb	r2, r2
 800cd14:	5c69      	ldrb	r1, [r5, r1]
 800cd16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cd1a:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800cd1c:	2164      	movs	r1, #100	; 0x64
 800cd1e:	fb01 f303 	mul.w	r3, r1, r3
 800cd22:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800cd28:	3406      	adds	r4, #6
 800cd2a:	b2e4      	uxtb	r4, r4
 800cd2c:	56ab      	ldrsb	r3, [r5, r2]
 800cd2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800cd32:	a905      	add	r1, sp, #20
 800cd34:	4b15      	ldr	r3, [pc, #84]	; (800cd8c <ProcessMacCommands+0x32c>)
 800cd36:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cd3a:	f004 f855 	bl	8010de8 <RegionNewChannelReq>
 800cd3e:	b2c3      	uxtb	r3, r0
 800cd40:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800cd44:	2800      	cmp	r0, #0
 800cd46:	f6ff ae9e 	blt.w	800ca86 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800cd4a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800cd4e:	2201      	movs	r2, #1
 800cd50:	a90b      	add	r1, sp, #44	; 0x2c
 800cd52:	2007      	movs	r0, #7
 800cd54:	f003 f850 	bl	800fdf8 <LoRaMacCommandsAddCmd>
                break;
 800cd58:	e695      	b.n	800ca86 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800cd5a:	3402      	adds	r4, #2
 800cd5c:	b2e4      	uxtb	r4, r4
 800cd5e:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800cd60:	f013 030f 	ands.w	r3, r3, #15
 800cd64:	d100      	bne.n	800cd68 <ProcessMacCommands+0x308>
                    delay++;
 800cd66:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800cd68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd6c:	fb02 f303 	mul.w	r3, r2, r3
 800cd70:	4a06      	ldr	r2, [pc, #24]	; (800cd8c <ProcessMacCommands+0x32c>)
 800cd72:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800cd74:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800cd78:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	a90b      	add	r1, sp, #44	; 0x2c
 800cd7e:	2008      	movs	r0, #8
 800cd80:	f003 f83a 	bl	800fdf8 <LoRaMacCommandsAddCmd>
                break;
 800cd84:	e67f      	b.n	800ca86 <ProcessMacCommands+0x26>
 800cd86:	bf00      	nop
 800cd88:	20003c04 	.word	0x20003c04
 800cd8c:	20008000 	.word	0x20008000
 800cd90:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800cd94:	3402      	adds	r4, #2
 800cd96:	b2e4      	uxtb	r4, r4
 800cd98:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800cda0:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800cda4:	f013 0f20 	tst.w	r3, #32
 800cda8:	d002      	beq.n	800cdb0 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800cdb0:	f013 0f10 	tst.w	r3, #16
 800cdb4:	d002      	beq.n	800cdbc <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800cdbc:	f003 030f 	and.w	r3, r3, #15
 800cdc0:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800cdc4:	a903      	add	r1, sp, #12
 800cdc6:	4b9c      	ldr	r3, [pc, #624]	; (800d038 <ProcessMacCommands+0x5d8>)
 800cdc8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800cdcc:	f004 f81a 	bl	8010e04 <RegionTxParamSetupReq>
 800cdd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cdd4:	f43f ae57 	beq.w	800ca86 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800cdd8:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800cddc:	4e96      	ldr	r6, [pc, #600]	; (800d038 <ProcessMacCommands+0x5d8>)
 800cdde:	f886 a07c 	strb.w	sl, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800cde2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800cde6:	f886 307d 	strb.w	r3, [r6, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800cdea:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800cdee:	4a93      	ldr	r2, [pc, #588]	; (800d03c <ProcessMacCommands+0x5dc>)
 800cdf0:	5cd0      	ldrb	r0, [r2, r3]
 800cdf2:	f7f3 ff63 	bl	8000cbc <__aeabi_ui2f>
 800cdf6:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ce00:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ce04:	a907      	add	r1, sp, #28
 800ce06:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800ce0a:	f003 ff36 	bl	8010c7a <RegionGetPhyParam>
 800ce0e:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800ce10:	b240      	sxtb	r0, r0
 800ce12:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800ce16:	4298      	cmp	r0, r3
 800ce18:	bfb8      	it	lt
 800ce1a:	4618      	movlt	r0, r3
 800ce1c:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800ce20:	2200      	movs	r2, #0
 800ce22:	a90b      	add	r1, sp, #44	; 0x2c
 800ce24:	2009      	movs	r0, #9
 800ce26:	f002 ffe7 	bl	800fdf8 <LoRaMacCommandsAddCmd>
                break;
 800ce2a:	e62c      	b.n	800ca86 <ProcessMacCommands+0x26>
                status = 0x03;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800ce32:	1ca3      	adds	r3, r4, #2
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	5daa      	ldrb	r2, [r5, r6]
 800ce38:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800ce3c:	1ce1      	adds	r1, r4, #3
 800ce3e:	b2c9      	uxtb	r1, r1
 800ce40:	5ceb      	ldrb	r3, [r5, r3]
 800ce42:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ce44:	1d22      	adds	r2, r4, #4
 800ce46:	b2d2      	uxtb	r2, r2
 800ce48:	5c69      	ldrb	r1, [r5, r1]
 800ce4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ce4e:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ce50:	3405      	adds	r4, #5
 800ce52:	b2e4      	uxtb	r4, r4
 800ce54:	5caa      	ldrb	r2, [r5, r2]
 800ce56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce5a:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800ce5c:	2264      	movs	r2, #100	; 0x64
 800ce5e:	fb02 f303 	mul.w	r3, r2, r3
 800ce62:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800ce64:	a907      	add	r1, sp, #28
 800ce66:	4b74      	ldr	r3, [pc, #464]	; (800d038 <ProcessMacCommands+0x5d8>)
 800ce68:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ce6c:	f003 ffd8 	bl	8010e20 <RegionDlChannelReq>
 800ce70:	b2c3      	uxtb	r3, r0
 800ce72:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800ce76:	2800      	cmp	r0, #0
 800ce78:	f6ff ae05 	blt.w	800ca86 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800ce7c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800ce80:	2201      	movs	r2, #1
 800ce82:	a90b      	add	r1, sp, #44	; 0x2c
 800ce84:	200a      	movs	r0, #10
 800ce86:	f002 ffb7 	bl	800fdf8 <LoRaMacCommandsAddCmd>
                break;
 800ce8a:	e5fc      	b.n	800ca86 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800ce8c:	2009      	movs	r0, #9
 800ce8e:	f003 f97b 	bl	8010188 <LoRaMacConfirmQueueIsCmdActive>
 800ce92:	b928      	cbnz	r0, 800cea0 <ProcessMacCommands+0x440>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ce94:	4b6a      	ldr	r3, [pc, #424]	; (800d040 <ProcessMacCommands+0x5e0>)
 800ce96:	2200      	movs	r2, #0
 800ce98:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
        switch( payload[macIndex++] )
 800ce9c:	4634      	mov	r4, r6
 800ce9e:	e5f2      	b.n	800ca86 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800cea0:	2109      	movs	r1, #9
 800cea2:	2000      	movs	r0, #0
 800cea4:	f003 f924 	bl	80100f0 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800cea8:	a903      	add	r1, sp, #12
 800ceaa:	2300      	movs	r3, #0
 800ceac:	9303      	str	r3, [sp, #12]
 800ceae:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800ceb0:	f10d 0a14 	add.w	sl, sp, #20
 800ceb4:	9305      	str	r3, [sp, #20]
 800ceb6:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800ceb8:	f10d 0b1c 	add.w	fp, sp, #28
 800cebc:	9307      	str	r3, [sp, #28]
 800cebe:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800cec0:	1ca0      	adds	r0, r4, #2
 800cec2:	b2c0      	uxtb	r0, r0
 800cec4:	5dab      	ldrb	r3, [r5, r6]
 800cec6:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800cec8:	1ce2      	adds	r2, r4, #3
 800ceca:	b2d2      	uxtb	r2, r2
 800cecc:	5c28      	ldrb	r0, [r5, r0]
 800cece:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ced2:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800ced4:	1d20      	adds	r0, r4, #4
 800ced6:	b2c0      	uxtb	r0, r0
 800ced8:	5caa      	ldrb	r2, [r5, r2]
 800ceda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cede:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800cee0:	1d62      	adds	r2, r4, #5
 800cee2:	b2d2      	uxtb	r2, r2
 800cee4:	5c28      	ldrb	r0, [r5, r0]
 800cee6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800ceea:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800ceec:	3406      	adds	r4, #6
 800ceee:	b2e4      	uxtb	r4, r4
 800cef0:	5caa      	ldrb	r2, [r5, r2]
 800cef2:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800cef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cefa:	fb00 f202 	mul.w	r2, r0, r2
 800cefe:	0a12      	lsrs	r2, r2, #8
 800cf00:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800cf04:	c903      	ldmia	r1, {r0, r1}
 800cf06:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800cf0a:	4a4e      	ldr	r2, [pc, #312]	; (800d044 <ProcessMacCommands+0x5e4>)
 800cf0c:	441a      	add	r2, r3
 800cf0e:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800cf10:	4658      	mov	r0, fp
 800cf12:	f009 f8a7 	bl	8016064 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800cf16:	4e4a      	ldr	r6, [pc, #296]	; (800d040 <ProcessMacCommands+0x5e0>)
 800cf18:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800cf22:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800cf26:	a80c      	add	r0, sp, #48	; 0x30
 800cf28:	f009 f85b 	bl	8015fe2 <SysTimeSub>
 800cf2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf32:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800cf36:	4650      	mov	r0, sl
 800cf38:	f009 f834 	bl	8015fa4 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800cf3c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800cf40:	f009 f86e 	bl	8016020 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800cf44:	f002 febe 	bl	800fcc4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
 800cf4e:	e59a      	b.n	800ca86 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800cf50:	200c      	movs	r0, #12
 800cf52:	f003 f919 	bl	8010188 <LoRaMacConfirmQueueIsCmdActive>
 800cf56:	b908      	cbnz	r0, 800cf5c <ProcessMacCommands+0x4fc>
        switch( payload[macIndex++] )
 800cf58:	4634      	mov	r4, r6
 800cf5a:	e594      	b.n	800ca86 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800cf5c:	210c      	movs	r1, #12
 800cf5e:	2000      	movs	r0, #0
 800cf60:	f003 f8c6 	bl	80100f0 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800cf64:	4b36      	ldr	r3, [pc, #216]	; (800d040 <ProcessMacCommands+0x5e0>)
 800cf66:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800cf6a:	3b04      	subs	r3, #4
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d801      	bhi.n	800cf76 <ProcessMacCommands+0x516>
        switch( payload[macIndex++] )
 800cf72:	4634      	mov	r4, r6
 800cf74:	e587      	b.n	800ca86 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800cf76:	f002 fea1 	bl	800fcbc <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800cf7a:	4634      	mov	r4, r6
 800cf7c:	e583      	b.n	800ca86 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800cf7e:	1ca2      	adds	r2, r4, #2
 800cf80:	b2d2      	uxtb	r2, r2
 800cf82:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800cf84:	1ce1      	adds	r1, r4, #3
 800cf86:	b2c9      	uxtb	r1, r1
 800cf88:	5caa      	ldrb	r2, [r5, r2]
 800cf8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800cf8e:	1d22      	adds	r2, r4, #4
 800cf90:	b2d2      	uxtb	r2, r2
 800cf92:	5c69      	ldrb	r1, [r5, r1]
 800cf94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800cf98:	3405      	adds	r4, #5
 800cf9a:	b2e4      	uxtb	r4, r4
 800cf9c:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800cf9e:	2164      	movs	r1, #100	; 0x64
 800cfa0:	fb03 f101 	mul.w	r1, r3, r1
 800cfa4:	f000 000f 	and.w	r0, r0, #15
 800cfa8:	f002 fe89 	bl	800fcbe <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800cfac:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	a90b      	add	r1, sp, #44	; 0x2c
 800cfb4:	2011      	movs	r0, #17
 800cfb6:	f002 ff1f 	bl	800fdf8 <LoRaMacCommandsAddCmd>
                break;
 800cfba:	e564      	b.n	800ca86 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800cfbc:	200d      	movs	r0, #13
 800cfbe:	f003 f8e3 	bl	8010188 <LoRaMacConfirmQueueIsCmdActive>
 800cfc2:	b908      	cbnz	r0, 800cfc8 <ProcessMacCommands+0x568>
        switch( payload[macIndex++] )
 800cfc4:	4634      	mov	r4, r6
 800cfc6:	e55e      	b.n	800ca86 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800cfc8:	210d      	movs	r1, #13
 800cfca:	2000      	movs	r0, #0
 800cfcc:	f003 f890 	bl	80100f0 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800cfd0:	1ca2      	adds	r2, r4, #2
 800cfd2:	b2d2      	uxtb	r2, r2
 800cfd4:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800cfd6:	1ce3      	adds	r3, r4, #3
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800cfdc:	3404      	adds	r4, #4
 800cfde:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800cfe0:	4a19      	ldr	r2, [pc, #100]	; (800d048 <ProcessMacCommands+0x5e8>)
 800cfe2:	6812      	ldr	r2, [r2, #0]
 800cfe4:	5ce9      	ldrb	r1, [r5, r3]
 800cfe6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800cfea:	f002 fe6a 	bl	800fcc2 <LoRaMacClassBBeaconTimingAns>
 800cfee:	e54a      	b.n	800ca86 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800cff0:	1ca1      	adds	r1, r4, #2
 800cff2:	b2c9      	uxtb	r1, r1
 800cff4:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800cff6:	1ce2      	adds	r2, r4, #3
 800cff8:	b2d2      	uxtb	r2, r2
 800cffa:	5c69      	ldrb	r1, [r5, r1]
 800cffc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800d000:	3404      	adds	r4, #4
 800d002:	b2e4      	uxtb	r4, r4
 800d004:	5caa      	ldrb	r2, [r5, r2]
 800d006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800d00a:	2064      	movs	r0, #100	; 0x64
 800d00c:	fb03 f000 	mul.w	r0, r3, r0
 800d010:	f002 fe59 	bl	800fcc6 <LoRaMacClassBBeaconFreqReq>
 800d014:	b140      	cbz	r0, 800d028 <ProcessMacCommands+0x5c8>
                        macCmdPayload[0] = 1;
 800d016:	2301      	movs	r3, #1
 800d018:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800d01c:	2201      	movs	r2, #1
 800d01e:	a90b      	add	r1, sp, #44	; 0x2c
 800d020:	2013      	movs	r0, #19
 800d022:	f002 fee9 	bl	800fdf8 <LoRaMacCommandsAddCmd>
                break;
 800d026:	e52e      	b.n	800ca86 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d02e:	e7f5      	b.n	800d01c <ProcessMacCommands+0x5bc>
}
 800d030:	b00f      	add	sp, #60	; 0x3c
 800d032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d036:	bf00      	nop
 800d038:	20008000 	.word	0x20008000
 800d03c:	080180fc 	.word	0x080180fc
 800d040:	20003c04 	.word	0x20003c04
 800d044:	12d53d80 	.word	0x12d53d80
 800d048:	200041b0 	.word	0x200041b0

0800d04c <ProcessRadioRxDone>:
{
 800d04c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d050:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800d052:	4ba5      	ldr	r3, [pc, #660]	; (800d2e8 <ProcessRadioRxDone+0x29c>)
 800d054:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800d056:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800d058:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800d05c:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800d060:	2300      	movs	r3, #0
 800d062:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d064:	4aa1      	ldr	r2, [pc, #644]	; (800d2ec <ProcessRadioRxDone+0x2a0>)
 800d066:	f8d2 90e4 	ldr.w	r9, [r2, #228]	; 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800d06a:	4aa1      	ldr	r2, [pc, #644]	; (800d2f0 <ProcessRadioRxDone+0x2a4>)
 800d06c:	7811      	ldrb	r1, [r2, #0]
 800d06e:	f363 0100 	bfi	r1, r3, #0, #1
 800d072:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800d074:	4c9f      	ldr	r4, [pc, #636]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d076:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800d07a:	f8a4 848c 	strh.w	r8, [r4, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800d07e:	f884 748e 	strb.w	r7, [r4, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d082:	f894 2490 	ldrb.w	r2, [r4, #1168]	; 0x490
 800d086:	f884 248f 	strb.w	r2, [r4, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800d08a:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800d08e:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800d092:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800d096:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800d09a:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800d09e:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800d0a2:	f884 342e 	strb.w	r3, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d0a6:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d0aa:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800d0ae:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d0b2:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800d0b6:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 800d0ba:	4b8f      	ldr	r3, [pc, #572]	; (800d2f8 <ProcessRadioRxDone+0x2ac>)
 800d0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0be:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800d0c0:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800d0c4:	b1d3      	cbz	r3, 800d0fc <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	f002 fde4 	bl	800fc96 <LoRaMacClassBRxBeacon>
 800d0ce:	b9d0      	cbnz	r0, 800d106 <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d0d0:	4b86      	ldr	r3, [pc, #536]	; (800d2ec <ProcessRadioRxDone+0x2a0>)
 800d0d2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d01d      	beq.n	800d116 <ProcessRadioRxDone+0xca>
    if( size == 0 )
 800d0da:	2d00      	cmp	r5, #0
 800d0dc:	d038      	beq.n	800d150 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 800d0de:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800d0e0:	0963      	lsrs	r3, r4, #5
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	2b06      	cmp	r3, #6
 800d0e6:	f200 82fd 	bhi.w	800d6e4 <ProcessRadioRxDone+0x698>
 800d0ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d0ee:	0038      	.short	0x0038
 800d0f0:	00d102fb 	.word	0x00d102fb
 800d0f4:	00cd02fb 	.word	0x00cd02fb
 800d0f8:	02cd02fb 	.word	0x02cd02fb
        TimerStop( &MacCtx.RxWindowTimer2 );
 800d0fc:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800d100:	f009 f89e 	bl	8016240 <UTIL_TIMER_Stop>
 800d104:	e7df      	b.n	800d0c6 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d106:	4b7b      	ldr	r3, [pc, #492]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d108:	f8a3 847e 	strh.w	r8, [r3, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d10c:	f883 7480 	strb.w	r7, [r3, #1152]	; 0x480
}
 800d110:	b025      	add	sp, #148	; 0x94
 800d112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d116:	f002 fdc2 	bl	800fc9e <LoRaMacClassBIsPingExpected>
 800d11a:	b150      	cbz	r0, 800d132 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d11c:	2000      	movs	r0, #0
 800d11e:	f002 fdb3 	bl	800fc88 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d122:	2000      	movs	r0, #0
 800d124:	f002 fdb5 	bl	800fc92 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d128:	4b72      	ldr	r3, [pc, #456]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d12a:	2204      	movs	r2, #4
 800d12c:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800d130:	e7d3      	b.n	800d0da <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d132:	f002 fdb6 	bl	800fca2 <LoRaMacClassBIsMulticastExpected>
 800d136:	2800      	cmp	r0, #0
 800d138:	d0cf      	beq.n	800d0da <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d13a:	2000      	movs	r0, #0
 800d13c:	f002 fda5 	bl	800fc8a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d140:	2000      	movs	r0, #0
 800d142:	f002 fda7 	bl	800fc94 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d146:	4b6b      	ldr	r3, [pc, #428]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d148:	2205      	movs	r2, #5
 800d14a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800d14e:	e7c4      	b.n	800d0da <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d150:	4b68      	ldr	r3, [pc, #416]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800d158:	f7ff fc0a 	bl	800c970 <PrepareRxDoneAbort>
        return;
 800d15c:	e7d8      	b.n	800d110 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d15e:	2d10      	cmp	r5, #16
 800d160:	d92e      	bls.n	800d1c0 <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 800d162:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 800d164:	b2ed      	uxtb	r5, r5
 800d166:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d16a:	4b60      	ldr	r3, [pc, #384]	; (800d2ec <ProcessRadioRxDone+0x2a0>)
 800d16c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d170:	bb6b      	cbnz	r3, 800d1ce <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 800d172:	a804      	add	r0, sp, #16
 800d174:	f006 fd18 	bl	8013ba8 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800d178:	aa08      	add	r2, sp, #32
 800d17a:	a904      	add	r1, sp, #16
 800d17c:	20ff      	movs	r0, #255	; 0xff
 800d17e:	f003 fb7f 	bl	8010880 <LoRaMacCryptoHandleJoinAccept>
 800d182:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d184:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d188:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d18c:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d190:	4b56      	ldr	r3, [pc, #344]	; (800d2ec <ProcessRadioRxDone+0x2a0>)
 800d192:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800d196:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800d19a:	2207      	movs	r2, #7
 800d19c:	a903      	add	r1, sp, #12
 800d19e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d1a2:	f003 fd9b 	bl	8010cdc <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800d1a6:	b904      	cbnz	r4, 800d1aa <ProcessRadioRxDone+0x15e>
 800d1a8:	b9c0      	cbnz	r0, 800d1dc <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d1aa:	2001      	movs	r0, #1
 800d1ac:	f002 ffec 	bl	8010188 <LoRaMacConfirmQueueIsCmdActive>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	f000 8283 	beq.w	800d6bc <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800d1b6:	2101      	movs	r1, #1
 800d1b8:	2007      	movs	r0, #7
 800d1ba:	f002 ff99 	bl	80100f0 <LoRaMacConfirmQueueSetStatus>
 800d1be:	e27d      	b.n	800d6bc <ProcessRadioRxDone+0x670>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d1c0:	4b4c      	ldr	r3, [pc, #304]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800d1c8:	f7ff fbd2 	bl	800c970 <PrepareRxDoneAbort>
                return;
 800d1cc:	e7a0      	b.n	800d110 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d1ce:	4b49      	ldr	r3, [pc, #292]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800d1d6:	f7ff fbcb 	bl	800c970 <PrepareRxDoneAbort>
                return;
 800d1da:	e799      	b.n	800d110 <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800d1dc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800d1e0:	4c42      	ldr	r4, [pc, #264]	; (800d2ec <ProcessRadioRxDone+0x2a0>)
 800d1e2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800d1e6:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 800d1ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d1ee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800d1f2:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 800d1f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1fa:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800d1fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d200:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800d204:	2002      	movs	r0, #2
 800d206:	f006 fcdd 	bl	8013bc4 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800d20a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d20e:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800d212:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d216:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d21a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d21e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800d222:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800d226:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800d228:	b90b      	cbnz	r3, 800d22e <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800d22a:	2201      	movs	r2, #1
 800d22c:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800d22e:	4c2f      	ldr	r4, [pc, #188]	; (800d2ec <ProcessRadioRxDone+0x2a0>)
 800d230:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d236:	fb02 f303 	mul.w	r3, r2, r3
 800d23a:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d23c:	4413      	add	r3, r2
 800d23e:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800d240:	2601      	movs	r6, #1
 800d242:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800d24c:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800d250:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 800d252:	3d11      	subs	r5, #17
 800d254:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 800d258:	4b26      	ldr	r3, [pc, #152]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d25a:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800d25e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800d262:	a921      	add	r1, sp, #132	; 0x84
 800d264:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d268:	f003 fd48 	bl	8010cfc <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d26c:	2302      	movs	r3, #2
 800d26e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800d272:	4630      	mov	r0, r6
 800d274:	f002 ff88 	bl	8010188 <LoRaMacConfirmQueueIsCmdActive>
 800d278:	2800      	cmp	r0, #0
 800d27a:	f000 821f 	beq.w	800d6bc <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800d27e:	4631      	mov	r1, r6
 800d280:	2000      	movs	r0, #0
 800d282:	f002 ff35 	bl	80100f0 <LoRaMacConfirmQueueSetStatus>
 800d286:	e219      	b.n	800d6bc <ProcessRadioRxDone+0x670>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d288:	4b1a      	ldr	r3, [pc, #104]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d290:	4b16      	ldr	r3, [pc, #88]	; (800d2ec <ProcessRadioRxDone+0x2a0>)
 800d292:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800d296:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800d29a:	4a16      	ldr	r2, [pc, #88]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d29c:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 800d2a0:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800d2a4:	220d      	movs	r2, #13
 800d2a6:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800d2aa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d2ae:	b113      	cbz	r3, 800d2b6 <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800d2b0:	230e      	movs	r3, #14
 800d2b2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d2b6:	a91f      	add	r1, sp, #124	; 0x7c
 800d2b8:	4b0c      	ldr	r3, [pc, #48]	; (800d2ec <ProcessRadioRxDone+0x2a0>)
 800d2ba:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d2be:	f003 fcdc 	bl	8010c7a <RegionGetPhyParam>
 800d2c2:	901e      	str	r0, [sp, #120]	; 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800d2c4:	f1a5 030d 	sub.w	r3, r5, #13
 800d2c8:	b21b      	sxth	r3, r3
 800d2ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d2ce:	b200      	sxth	r0, r0
 800d2d0:	4283      	cmp	r3, r0
 800d2d2:	dc01      	bgt.n	800d2d8 <ProcessRadioRxDone+0x28c>
 800d2d4:	2d0b      	cmp	r5, #11
 800d2d6:	d811      	bhi.n	800d2fc <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d2d8:	4b06      	ldr	r3, [pc, #24]	; (800d2f4 <ProcessRadioRxDone+0x2a8>)
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800d2e0:	f7ff fb46 	bl	800c970 <PrepareRxDoneAbort>
                return;
 800d2e4:	e714      	b.n	800d110 <ProcessRadioRxDone+0xc4>
 800d2e6:	bf00      	nop
 800d2e8:	200041b0 	.word	0x200041b0
 800d2ec:	20008000 	.word	0x20008000
 800d2f0:	20003c00 	.word	0x20003c00
 800d2f4:	20003c04 	.word	0x20003c04
 800d2f8:	0801885c 	.word	0x0801885c
            macMsgData.Buffer = payload;
 800d2fc:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 800d2fe:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800d302:	4ba5      	ldr	r3, [pc, #660]	; (800d598 <ProcessRadioRxDone+0x54c>)
 800d304:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800d306:	23ff      	movs	r3, #255	; 0xff
 800d308:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800d30c:	a812      	add	r0, sp, #72	; 0x48
 800d30e:	f003 fb85 	bl	8010a1c <LoRaMacParserData>
 800d312:	2800      	cmp	r0, #0
 800d314:	d142      	bne.n	800d39c <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d316:	4ba1      	ldr	r3, [pc, #644]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d318:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d044      	beq.n	800d3aa <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800d320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d322:	4b9f      	ldr	r3, [pc, #636]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d324:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800d328:	a904      	add	r1, sp, #16
 800d32a:	a812      	add	r0, sp, #72	; 0x48
 800d32c:	f7ff f996 	bl	800c65c <DetermineFrameType>
 800d330:	4605      	mov	r5, r0
 800d332:	2800      	cmp	r0, #0
 800d334:	d164      	bne.n	800d400 <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d066      	beq.n	800d40e <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d340:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d342:	2d01      	cmp	r5, #1
 800d344:	d10a      	bne.n	800d35c <ProcessRadioRxDone+0x310>
 800d346:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	f040 808e 	bne.w	800d46c <ProcessRadioRxDone+0x420>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d350:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d354:	f013 0f60 	tst.w	r3, #96	; 0x60
 800d358:	f040 8088 	bne.w	800d46c <ProcessRadioRxDone+0x420>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800d35c:	ab07      	add	r3, sp, #28
 800d35e:	9301      	str	r3, [sp, #4]
 800d360:	f10d 031b 	add.w	r3, sp, #27
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	4b8d      	ldr	r3, [pc, #564]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d368:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800d36c:	aa12      	add	r2, sp, #72	; 0x48
 800d36e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800d372:	4630      	mov	r0, r6
 800d374:	f7ff fb3a 	bl	800c9ec <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d378:	2800      	cmp	r0, #0
 800d37a:	f000 8083 	beq.w	800d484 <ProcessRadioRxDone+0x438>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800d37e:	2807      	cmp	r0, #7
 800d380:	d07b      	beq.n	800d47a <ProcessRadioRxDone+0x42e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d382:	4b87      	ldr	r3, [pc, #540]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d384:	2201      	movs	r2, #1
 800d386:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d38a:	9a07      	ldr	r2, [sp, #28]
 800d38c:	4b84      	ldr	r3, [pc, #528]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d38e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d392:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800d396:	f7ff faeb 	bl	800c970 <PrepareRxDoneAbort>
                return;
 800d39a:	e6b9      	b.n	800d110 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d39c:	4b80      	ldr	r3, [pc, #512]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800d3a4:	f7ff fae4 	bl	800c970 <PrepareRxDoneAbort>
                return;
 800d3a8:	e6b2      	b.n	800d110 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800d3aa:	f002 fc78 	bl	800fc9e <LoRaMacClassBIsPingExpected>
 800d3ae:	b188      	cbz	r0, 800d3d4 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	f002 fc69 	bl	800fc88 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	f002 fc6b 	bl	800fc92 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d3bc:	4b78      	ldr	r3, [pc, #480]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d3be:	2204      	movs	r2, #4
 800d3c0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800d3c4:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800d3c8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800d3cc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d3ce:	f002 fc7f 	bl	800fcd0 <LoRaMacClassBSetFPendingBit>
 800d3d2:	e7a5      	b.n	800d320 <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d3d4:	f002 fc65 	bl	800fca2 <LoRaMacClassBIsMulticastExpected>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d0a1      	beq.n	800d320 <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d3dc:	2000      	movs	r0, #0
 800d3de:	f002 fc54 	bl	800fc8a <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	f002 fc56 	bl	800fc94 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d3e8:	4b6d      	ldr	r3, [pc, #436]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d3ea:	2205      	movs	r2, #5
 800d3ec:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800d3f0:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800d3f4:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800d3f8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d3fa:	f002 fc69 	bl	800fcd0 <LoRaMacClassBSetFPendingBit>
 800d3fe:	e78f      	b.n	800d320 <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d400:	4b67      	ldr	r3, [pc, #412]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800d408:	f7ff fab2 	bl	800c970 <PrepareRxDoneAbort>
                return;
 800d40c:	e680      	b.n	800d110 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d40e:	4618      	mov	r0, r3
 800d410:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d414:	4a61      	ldr	r2, [pc, #388]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d416:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d41a:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800d41e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d420:	428a      	cmp	r2, r1
 800d422:	d002      	beq.n	800d42a <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d424:	3301      	adds	r3, #1
 800d426:	b2db      	uxtb	r3, r3
 800d428:	e788      	b.n	800d33c <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800d42a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800d42e:	495b      	ldr	r1, [pc, #364]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d430:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800d434:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d438:	2900      	cmp	r1, #0
 800d43a:	d0f3      	beq.n	800d424 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800d43c:	4b57      	ldr	r3, [pc, #348]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d43e:	2130      	movs	r1, #48	; 0x30
 800d440:	fb01 3000 	mla	r0, r1, r0, r3
 800d444:	f890 60ea 	ldrb.w	r6, [r0, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800d448:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800d44c:	6809      	ldr	r1, [r1, #0]
 800d44e:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d450:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d454:	2b02      	cmp	r3, #2
 800d456:	d002      	beq.n	800d45e <ProcessRadioRxDone+0x412>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800d458:	4691      	mov	r9, r2
                    multicast = 1;
 800d45a:	2501      	movs	r5, #1
 800d45c:	e771      	b.n	800d342 <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d45e:	4b50      	ldr	r3, [pc, #320]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d460:	2103      	movs	r1, #3
 800d462:	f883 148f 	strb.w	r1, [r3, #1167]	; 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800d466:	4691      	mov	r9, r2
                    multicast = 1;
 800d468:	2501      	movs	r5, #1
 800d46a:	e76a      	b.n	800d342 <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d46c:	4b4c      	ldr	r3, [pc, #304]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d46e:	2201      	movs	r2, #1
 800d470:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800d474:	f7ff fa7c 	bl	800c970 <PrepareRxDoneAbort>
                return;
 800d478:	e64a      	b.n	800d110 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800d47a:	4b49      	ldr	r3, [pc, #292]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d47c:	2208      	movs	r2, #8
 800d47e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800d482:	e782      	b.n	800d38a <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800d484:	ab12      	add	r3, sp, #72	; 0x48
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	9b07      	ldr	r3, [sp, #28]
 800d48a:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800d48e:	4649      	mov	r1, r9
 800d490:	4630      	mov	r0, r6
 800d492:	f003 f94d 	bl	8010730 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d496:	2800      	cmp	r0, #0
 800d498:	d14a      	bne.n	800d530 <ProcessRadioRxDone+0x4e4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d49a:	4b41      	ldr	r3, [pc, #260]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d49c:	2100      	movs	r1, #0
 800d49e:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800d4a2:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800d4a6:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800d4aa:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d4ae:	9a07      	ldr	r2, [sp, #28]
 800d4b0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d4b4:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d4b8:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800d4bc:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800d4c0:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d4c4:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d4c8:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d4cc:	f893 048f 	ldrb.w	r0, [r3, #1167]	; 0x48f
 800d4d0:	2801      	cmp	r0, #1
 800d4d2:	d93b      	bls.n	800d54c <ProcessRadioRxDone+0x500>
            if( multicast == 1 )
 800d4d4:	2d01      	cmp	r5, #1
 800d4d6:	d03f      	beq.n	800d558 <ProcessRadioRxDone+0x50c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800d4d8:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800d4dc:	2ca0      	cmp	r4, #160	; 0xa0
 800d4de:	d040      	beq.n	800d562 <ProcessRadioRxDone+0x516>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	4a2e      	ldr	r2, [pc, #184]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d4e4:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d4e8:	4a2d      	ldr	r2, [pc, #180]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d4ea:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800d4ee:	4b2b      	ldr	r3, [pc, #172]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d4f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d4f4:	b923      	cbnz	r3, 800d500 <ProcessRadioRxDone+0x4b4>
 800d4f6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d4fa:	f013 0f10 	tst.w	r3, #16
 800d4fe:	d007      	beq.n	800d510 <ProcessRadioRxDone+0x4c4>
 800d500:	4b26      	ldr	r3, [pc, #152]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d502:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d506:	b91b      	cbnz	r3, 800d510 <ProcessRadioRxDone+0x4c4>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800d508:	4b25      	ldr	r3, [pc, #148]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d50a:	2201      	movs	r2, #1
 800d50c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800d510:	4b23      	ldr	r3, [pc, #140]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d512:	f893 2440 	ldrb.w	r2, [r3, #1088]	; 0x440
 800d516:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800d51a:	f7ff fa92 	bl	800ca42 <RemoveMacCommands>
            switch( fType )
 800d51e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d522:	2b03      	cmp	r3, #3
 800d524:	f200 8099 	bhi.w	800d65a <ProcessRadioRxDone+0x60e>
 800d528:	e8df f003 	tbb	[pc, r3]
 800d52c:	8777653e 	.word	0x8777653e
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800d530:	2802      	cmp	r0, #2
 800d532:	d006      	beq.n	800d542 <ProcessRadioRxDone+0x4f6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800d534:	4b1a      	ldr	r3, [pc, #104]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d536:	220b      	movs	r2, #11
 800d538:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800d53c:	f7ff fa18 	bl	800c970 <PrepareRxDoneAbort>
                return;
 800d540:	e5e6      	b.n	800d110 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800d542:	4b17      	ldr	r3, [pc, #92]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d544:	220a      	movs	r2, #10
 800d546:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800d54a:	e7f7      	b.n	800d53c <ProcessRadioRxDone+0x4f0>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800d54c:	4b13      	ldr	r3, [pc, #76]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d54e:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800d550:	2201      	movs	r2, #1
 800d552:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
 800d556:	e7bd      	b.n	800d4d4 <ProcessRadioRxDone+0x488>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800d558:	4b11      	ldr	r3, [pc, #68]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d55a:	2202      	movs	r2, #2
 800d55c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800d560:	e7c5      	b.n	800d4ee <ProcessRadioRxDone+0x4a2>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800d562:	4b0e      	ldr	r3, [pc, #56]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d564:	2201      	movs	r2, #1
 800d566:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d56a:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800d56e:	b913      	cbnz	r3, 800d576 <ProcessRadioRxDone+0x52a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800d570:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d572:	4b0a      	ldr	r3, [pc, #40]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d574:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d576:	4b0a      	ldr	r3, [pc, #40]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800d57e:	4290      	cmp	r0, r2
 800d580:	d9b5      	bls.n	800d4ee <ProcessRadioRxDone+0x4a2>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800d582:	4b06      	ldr	r3, [pc, #24]	; (800d59c <ProcessRadioRxDone+0x550>)
 800d584:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800d588:	4b05      	ldr	r3, [pc, #20]	; (800d5a0 <ProcessRadioRxDone+0x554>)
 800d58a:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800d58e:	4a05      	ldr	r2, [pc, #20]	; (800d5a4 <ProcessRadioRxDone+0x558>)
 800d590:	6812      	ldr	r2, [r2, #0]
 800d592:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 800d596:	e7aa      	b.n	800d4ee <ProcessRadioRxDone+0x4a2>
 800d598:	20003e3c 	.word	0x20003e3c
 800d59c:	20008000 	.word	0x20008000
 800d5a0:	20003c04 	.word	0x20003c04
 800d5a4:	200041b0 	.word	0x200041b0
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d5a8:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800d5ac:	4c58      	ldr	r4, [pc, #352]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d5ae:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800d5b2:	9300      	str	r3, [sp, #0]
 800d5b4:	463b      	mov	r3, r7
 800d5b6:	f002 020f 	and.w	r2, r2, #15
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	a816      	add	r0, sp, #88	; 0x58
 800d5be:	f7ff fa4f 	bl	800ca60 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d5c2:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800d5c6:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d5ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d5cc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d5d0:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800d5d4:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800d5de:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800d5e2:	2be0      	cmp	r3, #224	; 0xe0
 800d5e4:	d040      	beq.n	800d668 <ProcessRadioRxDone+0x61c>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d5e6:	4a4a      	ldr	r2, [pc, #296]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d5e8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800d5ec:	f043 0302 	orr.w	r3, r3, #2
 800d5f0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800d5f4:	e062      	b.n	800d6bc <ProcessRadioRxDone+0x670>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d5f6:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800d5fa:	4c45      	ldr	r4, [pc, #276]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d5fc:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	463b      	mov	r3, r7
 800d604:	f002 020f 	and.w	r2, r2, #15
 800d608:	2100      	movs	r1, #0
 800d60a:	a816      	add	r0, sp, #88	; 0x58
 800d60c:	f7ff fa28 	bl	800ca60 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d610:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800d614:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800d618:	e7e1      	b.n	800d5de <ProcessRadioRxDone+0x592>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d61a:	4c3d      	ldr	r4, [pc, #244]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d61c:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	463b      	mov	r3, r7
 800d624:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800d628:	2100      	movs	r1, #0
 800d62a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d62c:	f7ff fa18 	bl	800ca60 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d630:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800d634:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800d638:	e7d1      	b.n	800d5de <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d63a:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800d63e:	4b34      	ldr	r3, [pc, #208]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d640:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d644:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d646:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d64a:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800d64e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800d652:	2201      	movs	r2, #1
 800d654:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800d658:	e7c1      	b.n	800d5de <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d65a:	4b2d      	ldr	r3, [pc, #180]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800d662:	f7ff f985 	bl	800c970 <PrepareRxDoneAbort>
                    break;
 800d666:	e7ba      	b.n	800d5de <ProcessRadioRxDone+0x592>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800d668:	4a2a      	ldr	r2, [pc, #168]	; (800d714 <ProcessRadioRxDone+0x6c8>)
 800d66a:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 800d66e:	2a00      	cmp	r2, #0
 800d670:	d1b9      	bne.n	800d5e6 <ProcessRadioRxDone+0x59a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d672:	4a27      	ldr	r2, [pc, #156]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d674:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800d678:	2300      	movs	r3, #0
 800d67a:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800d67e:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800d682:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 800d686:	e7ae      	b.n	800d5e6 <ProcessRadioRxDone+0x59a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d688:	1e6a      	subs	r2, r5, #1
 800d68a:	4c21      	ldr	r4, [pc, #132]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d68c:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800d690:	b292      	uxth	r2, r2
 800d692:	1c71      	adds	r1, r6, #1
 800d694:	4638      	mov	r0, r7
 800d696:	f006 fba4 	bl	8013de2 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d69a:	2303      	movs	r3, #3
 800d69c:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d6a6:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d6aa:	3d01      	subs	r5, #1
 800d6ac:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d6b0:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800d6b4:	f043 0302 	orr.w	r3, r3, #2
 800d6b8:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d6bc:	4b14      	ldr	r3, [pc, #80]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d6be:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d915      	bls.n	800d6f2 <ProcessRadioRxDone+0x6a6>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800d6c6:	4b12      	ldr	r3, [pc, #72]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d6c8:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	d006      	beq.n	800d6de <ProcessRadioRxDone+0x692>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800d6d0:	4a0f      	ldr	r2, [pc, #60]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d6d2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800d6d6:	f043 0310 	orr.w	r3, r3, #16
 800d6da:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800d6de:	f7fe ff31 	bl	800c544 <UpdateRxSlotIdleState>
 800d6e2:	e515      	b.n	800d110 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d6e4:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800d6ec:	f7ff f940 	bl	800c970 <PrepareRxDoneAbort>
            break;
 800d6f0:	e7e4      	b.n	800d6bc <ProcessRadioRxDone+0x670>
        if( MacCtx.NodeAckRequested == true )
 800d6f2:	4b07      	ldr	r3, [pc, #28]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d6f4:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d0e4      	beq.n	800d6c6 <ProcessRadioRxDone+0x67a>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800d6fc:	4b04      	ldr	r3, [pc, #16]	; (800d710 <ProcessRadioRxDone+0x6c4>)
 800d6fe:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800d702:	2b00      	cmp	r3, #0
 800d704:	d0df      	beq.n	800d6c6 <ProcessRadioRxDone+0x67a>
                OnRetransmitTimeoutTimerEvent( NULL );
 800d706:	2000      	movs	r0, #0
 800d708:	f7ff f920 	bl	800c94c <OnRetransmitTimeoutTimerEvent>
 800d70c:	e7db      	b.n	800d6c6 <ProcessRadioRxDone+0x67a>
 800d70e:	bf00      	nop
 800d710:	20003c04 	.word	0x20003c04
 800d714:	20008000 	.word	0x20008000

0800d718 <ProcessRadioTxTimeout>:
{
 800d718:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d71a:	4b0f      	ldr	r3, [pc, #60]	; (800d758 <ProcessRadioTxTimeout+0x40>)
 800d71c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d720:	2b02      	cmp	r3, #2
 800d722:	d002      	beq.n	800d72a <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800d724:	4b0d      	ldr	r3, [pc, #52]	; (800d75c <ProcessRadioTxTimeout+0x44>)
 800d726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d728:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800d72a:	f7fe ff0b 	bl	800c544 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800d72e:	4c0c      	ldr	r4, [pc, #48]	; (800d760 <ProcessRadioTxTimeout+0x48>)
 800d730:	2002      	movs	r0, #2
 800d732:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800d736:	f002 fd09 	bl	801014c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800d73a:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800d73e:	b113      	cbz	r3, 800d746 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800d740:	2201      	movs	r2, #1
 800d742:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d746:	4a06      	ldr	r2, [pc, #24]	; (800d760 <ProcessRadioTxTimeout+0x48>)
 800d748:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800d74c:	f043 0310 	orr.w	r3, r3, #16
 800d750:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800d754:	bd10      	pop	{r4, pc}
 800d756:	bf00      	nop
 800d758:	20008000 	.word	0x20008000
 800d75c:	0801885c 	.word	0x0801885c
 800d760:	20003c04 	.word	0x20003c04

0800d764 <CheckForClassBCollision>:
{
 800d764:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d766:	f002 fa98 	bl	800fc9a <LoRaMacClassBIsBeaconExpected>
 800d76a:	b978      	cbnz	r0, 800d78c <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d76c:	4b09      	ldr	r3, [pc, #36]	; (800d794 <CheckForClassBCollision+0x30>)
 800d76e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d772:	2b01      	cmp	r3, #1
 800d774:	d001      	beq.n	800d77a <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800d776:	2000      	movs	r0, #0
}
 800d778:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d77a:	f002 fa90 	bl	800fc9e <LoRaMacClassBIsPingExpected>
 800d77e:	b938      	cbnz	r0, 800d790 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d780:	f002 fa8f 	bl	800fca2 <LoRaMacClassBIsMulticastExpected>
 800d784:	2800      	cmp	r0, #0
 800d786:	d0f7      	beq.n	800d778 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d788:	200f      	movs	r0, #15
 800d78a:	e7f5      	b.n	800d778 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800d78c:	200e      	movs	r0, #14
 800d78e:	e7f3      	b.n	800d778 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d790:	200f      	movs	r0, #15
 800d792:	e7f1      	b.n	800d778 <CheckForClassBCollision+0x14>
 800d794:	20008000 	.word	0x20008000

0800d798 <HandleRadioRxErrorTimeout>:
{
 800d798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79a:	4605      	mov	r5, r0
 800d79c:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d79e:	4b34      	ldr	r3, [pc, #208]	; (800d870 <HandleRadioRxErrorTimeout+0xd8>)
 800d7a0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d002      	beq.n	800d7ae <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800d7a8:	4b32      	ldr	r3, [pc, #200]	; (800d874 <HandleRadioRxErrorTimeout+0xdc>)
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d7ae:	f002 fa74 	bl	800fc9a <LoRaMacClassBIsBeaconExpected>
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	bb50      	cbnz	r0, 800d80c <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d7b6:	4b2e      	ldr	r3, [pc, #184]	; (800d870 <HandleRadioRxErrorTimeout+0xd8>)
 800d7b8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d02c      	beq.n	800d81a <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800d7c0:	2e00      	cmp	r6, #0
 800d7c2:	d152      	bne.n	800d86a <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d7c4:	4b2c      	ldr	r3, [pc, #176]	; (800d878 <HandleRadioRxErrorTimeout+0xe0>)
 800d7c6:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d13c      	bne.n	800d848 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800d7ce:	4b2a      	ldr	r3, [pc, #168]	; (800d878 <HandleRadioRxErrorTimeout+0xe0>)
 800d7d0:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800d7d4:	b113      	cbz	r3, 800d7dc <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800d7d6:	4b28      	ldr	r3, [pc, #160]	; (800d878 <HandleRadioRxErrorTimeout+0xe0>)
 800d7d8:	f883 5441 	strb.w	r5, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800d7dc:	4628      	mov	r0, r5
 800d7de:	f002 fcb5 	bl	801014c <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800d7e2:	4b23      	ldr	r3, [pc, #140]	; (800d870 <HandleRadioRxErrorTimeout+0xd8>)
 800d7e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d7e6:	f008 fcf5 	bl	80161d4 <UTIL_TIMER_GetElapsedTime>
 800d7ea:	4b23      	ldr	r3, [pc, #140]	; (800d878 <HandleRadioRxErrorTimeout+0xe0>)
 800d7ec:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d7f0:	4298      	cmp	r0, r3
 800d7f2:	d33a      	bcc.n	800d86a <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800d7f4:	4c20      	ldr	r4, [pc, #128]	; (800d878 <HandleRadioRxErrorTimeout+0xe0>)
 800d7f6:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800d7fa:	f008 fd21 	bl	8016240 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d7fe:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800d802:	f043 0310 	orr.w	r3, r3, #16
 800d806:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
 800d80a:	e02e      	b.n	800d86a <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800d80c:	2002      	movs	r0, #2
 800d80e:	f002 fa3a 	bl	800fc86 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800d812:	2000      	movs	r0, #0
 800d814:	f002 fa3c 	bl	800fc90 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800d818:	e7cd      	b.n	800d7b6 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d81a:	f002 fa40 	bl	800fc9e <LoRaMacClassBIsPingExpected>
 800d81e:	4607      	mov	r7, r0
 800d820:	b950      	cbnz	r0, 800d838 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d822:	f002 fa3e 	bl	800fca2 <LoRaMacClassBIsMulticastExpected>
 800d826:	2800      	cmp	r0, #0
 800d828:	d0ca      	beq.n	800d7c0 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d82a:	2000      	movs	r0, #0
 800d82c:	f002 fa2d 	bl	800fc8a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d830:	2000      	movs	r0, #0
 800d832:	f002 fa2f 	bl	800fc94 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800d836:	e018      	b.n	800d86a <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d838:	2000      	movs	r0, #0
 800d83a:	f002 fa25 	bl	800fc88 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d83e:	2000      	movs	r0, #0
 800d840:	f002 fa27 	bl	800fc92 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800d844:	463e      	mov	r6, r7
 800d846:	e7ec      	b.n	800d822 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800d848:	4b0b      	ldr	r3, [pc, #44]	; (800d878 <HandleRadioRxErrorTimeout+0xe0>)
 800d84a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800d84e:	b113      	cbz	r3, 800d856 <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800d850:	4b09      	ldr	r3, [pc, #36]	; (800d878 <HandleRadioRxErrorTimeout+0xe0>)
 800d852:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800d856:	4620      	mov	r0, r4
 800d858:	f002 fc78 	bl	801014c <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800d85c:	4a06      	ldr	r2, [pc, #24]	; (800d878 <HandleRadioRxErrorTimeout+0xe0>)
 800d85e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800d862:	f043 0310 	orr.w	r3, r3, #16
 800d866:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800d86a:	f7fe fe6b 	bl	800c544 <UpdateRxSlotIdleState>
}
 800d86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d870:	20008000 	.word	0x20008000
 800d874:	0801885c 	.word	0x0801885c
 800d878:	20003c04 	.word	0x20003c04

0800d87c <ProcessRadioRxError>:
{
 800d87c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800d87e:	2106      	movs	r1, #6
 800d880:	2005      	movs	r0, #5
 800d882:	f7ff ff89 	bl	800d798 <HandleRadioRxErrorTimeout>
}
 800d886:	bd08      	pop	{r3, pc}

0800d888 <ProcessRadioRxTimeout>:
{
 800d888:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800d88a:	2104      	movs	r1, #4
 800d88c:	2003      	movs	r0, #3
 800d88e:	f7ff ff83 	bl	800d798 <HandleRadioRxErrorTimeout>
}
 800d892:	bd08      	pop	{r3, pc}

0800d894 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d894:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d898:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800d89a:	4a14      	ldr	r2, [pc, #80]	; (800d8ec <LoRaMacHandleIrqEvents+0x58>)
 800d89c:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800d89e:	2000      	movs	r0, #0
 800d8a0:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8a2:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800d8a6:	b303      	cbz	r3, 800d8ea <LoRaMacHandleIrqEvents+0x56>
{
 800d8a8:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800d8aa:	b2dc      	uxtb	r4, r3
 800d8ac:	f013 0f20 	tst.w	r3, #32
 800d8b0:	d10c      	bne.n	800d8cc <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800d8b2:	f014 0f10 	tst.w	r4, #16
 800d8b6:	d10c      	bne.n	800d8d2 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800d8b8:	f014 0f08 	tst.w	r4, #8
 800d8bc:	d10c      	bne.n	800d8d8 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800d8be:	f014 0f04 	tst.w	r4, #4
 800d8c2:	d10c      	bne.n	800d8de <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800d8c4:	f014 0f02 	tst.w	r4, #2
 800d8c8:	d10c      	bne.n	800d8e4 <LoRaMacHandleIrqEvents+0x50>
}
 800d8ca:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800d8cc:	f7fe ffbc 	bl	800c848 <ProcessRadioTxDone>
 800d8d0:	e7ef      	b.n	800d8b2 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800d8d2:	f7ff fbbb 	bl	800d04c <ProcessRadioRxDone>
 800d8d6:	e7ef      	b.n	800d8b8 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800d8d8:	f7ff ff1e 	bl	800d718 <ProcessRadioTxTimeout>
 800d8dc:	e7ef      	b.n	800d8be <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800d8de:	f7ff ffcd 	bl	800d87c <ProcessRadioRxError>
 800d8e2:	e7ef      	b.n	800d8c4 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800d8e4:	f7ff ffd0 	bl	800d888 <ProcessRadioRxTimeout>
}
 800d8e8:	e7ef      	b.n	800d8ca <LoRaMacHandleIrqEvents+0x36>
 800d8ea:	4770      	bx	lr
 800d8ec:	20003c00 	.word	0x20003c00

0800d8f0 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800d8f0:	b909      	cbnz	r1, 800d8f6 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800d8f2:	2000      	movs	r0, #0
}
 800d8f4:	4770      	bx	lr
{
 800d8f6:	b510      	push	{r4, lr}
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800d8fc:	f008 fc6a 	bl	80161d4 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800d900:	42a0      	cmp	r0, r4
 800d902:	d801      	bhi.n	800d908 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800d904:	2000      	movs	r0, #0
}
 800d906:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800d908:	4b02      	ldr	r3, [pc, #8]	; (800d914 <LoRaMacHandleResponseTimeout+0x24>)
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800d910:	2001      	movs	r0, #1
 800d912:	e7f8      	b.n	800d906 <LoRaMacHandleResponseTimeout+0x16>
 800d914:	20008000 	.word	0x20008000

0800d918 <LoRaMacHandleMlmeRequest>:
{
 800d918:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d91a:	4b14      	ldr	r3, [pc, #80]	; (800d96c <LoRaMacHandleMlmeRequest+0x54>)
 800d91c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800d920:	f013 0f04 	tst.w	r3, #4
 800d924:	d100      	bne.n	800d928 <LoRaMacHandleMlmeRequest+0x10>
}
 800d926:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d928:	2001      	movs	r0, #1
 800d92a:	f002 fc2d 	bl	8010188 <LoRaMacConfirmQueueIsCmdActive>
 800d92e:	b178      	cbz	r0, 800d950 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800d930:	2001      	movs	r0, #1
 800d932:	f002 fbf3 	bl	801011c <LoRaMacConfirmQueueGetStatus>
 800d936:	b918      	cbnz	r0, 800d940 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800d938:	4b0c      	ldr	r3, [pc, #48]	; (800d96c <LoRaMacHandleMlmeRequest+0x54>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d940:	4a0a      	ldr	r2, [pc, #40]	; (800d96c <LoRaMacHandleMlmeRequest+0x54>)
 800d942:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800d946:	f023 0302 	bic.w	r3, r3, #2
 800d94a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800d94e:	e7ea      	b.n	800d926 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800d950:	2006      	movs	r0, #6
 800d952:	f002 fc19 	bl	8010188 <LoRaMacConfirmQueueIsCmdActive>
 800d956:	2800      	cmp	r0, #0
 800d958:	d0e5      	beq.n	800d926 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d95a:	4a04      	ldr	r2, [pc, #16]	; (800d96c <LoRaMacHandleMlmeRequest+0x54>)
 800d95c:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800d960:	f023 0302 	bic.w	r3, r3, #2
 800d964:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800d968:	e7dd      	b.n	800d926 <LoRaMacHandleMlmeRequest+0xe>
 800d96a:	bf00      	nop
 800d96c:	20003c04 	.word	0x20003c04

0800d970 <SerializeTxFrame>:
{
 800d970:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800d972:	4b0f      	ldr	r3, [pc, #60]	; (800d9b0 <SerializeTxFrame+0x40>)
 800d974:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d978:	b11b      	cbz	r3, 800d982 <SerializeTxFrame+0x12>
 800d97a:	2b04      	cmp	r3, #4
 800d97c:	d00a      	beq.n	800d994 <SerializeTxFrame+0x24>
 800d97e:	2003      	movs	r0, #3
}
 800d980:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d982:	480c      	ldr	r0, [pc, #48]	; (800d9b4 <SerializeTxFrame+0x44>)
 800d984:	f003 f8a9 	bl	8010ada <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800d988:	b968      	cbnz	r0, 800d9a6 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d98a:	4b09      	ldr	r3, [pc, #36]	; (800d9b0 <SerializeTxFrame+0x40>)
 800d98c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800d990:	801a      	strh	r2, [r3, #0]
            break;
 800d992:	e7f5      	b.n	800d980 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800d994:	4807      	ldr	r0, [pc, #28]	; (800d9b4 <SerializeTxFrame+0x44>)
 800d996:	f003 f8d6 	bl	8010b46 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800d99a:	b930      	cbnz	r0, 800d9aa <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d99c:	4b04      	ldr	r3, [pc, #16]	; (800d9b0 <SerializeTxFrame+0x40>)
 800d99e:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800d9a2:	801a      	strh	r2, [r3, #0]
            break;
 800d9a4:	e7ec      	b.n	800d980 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d9a6:	2011      	movs	r0, #17
 800d9a8:	e7ea      	b.n	800d980 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d9aa:	2011      	movs	r0, #17
 800d9ac:	e7e8      	b.n	800d980 <SerializeTxFrame+0x10>
 800d9ae:	bf00      	nop
 800d9b0:	20003c04 	.word	0x20003c04
 800d9b4:	20003d0c 	.word	0x20003d0c

0800d9b8 <ComputeRxWindowParameters>:
{
 800d9b8:	b570      	push	{r4, r5, r6, lr}
 800d9ba:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d9bc:	4c1e      	ldr	r4, [pc, #120]	; (800da38 <ComputeRxWindowParameters+0x80>)
 800d9be:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800d9c2:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800d9c6:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800d9ca:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	f003 fa57 	bl	8010e82 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d9d4:	4d19      	ldr	r5, [pc, #100]	; (800da3c <ComputeRxWindowParameters+0x84>)
 800d9d6:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800d9da:	9300      	str	r3, [sp, #0]
 800d9dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d9de:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800d9e2:	b241      	sxtb	r1, r0
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f003 f9a4 	bl	8010d32 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d9ea:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d9f2:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800d9f6:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800d9fa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d9fe:	f003 f998 	bl	8010d32 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800da02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da04:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800da08:	440b      	add	r3, r1
 800da0a:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800da0e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800da10:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800da14:	4413      	add	r3, r2
 800da16:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800da1a:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800da1e:	2b04      	cmp	r3, #4
 800da20:	d007      	beq.n	800da32 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800da22:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800da24:	4419      	add	r1, r3
 800da26:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800da2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800da2c:	440a      	add	r2, r1
 800da2e:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800da32:	b002      	add	sp, #8
 800da34:	bd70      	pop	{r4, r5, r6, pc}
 800da36:	bf00      	nop
 800da38:	20008000 	.word	0x20008000
 800da3c:	20003c04 	.word	0x20003c04

0800da40 <VerifyTxFrame>:
{
 800da40:	b510      	push	{r4, lr}
 800da42:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800da48:	4b0d      	ldr	r3, [pc, #52]	; (800da80 <VerifyTxFrame+0x40>)
 800da4a:	f893 4130 	ldrb.w	r4, [r3, #304]	; 0x130
 800da4e:	b914      	cbnz	r4, 800da56 <VerifyTxFrame+0x16>
}
 800da50:	4620      	mov	r0, r4
 800da52:	b002      	add	sp, #8
 800da54:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800da56:	a801      	add	r0, sp, #4
 800da58:	f002 fa5c 	bl	800ff14 <LoRaMacCommandsGetSizeSerializedCmds>
 800da5c:	4604      	mov	r4, r0
 800da5e:	b968      	cbnz	r0, 800da7c <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800da60:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da64:	4b06      	ldr	r3, [pc, #24]	; (800da80 <VerifyTxFrame+0x40>)
 800da66:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800da6a:	4b06      	ldr	r3, [pc, #24]	; (800da84 <VerifyTxFrame+0x44>)
 800da6c:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800da70:	f7fe fed8 	bl	800c824 <ValidatePayloadLength>
 800da74:	2800      	cmp	r0, #0
 800da76:	d1eb      	bne.n	800da50 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800da78:	2408      	movs	r4, #8
 800da7a:	e7e9      	b.n	800da50 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800da7c:	2413      	movs	r4, #19
 800da7e:	e7e7      	b.n	800da50 <VerifyTxFrame+0x10>
 800da80:	20008000 	.word	0x20008000
 800da84:	20003c04 	.word	0x20003c04

0800da88 <SecureFrame>:
{
 800da88:	b530      	push	{r4, r5, lr}
 800da8a:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800da90:	4b18      	ldr	r3, [pc, #96]	; (800daf4 <SecureFrame+0x6c>)
 800da92:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800da96:	b133      	cbz	r3, 800daa6 <SecureFrame+0x1e>
 800da98:	4605      	mov	r5, r0
 800da9a:	460c      	mov	r4, r1
 800da9c:	2b04      	cmp	r3, #4
 800da9e:	d00b      	beq.n	800dab8 <SecureFrame+0x30>
 800daa0:	2003      	movs	r0, #3
}
 800daa2:	b003      	add	sp, #12
 800daa4:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800daa6:	4814      	ldr	r0, [pc, #80]	; (800daf8 <SecureFrame+0x70>)
 800daa8:	f002 fdd8 	bl	801065c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800daac:	b9d8      	cbnz	r0, 800dae6 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800daae:	4b11      	ldr	r3, [pc, #68]	; (800daf4 <SecureFrame+0x6c>)
 800dab0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800dab4:	801a      	strh	r2, [r3, #0]
            break;
 800dab6:	e7f4      	b.n	800daa2 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800dab8:	a801      	add	r0, sp, #4
 800daba:	f002 fd83 	bl	80105c4 <LoRaMacCryptoGetFCntUp>
 800dabe:	b9a0      	cbnz	r0, 800daea <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800dac0:	4b0c      	ldr	r3, [pc, #48]	; (800daf4 <SecureFrame+0x6c>)
 800dac2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800dac6:	b113      	cbz	r3, 800dace <SecureFrame+0x46>
                fCntUp -= 1;
 800dac8:	9b01      	ldr	r3, [sp, #4]
 800daca:	3b01      	subs	r3, #1
 800dacc:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800dace:	4b0a      	ldr	r3, [pc, #40]	; (800daf8 <SecureFrame+0x70>)
 800dad0:	4622      	mov	r2, r4
 800dad2:	4629      	mov	r1, r5
 800dad4:	9801      	ldr	r0, [sp, #4]
 800dad6:	f002 fde7 	bl	80106a8 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800dada:	b940      	cbnz	r0, 800daee <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800dadc:	4b05      	ldr	r3, [pc, #20]	; (800daf4 <SecureFrame+0x6c>)
 800dade:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800dae2:	801a      	strh	r2, [r3, #0]
            break;
 800dae4:	e7dd      	b.n	800daa2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800dae6:	2011      	movs	r0, #17
 800dae8:	e7db      	b.n	800daa2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800daea:	2012      	movs	r0, #18
 800daec:	e7d9      	b.n	800daa2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800daee:	2011      	movs	r0, #17
 800daf0:	e7d7      	b.n	800daa2 <SecureFrame+0x1a>
 800daf2:	bf00      	nop
 800daf4:	20003c04 	.word	0x20003c04
 800daf8:	20003d0c 	.word	0x20003d0c

0800dafc <SendFrameOnChannel>:
{
 800dafc:	b570      	push	{r4, r5, r6, lr}
 800dafe:	b086      	sub	sp, #24
 800db00:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800db02:	2300      	movs	r3, #0
 800db04:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800db08:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800db0c:	4d36      	ldr	r5, [pc, #216]	; (800dbe8 <SendFrameOnChannel+0xec>)
 800db0e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800db12:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800db16:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800db1a:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800db1e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800db22:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800db24:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800db28:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800db2a:	4c30      	ldr	r4, [pc, #192]	; (800dbec <SendFrameOnChannel+0xf0>)
 800db2c:	8823      	ldrh	r3, [r4, #0]
 800db2e:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800db32:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
 800db36:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800db3a:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800db3e:	f10d 0207 	add.w	r2, sp, #7
 800db42:	a902      	add	r1, sp, #8
 800db44:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800db48:	f003 f915 	bl	8010d76 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800db52:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800db56:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800db5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800db5e:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800db62:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800db66:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 800db6a:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800db6e:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800db72:	f002 f898 	bl	800fca6 <LoRaMacClassBIsBeaconModeActive>
 800db76:	bb60      	cbnz	r0, 800dbd2 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800db78:	4b1b      	ldr	r3, [pc, #108]	; (800dbe8 <SendFrameOnChannel+0xec>)
 800db7a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d02f      	beq.n	800dbe2 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800db82:	f002 f893 	bl	800fcac <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800db86:	4b18      	ldr	r3, [pc, #96]	; (800dbe8 <SendFrameOnChannel+0xec>)
 800db88:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800db8c:	4b17      	ldr	r3, [pc, #92]	; (800dbec <SendFrameOnChannel+0xf0>)
 800db8e:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 800db92:	b2c0      	uxtb	r0, r0
 800db94:	f7ff ff78 	bl	800da88 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800db98:	4604      	mov	r4, r0
 800db9a:	b9b8      	cbnz	r0, 800dbcc <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800db9c:	4813      	ldr	r0, [pc, #76]	; (800dbec <SendFrameOnChannel+0xf0>)
 800db9e:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800dba2:	f043 0302 	orr.w	r3, r3, #2
 800dba6:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800dbaa:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 800dbae:	3301      	adds	r3, #1
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800dbb6:	f880 3445 	strb.w	r3, [r0, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800dbc0:	4b0b      	ldr	r3, [pc, #44]	; (800dbf0 <SendFrameOnChannel+0xf4>)
 800dbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc4:	f830 1b02 	ldrh.w	r1, [r0], #2
 800dbc8:	b2c9      	uxtb	r1, r1
 800dbca:	4798      	blx	r3
}
 800dbcc:	4620      	mov	r0, r4
 800dbce:	b006      	add	sp, #24
 800dbd0:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800dbd2:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 800dbd6:	f002 f878 	bl	800fcca <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	d0cc      	beq.n	800db78 <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800dbde:	2410      	movs	r4, #16
 800dbe0:	e7f4      	b.n	800dbcc <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800dbe2:	f002 f874 	bl	800fcce <LoRaMacClassBStopRxSlots>
 800dbe6:	e7cc      	b.n	800db82 <SendFrameOnChannel+0x86>
 800dbe8:	20008000 	.word	0x20008000
 800dbec:	20003c04 	.word	0x20003c04
 800dbf0:	0801885c 	.word	0x0801885c

0800dbf4 <ScheduleTx>:
{
 800dbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf8:	b08c      	sub	sp, #48	; 0x30
 800dbfa:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800dbfc:	f7ff fdb2 	bl	800d764 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800dc00:	4604      	mov	r4, r0
 800dc02:	b118      	cbz	r0, 800dc0c <ScheduleTx+0x18>
}
 800dc04:	4620      	mov	r0, r4
 800dc06:	b00c      	add	sp, #48	; 0x30
 800dc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800dc0c:	f7fe fcfe 	bl	800c60c <CalculateBackOff>
    status = SerializeTxFrame( );
 800dc10:	f7ff feae 	bl	800d970 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800dc14:	4604      	mov	r4, r0
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d1f4      	bne.n	800dc04 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800dc1a:	4e36      	ldr	r6, [pc, #216]	; (800dcf4 <ScheduleTx+0x100>)
 800dc1c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800dc1e:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dc20:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800dc24:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800dc28:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800dc2c:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800dc30:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800dc34:	4640      	mov	r0, r8
 800dc36:	f008 fa37 	bl	80160a8 <SysTimeGetMcuTime>
 800dc3a:	af02      	add	r7, sp, #8
 800dc3c:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800dc40:	9300      	str	r3, [sp, #0]
 800dc42:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800dc46:	e898 0006 	ldmia.w	r8, {r1, r2}
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	f008 f9c9 	bl	8015fe2 <SysTimeSub>
 800dc50:	ab07      	add	r3, sp, #28
 800dc52:	e897 0003 	ldmia.w	r7, {r0, r1}
 800dc56:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800dc5a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800dc5c:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800dc64:	2301      	movs	r3, #1
 800dc66:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800dc6a:	4b23      	ldr	r3, [pc, #140]	; (800dcf8 <ScheduleTx+0x104>)
 800dc6c:	881b      	ldrh	r3, [r3, #0]
 800dc6e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dc72:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 800dc76:	b92b      	cbnz	r3, 800dc84 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800dc84:	4a1c      	ldr	r2, [pc, #112]	; (800dcf8 <ScheduleTx+0x104>)
 800dc86:	481b      	ldr	r0, [pc, #108]	; (800dcf4 <ScheduleTx+0x100>)
 800dc88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	f202 4394 	addw	r3, r2, #1172	; 0x494
 800dc92:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 800dc96:	a904      	add	r1, sp, #16
 800dc98:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800dc9c:	f003 f8de 	bl	8010e5c <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800dca0:	b1c0      	cbz	r0, 800dcd4 <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800dca2:	280b      	cmp	r0, #11
 800dca4:	d124      	bne.n	800dcf0 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800dca6:	4a14      	ldr	r2, [pc, #80]	; (800dcf8 <ScheduleTx+0x104>)
 800dca8:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
 800dcac:	b191      	cbz	r1, 800dcd4 <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 800dcae:	b90d      	cbnz	r5, 800dcb4 <ScheduleTx+0xc0>
                return status;
 800dcb0:	4604      	mov	r4, r0
 800dcb2:	e7a7      	b.n	800dc04 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800dcb4:	4615      	mov	r5, r2
 800dcb6:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800dcba:	f042 0220 	orr.w	r2, r2, #32
 800dcbe:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800dcc2:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	f008 fb5a 	bl	8016380 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800dccc:	4628      	mov	r0, r5
 800dcce:	f008 fb11 	bl	80162f4 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800dcd2:	e797      	b.n	800dc04 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800dcd4:	f7ff fe70 	bl	800d9b8 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800dcd8:	f7ff feb2 	bl	800da40 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800dcdc:	4604      	mov	r4, r0
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d190      	bne.n	800dc04 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800dce2:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <ScheduleTx+0x104>)
 800dce4:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800dce8:	f7ff ff08 	bl	800dafc <SendFrameOnChannel>
 800dcec:	4604      	mov	r4, r0
 800dcee:	e789      	b.n	800dc04 <ScheduleTx+0x10>
            return status;
 800dcf0:	4604      	mov	r4, r0
 800dcf2:	e787      	b.n	800dc04 <ScheduleTx+0x10>
 800dcf4:	20008000 	.word	0x20008000
 800dcf8:	20003c04 	.word	0x20003c04

0800dcfc <OnTxDelayedTimerEvent>:
{
 800dcfc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800dcfe:	4c16      	ldr	r4, [pc, #88]	; (800dd58 <OnTxDelayedTimerEvent+0x5c>)
 800dd00:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800dd04:	f008 fa9c 	bl	8016240 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800dd08:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800dd0c:	f023 0320 	bic.w	r3, r3, #32
 800dd10:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800dd14:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 800dd18:	4b10      	ldr	r3, [pc, #64]	; (800dd5c <OnTxDelayedTimerEvent+0x60>)
 800dd1a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800dd1e:	f7ff fde7 	bl	800d8f0 <LoRaMacHandleResponseTimeout>
 800dd22:	b100      	cbz	r0, 800dd26 <OnTxDelayedTimerEvent+0x2a>
}
 800dd24:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800dd26:	2001      	movs	r0, #1
 800dd28:	f7ff ff64 	bl	800dbf4 <ScheduleTx>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	d0f9      	beq.n	800dd24 <OnTxDelayedTimerEvent+0x28>
 800dd30:	280b      	cmp	r0, #11
 800dd32:	d0f7      	beq.n	800dd24 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dd34:	4b09      	ldr	r3, [pc, #36]	; (800dd5c <OnTxDelayedTimerEvent+0x60>)
 800dd36:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800dd3a:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800dd3e:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800dd42:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800dd46:	2009      	movs	r0, #9
 800dd48:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800dd4c:	f002 f9fe 	bl	801014c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800dd50:	f7fe fcee 	bl	800c730 <StopRetransmission>
            break;
 800dd54:	e7e6      	b.n	800dd24 <OnTxDelayedTimerEvent+0x28>
 800dd56:	bf00      	nop
 800dd58:	20003c04 	.word	0x20003c04
 800dd5c:	20008000 	.word	0x20008000

0800dd60 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800dd60:	4b1c      	ldr	r3, [pc, #112]	; (800ddd4 <LoRaMacHandleMcpsRequest+0x74>)
 800dd62:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800dd66:	f013 0f01 	tst.w	r3, #1
 800dd6a:	d032      	beq.n	800ddd2 <LoRaMacHandleMcpsRequest+0x72>
{
 800dd6c:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800dd6e:	4b19      	ldr	r3, [pc, #100]	; (800ddd4 <LoRaMacHandleMcpsRequest+0x74>)
 800dd70:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800dd74:	b12b      	cbz	r3, 800dd82 <LoRaMacHandleMcpsRequest+0x22>
 800dd76:	2b03      	cmp	r3, #3
 800dd78:	d003      	beq.n	800dd82 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d006      	beq.n	800dd8c <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800dd7e:	2000      	movs	r0, #0
 800dd80:	e002      	b.n	800dd88 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800dd82:	f7fe fc9b 	bl	800c6bc <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800dd86:	b940      	cbnz	r0, 800dd9a <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800dd88:	b1b8      	cbz	r0, 800ddba <LoRaMacHandleMcpsRequest+0x5a>
}
 800dd8a:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800dd8c:	4b11      	ldr	r3, [pc, #68]	; (800ddd4 <LoRaMacHandleMcpsRequest+0x74>)
 800dd8e:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800dd92:	b183      	cbz	r3, 800ddb6 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800dd94:	f7fe fcae 	bl	800c6f4 <CheckRetransConfirmedUplink>
 800dd98:	e7f5      	b.n	800dd86 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800dd9a:	4c0e      	ldr	r4, [pc, #56]	; (800ddd4 <LoRaMacHandleMcpsRequest+0x74>)
 800dd9c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800dda0:	f008 fa4e 	bl	8016240 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800dda4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800dda8:	f023 0320 	bic.w	r3, r3, #32
 800ddac:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800ddb0:	f7fe fcbe 	bl	800c730 <StopRetransmission>
 800ddb4:	e7e9      	b.n	800dd8a <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800ddb6:	2001      	movs	r0, #1
 800ddb8:	e7e6      	b.n	800dd88 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ddba:	4b06      	ldr	r3, [pc, #24]	; (800ddd4 <LoRaMacHandleMcpsRequest+0x74>)
 800ddbc:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800ddc0:	f36f 1204 	bfc	r2, #4, #1
 800ddc4:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800ddc8:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800ddcc:	f7ff ff96 	bl	800dcfc <OnTxDelayedTimerEvent>
}
 800ddd0:	e7db      	b.n	800dd8a <LoRaMacHandleMcpsRequest+0x2a>
 800ddd2:	4770      	bx	lr
 800ddd4:	20003c04 	.word	0x20003c04

0800ddd8 <LoRaMacHandleRequestEvents>:
{
 800ddd8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800ddda:	4b22      	ldr	r3, [pc, #136]	; (800de64 <LoRaMacHandleRequestEvents+0x8c>)
 800dddc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dde0:	bb7b      	cbnz	r3, 800de42 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800dde2:	4b20      	ldr	r3, [pc, #128]	; (800de64 <LoRaMacHandleRequestEvents+0x8c>)
 800dde4:	f893 4491 	ldrb.w	r4, [r3, #1169]	; 0x491
 800dde8:	f014 0501 	ands.w	r5, r4, #1
 800ddec:	d005      	beq.n	800ddfa <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ddee:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800ddf2:	f36f 0200 	bfc	r2, #0, #1
 800ddf6:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ddfa:	4b1a      	ldr	r3, [pc, #104]	; (800de64 <LoRaMacHandleRequestEvents+0x8c>)
 800ddfc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800de00:	f013 0f04 	tst.w	r3, #4
 800de04:	d006      	beq.n	800de14 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800de06:	4b17      	ldr	r3, [pc, #92]	; (800de64 <LoRaMacHandleRequestEvents+0x8c>)
 800de08:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800de0c:	f36f 0282 	bfc	r2, #2, #1
 800de10:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800de14:	2001      	movs	r0, #1
 800de16:	f7fe fba9 	bl	800c56c <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800de1a:	b135      	cbz	r5, 800de2a <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800de1c:	4811      	ldr	r0, [pc, #68]	; (800de64 <LoRaMacHandleRequestEvents+0x8c>)
 800de1e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 800de28:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800de2a:	f014 0f04 	tst.w	r4, #4
 800de2e:	d109      	bne.n	800de44 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800de30:	f001 ff3d 	bl	800fcae <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800de34:	4b0b      	ldr	r3, [pc, #44]	; (800de64 <LoRaMacHandleRequestEvents+0x8c>)
 800de36:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800de3a:	f36f 1204 	bfc	r2, #4, #1
 800de3e:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
}
 800de42:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800de44:	4808      	ldr	r0, [pc, #32]	; (800de68 <LoRaMacHandleRequestEvents+0x90>)
 800de46:	f002 f9ab 	bl	80101a0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800de4a:	f002 f9e1 	bl	8010210 <LoRaMacConfirmQueueGetCnt>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d0ee      	beq.n	800de30 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800de52:	4a04      	ldr	r2, [pc, #16]	; (800de64 <LoRaMacHandleRequestEvents+0x8c>)
 800de54:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800de58:	f043 0304 	orr.w	r3, r3, #4
 800de5c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800de60:	e7e6      	b.n	800de30 <LoRaMacHandleRequestEvents+0x58>
 800de62:	bf00      	nop
 800de64:	20003c04 	.word	0x20003c04
 800de68:	20004058 	.word	0x20004058

0800de6c <OpenContinuousRxCWindow>:
{
 800de6c:	b570      	push	{r4, r5, r6, lr}
 800de6e:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800de70:	4c16      	ldr	r4, [pc, #88]	; (800decc <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800de72:	4d17      	ldr	r5, [pc, #92]	; (800ded0 <OpenContinuousRxCWindow+0x64>)
 800de74:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800de78:	9600      	str	r6, [sp, #0]
 800de7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800de7c:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800de80:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800de84:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800de88:	f002 ff53 	bl	8010d32 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800de8c:	2302      	movs	r3, #2
 800de8e:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800de92:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800de96:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800de9a:	2301      	movs	r3, #1
 800de9c:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800dea0:	f205 4224 	addw	r2, r5, #1060	; 0x424
 800dea4:	4631      	mov	r1, r6
 800dea6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800deaa:	f002 ff54 	bl	8010d56 <RegionRxConfig>
 800deae:	b158      	cbz	r0, 800dec8 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800deb0:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800deb4:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800deb8:	4b06      	ldr	r3, [pc, #24]	; (800ded4 <OpenContinuousRxCWindow+0x68>)
 800deba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800debc:	2000      	movs	r0, #0
 800debe:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800dec0:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800dec4:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800dec8:	b002      	add	sp, #8
 800deca:	bd70      	pop	{r4, r5, r6, pc}
 800decc:	20008000 	.word	0x20008000
 800ded0:	20003c04 	.word	0x20003c04
 800ded4:	0801885c 	.word	0x0801885c

0800ded8 <RxWindowSetup>:
{
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800dedc:	f008 f9b0 	bl	8016240 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800dee0:	4b0c      	ldr	r3, [pc, #48]	; (800df14 <RxWindowSetup+0x3c>)
 800dee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee4:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800dee6:	4a0c      	ldr	r2, [pc, #48]	; (800df18 <RxWindowSetup+0x40>)
 800dee8:	4621      	mov	r1, r4
 800deea:	4b0c      	ldr	r3, [pc, #48]	; (800df1c <RxWindowSetup+0x44>)
 800deec:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800def0:	f002 ff31 	bl	8010d56 <RegionRxConfig>
 800def4:	b160      	cbz	r0, 800df10 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800def6:	4d0a      	ldr	r5, [pc, #40]	; (800df20 <RxWindowSetup+0x48>)
 800def8:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800defc:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800df00:	4b04      	ldr	r3, [pc, #16]	; (800df14 <RxWindowSetup+0x3c>)
 800df02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df04:	4a05      	ldr	r2, [pc, #20]	; (800df1c <RxWindowSetup+0x44>)
 800df06:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800df08:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800df0a:	7ce3      	ldrb	r3, [r4, #19]
 800df0c:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800df10:	bd38      	pop	{r3, r4, r5, pc}
 800df12:	bf00      	nop
 800df14:	0801885c 	.word	0x0801885c
 800df18:	20004028 	.word	0x20004028
 800df1c:	20008000 	.word	0x20008000
 800df20:	20003c04 	.word	0x20003c04

0800df24 <OnRxWindow2TimerEvent>:
{
 800df24:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800df26:	4b13      	ldr	r3, [pc, #76]	; (800df74 <OnRxWindow2TimerEvent+0x50>)
 800df28:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800df2c:	b903      	cbnz	r3, 800df30 <OnRxWindow2TimerEvent+0xc>
}
 800df2e:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800df30:	4810      	ldr	r0, [pc, #64]	; (800df74 <OnRxWindow2TimerEvent+0x50>)
 800df32:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800df36:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800df3a:	4b0f      	ldr	r3, [pc, #60]	; (800df78 <OnRxWindow2TimerEvent+0x54>)
 800df3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800df3e:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800df42:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800df46:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800df4a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800df4e:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800df52:	2200      	movs	r2, #0
 800df54:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800df58:	2201      	movs	r2, #1
 800df5a:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800df5e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800df62:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800df66:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800df6a:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800df6e:	f7ff ffb3 	bl	800ded8 <RxWindowSetup>
 800df72:	e7dc      	b.n	800df2e <OnRxWindow2TimerEvent+0xa>
 800df74:	20003c04 	.word	0x20003c04
 800df78:	20008000 	.word	0x20008000

0800df7c <OnRxWindow1TimerEvent>:
{
 800df7c:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800df7e:	4811      	ldr	r0, [pc, #68]	; (800dfc4 <OnRxWindow1TimerEvent+0x48>)
 800df80:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800df84:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800df88:	4b0f      	ldr	r3, [pc, #60]	; (800dfc8 <OnRxWindow1TimerEvent+0x4c>)
 800df8a:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800df8e:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800df92:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800df96:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800df9a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800df9e:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800dfa8:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800dfac:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800dfb0:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800dfb4:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800dfb8:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800dfbc:	f7ff ff8c 	bl	800ded8 <RxWindowSetup>
}
 800dfc0:	bd08      	pop	{r3, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20003c04 	.word	0x20003c04
 800dfc8:	20008000 	.word	0x20008000

0800dfcc <LoRaMacHandleNvm>:
{
 800dfcc:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800dfce:	4b31      	ldr	r3, [pc, #196]	; (800e094 <LoRaMacHandleNvm+0xc8>)
 800dfd0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dfd4:	b103      	cbz	r3, 800dfd8 <LoRaMacHandleNvm+0xc>
}
 800dfd6:	bd38      	pop	{r3, r4, r5, pc}
 800dfd8:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800dfda:	2124      	movs	r1, #36	; 0x24
 800dfdc:	f005 ff22 	bl	8013e24 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800dfe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfe2:	4283      	cmp	r3, r0
 800dfe4:	d053      	beq.n	800e08e <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800dfe6:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800dfe8:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800dfea:	211c      	movs	r1, #28
 800dfec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800dff0:	f005 ff18 	bl	8013e24 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800dff4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dff6:	4283      	cmp	r3, r0
 800dff8:	d002      	beq.n	800e000 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800dffa:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800dffc:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e000:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e004:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800e008:	f005 ff0c 	bl	8013e24 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800e00c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800e010:	4283      	cmp	r3, r0
 800e012:	d003      	beq.n	800e01c <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800e014:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e018:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e01c:	21d4      	movs	r1, #212	; 0xd4
 800e01e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800e022:	f005 feff 	bl	8013e24 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800e026:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800e02a:	4283      	cmp	r3, r0
 800e02c:	d003      	beq.n	800e036 <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800e02e:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e032:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e036:	2110      	movs	r1, #16
 800e038:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800e03c:	f005 fef2 	bl	8013e24 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e040:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800e044:	4283      	cmp	r3, r0
 800e046:	d003      	beq.n	800e050 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800e048:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e04c:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e050:	f44f 7160 	mov.w	r1, #896	; 0x380
 800e054:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800e058:	f005 fee4 	bl	8013e24 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e05c:	f8d4 35b8 	ldr.w	r3, [r4, #1464]	; 0x5b8
 800e060:	4283      	cmp	r3, r0
 800e062:	d003      	beq.n	800e06c <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800e064:	f8c4 05b8 	str.w	r0, [r4, #1464]	; 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e068:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e06c:	2114      	movs	r1, #20
 800e06e:	f204 50bc 	addw	r0, r4, #1468	; 0x5bc
 800e072:	f005 fed7 	bl	8013e24 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800e076:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 800e07a:	4283      	cmp	r3, r0
 800e07c:	d003      	beq.n	800e086 <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800e07e:	f8c4 05d0 	str.w	r0, [r4, #1488]	; 0x5d0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e082:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800e086:	4628      	mov	r0, r5
 800e088:	f7fe fb94 	bl	800c7b4 <CallNvmDataChangeCallback>
 800e08c:	e7a3      	b.n	800dfd6 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e08e:	2500      	movs	r5, #0
 800e090:	e7ab      	b.n	800dfea <LoRaMacHandleNvm+0x1e>
 800e092:	bf00      	nop
 800e094:	20003c04 	.word	0x20003c04

0800e098 <RestoreNvmData>:
{
 800e098:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800e09a:	4b3d      	ldr	r3, [pc, #244]	; (800e190 <RestoreNvmData+0xf8>)
 800e09c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d001      	beq.n	800e0a8 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800e0a4:	2001      	movs	r0, #1
}
 800e0a6:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800e0a8:	4c3a      	ldr	r4, [pc, #232]	; (800e194 <RestoreNvmData+0xfc>)
 800e0aa:	2124      	movs	r1, #36	; 0x24
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f005 feb9 	bl	8013e24 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800e0b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0b4:	4283      	cmp	r3, r0
 800e0b6:	d001      	beq.n	800e0bc <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e0b8:	2017      	movs	r0, #23
 800e0ba:	e7f4      	b.n	800e0a6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800e0bc:	211c      	movs	r1, #28
 800e0be:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e0c2:	f005 feaf 	bl	8013e24 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800e0c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e0c8:	4283      	cmp	r3, r0
 800e0ca:	d001      	beq.n	800e0d0 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e0cc:	2017      	movs	r0, #23
 800e0ce:	e7ea      	b.n	800e0a6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800e0d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e0d4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800e0d8:	f005 fea4 	bl	8013e24 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800e0dc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800e0e0:	4283      	cmp	r3, r0
 800e0e2:	d001      	beq.n	800e0e8 <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e0e4:	2017      	movs	r0, #23
 800e0e6:	e7de      	b.n	800e0a6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800e0e8:	21d4      	movs	r1, #212	; 0xd4
 800e0ea:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800e0ee:	f005 fe99 	bl	8013e24 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800e0f2:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800e0f6:	4283      	cmp	r3, r0
 800e0f8:	d001      	beq.n	800e0fe <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e0fa:	2017      	movs	r0, #23
 800e0fc:	e7d3      	b.n	800e0a6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800e0fe:	2110      	movs	r1, #16
 800e100:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800e104:	f005 fe8e 	bl	8013e24 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800e108:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800e10c:	4283      	cmp	r3, r0
 800e10e:	d001      	beq.n	800e114 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e110:	2017      	movs	r0, #23
 800e112:	e7c8      	b.n	800e0a6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800e114:	f44f 7160 	mov.w	r1, #896	; 0x380
 800e118:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800e11c:	f005 fe82 	bl	8013e24 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800e120:	f8d4 35b8 	ldr.w	r3, [r4, #1464]	; 0x5b8
 800e124:	4283      	cmp	r3, r0
 800e126:	d001      	beq.n	800e12c <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e128:	2017      	movs	r0, #23
 800e12a:	e7bc      	b.n	800e0a6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800e12c:	2114      	movs	r1, #20
 800e12e:	f204 50bc 	addw	r0, r4, #1468	; 0x5bc
 800e132:	f005 fe77 	bl	8013e24 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800e136:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 800e13a:	4283      	cmp	r3, r0
 800e13c:	d001      	beq.n	800e142 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800e13e:	2017      	movs	r0, #23
 800e140:	e7b1      	b.n	800e0a6 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800e142:	4625      	mov	r5, r4
 800e144:	4c14      	ldr	r4, [pc, #80]	; (800e198 <RestoreNvmData+0x100>)
 800e146:	f240 52d4 	movw	r2, #1492	; 0x5d4
 800e14a:	4629      	mov	r1, r5
 800e14c:	4620      	mov	r0, r4
 800e14e:	f005 fe48 	bl	8013de2 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800e152:	f240 52d4 	movw	r2, #1492	; 0x5d4
 800e156:	2100      	movs	r1, #0
 800e158:	4628      	mov	r0, r5
 800e15a:	f005 fe5a 	bl	8013e12 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e15e:	4b0c      	ldr	r3, [pc, #48]	; (800e190 <RestoreNvmData+0xf8>)
 800e160:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800e164:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e168:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800e16a:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e16e:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800e172:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e176:	2201      	movs	r2, #1
 800e178:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e17c:	2202      	movs	r2, #2
 800e17e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e182:	4b06      	ldr	r3, [pc, #24]	; (800e19c <RestoreNvmData+0x104>)
 800e184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e186:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 800e18a:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800e18c:	2000      	movs	r0, #0
 800e18e:	e78a      	b.n	800e0a6 <RestoreNvmData+0xe>
 800e190:	20003c04 	.word	0x20003c04
 800e194:	200085d4 	.word	0x200085d4
 800e198:	20008000 	.word	0x20008000
 800e19c:	0801885c 	.word	0x0801885c

0800e1a0 <OnRadioRxTimeout>:
{
 800e1a0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e1a2:	4a07      	ldr	r2, [pc, #28]	; (800e1c0 <OnRadioRxTimeout+0x20>)
 800e1a4:	7813      	ldrb	r3, [r2, #0]
 800e1a6:	f043 0302 	orr.w	r3, r3, #2
 800e1aa:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800e1ac:	f7fe faea 	bl	800c784 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e1b0:	4b04      	ldr	r3, [pc, #16]	; (800e1c4 <OnRadioRxTimeout+0x24>)
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	2002      	movs	r0, #2
 800e1b8:	f007 fcf0 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 800e1bc:	bd08      	pop	{r3, pc}
 800e1be:	bf00      	nop
 800e1c0:	20003c00 	.word	0x20003c00
 800e1c4:	080180bc 	.word	0x080180bc

0800e1c8 <OnRadioTxTimeout>:
{
 800e1c8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e1ca:	4a07      	ldr	r2, [pc, #28]	; (800e1e8 <OnRadioTxTimeout+0x20>)
 800e1cc:	7813      	ldrb	r3, [r2, #0]
 800e1ce:	f043 0308 	orr.w	r3, r3, #8
 800e1d2:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800e1d4:	f7fe fad6 	bl	800c784 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e1d8:	4b04      	ldr	r3, [pc, #16]	; (800e1ec <OnRadioTxTimeout+0x24>)
 800e1da:	2201      	movs	r2, #1
 800e1dc:	2100      	movs	r1, #0
 800e1de:	2002      	movs	r0, #2
 800e1e0:	f007 fcdc 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 800e1e4:	bd08      	pop	{r3, pc}
 800e1e6:	bf00      	nop
 800e1e8:	20003c00 	.word	0x20003c00
 800e1ec:	080180cc 	.word	0x080180cc

0800e1f0 <OnRadioRxDone>:
{
 800e1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f4:	4680      	mov	r8, r0
 800e1f6:	460f      	mov	r7, r1
 800e1f8:	4616      	mov	r6, r2
 800e1fa:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e1fc:	f007 ffe0 	bl	80161c0 <UTIL_TIMER_GetCurrentTime>
 800e200:	4c0c      	ldr	r4, [pc, #48]	; (800e234 <OnRadioRxDone+0x44>)
 800e202:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800e204:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800e208:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800e20a:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800e20c:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800e20e:	4b0a      	ldr	r3, [pc, #40]	; (800e238 <OnRadioRxDone+0x48>)
 800e210:	781a      	ldrb	r2, [r3, #0]
 800e212:	f042 0210 	orr.w	r2, r2, #16
 800e216:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800e218:	b2d2      	uxtb	r2, r2
 800e21a:	f042 0201 	orr.w	r2, r2, #1
 800e21e:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800e220:	f7fe fab0 	bl	800c784 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e224:	4b05      	ldr	r3, [pc, #20]	; (800e23c <OnRadioRxDone+0x4c>)
 800e226:	2201      	movs	r2, #1
 800e228:	2100      	movs	r1, #0
 800e22a:	2002      	movs	r0, #2
 800e22c:	f007 fcb6 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 800e230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e234:	200041b0 	.word	0x200041b0
 800e238:	20003c00 	.word	0x20003c00
 800e23c:	080180dc 	.word	0x080180dc

0800e240 <OnRadioTxDone>:
{
 800e240:	b510      	push	{r4, lr}
 800e242:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e244:	f007 ffbc 	bl	80161c0 <UTIL_TIMER_GetCurrentTime>
 800e248:	4b0c      	ldr	r3, [pc, #48]	; (800e27c <OnRadioTxDone+0x3c>)
 800e24a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e24c:	466c      	mov	r4, sp
 800e24e:	4620      	mov	r0, r4
 800e250:	f007 ff08 	bl	8016064 <SysTimeGet>
 800e254:	4b0a      	ldr	r3, [pc, #40]	; (800e280 <OnRadioTxDone+0x40>)
 800e256:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e25a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800e25e:	4a09      	ldr	r2, [pc, #36]	; (800e284 <OnRadioTxDone+0x44>)
 800e260:	7813      	ldrb	r3, [r2, #0]
 800e262:	f043 0320 	orr.w	r3, r3, #32
 800e266:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800e268:	f7fe fa8c 	bl	800c784 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e26c:	4b06      	ldr	r3, [pc, #24]	; (800e288 <OnRadioTxDone+0x48>)
 800e26e:	2201      	movs	r2, #1
 800e270:	2100      	movs	r1, #0
 800e272:	2002      	movs	r0, #2
 800e274:	f007 fc92 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 800e278:	b002      	add	sp, #8
 800e27a:	bd10      	pop	{r4, pc}
 800e27c:	200041c0 	.word	0x200041c0
 800e280:	20003f3c 	.word	0x20003f3c
 800e284:	20003c00 	.word	0x20003c00
 800e288:	080180ec 	.word	0x080180ec

0800e28c <ResetMacParameters>:
{
 800e28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e28e:	b091      	sub	sp, #68	; 0x44
    if( isRejoin == false )
 800e290:	b918      	cbnz	r0, 800e29a <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800e292:	4b61      	ldr	r3, [pc, #388]	; (800e418 <ResetMacParameters+0x18c>)
 800e294:	2200      	movs	r2, #0
 800e296:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800e29a:	4c5f      	ldr	r4, [pc, #380]	; (800e418 <ResetMacParameters+0x18c>)
 800e29c:	2500      	movs	r5, #0
 800e29e:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800e2a0:	4e5e      	ldr	r6, [pc, #376]	; (800e41c <ResetMacParameters+0x190>)
 800e2a2:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800e2a6:	f886 5419 	strb.w	r5, [r6, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800e2aa:	f8c6 5498 	str.w	r5, [r6, #1176]	; 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800e2ae:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800e2b2:	2701      	movs	r7, #1
 800e2b4:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e2b8:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 800e2bc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e2c0:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 800e2c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800e2c8:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800e2cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800e2d0:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800e2d4:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800e2d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2dc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800e2e0:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800e2e4:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800e2e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2ec:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800e2f0:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800e2f4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800e2f8:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800e2fc:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800e300:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800e304:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800e308:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800e30c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800e310:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800e314:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800e318:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800e31c:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800e320:	f886 541a 	strb.w	r5, [r6, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800e324:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800e328:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800e32c:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800e330:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800e334:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800e338:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800e33c:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800e340:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800e344:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800e348:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800e34c:	f884 5147 	strb.w	r5, [r4, #327]	; 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800e350:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800e354:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800e358:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800e35a:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800e35e:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800e360:	4b2f      	ldr	r3, [pc, #188]	; (800e420 <ResetMacParameters+0x194>)
 800e362:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e364:	a901      	add	r1, sp, #4
 800e366:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e36a:	f002 fcaa 	bl	8010cc2 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800e36e:	f886 541b 	strb.w	r5, [r6, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e372:	f886 53d0 	strb.w	r5, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e376:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e378:	f8c6 33d4 	str.w	r3, [r6, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e37c:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800e380:	f886 33e0 	strb.w	r3, [r6, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e384:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800e388:	f886 33e1 	strb.w	r3, [r6, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e38c:	f886 53e2 	strb.w	r5, [r6, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e390:	f886 73e3 	strb.w	r7, [r6, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e394:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800e398:	f886 33e4 	strb.w	r3, [r6, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e39c:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800e3a0:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800e3a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3aa:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800e3ae:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800e3b2:	f886 73fa 	strb.w	r7, [r6, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e3b6:	2302      	movs	r3, #2
 800e3b8:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800e3bc:	950e      	str	r5, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800e3be:	950f      	str	r5, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800e3c0:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800e3c4:	b11b      	cbz	r3, 800e3ce <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800e3c6:	685a      	ldr	r2, [r3, #4]
 800e3c8:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800e3ca:	695b      	ldr	r3, [r3, #20]
 800e3cc:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800e3ce:	4b13      	ldr	r3, [pc, #76]	; (800e41c <ResetMacParameters+0x190>)
 800e3d0:	f503 628d 	add.w	r2, r3, #1128	; 0x468
 800e3d4:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800e3d6:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 800e3da:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800e3dc:	f203 4254 	addw	r2, r3, #1108	; 0x454
 800e3e0:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800e3e2:	f203 4391 	addw	r3, r3, #1169	; 0x491
 800e3e6:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800e3e8:	4a0b      	ldr	r2, [pc, #44]	; (800e418 <ResetMacParameters+0x18c>)
 800e3ea:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800e3ee:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800e3f0:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800e3f4:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800e3f6:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800e3fa:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800e3fc:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800e400:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800e402:	f502 7398 	add.w	r3, r2, #304	; 0x130
 800e406:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800e408:	f202 52bc 	addw	r2, r2, #1468	; 0x5bc
 800e40c:	a90e      	add	r1, sp, #56	; 0x38
 800e40e:	a805      	add	r0, sp, #20
 800e410:	f001 fc38 	bl	800fc84 <LoRaMacClassBInit>
}
 800e414:	b011      	add	sp, #68	; 0x44
 800e416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e418:	20008000 	.word	0x20008000
 800e41c:	20003c04 	.word	0x20003c04
 800e420:	20004120 	.word	0x20004120

0800e424 <SwitchClass>:
{
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800e428:	4b45      	ldr	r3, [pc, #276]	; (800e540 <SwitchClass+0x11c>)
 800e42a:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 800e42e:	2d01      	cmp	r5, #1
 800e430:	d06e      	beq.n	800e510 <SwitchClass+0xec>
 800e432:	2d02      	cmp	r5, #2
 800e434:	d074      	beq.n	800e520 <SwitchClass+0xfc>
 800e436:	b10d      	cbz	r5, 800e43c <SwitchClass+0x18>
 800e438:	2003      	movs	r0, #3
}
 800e43a:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800e43c:	bb58      	cbnz	r0, 800e496 <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e43e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800e442:	336c      	adds	r3, #108	; 0x6c
 800e444:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e448:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800e44c:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800e44e:	2c01      	cmp	r4, #1
 800e450:	d023      	beq.n	800e49a <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 800e452:	2c02      	cmp	r4, #2
 800e454:	d1f1      	bne.n	800e43a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e456:	4b3a      	ldr	r3, [pc, #232]	; (800e540 <SwitchClass+0x11c>)
 800e458:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e45c:	4e39      	ldr	r6, [pc, #228]	; (800e544 <SwitchClass+0x120>)
 800e45e:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800e462:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800e466:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e46c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800e470:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e474:	2302      	movs	r3, #2
 800e476:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e47a:	2300      	movs	r3, #0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	dd15      	ble.n	800e4ac <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 800e480:	4b30      	ldr	r3, [pc, #192]	; (800e544 <SwitchClass+0x120>)
 800e482:	2200      	movs	r2, #0
 800e484:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 800e488:	4b2f      	ldr	r3, [pc, #188]	; (800e548 <SwitchClass+0x124>)
 800e48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e48c:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800e48e:	f7ff fced 	bl	800de6c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800e492:	4628      	mov	r0, r5
 800e494:	e7d1      	b.n	800e43a <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e496:	2003      	movs	r0, #3
 800e498:	e7d9      	b.n	800e44e <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800e49a:	4620      	mov	r0, r4
 800e49c:	f001 fc08 	bl	800fcb0 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d1d6      	bne.n	800e452 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800e4a4:	4b26      	ldr	r3, [pc, #152]	; (800e540 <SwitchClass+0x11c>)
 800e4a6:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800e4aa:	e7d2      	b.n	800e452 <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800e4ac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e4b0:	4a23      	ldr	r2, [pc, #140]	; (800e540 <SwitchClass+0x11c>)
 800e4b2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800e4b6:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800e4ba:	b132      	cbz	r2, 800e4ca <SwitchClass+0xa6>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800e4bc:	4a20      	ldr	r2, [pc, #128]	; (800e540 <SwitchClass+0x11c>)
 800e4be:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800e4c2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800e4c6:	2a02      	cmp	r2, #2
 800e4c8:	d002      	beq.n	800e4d0 <SwitchClass+0xac>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	b25b      	sxtb	r3, r3
 800e4ce:	e7d5      	b.n	800e47c <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800e4d0:	4a1b      	ldr	r2, [pc, #108]	; (800e540 <SwitchClass+0x11c>)
 800e4d2:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800e4d6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800e4da:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800e4dc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800e4e0:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e4e4:	4b17      	ldr	r3, [pc, #92]	; (800e544 <SwitchClass+0x120>)
 800e4e6:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800e4ea:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e4ee:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e4f2:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 800e4f6:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e4fa:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800e4fe:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e502:	2203      	movs	r2, #3
 800e504:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800e508:	2201      	movs	r2, #1
 800e50a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800e50e:	e7b7      	b.n	800e480 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800e510:	f001 fbce 	bl	800fcb0 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800e514:	2800      	cmp	r0, #0
 800e516:	d190      	bne.n	800e43a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e518:	4b09      	ldr	r3, [pc, #36]	; (800e540 <SwitchClass+0x11c>)
 800e51a:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800e51e:	e78c      	b.n	800e43a <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800e520:	b958      	cbnz	r0, 800e53a <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800e522:	4b08      	ldr	r3, [pc, #32]	; (800e544 <SwitchClass+0x120>)
 800e524:	2206      	movs	r2, #6
 800e526:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e52a:	4b05      	ldr	r3, [pc, #20]	; (800e540 <SwitchClass+0x11c>)
 800e52c:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 800e530:	4b05      	ldr	r3, [pc, #20]	; (800e548 <SwitchClass+0x124>)
 800e532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e534:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800e536:	4620      	mov	r0, r4
 800e538:	e77f      	b.n	800e43a <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e53a:	2003      	movs	r0, #3
 800e53c:	e77d      	b.n	800e43a <SwitchClass+0x16>
 800e53e:	bf00      	nop
 800e540:	20008000 	.word	0x20008000
 800e544:	20003c04 	.word	0x20003c04
 800e548:	0801885c 	.word	0x0801885c

0800e54c <SendReJoinReq>:
{
 800e54c:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800e54e:	28ff      	cmp	r0, #255	; 0xff
 800e550:	d003      	beq.n	800e55a <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800e552:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800e554:	f7ff fb4e 	bl	800dbf4 <ScheduleTx>
}
 800e558:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800e55a:	2000      	movs	r0, #0
 800e55c:	f7ff ff62 	bl	800e424 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800e560:	4d0a      	ldr	r5, [pc, #40]	; (800e58c <SendReJoinReq+0x40>)
 800e562:	2400      	movs	r4, #0
 800e564:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800e568:	1cab      	adds	r3, r5, #2
 800e56a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e56e:	23ff      	movs	r3, #255	; 0xff
 800e570:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800e574:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800e578:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800e57c:	f005 fb14 	bl	8013ba8 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800e580:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800e584:	f005 faf2 	bl	8013b6c <SecureElementGetDevEui>
            allowDelayedTx = false;
 800e588:	4620      	mov	r0, r4
            break;
 800e58a:	e7e3      	b.n	800e554 <SendReJoinReq+0x8>
 800e58c:	20003c04 	.word	0x20003c04

0800e590 <PrepareFrame>:
{
 800e590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e594:	b083      	sub	sp, #12
 800e596:	4605      	mov	r5, r0
 800e598:	460e      	mov	r6, r1
 800e59a:	4617      	mov	r7, r2
 800e59c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800e5a0:	4959      	ldr	r1, [pc, #356]	; (800e708 <PrepareFrame+0x178>)
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800e5a6:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 800e5aa:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800e5ac:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800e5ae:	4698      	mov	r8, r3
 800e5b0:	b1cb      	cbz	r3, 800e5e6 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800e5b2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800e708 <PrepareFrame+0x178>
 800e5b6:	4622      	mov	r2, r4
 800e5b8:	4641      	mov	r1, r8
 800e5ba:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800e5be:	f005 fc10 	bl	8013de2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800e5c2:	b2e0      	uxtb	r0, r4
 800e5c4:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800e5c8:	782b      	ldrb	r3, [r5, #0]
 800e5ca:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800e5ce:	782b      	ldrb	r3, [r5, #0]
 800e5d0:	095b      	lsrs	r3, r3, #5
 800e5d2:	2b04      	cmp	r3, #4
 800e5d4:	d009      	beq.n	800e5ea <PrepareFrame+0x5a>
 800e5d6:	2b07      	cmp	r3, #7
 800e5d8:	d079      	beq.n	800e6ce <PrepareFrame+0x13e>
 800e5da:	2b02      	cmp	r3, #2
 800e5dc:	d009      	beq.n	800e5f2 <PrepareFrame+0x62>
 800e5de:	2002      	movs	r0, #2
}
 800e5e0:	b003      	add	sp, #12
 800e5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800e5e6:	4614      	mov	r4, r2
 800e5e8:	e7e3      	b.n	800e5b2 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800e5ea:	4b47      	ldr	r3, [pc, #284]	; (800e708 <PrepareFrame+0x178>)
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800e5f2:	4b45      	ldr	r3, [pc, #276]	; (800e708 <PrepareFrame+0x178>)
 800e5f4:	2204      	movs	r2, #4
 800e5f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800e5fa:	1c9a      	adds	r2, r3, #2
 800e5fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e600:	22ff      	movs	r2, #255	; 0xff
 800e602:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800e606:	782a      	ldrb	r2, [r5, #0]
 800e608:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800e60c:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800e610:	4a3e      	ldr	r2, [pc, #248]	; (800e70c <PrepareFrame+0x17c>)
 800e612:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800e616:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e61a:	7832      	ldrb	r2, [r6, #0]
 800e61c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800e620:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800e624:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800e628:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800e62c:	a801      	add	r0, sp, #4
 800e62e:	f001 ffc9 	bl	80105c4 <LoRaMacCryptoGetFCntUp>
 800e632:	2800      	cmp	r0, #0
 800e634:	d15c      	bne.n	800e6f0 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800e636:	9a01      	ldr	r2, [sp, #4]
 800e638:	4b33      	ldr	r3, [pc, #204]	; (800e708 <PrepareFrame+0x178>)
 800e63a:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800e63e:	2100      	movs	r1, #0
 800e640:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800e644:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800e648:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e64c:	4668      	mov	r0, sp
 800e64e:	f001 fc61 	bl	800ff14 <LoRaMacCommandsGetSizeSerializedCmds>
 800e652:	2800      	cmp	r0, #0
 800e654:	d14e      	bne.n	800e6f4 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800e656:	9b00      	ldr	r3, [sp, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d0c1      	beq.n	800e5e0 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800e65c:	4b2b      	ldr	r3, [pc, #172]	; (800e70c <PrepareFrame+0x17c>)
 800e65e:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800e662:	f7fe f8bf 	bl	800c7e4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e666:	4b28      	ldr	r3, [pc, #160]	; (800e708 <PrepareFrame+0x178>)
 800e668:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800e66c:	b113      	cbz	r3, 800e674 <PrepareFrame+0xe4>
 800e66e:	9a00      	ldr	r2, [sp, #0]
 800e670:	2a0f      	cmp	r2, #15
 800e672:	d915      	bls.n	800e6a0 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e674:	b113      	cbz	r3, 800e67c <PrepareFrame+0xec>
 800e676:	9b00      	ldr	r3, [sp, #0]
 800e678:	2b0f      	cmp	r3, #15
 800e67a:	d821      	bhi.n	800e6c0 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e67c:	4a24      	ldr	r2, [pc, #144]	; (800e710 <PrepareFrame+0x180>)
 800e67e:	4669      	mov	r1, sp
 800e680:	f001 fc54 	bl	800ff2c <LoRaMacCommandsSerializeCmds>
 800e684:	2800      	cmp	r0, #0
 800e686:	d13b      	bne.n	800e700 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800e688:	4b1f      	ldr	r3, [pc, #124]	; (800e708 <PrepareFrame+0x178>)
 800e68a:	2200      	movs	r2, #0
 800e68c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800e690:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800e694:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800e698:	9a00      	ldr	r2, [sp, #0]
 800e69a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800e69e:	e79f      	b.n	800e5e0 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800e6a0:	4a1c      	ldr	r2, [pc, #112]	; (800e714 <PrepareFrame+0x184>)
 800e6a2:	4669      	mov	r1, sp
 800e6a4:	200f      	movs	r0, #15
 800e6a6:	f001 fc41 	bl	800ff2c <LoRaMacCommandsSerializeCmds>
 800e6aa:	bb28      	cbnz	r0, 800e6f8 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800e6ac:	7833      	ldrb	r3, [r6, #0]
 800e6ae:	9a00      	ldr	r2, [sp, #0]
 800e6b0:	f362 0303 	bfi	r3, r2, #0, #4
 800e6b4:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	4b13      	ldr	r3, [pc, #76]	; (800e708 <PrepareFrame+0x178>)
 800e6ba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800e6be:	e78f      	b.n	800e5e0 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e6c0:	4a13      	ldr	r2, [pc, #76]	; (800e710 <PrepareFrame+0x180>)
 800e6c2:	4669      	mov	r1, sp
 800e6c4:	f001 fc32 	bl	800ff2c <LoRaMacCommandsSerializeCmds>
 800e6c8:	b1c0      	cbz	r0, 800e6fc <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e6ca:	2013      	movs	r0, #19
 800e6cc:	e788      	b.n	800e5e0 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800e6ce:	f1b8 0f00 	cmp.w	r8, #0
 800e6d2:	d017      	beq.n	800e704 <PrepareFrame+0x174>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d083      	beq.n	800e5e0 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800e6d8:	4c0b      	ldr	r4, [pc, #44]	; (800e708 <PrepareFrame+0x178>)
 800e6da:	b282      	uxth	r2, r0
 800e6dc:	4641      	mov	r1, r8
 800e6de:	1ce0      	adds	r0, r4, #3
 800e6e0:	f005 fb7f 	bl	8013de2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800e6e4:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	e777      	b.n	800e5e0 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e6f0:	2012      	movs	r0, #18
 800e6f2:	e775      	b.n	800e5e0 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e6f4:	2013      	movs	r0, #19
 800e6f6:	e773      	b.n	800e5e0 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e6f8:	2013      	movs	r0, #19
 800e6fa:	e771      	b.n	800e5e0 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800e6fc:	200a      	movs	r0, #10
 800e6fe:	e76f      	b.n	800e5e0 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e700:	2013      	movs	r0, #19
 800e702:	e76d      	b.n	800e5e0 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800e704:	2000      	movs	r0, #0
 800e706:	e76b      	b.n	800e5e0 <PrepareFrame+0x50>
 800e708:	20003c04 	.word	0x20003c04
 800e70c:	20008000 	.word	0x20008000
 800e710:	200040a0 	.word	0x200040a0
 800e714:	20003d1c 	.word	0x20003d1c

0800e718 <Send>:
{
 800e718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e71c:	b08a      	sub	sp, #40	; 0x28
 800e71e:	4617      	mov	r7, r2
 800e720:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e722:	4c44      	ldr	r4, [pc, #272]	; (800e834 <Send+0x11c>)
 800e724:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800e728:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e72c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e72e:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e730:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800e734:	2b00      	cmp	r3, #0
 800e736:	d07a      	beq.n	800e82e <Send+0x116>
 800e738:	4605      	mov	r5, r0
 800e73a:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800e73c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800e740:	b90b      	cbnz	r3, 800e746 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e742:	2100      	movs	r1, #0
 800e744:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800e746:	2300      	movs	r3, #0
 800e748:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800e74c:	4839      	ldr	r0, [pc, #228]	; (800e834 <Send+0x11c>)
 800e74e:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800e752:	f361 13c7 	bfi	r3, r1, #7, #1
 800e756:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e75a:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d052      	beq.n	800e808 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800e762:	4b34      	ldr	r3, [pc, #208]	; (800e834 <Send+0x11c>)
 800e764:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e768:	b12b      	cbz	r3, 800e776 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800e76a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e76e:	f043 0320 	orr.w	r3, r3, #32
 800e772:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800e776:	2301      	movs	r3, #1
 800e778:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800e77c:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e780:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e782:	492c      	ldr	r1, [pc, #176]	; (800e834 <Send+0x11c>)
 800e784:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800e788:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e78c:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800e790:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e794:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e798:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e79c:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800e7a0:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800e7a4:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800e7a8:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800e7b2:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800e7b6:	aa08      	add	r2, sp, #32
 800e7b8:	9200      	str	r2, [sp, #0]
 800e7ba:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800e7be:	3139      	adds	r1, #57	; 0x39
 800e7c0:	a803      	add	r0, sp, #12
 800e7c2:	f001 f9e5 	bl	800fb90 <LoRaMacAdrCalcNext>
 800e7c6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e7ca:	f360 1386 	bfi	r3, r0, #6, #1
 800e7ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800e7d2:	f8cd 8000 	str.w	r8, [sp]
 800e7d6:	463b      	mov	r3, r7
 800e7d8:	4632      	mov	r2, r6
 800e7da:	a909      	add	r1, sp, #36	; 0x24
 800e7dc:	4628      	mov	r0, r5
 800e7de:	f7ff fed7 	bl	800e590 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	b108      	cbz	r0, 800e7ea <Send+0xd2>
 800e7e6:	280a      	cmp	r0, #10
 800e7e8:	d104      	bne.n	800e7f4 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800e7ea:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800e7ee:	f7ff fa01 	bl	800dbf4 <ScheduleTx>
 800e7f2:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800e7f4:	b17c      	cbz	r4, 800e816 <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800e7f6:	4b0f      	ldr	r3, [pc, #60]	; (800e834 <Send+0x11c>)
 800e7f8:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800e7fc:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800e800:	4620      	mov	r0, r4
 800e802:	b00a      	add	sp, #40	; 0x28
 800e804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800e808:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e80c:	f043 0310 	orr.w	r3, r3, #16
 800e810:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e814:	e7a5      	b.n	800e762 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800e816:	4b07      	ldr	r3, [pc, #28]	; (800e834 <Send+0x11c>)
 800e818:	2200      	movs	r2, #0
 800e81a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800e81e:	9a08      	ldr	r2, [sp, #32]
 800e820:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800e822:	f001 fb45 	bl	800feb0 <LoRaMacCommandsRemoveNoneStickyCmds>
 800e826:	2800      	cmp	r0, #0
 800e828:	d0ea      	beq.n	800e800 <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e82a:	2413      	movs	r4, #19
 800e82c:	e7e8      	b.n	800e800 <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800e82e:	2407      	movs	r4, #7
 800e830:	e7e6      	b.n	800e800 <Send+0xe8>
 800e832:	bf00      	nop
 800e834:	20008000 	.word	0x20008000

0800e838 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e838:	4b0c      	ldr	r3, [pc, #48]	; (800e86c <LoRaMacIsBusy+0x34>)
 800e83a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d00c      	beq.n	800e85c <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800e842:	4a0b      	ldr	r2, [pc, #44]	; (800e870 <LoRaMacIsBusy+0x38>)
 800e844:	7812      	ldrb	r2, [r2, #0]
 800e846:	f012 0f01 	tst.w	r2, #1
 800e84a:	d109      	bne.n	800e860 <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e84c:	b953      	cbnz	r3, 800e864 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e84e:	4b07      	ldr	r3, [pc, #28]	; (800e86c <LoRaMacIsBusy+0x34>)
 800e850:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e854:	2b01      	cmp	r3, #1
 800e856:	d007      	beq.n	800e868 <LoRaMacIsBusy+0x30>
    return true;
 800e858:	2001      	movs	r0, #1
 800e85a:	4770      	bx	lr
        return false;
 800e85c:	2000      	movs	r0, #0
 800e85e:	4770      	bx	lr
        return true;
 800e860:	2001      	movs	r0, #1
 800e862:	4770      	bx	lr
    return true;
 800e864:	2001      	movs	r0, #1
 800e866:	4770      	bx	lr
        return false;
 800e868:	2000      	movs	r0, #0
}
 800e86a:	4770      	bx	lr
 800e86c:	20003c04 	.word	0x20003c04
 800e870:	20003c00 	.word	0x20003c00

0800e874 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e874:	4b04      	ldr	r3, [pc, #16]	; (800e888 <LoRaMacIsStopped+0x14>)
 800e876:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d001      	beq.n	800e882 <LoRaMacIsStopped+0xe>
    return false;
 800e87e:	2000      	movs	r0, #0
 800e880:	4770      	bx	lr
        return true;
 800e882:	2001      	movs	r0, #1
}
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	20003c04 	.word	0x20003c04

0800e88c <LoRaMacProcess>:
{
 800e88c:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800e88e:	f7ff f801 	bl	800d894 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e892:	f001 fa1e 	bl	800fcd2 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e896:	4b1f      	ldr	r3, [pc, #124]	; (800e914 <LoRaMacProcess+0x88>)
 800e898:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800e89c:	f013 0f10 	tst.w	r3, #16
 800e8a0:	d10d      	bne.n	800e8be <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800e8a2:	f7fd fe69 	bl	800c578 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e8a6:	4b1b      	ldr	r3, [pc, #108]	; (800e914 <LoRaMacProcess+0x88>)
 800e8a8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800e8ac:	2b02      	cmp	r3, #2
 800e8ae:	d022      	beq.n	800e8f6 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800e8b0:	4b18      	ldr	r3, [pc, #96]	; (800e914 <LoRaMacProcess+0x88>)
 800e8b2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800e8b6:	f013 0f20 	tst.w	r3, #32
 800e8ba:	d11f      	bne.n	800e8fc <LoRaMacProcess+0x70>
}
 800e8bc:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e8be:	2000      	movs	r0, #0
 800e8c0:	f7fd fe54 	bl	800c56c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e8c4:	f7fd fe90 	bl	800c5e8 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800e8c8:	f7fd ff80 	bl	800c7cc <IsRequestPending>
 800e8cc:	b110      	cbz	r0, 800e8d4 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e8ce:	f7fe f86f 	bl	800c9b0 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800e8d2:	b918      	cbnz	r0, 800e8dc <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800e8d4:	f7ff f820 	bl	800d918 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e8d8:	f7ff fa42 	bl	800dd60 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800e8dc:	f7ff fa7c 	bl	800ddd8 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e8e0:	2001      	movs	r0, #1
 800e8e2:	f7fd fe43 	bl	800c56c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e8e6:	4a0b      	ldr	r2, [pc, #44]	; (800e914 <LoRaMacProcess+0x88>)
 800e8e8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e8ec:	f043 0320 	orr.w	r3, r3, #32
 800e8f0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800e8f4:	e7d5      	b.n	800e8a2 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800e8f6:	f7ff fab9 	bl	800de6c <OpenContinuousRxCWindow>
 800e8fa:	e7d9      	b.n	800e8b0 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800e8fc:	4b05      	ldr	r3, [pc, #20]	; (800e914 <LoRaMacProcess+0x88>)
 800e8fe:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800e902:	f36f 1245 	bfc	r2, #5, #1
 800e906:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800e90a:	4803      	ldr	r0, [pc, #12]	; (800e918 <LoRaMacProcess+0x8c>)
 800e90c:	f7ff fb5e 	bl	800dfcc <LoRaMacHandleNvm>
}
 800e910:	e7d4      	b.n	800e8bc <LoRaMacProcess+0x30>
 800e912:	bf00      	nop
 800e914:	20003c04 	.word	0x20003c04
 800e918:	20008000 	.word	0x20008000

0800e91c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800e91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e920:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800e922:	2800      	cmp	r0, #0
 800e924:	f000 81a3 	beq.w	800ec6e <LoRaMacInitialization+0x352>
 800e928:	4688      	mov	r8, r1
 800e92a:	4691      	mov	r9, r2
 800e92c:	4607      	mov	r7, r0
 800e92e:	2900      	cmp	r1, #0
 800e930:	f000 819f 	beq.w	800ec72 <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e934:	6803      	ldr	r3, [r0, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	f000 819d 	beq.w	800ec76 <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800e93c:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e93e:	2b00      	cmp	r3, #0
 800e940:	f000 819b 	beq.w	800ec7a <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e944:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800e946:	2b00      	cmp	r3, #0
 800e948:	f000 8199 	beq.w	800ec7e <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800e94c:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f000 8197 	beq.w	800ec82 <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800e954:	4610      	mov	r0, r2
 800e956:	f002 f987 	bl	8010c68 <RegionIsActive>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	f000 8193 	beq.w	800ec86 <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800e960:	4638      	mov	r0, r7
 800e962:	f001 fb77 	bl	8010054 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800e966:	4ccb      	ldr	r4, [pc, #812]	; (800ec94 <LoRaMacInitialization+0x378>)
 800e968:	f240 52d4 	movw	r2, #1492	; 0x5d4
 800e96c:	2100      	movs	r1, #0
 800e96e:	4620      	mov	r0, r4
 800e970:	f005 fa4f 	bl	8013e12 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800e974:	4ec8      	ldr	r6, [pc, #800]	; (800ec98 <LoRaMacInitialization+0x37c>)
 800e976:	f240 521c 	movw	r2, #1308	; 0x51c
 800e97a:	2100      	movs	r1, #0
 800e97c:	4630      	mov	r0, r6
 800e97e:	f005 fa48 	bl	8013e12 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800e982:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800e986:	2500      	movs	r5, #0
 800e988:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800e98c:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800e990:	4bc2      	ldr	r3, [pc, #776]	; (800ec9c <LoRaMacInitialization+0x380>)
 800e992:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800e996:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800e99a:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800e99e:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800e9a0:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800e9a4:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800e9a6:	4bbe      	ldr	r3, [pc, #760]	; (800eca0 <LoRaMacInitialization+0x384>)
 800e9a8:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e9aa:	a905      	add	r1, sp, #20
 800e9ac:	4648      	mov	r0, r9
 800e9ae:	f002 f988 	bl	8010cc2 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e9b2:	230f      	movs	r3, #15
 800e9b4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e9b8:	a90a      	add	r1, sp, #40	; 0x28
 800e9ba:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e9be:	f002 f95c 	bl	8010c7a <RegionGetPhyParam>
 800e9c2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800e9c4:	1b40      	subs	r0, r0, r5
 800e9c6:	bf18      	it	ne
 800e9c8:	2001      	movne	r0, #1
 800e9ca:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800e9ce:	f04f 0a0a 	mov.w	sl, #10
 800e9d2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e9d6:	a90a      	add	r1, sp, #40	; 0x28
 800e9d8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e9dc:	f002 f94d 	bl	8010c7a <RegionGetPhyParam>
 800e9e0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800e9e2:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800e9e6:	f04f 0906 	mov.w	r9, #6
 800e9ea:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e9ee:	a90a      	add	r1, sp, #40	; 0x28
 800e9f0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e9f4:	f002 f941 	bl	8010c7a <RegionGetPhyParam>
 800e9f8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800e9fa:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800e9fe:	2310      	movs	r3, #16
 800ea00:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea04:	a90a      	add	r1, sp, #40	; 0x28
 800ea06:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ea0a:	f002 f936 	bl	8010c7a <RegionGetPhyParam>
 800ea0e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800ea10:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800ea14:	2311      	movs	r3, #17
 800ea16:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea1a:	a90a      	add	r1, sp, #40	; 0x28
 800ea1c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ea20:	f002 f92b 	bl	8010c7a <RegionGetPhyParam>
 800ea24:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800ea26:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800ea2a:	2312      	movs	r3, #18
 800ea2c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea30:	a90a      	add	r1, sp, #40	; 0x28
 800ea32:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ea36:	f002 f920 	bl	8010c7a <RegionGetPhyParam>
 800ea3a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800ea3c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800ea40:	2313      	movs	r3, #19
 800ea42:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea46:	a90a      	add	r1, sp, #40	; 0x28
 800ea48:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ea4c:	f002 f915 	bl	8010c7a <RegionGetPhyParam>
 800ea50:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800ea52:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800ea56:	2314      	movs	r3, #20
 800ea58:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea5c:	a90a      	add	r1, sp, #40	; 0x28
 800ea5e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ea62:	f002 f90a 	bl	8010c7a <RegionGetPhyParam>
 800ea66:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800ea68:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800ea6c:	2316      	movs	r3, #22
 800ea6e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea72:	a90a      	add	r1, sp, #40	; 0x28
 800ea74:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ea78:	f002 f8ff 	bl	8010c7a <RegionGetPhyParam>
 800ea7c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800ea7e:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800ea82:	2317      	movs	r3, #23
 800ea84:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea88:	a90a      	add	r1, sp, #40	; 0x28
 800ea8a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ea8e:	f002 f8f4 	bl	8010c7a <RegionGetPhyParam>
 800ea92:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ea94:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800ea98:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800ea9c:	2318      	movs	r3, #24
 800ea9e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eaa2:	a90a      	add	r1, sp, #40	; 0x28
 800eaa4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800eaa8:	f002 f8e7 	bl	8010c7a <RegionGetPhyParam>
 800eaac:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800eaae:	b2c0      	uxtb	r0, r0
 800eab0:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800eab4:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800eab8:	231d      	movs	r3, #29
 800eaba:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eabe:	a90a      	add	r1, sp, #40	; 0x28
 800eac0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800eac4:	f002 f8d9 	bl	8010c7a <RegionGetPhyParam>
 800eac8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800eaca:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800eace:	231e      	movs	r3, #30
 800ead0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ead4:	a90a      	add	r1, sp, #40	; 0x28
 800ead6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800eada:	f002 f8ce 	bl	8010c7a <RegionGetPhyParam>
 800eade:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800eae0:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800eae4:	231f      	movs	r3, #31
 800eae6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eaea:	a90a      	add	r1, sp, #40	; 0x28
 800eaec:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800eaf0:	f002 f8c3 	bl	8010c7a <RegionGetPhyParam>
 800eaf4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800eaf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf8:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800eafc:	2320      	movs	r3, #32
 800eafe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb02:	a90a      	add	r1, sp, #40	; 0x28
 800eb04:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800eb08:	f002 f8b7 	bl	8010c7a <RegionGetPhyParam>
 800eb0c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800eb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb10:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800eb14:	230b      	movs	r3, #11
 800eb16:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb1a:	a90a      	add	r1, sp, #40	; 0x28
 800eb1c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800eb20:	f002 f8ab 	bl	8010c7a <RegionGetPhyParam>
 800eb24:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800eb26:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800eb2a:	230c      	movs	r3, #12
 800eb2c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb30:	a90a      	add	r1, sp, #40	; 0x28
 800eb32:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800eb36:	f002 f8a0 	bl	8010c7a <RegionGetPhyParam>
 800eb3a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800eb3c:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800eb40:	f04f 0b01 	mov.w	fp, #1
 800eb44:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800eb48:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800eb4c:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800eb50:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800eb54:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800eb58:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800eb5c:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800eb5e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800eb62:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800eb64:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800eb68:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800eb6a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800eb6e:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800eb70:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800eb74:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800eb76:	f884 b068 	strb.w	fp, [r4, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800eb7a:	f884 b11f 	strb.w	fp, [r4, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800eb7e:	f8c6 8348 	str.w	r8, [r6, #840]	; 0x348
    ResetMacParameters( false );
 800eb82:	4628      	mov	r0, r5
 800eb84:	f7ff fb82 	bl	800e28c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800eb88:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800eb8c:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800eb90:	f886 5491 	strb.w	r5, [r6, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800eb94:	f8c6 b340 	str.w	fp, [r6, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800eb98:	62e5      	str	r5, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800eb9a:	6325      	str	r5, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800eb9c:	9500      	str	r5, [sp, #0]
 800eb9e:	4b41      	ldr	r3, [pc, #260]	; (800eca4 <LoRaMacInitialization+0x388>)
 800eba0:	462a      	mov	r2, r5
 800eba2:	f04f 31ff 	mov.w	r1, #4294967295
 800eba6:	f506 705a 	add.w	r0, r6, #872	; 0x368
 800ebaa:	f007 faeb 	bl	8016184 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800ebae:	9500      	str	r5, [sp, #0]
 800ebb0:	4b3d      	ldr	r3, [pc, #244]	; (800eca8 <LoRaMacInitialization+0x38c>)
 800ebb2:	462a      	mov	r2, r5
 800ebb4:	f04f 31ff 	mov.w	r1, #4294967295
 800ebb8:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800ebbc:	f007 fae2 	bl	8016184 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800ebc0:	9500      	str	r5, [sp, #0]
 800ebc2:	4b3a      	ldr	r3, [pc, #232]	; (800ecac <LoRaMacInitialization+0x390>)
 800ebc4:	462a      	mov	r2, r5
 800ebc6:	f04f 31ff 	mov.w	r1, #4294967295
 800ebca:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800ebce:	f007 fad9 	bl	8016184 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800ebd2:	9500      	str	r5, [sp, #0]
 800ebd4:	4b36      	ldr	r3, [pc, #216]	; (800ecb0 <LoRaMacInitialization+0x394>)
 800ebd6:	462a      	mov	r2, r5
 800ebd8:	f04f 31ff 	mov.w	r1, #4294967295
 800ebdc:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800ebe0:	f007 fad0 	bl	8016184 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800ebe4:	af02      	add	r7, sp, #8
 800ebe6:	4638      	mov	r0, r7
 800ebe8:	f007 fa5e 	bl	80160a8 <SysTimeGetMcuTime>
 800ebec:	f504 7392 	add.w	r3, r4, #292	; 0x124
 800ebf0:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ebf4:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800ebf8:	4b2e      	ldr	r3, [pc, #184]	; (800ecb4 <LoRaMacInitialization+0x398>)
 800ebfa:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800ebfc:	4b2e      	ldr	r3, [pc, #184]	; (800ecb8 <LoRaMacInitialization+0x39c>)
 800ebfe:	f8c6 334c 	str.w	r3, [r6, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800ec02:	4b2e      	ldr	r3, [pc, #184]	; (800ecbc <LoRaMacInitialization+0x3a0>)
 800ec04:	f8c6 3354 	str.w	r3, [r6, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800ec08:	4b2d      	ldr	r3, [pc, #180]	; (800ecc0 <LoRaMacInitialization+0x3a4>)
 800ec0a:	f8c6 335c 	str.w	r3, [r6, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800ec0e:	4b2d      	ldr	r3, [pc, #180]	; (800ecc4 <LoRaMacInitialization+0x3a8>)
 800ec10:	f8c6 3350 	str.w	r3, [r6, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800ec14:	4b2c      	ldr	r3, [pc, #176]	; (800ecc8 <LoRaMacInitialization+0x3ac>)
 800ec16:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800ec1a:	4b2c      	ldr	r3, [pc, #176]	; (800eccc <LoRaMacInitialization+0x3b0>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f506 7053 	add.w	r0, r6, #844	; 0x34c
 800ec22:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800ec24:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800ec28:	f004 fe08 	bl	801383c <SecureElementInit>
 800ec2c:	bb80      	cbnz	r0, 800ec90 <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f001 fca8 	bl	8010584 <LoRaMacCryptoInit>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d14b      	bne.n	800ecd0 <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800ec38:	f001 f8ce 	bl	800fdd8 <LoRaMacCommandsInit>
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	d149      	bne.n	800ecd4 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800ec40:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800ec44:	f001 fcf0 	bl	8010628 <LoRaMacCryptoSetMulticastReference>
 800ec48:	4604      	mov	r4, r0
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d144      	bne.n	800ecd8 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800ec4e:	4d1f      	ldr	r5, [pc, #124]	; (800eccc <LoRaMacInitialization+0x3b0>)
 800ec50:	696b      	ldr	r3, [r5, #20]
 800ec52:	4798      	blx	r3
 800ec54:	f005 f8b2 	bl	8013dbc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ec58:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800ec5a:	4a0e      	ldr	r2, [pc, #56]	; (800ec94 <LoRaMacInitialization+0x378>)
 800ec5c:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800ec60:	4798      	blx	r3
    Radio.Sleep( );
 800ec62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ec64:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ec66:	4658      	mov	r0, fp
 800ec68:	f7fd fc80 	bl	800c56c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800ec6c:	e00c      	b.n	800ec88 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ec6e:	2403      	movs	r4, #3
 800ec70:	e00a      	b.n	800ec88 <LoRaMacInitialization+0x36c>
 800ec72:	2403      	movs	r4, #3
 800ec74:	e008      	b.n	800ec88 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ec76:	2403      	movs	r4, #3
 800ec78:	e006      	b.n	800ec88 <LoRaMacInitialization+0x36c>
 800ec7a:	2403      	movs	r4, #3
 800ec7c:	e004      	b.n	800ec88 <LoRaMacInitialization+0x36c>
 800ec7e:	2403      	movs	r4, #3
 800ec80:	e002      	b.n	800ec88 <LoRaMacInitialization+0x36c>
 800ec82:	2403      	movs	r4, #3
 800ec84:	e000      	b.n	800ec88 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800ec86:	2409      	movs	r4, #9
}
 800ec88:	4620      	mov	r0, r4
 800ec8a:	b00d      	add	sp, #52	; 0x34
 800ec8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec90:	2411      	movs	r4, #17
 800ec92:	e7f9      	b.n	800ec88 <LoRaMacInitialization+0x36c>
 800ec94:	20008000 	.word	0x20008000
 800ec98:	20003c04 	.word	0x20003c04
 800ec9c:	01000400 	.word	0x01000400
 800eca0:	20004120 	.word	0x20004120
 800eca4:	0800dcfd 	.word	0x0800dcfd
 800eca8:	0800df7d 	.word	0x0800df7d
 800ecac:	0800df25 	.word	0x0800df25
 800ecb0:	0800c94d 	.word	0x0800c94d
 800ecb4:	20003c00 	.word	0x20003c00
 800ecb8:	0800e241 	.word	0x0800e241
 800ecbc:	0800e1f1 	.word	0x0800e1f1
 800ecc0:	0800c79d 	.word	0x0800c79d
 800ecc4:	0800e1c9 	.word	0x0800e1c9
 800ecc8:	0800e1a1 	.word	0x0800e1a1
 800eccc:	0801885c 	.word	0x0801885c
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ecd0:	2411      	movs	r4, #17
 800ecd2:	e7d9      	b.n	800ec88 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ecd4:	2413      	movs	r4, #19
 800ecd6:	e7d7      	b.n	800ec88 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ecd8:	2411      	movs	r4, #17
 800ecda:	e7d5      	b.n	800ec88 <LoRaMacInitialization+0x36c>

0800ecdc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800ecdc:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800ecde:	2400      	movs	r4, #0
 800ece0:	4b03      	ldr	r3, [pc, #12]	; (800ecf0 <LoRaMacStart+0x14>)
 800ece2:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800ece6:	f7fd fc2d 	bl	800c544 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800ecea:	4620      	mov	r0, r4
 800ecec:	bd10      	pop	{r4, pc}
 800ecee:	bf00      	nop
 800ecf0:	20003c04 	.word	0x20003c04

0800ecf4 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800ecf4:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800ecf6:	f7ff fd9f 	bl	800e838 <LoRaMacIsBusy>
 800ecfa:	b130      	cbz	r0, 800ed0a <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800ecfc:	4b0b      	ldr	r3, [pc, #44]	; (800ed2c <LoRaMacStop+0x38>)
 800ecfe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d010      	beq.n	800ed28 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800ed06:	2001      	movs	r0, #1
}
 800ed08:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ed0a:	4b09      	ldr	r3, [pc, #36]	; (800ed30 <LoRaMacStop+0x3c>)
 800ed0c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	d005      	beq.n	800ed20 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800ed14:	4b05      	ldr	r3, [pc, #20]	; (800ed2c <LoRaMacStop+0x38>)
 800ed16:	2201      	movs	r2, #1
 800ed18:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	e7f3      	b.n	800ed08 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800ed20:	4b04      	ldr	r3, [pc, #16]	; (800ed34 <LoRaMacStop+0x40>)
 800ed22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed24:	4798      	blx	r3
 800ed26:	e7f5      	b.n	800ed14 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800ed28:	2000      	movs	r0, #0
 800ed2a:	e7ed      	b.n	800ed08 <LoRaMacStop+0x14>
 800ed2c:	20003c04 	.word	0x20003c04
 800ed30:	20008000 	.word	0x20008000
 800ed34:	0801885c 	.word	0x0801885c

0800ed38 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800ed38:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800ed3a:	4c14      	ldr	r4, [pc, #80]	; (800ed8c <LoRaMacHalt+0x54>)
 800ed3c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800ed40:	f007 fa7e 	bl	8016240 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800ed44:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800ed48:	f007 fa7a 	bl	8016240 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800ed4c:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800ed50:	f007 fa76 	bl	8016240 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800ed54:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800ed58:	f007 fa72 	bl	8016240 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800ed5c:	f000 ffa6 	bl	800fcac <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800ed60:	4b0b      	ldr	r3, [pc, #44]	; (800ed90 <LoRaMacHalt+0x58>)
 800ed62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed64:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800ed66:	2500      	movs	r5, #0
 800ed68:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800ed6c:	4e09      	ldr	r6, [pc, #36]	; (800ed94 <LoRaMacHalt+0x5c>)
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f7ff f92c 	bl	800dfcc <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800ed74:	f240 52d4 	movw	r2, #1492	; 0x5d4
 800ed78:	4631      	mov	r1, r6
 800ed7a:	4807      	ldr	r0, [pc, #28]	; (800ed98 <LoRaMacHalt+0x60>)
 800ed7c:	f005 f831 	bl	8013de2 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800ed80:	2301      	movs	r3, #1
 800ed82:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800ed86:	4628      	mov	r0, r5
 800ed88:	bd70      	pop	{r4, r5, r6, pc}
 800ed8a:	bf00      	nop
 800ed8c:	20003c04 	.word	0x20003c04
 800ed90:	0801885c 	.word	0x0801885c
 800ed94:	20008000 	.word	0x20008000
 800ed98:	200085d4 	.word	0x200085d4

0800ed9c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800ed9c:	b530      	push	{r4, r5, lr}
 800ed9e:	b08b      	sub	sp, #44	; 0x2c
 800eda0:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800eda2:	4b31      	ldr	r3, [pc, #196]	; (800ee68 <LoRaMacQueryTxPossible+0xcc>)
 800eda4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800eda6:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800eda8:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800edac:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800edb0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800edb4:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800edb8:	4b2c      	ldr	r3, [pc, #176]	; (800ee6c <LoRaMacQueryTxPossible+0xd0>)
 800edba:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800edbe:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800edc2:	2300      	movs	r3, #0
 800edc4:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800edc6:	2900      	cmp	r1, #0
 800edc8:	d048      	beq.n	800ee5c <LoRaMacQueryTxPossible+0xc0>
 800edca:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800edcc:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800edd0:	4b25      	ldr	r3, [pc, #148]	; (800ee68 <LoRaMacQueryTxPossible+0xcc>)
 800edd2:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800edd6:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800edda:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800eddc:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 800ede0:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800ede4:	f8b3 108a 	ldrh.w	r1, [r3, #138]	; 0x8a
 800ede8:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800edec:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800edf0:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800edf4:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800edf8:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800edfc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ee00:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ee04:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800ee08:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ee0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800ee10:	ab04      	add	r3, sp, #16
 800ee12:	9300      	str	r3, [sp, #0]
 800ee14:	f10d 030d 	add.w	r3, sp, #13
 800ee18:	f10d 020e 	add.w	r2, sp, #14
 800ee1c:	f10d 010f 	add.w	r1, sp, #15
 800ee20:	a805      	add	r0, sp, #20
 800ee22:	f000 feb5 	bl	800fb90 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ee26:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800ee2a:	f7fd fcdb 	bl	800c7e4 <GetMaxAppPayloadWithoutFOptsLength>
 800ee2e:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ee30:	a802      	add	r0, sp, #8
 800ee32:	f001 f86f 	bl	800ff14 <LoRaMacCommandsGetSizeSerializedCmds>
 800ee36:	b998      	cbnz	r0, 800ee60 <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800ee38:	9b02      	ldr	r3, [sp, #8]
 800ee3a:	2b0f      	cmp	r3, #15
 800ee3c:	d80a      	bhi.n	800ee54 <LoRaMacQueryTxPossible+0xb8>
 800ee3e:	786a      	ldrb	r2, [r5, #1]
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d807      	bhi.n	800ee54 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800ee44:	1ad3      	subs	r3, r2, r3
 800ee46:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800ee48:	9b02      	ldr	r3, [sp, #8]
 800ee4a:	441c      	add	r4, r3
 800ee4c:	42a2      	cmp	r2, r4
 800ee4e:	d309      	bcc.n	800ee64 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800ee50:	b00b      	add	sp, #44	; 0x2c
 800ee52:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800ee54:	2300      	movs	r3, #0
 800ee56:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800ee58:	2008      	movs	r0, #8
 800ee5a:	e7f9      	b.n	800ee50 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ee5c:	2003      	movs	r0, #3
 800ee5e:	e7f7      	b.n	800ee50 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ee60:	2013      	movs	r0, #19
 800ee62:	e7f5      	b.n	800ee50 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800ee64:	2008      	movs	r0, #8
 800ee66:	e7f3      	b.n	800ee50 <LoRaMacQueryTxPossible+0xb4>
 800ee68:	20008000 	.word	0x20008000
 800ee6c:	20003c04 	.word	0x20003c04

0800ee70 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f000 817c 	beq.w	800f16e <LoRaMacMibGetRequestConfirm+0x2fe>
{
 800ee76:	b510      	push	{r4, lr}
 800ee78:	b084      	sub	sp, #16
 800ee7a:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800ee7c:	7800      	ldrb	r0, [r0, #0]
 800ee7e:	2841      	cmp	r0, #65	; 0x41
 800ee80:	f200 8171 	bhi.w	800f166 <LoRaMacMibGetRequestConfirm+0x2f6>
 800ee84:	e8df f010 	tbh	[pc, r0, lsl #1]
 800ee88:	00480042 	.word	0x00480042
 800ee8c:	0053004e 	.word	0x0053004e
 800ee90:	005e0058 	.word	0x005e0058
 800ee94:	016f0064 	.word	0x016f0064
 800ee98:	016f016f 	.word	0x016f016f
 800ee9c:	016f016f 	.word	0x016f016f
 800eea0:	016f016f 	.word	0x016f016f
 800eea4:	006c016f 	.word	0x006c016f
 800eea8:	00780072 	.word	0x00780072
 800eeac:	008d0085 	.word	0x008d0085
 800eeb0:	009d0095 	.word	0x009d0095
 800eeb4:	00a500b2 	.word	0x00a500b2
 800eeb8:	00c500bf 	.word	0x00c500bf
 800eebc:	00cf00ca 	.word	0x00cf00ca
 800eec0:	00d900d4 	.word	0x00d900d4
 800eec4:	00ef00de 	.word	0x00ef00de
 800eec8:	010100f5 	.word	0x010100f5
 800eecc:	010700fb 	.word	0x010700fb
 800eed0:	0112010c 	.word	0x0112010c
 800eed4:	01180120 	.word	0x01180120
 800eed8:	016f011c 	.word	0x016f011c
 800eedc:	016f0126 	.word	0x016f0126
 800eee0:	016f016f 	.word	0x016f016f
 800eee4:	016f016f 	.word	0x016f016f
 800eee8:	016f016f 	.word	0x016f016f
 800eeec:	016f016f 	.word	0x016f016f
 800eef0:	016f016f 	.word	0x016f016f
 800eef4:	016f016f 	.word	0x016f016f
 800eef8:	016f016f 	.word	0x016f016f
 800eefc:	0135012f 	.word	0x0135012f
 800ef00:	0141013b 	.word	0x0141013b
 800ef04:	014d0147 	.word	0x014d0147
 800ef08:	01610153 	.word	0x01610153
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800ef0c:	4b99      	ldr	r3, [pc, #612]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800ef0e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ef12:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800ef14:	b004      	add	sp, #16
 800ef16:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ef18:	4b96      	ldr	r3, [pc, #600]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800ef1a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ef1e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef20:	2000      	movs	r0, #0
            break;
 800ef22:	e7f7      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800ef24:	6860      	ldr	r0, [r4, #4]
 800ef26:	f004 fe21 	bl	8013b6c <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef2a:	2000      	movs	r0, #0
            break;
 800ef2c:	e7f2      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800ef2e:	6860      	ldr	r0, [r4, #4]
 800ef30:	f004 fe3a 	bl	8013ba8 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef34:	2000      	movs	r0, #0
            break;
 800ef36:	e7ed      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800ef38:	4b8e      	ldr	r3, [pc, #568]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800ef3a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800ef3e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef40:	2000      	movs	r0, #0
            break;
 800ef42:	e7e7      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800ef44:	4b8b      	ldr	r3, [pc, #556]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800ef46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ef4a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef4c:	2000      	movs	r0, #0
            break;
 800ef4e:	e7e1      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800ef50:	1d21      	adds	r1, r4, #4
 800ef52:	4b88      	ldr	r3, [pc, #544]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800ef54:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800ef58:	f004 fe42 	bl	8013be0 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef5c:	2000      	movs	r0, #0
            break;
 800ef5e:	e7d9      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800ef60:	4b84      	ldr	r3, [pc, #528]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800ef62:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800ef66:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef68:	2000      	movs	r0, #0
            break;
 800ef6a:	e7d3      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ef6c:	4b81      	ldr	r3, [pc, #516]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800ef6e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ef72:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef74:	2000      	movs	r0, #0
            break;
 800ef76:	e7cd      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_CHANNELS;
 800ef78:	231c      	movs	r3, #28
 800ef7a:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ef7e:	a902      	add	r1, sp, #8
 800ef80:	4b7c      	ldr	r3, [pc, #496]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800ef82:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ef86:	f001 fe78 	bl	8010c7a <RegionGetPhyParam>
 800ef8a:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800ef8c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef8e:	2000      	movs	r0, #0
            break;
 800ef90:	e7c0      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ef92:	3404      	adds	r4, #4
 800ef94:	4b78      	ldr	r3, [pc, #480]	; (800f178 <LoRaMacMibGetRequestConfirm+0x308>)
 800ef96:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ef9a:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef9e:	2000      	movs	r0, #0
            break;
 800efa0:	e7b8      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800efa2:	3404      	adds	r4, #4
 800efa4:	4b75      	ldr	r3, [pc, #468]	; (800f17c <LoRaMacMibGetRequestConfirm+0x30c>)
 800efa6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800efaa:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800efae:	2000      	movs	r0, #0
            break;
 800efb0:	e7b0      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800efb2:	3404      	adds	r4, #4
 800efb4:	4b72      	ldr	r3, [pc, #456]	; (800f180 <LoRaMacMibGetRequestConfirm+0x310>)
 800efb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800efba:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800efbe:	2000      	movs	r0, #0
            break;
 800efc0:	e7a8      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800efc2:	3404      	adds	r4, #4
 800efc4:	4b6f      	ldr	r3, [pc, #444]	; (800f184 <LoRaMacMibGetRequestConfirm+0x314>)
 800efc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800efca:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800efce:	2000      	movs	r0, #0
            break;
 800efd0:	e7a0      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800efd2:	231a      	movs	r3, #26
 800efd4:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800efd8:	a902      	add	r1, sp, #8
 800efda:	4b66      	ldr	r3, [pc, #408]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800efdc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800efe0:	f001 fe4b 	bl	8010c7a <RegionGetPhyParam>
 800efe4:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800efe6:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800efe8:	2000      	movs	r0, #0
            break;
 800efea:	e793      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800efec:	2319      	movs	r3, #25
 800efee:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eff2:	a902      	add	r1, sp, #8
 800eff4:	4b5f      	ldr	r3, [pc, #380]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800eff6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800effa:	f001 fe3e 	bl	8010c7a <RegionGetPhyParam>
 800effe:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800f000:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f002:	2000      	movs	r0, #0
            break;
 800f004:	e786      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f006:	4b5b      	ldr	r3, [pc, #364]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f008:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800f00c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f00e:	2000      	movs	r0, #0
            break;
 800f010:	e780      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800f012:	4b58      	ldr	r3, [pc, #352]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f016:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f018:	2000      	movs	r0, #0
            break;
 800f01a:	e77b      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800f01c:	4b55      	ldr	r3, [pc, #340]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f020:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f022:	2000      	movs	r0, #0
            break;
 800f024:	e776      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800f026:	4b53      	ldr	r3, [pc, #332]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f02a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f02c:	2000      	movs	r0, #0
            break;
 800f02e:	e771      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800f030:	4b50      	ldr	r3, [pc, #320]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f034:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f036:	2000      	movs	r0, #0
            break;
 800f038:	e76c      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800f03a:	4b4e      	ldr	r3, [pc, #312]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f03c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f03e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f040:	2000      	movs	r0, #0
            break;
 800f042:	e767      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800f044:	2302      	movs	r3, #2
 800f046:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f04a:	4b4a      	ldr	r3, [pc, #296]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f04c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800f050:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f054:	a902      	add	r1, sp, #8
 800f056:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f05a:	f001 fe0e 	bl	8010c7a <RegionGetPhyParam>
 800f05e:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800f060:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f062:	2000      	movs	r0, #0
            break;
 800f064:	e756      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f066:	4b43      	ldr	r3, [pc, #268]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f068:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800f06c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f06e:	2000      	movs	r0, #0
            break;
 800f070:	e750      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f072:	4b40      	ldr	r3, [pc, #256]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f074:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f078:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f07a:	2000      	movs	r0, #0
            break;
 800f07c:	e74a      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f07e:	4b3d      	ldr	r3, [pc, #244]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f080:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800f084:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f086:	2000      	movs	r0, #0
            break;
 800f088:	e744      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f08a:	4b3a      	ldr	r3, [pc, #232]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f08c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f090:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f092:	2000      	movs	r0, #0
            break;
 800f094:	e73e      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800f096:	4b37      	ldr	r3, [pc, #220]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f09a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f09c:	2000      	movs	r0, #0
            break;
 800f09e:	e739      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800f0a0:	4b34      	ldr	r3, [pc, #208]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f0a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f0a6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0a8:	2000      	movs	r0, #0
            break;
 800f0aa:	e733      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f0ac:	4b31      	ldr	r3, [pc, #196]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f0ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0b2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0b4:	2000      	movs	r0, #0
            break;
 800f0b6:	e72d      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.Contexts = &Nvm;
 800f0b8:	4b2e      	ldr	r3, [pc, #184]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f0ba:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0bc:	2000      	movs	r0, #0
            break;
 800f0be:	e729      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.BackupContexts = &NvmBackup;
 800f0c0:	4b31      	ldr	r3, [pc, #196]	; (800f188 <LoRaMacMibGetRequestConfirm+0x318>)
 800f0c2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0c4:	2000      	movs	r0, #0
            break;
 800f0c6:	e725      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f0c8:	4b2a      	ldr	r3, [pc, #168]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f0ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f0ce:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0d0:	2000      	movs	r0, #0
            break;
 800f0d2:	e71f      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800f0d4:	4b27      	ldr	r3, [pc, #156]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f0d6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800f0da:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800f0dc:	f001 fee2 	bl	8010ea4 <RegionGetVersion>
 800f0e0:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0e2:	2000      	movs	r0, #0
            break;
 800f0e4:	e716      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f0e6:	4b23      	ldr	r3, [pc, #140]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0ec:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0ee:	2000      	movs	r0, #0
            break;
 800f0f0:	e710      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800f0f2:	4b20      	ldr	r3, [pc, #128]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f0f4:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800f0f8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0fa:	2000      	movs	r0, #0
            break;
 800f0fc:	e70a      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800f0fe:	4b1d      	ldr	r3, [pc, #116]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f100:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800f104:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f106:	2000      	movs	r0, #0
            break;
 800f108:	e704      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800f10a:	4b1a      	ldr	r3, [pc, #104]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f10c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800f110:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f112:	2000      	movs	r0, #0
            break;
 800f114:	e6fe      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800f116:	4b17      	ldr	r3, [pc, #92]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f118:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800f11c:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f11e:	2000      	movs	r0, #0
            break;
 800f120:	e6f8      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800f122:	4b14      	ldr	r3, [pc, #80]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f124:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800f128:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f12a:	2000      	movs	r0, #0
            break;
 800f12c:	e6f2      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800f12e:	4b11      	ldr	r3, [pc, #68]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f130:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f134:	b11b      	cbz	r3, 800f13e <LoRaMacMibGetRequestConfirm+0x2ce>
 800f136:	2b06      	cmp	r3, #6
 800f138:	d001      	beq.n	800f13e <LoRaMacMibGetRequestConfirm+0x2ce>
                status = LORAMAC_STATUS_ERROR;
 800f13a:	2018      	movs	r0, #24
 800f13c:	e6ea      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
 800f13e:	4b0d      	ldr	r3, [pc, #52]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f140:	f9b3 35b0 	ldrsh.w	r3, [r3, #1456]	; 0x5b0
 800f144:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f146:	2000      	movs	r0, #0
 800f148:	e6e4      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800f14a:	4b0a      	ldr	r3, [pc, #40]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f14c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f150:	b11b      	cbz	r3, 800f15a <LoRaMacMibGetRequestConfirm+0x2ea>
 800f152:	2b06      	cmp	r3, #6
 800f154:	d001      	beq.n	800f15a <LoRaMacMibGetRequestConfirm+0x2ea>
                status = LORAMAC_STATUS_ERROR;
 800f156:	2018      	movs	r0, #24
 800f158:	e6dc      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
 800f15a:	4b06      	ldr	r3, [pc, #24]	; (800f174 <LoRaMacMibGetRequestConfirm+0x304>)
 800f15c:	f8d3 35b4 	ldr.w	r3, [r3, #1460]	; 0x5b4
 800f160:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f162:	2000      	movs	r0, #0
 800f164:	e6d6      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800f166:	4620      	mov	r0, r4
 800f168:	f000 fda4 	bl	800fcb4 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800f16c:	e6d2      	b.n	800ef14 <LoRaMacMibGetRequestConfirm+0xa4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f16e:	2003      	movs	r0, #3
}
 800f170:	4770      	bx	lr
 800f172:	bf00      	nop
 800f174:	20008000 	.word	0x20008000
 800f178:	2000806c 	.word	0x2000806c
 800f17c:	200080b4 	.word	0x200080b4
 800f180:	20008074 	.word	0x20008074
 800f184:	200080bc 	.word	0x200080bc
 800f188:	200085d4 	.word	0x200085d4

0800f18c <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800f18c:	2800      	cmp	r0, #0
 800f18e:	f000 829c 	beq.w	800f6ca <LoRaMacMibSetRequestConfirm+0x53e>
{
 800f192:	b530      	push	{r4, r5, lr}
 800f194:	b085      	sub	sp, #20
 800f196:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800f198:	4b9b      	ldr	r3, [pc, #620]	; (800f408 <LoRaMacMibSetRequestConfirm+0x27c>)
 800f19a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f19e:	f013 0f02 	tst.w	r3, #2
 800f1a2:	f040 8294 	bne.w	800f6ce <LoRaMacMibSetRequestConfirm+0x542>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800f1a6:	7805      	ldrb	r5, [r0, #0]
 800f1a8:	2d41      	cmp	r5, #65	; 0x41
 800f1aa:	f200 828b 	bhi.w	800f6c4 <LoRaMacMibSetRequestConfirm+0x538>
 800f1ae:	e8df f015 	tbh	[pc, r5, lsl #1]
 800f1b2:	0042      	.short	0x0042
 800f1b4:	0058004f 	.word	0x0058004f
 800f1b8:	0066005f 	.word	0x0066005f
 800f1bc:	0072006c 	.word	0x0072006c
 800f1c0:	008b0080 	.word	0x008b0080
 800f1c4:	00a10096 	.word	0x00a10096
 800f1c8:	00b700ac 	.word	0x00b700ac
 800f1cc:	00ce00c2 	.word	0x00ce00c2
 800f1d0:	00e500da 	.word	0x00e500da
 800f1d4:	00eb0289 	.word	0x00eb0289
 800f1d8:	01350111 	.word	0x01350111
 800f1dc:	018d0163 	.word	0x018d0163
 800f1e0:	019d017d 	.word	0x019d017d
 800f1e4:	01ad01a8 	.word	0x01ad01a8
 800f1e8:	01b701b2 	.word	0x01b701b2
 800f1ec:	028901bc 	.word	0x028901bc
 800f1f0:	01d601c1 	.word	0x01d601c1
 800f1f4:	01ef0204 	.word	0x01ef0204
 800f1f8:	02200219 	.word	0x02200219
 800f1fc:	022e0228 	.word	0x022e0228
 800f200:	02890234 	.word	0x02890234
 800f204:	02890237 	.word	0x02890237
 800f208:	02890289 	.word	0x02890289
 800f20c:	02890289 	.word	0x02890289
 800f210:	02890289 	.word	0x02890289
 800f214:	02890289 	.word	0x02890289
 800f218:	02890289 	.word	0x02890289
 800f21c:	02890289 	.word	0x02890289
 800f220:	02890289 	.word	0x02890289
 800f224:	02480289 	.word	0x02480289
 800f228:	0254024e 	.word	0x0254024e
 800f22c:	0260025a 	.word	0x0260025a
 800f230:	026c0266 	.word	0x026c0266
 800f234:	027b      	.short	0x027b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800f236:	7900      	ldrb	r0, [r0, #4]
 800f238:	f7ff f8f4 	bl	800e424 <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800f23c:	b930      	cbnz	r0, 800f24c <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f23e:	4a72      	ldr	r2, [pc, #456]	; (800f408 <LoRaMacMibSetRequestConfirm+0x27c>)
 800f240:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f244:	f043 0320 	orr.w	r3, r3, #32
 800f248:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800f24c:	b005      	add	sp, #20
 800f24e:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800f250:	7903      	ldrb	r3, [r0, #4]
 800f252:	2b02      	cmp	r3, #2
 800f254:	f000 823d 	beq.w	800f6d2 <LoRaMacMibSetRequestConfirm+0x546>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800f258:	4a6c      	ldr	r2, [pc, #432]	; (800f40c <LoRaMacMibSetRequestConfirm+0x280>)
 800f25a:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f25e:	2000      	movs	r0, #0
 800f260:	e7ed      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800f262:	6840      	ldr	r0, [r0, #4]
 800f264:	f004 fc74 	bl	8013b50 <SecureElementSetDevEui>
 800f268:	2800      	cmp	r0, #0
 800f26a:	d0e8      	beq.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f26c:	2003      	movs	r0, #3
 800f26e:	e7ed      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800f270:	6840      	ldr	r0, [r0, #4]
 800f272:	f004 fc89 	bl	8013b88 <SecureElementSetJoinEui>
 800f276:	2800      	cmp	r0, #0
 800f278:	d0e1      	beq.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f27a:	4628      	mov	r0, r5
 800f27c:	e7e6      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800f27e:	7902      	ldrb	r2, [r0, #4]
 800f280:	4b62      	ldr	r3, [pc, #392]	; (800f40c <LoRaMacMibSetRequestConfirm+0x280>)
 800f282:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f286:	2000      	movs	r0, #0
 800f288:	e7d9      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800f28a:	6842      	ldr	r2, [r0, #4]
 800f28c:	4b5f      	ldr	r3, [pc, #380]	; (800f40c <LoRaMacMibSetRequestConfirm+0x280>)
 800f28e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f292:	2000      	movs	r0, #0
 800f294:	e7d3      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800f296:	6841      	ldr	r1, [r0, #4]
 800f298:	4b5c      	ldr	r3, [pc, #368]	; (800f40c <LoRaMacMibSetRequestConfirm+0x280>)
 800f29a:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800f29e:	f004 fc91 	bl	8013bc4 <SecureElementSetDevAddr>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	f040 8217 	bne.w	800f6d6 <LoRaMacMibSetRequestConfirm+0x54a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800f2a8:	6862      	ldr	r2, [r4, #4]
 800f2aa:	4b58      	ldr	r3, [pc, #352]	; (800f40c <LoRaMacMibSetRequestConfirm+0x280>)
 800f2ac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if( status == LORAMAC_STATUS_OK )
 800f2b0:	e7c5      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800f2b2:	6841      	ldr	r1, [r0, #4]
 800f2b4:	2900      	cmp	r1, #0
 800f2b6:	f000 8210 	beq.w	800f6da <LoRaMacMibSetRequestConfirm+0x54e>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	f001 fabe 	bl	801083c <LoRaMacCryptoSetKey>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d0bc      	beq.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f2c4:	2011      	movs	r0, #17
 800f2c6:	e7c1      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 800f2c8:	6841      	ldr	r1, [r0, #4]
 800f2ca:	2900      	cmp	r1, #0
 800f2cc:	f000 8207 	beq.w	800f6de <LoRaMacMibSetRequestConfirm+0x552>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800f2d0:	2001      	movs	r0, #1
 800f2d2:	f001 fab3 	bl	801083c <LoRaMacCryptoSetKey>
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	d0b0      	beq.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f2da:	2011      	movs	r0, #17
 800f2dc:	e7b6      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 800f2de:	6841      	ldr	r1, [r0, #4]
 800f2e0:	2900      	cmp	r1, #0
 800f2e2:	f000 81fe 	beq.w	800f6e2 <LoRaMacMibSetRequestConfirm+0x556>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800f2e6:	2008      	movs	r0, #8
 800f2e8:	f001 faa8 	bl	801083c <LoRaMacCryptoSetKey>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d0a5      	beq.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f2f0:	2011      	movs	r0, #17
 800f2f2:	e7ab      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 800f2f4:	6841      	ldr	r1, [r0, #4]
 800f2f6:	2900      	cmp	r1, #0
 800f2f8:	f000 81f5 	beq.w	800f6e6 <LoRaMacMibSetRequestConfirm+0x55a>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800f2fc:	2009      	movs	r0, #9
 800f2fe:	f001 fa9d 	bl	801083c <LoRaMacCryptoSetKey>
 800f302:	2800      	cmp	r0, #0
 800f304:	d09a      	beq.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f306:	2011      	movs	r0, #17
 800f308:	e7a0      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 800f30a:	6841      	ldr	r1, [r0, #4]
 800f30c:	2900      	cmp	r1, #0
 800f30e:	f000 81ec 	beq.w	800f6ea <LoRaMacMibSetRequestConfirm+0x55e>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800f312:	200c      	movs	r0, #12
 800f314:	f001 fa92 	bl	801083c <LoRaMacCryptoSetKey>
 800f318:	2800      	cmp	r0, #0
 800f31a:	d08f      	beq.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f31c:	2011      	movs	r0, #17
 800f31e:	e795      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 800f320:	6841      	ldr	r1, [r0, #4]
 800f322:	2900      	cmp	r1, #0
 800f324:	f000 81ea 	beq.w	800f6fc <LoRaMacMibSetRequestConfirm+0x570>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800f328:	200d      	movs	r0, #13
 800f32a:	f001 fa87 	bl	801083c <LoRaMacCryptoSetKey>
 800f32e:	2800      	cmp	r0, #0
 800f330:	d084      	beq.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f332:	2011      	movs	r0, #17
 800f334:	e78a      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800f336:	6841      	ldr	r1, [r0, #4]
 800f338:	2900      	cmp	r1, #0
 800f33a:	f000 81e1 	beq.w	800f700 <LoRaMacMibSetRequestConfirm+0x574>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800f33e:	200e      	movs	r0, #14
 800f340:	f001 fa7c 	bl	801083c <LoRaMacCryptoSetKey>
 800f344:	2800      	cmp	r0, #0
 800f346:	f43f af79 	beq.w	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f34a:	2011      	movs	r0, #17
 800f34c:	e77e      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800f34e:	6841      	ldr	r1, [r0, #4]
 800f350:	2900      	cmp	r1, #0
 800f352:	f000 81d7 	beq.w	800f704 <LoRaMacMibSetRequestConfirm+0x578>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800f356:	200f      	movs	r0, #15
 800f358:	f001 fa70 	bl	801083c <LoRaMacCryptoSetKey>
 800f35c:	2800      	cmp	r0, #0
 800f35e:	f43f af6d 	beq.w	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f362:	2011      	movs	r0, #17
 800f364:	e772      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800f366:	7900      	ldrb	r0, [r0, #4]
 800f368:	4b28      	ldr	r3, [pc, #160]	; (800f40c <LoRaMacMibSetRequestConfirm+0x280>)
 800f36a:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800f36e:	4c28      	ldr	r4, [pc, #160]	; (800f410 <LoRaMacMibSetRequestConfirm+0x284>)
 800f370:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f372:	4798      	blx	r3
            Radio.Sleep( );
 800f374:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f376:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f378:	2000      	movs	r0, #0
 800f37a:	e760      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800f37c:	7902      	ldrb	r2, [r0, #4]
 800f37e:	4b23      	ldr	r3, [pc, #140]	; (800f40c <LoRaMacMibSetRequestConfirm+0x280>)
 800f380:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f384:	2000      	movs	r0, #0
 800f386:	e75a      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f388:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800f38c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f390:	4b1e      	ldr	r3, [pc, #120]	; (800f40c <LoRaMacMibSetRequestConfirm+0x280>)
 800f392:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f396:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800f39a:	2207      	movs	r2, #7
 800f39c:	a901      	add	r1, sp, #4
 800f39e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f3a2:	f001 fc9b 	bl	8010cdc <RegionVerify>
 800f3a6:	b908      	cbnz	r0, 800f3ac <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f3a8:	2003      	movs	r0, #3
 800f3aa:	e747      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800f3ac:	6863      	ldr	r3, [r4, #4]
 800f3ae:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	a901      	add	r1, sp, #4
 800f3b4:	4b15      	ldr	r3, [pc, #84]	; (800f40c <LoRaMacMibSetRequestConfirm+0x280>)
 800f3b6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f3ba:	f001 fc8f 	bl	8010cdc <RegionVerify>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	f000 81a2 	beq.w	800f708 <LoRaMacMibSetRequestConfirm+0x57c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800f3c4:	4b13      	ldr	r3, [pc, #76]	; (800f414 <LoRaMacMibSetRequestConfirm+0x288>)
 800f3c6:	3404      	adds	r4, #4
 800f3c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f3cc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	e733      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800f3d4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800f3d8:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f3dc:	4b0b      	ldr	r3, [pc, #44]	; (800f40c <LoRaMacMibSetRequestConfirm+0x280>)
 800f3de:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f3e2:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f3e6:	2207      	movs	r2, #7
 800f3e8:	a901      	add	r1, sp, #4
 800f3ea:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f3ee:	f001 fc75 	bl	8010cdc <RegionVerify>
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	f000 818a 	beq.w	800f70c <LoRaMacMibSetRequestConfirm+0x580>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800f3f8:	4b07      	ldr	r3, [pc, #28]	; (800f418 <LoRaMacMibSetRequestConfirm+0x28c>)
 800f3fa:	3404      	adds	r4, #4
 800f3fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f400:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f404:	2000      	movs	r0, #0
 800f406:	e719      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
 800f408:	20003c04 	.word	0x20003c04
 800f40c:	20008000 	.word	0x20008000
 800f410:	0801885c 	.word	0x0801885c
 800f414:	2000806c 	.word	0x2000806c
 800f418:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800f41c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800f420:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f424:	4bb2      	ldr	r3, [pc, #712]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f426:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f42a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f42e:	2207      	movs	r2, #7
 800f430:	a901      	add	r1, sp, #4
 800f432:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f436:	f001 fc51 	bl	8010cdc <RegionVerify>
 800f43a:	2800      	cmp	r0, #0
 800f43c:	f000 8168 	beq.w	800f710 <LoRaMacMibSetRequestConfirm+0x584>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800f440:	4bab      	ldr	r3, [pc, #684]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f442:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800f446:	3404      	adds	r4, #4
 800f448:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f44c:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800f450:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f454:	2b02      	cmp	r3, #2
 800f456:	d001      	beq.n	800f45c <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f458:	2000      	movs	r0, #0
 800f45a:	e6ef      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800f45c:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800f460:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800f464:	2800      	cmp	r0, #0
 800f466:	f43f aee9 	beq.w	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                    Radio.Sleep( );
 800f46a:	4ba2      	ldr	r3, [pc, #648]	; (800f6f4 <LoRaMacMibSetRequestConfirm+0x568>)
 800f46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f46e:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800f470:	f7fe fcfc 	bl	800de6c <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f474:	2000      	movs	r0, #0
 800f476:	e6e1      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800f478:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800f47c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f480:	4b9b      	ldr	r3, [pc, #620]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f482:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f486:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800f48a:	2207      	movs	r2, #7
 800f48c:	a901      	add	r1, sp, #4
 800f48e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f492:	f001 fc23 	bl	8010cdc <RegionVerify>
 800f496:	2800      	cmp	r0, #0
 800f498:	f000 813c 	beq.w	800f714 <LoRaMacMibSetRequestConfirm+0x588>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800f49c:	4b96      	ldr	r3, [pc, #600]	; (800f6f8 <LoRaMacMibSetRequestConfirm+0x56c>)
 800f49e:	3404      	adds	r4, #4
 800f4a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f4a4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f4a8:	2000      	movs	r0, #0
 800f4aa:	e6c7      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800f4ac:	6843      	ldr	r3, [r0, #4]
 800f4ae:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800f4b6:	a902      	add	r1, sp, #8
 800f4b8:	4b8d      	ldr	r3, [pc, #564]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f4ba:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f4be:	f001 fc2a 	bl	8010d16 <RegionChanMaskSet>
 800f4c2:	b108      	cbz	r0, 800f4c8 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	e6b9      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f4c8:	2003      	movs	r0, #3
 800f4ca:	e6bf      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800f4cc:	6843      	ldr	r3, [r0, #4]
 800f4ce:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800f4d6:	a902      	add	r1, sp, #8
 800f4d8:	4b85      	ldr	r3, [pc, #532]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f4da:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f4de:	f001 fc1a 	bl	8010d16 <RegionChanMaskSet>
 800f4e2:	b108      	cbz	r0, 800f4e8 <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	e6a9      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f4e8:	2003      	movs	r0, #3
 800f4ea:	e6af      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800f4ec:	7902      	ldrb	r2, [r0, #4]
 800f4ee:	1e53      	subs	r3, r2, #1
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	2b0e      	cmp	r3, #14
 800f4f4:	f200 8110 	bhi.w	800f718 <LoRaMacMibSetRequestConfirm+0x58c>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800f4f8:	4b7d      	ldr	r3, [pc, #500]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f4fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f4fe:	2000      	movs	r0, #0
 800f500:	e69c      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800f502:	6842      	ldr	r2, [r0, #4]
 800f504:	4b7a      	ldr	r3, [pc, #488]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f506:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f508:	2000      	movs	r0, #0
 800f50a:	e698      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800f50c:	6842      	ldr	r2, [r0, #4]
 800f50e:	4b78      	ldr	r3, [pc, #480]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f510:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f512:	2000      	movs	r0, #0
 800f514:	e693      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800f516:	6842      	ldr	r2, [r0, #4]
 800f518:	4b75      	ldr	r3, [pc, #468]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f51a:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f51c:	2000      	movs	r0, #0
 800f51e:	e68e      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800f520:	6842      	ldr	r2, [r0, #4]
 800f522:	4b73      	ldr	r3, [pc, #460]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f524:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f526:	2000      	movs	r0, #0
 800f528:	e689      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800f52a:	6842      	ldr	r2, [r0, #4]
 800f52c:	4b70      	ldr	r3, [pc, #448]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f52e:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f530:	2000      	movs	r0, #0
 800f532:	e684      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800f534:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800f538:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800f53c:	2206      	movs	r2, #6
 800f53e:	a901      	add	r1, sp, #4
 800f540:	4b6b      	ldr	r3, [pc, #428]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f542:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f546:	f001 fbc9 	bl	8010cdc <RegionVerify>
 800f54a:	2800      	cmp	r0, #0
 800f54c:	f000 80e6 	beq.w	800f71c <LoRaMacMibSetRequestConfirm+0x590>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800f550:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800f554:	4b66      	ldr	r3, [pc, #408]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f556:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f55a:	2000      	movs	r0, #0
 800f55c:	e66e      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800f55e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800f562:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f566:	4b62      	ldr	r3, [pc, #392]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f568:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800f56c:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800f570:	2205      	movs	r2, #5
 800f572:	a901      	add	r1, sp, #4
 800f574:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f578:	f001 fbb0 	bl	8010cdc <RegionVerify>
 800f57c:	2800      	cmp	r0, #0
 800f57e:	f000 80cf 	beq.w	800f720 <LoRaMacMibSetRequestConfirm+0x594>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f582:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800f586:	4b5a      	ldr	r3, [pc, #360]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f58c:	2000      	movs	r0, #0
 800f58e:	e655      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800f590:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800f594:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800f598:	220a      	movs	r2, #10
 800f59a:	a901      	add	r1, sp, #4
 800f59c:	4b54      	ldr	r3, [pc, #336]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f59e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f5a2:	f001 fb9b 	bl	8010cdc <RegionVerify>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	f000 80bc 	beq.w	800f724 <LoRaMacMibSetRequestConfirm+0x598>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800f5ac:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800f5b0:	4b4f      	ldr	r3, [pc, #316]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f5b2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	e640      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800f5ba:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800f5be:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800f5c2:	2209      	movs	r2, #9
 800f5c4:	a901      	add	r1, sp, #4
 800f5c6:	4b4a      	ldr	r3, [pc, #296]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f5c8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f5cc:	f001 fb86 	bl	8010cdc <RegionVerify>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	f000 80a9 	beq.w	800f728 <LoRaMacMibSetRequestConfirm+0x59c>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800f5d6:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800f5da:	4b45      	ldr	r3, [pc, #276]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f5dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f5e0:	2000      	movs	r0, #0
 800f5e2:	e62b      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800f5e4:	6842      	ldr	r2, [r0, #4]
 800f5e6:	4b42      	ldr	r3, [pc, #264]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f5e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800f5ec:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	e625      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800f5f2:	7902      	ldrb	r2, [r0, #4]
 800f5f4:	4b3e      	ldr	r3, [pc, #248]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f5f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800f5fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f5fe:	2000      	movs	r0, #0
 800f600:	e61d      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800f602:	6842      	ldr	r2, [r0, #4]
 800f604:	4b3a      	ldr	r3, [pc, #232]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f60a:	2000      	movs	r0, #0
 800f60c:	e617      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800f60e:	6842      	ldr	r2, [r0, #4]
 800f610:	4b37      	ldr	r3, [pc, #220]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f612:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f616:	2000      	movs	r0, #0
 800f618:	e611      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800f61a:	f7fe fd3d 	bl	800e098 <RestoreNvmData>
            break;
 800f61e:	e60d      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800f620:	7983      	ldrb	r3, [r0, #6]
 800f622:	2b01      	cmp	r3, #1
 800f624:	d901      	bls.n	800f62a <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f626:	2003      	movs	r0, #3
 800f628:	e610      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800f62a:	6842      	ldr	r2, [r0, #4]
 800f62c:	4b30      	ldr	r3, [pc, #192]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f62e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800f632:	6840      	ldr	r0, [r0, #4]
 800f634:	f000 ffbe 	bl	80105b4 <LoRaMacCryptoSetLrWanVersion>
 800f638:	2800      	cmp	r0, #0
 800f63a:	f43f adff 	beq.w	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f63e:	2011      	movs	r0, #17
 800f640:	e604      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800f642:	6842      	ldr	r2, [r0, #4]
 800f644:	4b2a      	ldr	r3, [pc, #168]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f64a:	2000      	movs	r0, #0
 800f64c:	e5f7      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800f64e:	7902      	ldrb	r2, [r0, #4]
 800f650:	4b27      	ldr	r3, [pc, #156]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f652:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f656:	2000      	movs	r0, #0
 800f658:	e5f1      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800f65a:	8882      	ldrh	r2, [r0, #4]
 800f65c:	4b24      	ldr	r3, [pc, #144]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f65e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f662:	2000      	movs	r0, #0
 800f664:	e5eb      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800f666:	8882      	ldrh	r2, [r0, #4]
 800f668:	4b21      	ldr	r3, [pc, #132]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f66a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f66e:	2000      	movs	r0, #0
 800f670:	e5e5      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800f672:	8882      	ldrh	r2, [r0, #4]
 800f674:	4b1e      	ldr	r3, [pc, #120]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f676:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f67a:	2000      	movs	r0, #0
 800f67c:	e5df      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800f67e:	8882      	ldrh	r2, [r0, #4]
 800f680:	4b1b      	ldr	r3, [pc, #108]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f682:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f686:	2000      	movs	r0, #0
 800f688:	e5d9      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800f68a:	4b19      	ldr	r3, [pc, #100]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f68c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f690:	b11b      	cbz	r3, 800f69a <LoRaMacMibSetRequestConfirm+0x50e>
 800f692:	2b06      	cmp	r3, #6
 800f694:	d001      	beq.n	800f69a <LoRaMacMibSetRequestConfirm+0x50e>
                status = LORAMAC_STATUS_ERROR;
 800f696:	2018      	movs	r0, #24
 800f698:	e5d0      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
 800f69a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f69e:	4b14      	ldr	r3, [pc, #80]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f6a0:	f8a3 25b0 	strh.w	r2, [r3, #1456]	; 0x5b0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f6a4:	2000      	movs	r0, #0
 800f6a6:	e5ca      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800f6a8:	4b11      	ldr	r3, [pc, #68]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f6aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f6ae:	b11b      	cbz	r3, 800f6b8 <LoRaMacMibSetRequestConfirm+0x52c>
 800f6b0:	2b06      	cmp	r3, #6
 800f6b2:	d001      	beq.n	800f6b8 <LoRaMacMibSetRequestConfirm+0x52c>
                status = LORAMAC_STATUS_ERROR;
 800f6b4:	2018      	movs	r0, #24
 800f6b6:	e5c1      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
 800f6b8:	6862      	ldr	r2, [r4, #4]
 800f6ba:	4b0d      	ldr	r3, [pc, #52]	; (800f6f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800f6bc:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	e5bc      	b.n	800f23e <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800f6c4:	f000 faf8 	bl	800fcb8 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800f6c8:	e5b8      	b.n	800f23c <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f6ca:	2003      	movs	r0, #3
}
 800f6cc:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800f6ce:	2001      	movs	r0, #1
 800f6d0:	e5bc      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6d2:	2003      	movs	r0, #3
 800f6d4:	e5ba      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6d6:	2003      	movs	r0, #3
 800f6d8:	e5b8      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6da:	2003      	movs	r0, #3
 800f6dc:	e5b6      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6de:	2003      	movs	r0, #3
 800f6e0:	e5b4      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6e2:	2003      	movs	r0, #3
 800f6e4:	e5b2      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6e6:	2003      	movs	r0, #3
 800f6e8:	e5b0      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6ea:	2003      	movs	r0, #3
 800f6ec:	e5ae      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
 800f6ee:	bf00      	nop
 800f6f0:	20008000 	.word	0x20008000
 800f6f4:	0801885c 	.word	0x0801885c
 800f6f8:	200080bc 	.word	0x200080bc
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6fc:	2003      	movs	r0, #3
 800f6fe:	e5a5      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f700:	2003      	movs	r0, #3
 800f702:	e5a3      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f704:	2003      	movs	r0, #3
 800f706:	e5a1      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f708:	2003      	movs	r0, #3
 800f70a:	e59f      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f70c:	2003      	movs	r0, #3
 800f70e:	e59d      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f710:	2003      	movs	r0, #3
 800f712:	e59b      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f714:	2003      	movs	r0, #3
 800f716:	e599      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f718:	2003      	movs	r0, #3
 800f71a:	e597      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f71c:	2003      	movs	r0, #3
 800f71e:	e595      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f720:	2003      	movs	r0, #3
 800f722:	e593      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f724:	2003      	movs	r0, #3
 800f726:	e591      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f728:	2003      	movs	r0, #3
 800f72a:	e58f      	b.n	800f24c <LoRaMacMibSetRequestConfirm+0xc0>

0800f72c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800f72c:	b570      	push	{r4, r5, r6, lr}
 800f72e:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f730:	2300      	movs	r3, #0
 800f732:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800f736:	2800      	cmp	r0, #0
 800f738:	f000 80f3 	beq.w	800f922 <LoRaMacMlmeRequest+0x1f6>
 800f73c:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800f73e:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800f740:	f7ff f87a 	bl	800e838 <LoRaMacIsBusy>
 800f744:	b118      	cbz	r0, 800f74e <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800f746:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800f748:	4620      	mov	r0, r4
 800f74a:	b006      	add	sp, #24
 800f74c:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800f74e:	f000 fd65 	bl	801021c <LoRaMacConfirmQueueIsFull>
 800f752:	b108      	cbz	r0, 800f758 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800f754:	2401      	movs	r4, #1
 800f756:	e7f7      	b.n	800f748 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f758:	f000 fd5a 	bl	8010210 <LoRaMacConfirmQueueGetCnt>
 800f75c:	b308      	cbz	r0, 800f7a2 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f75e:	4b72      	ldr	r3, [pc, #456]	; (800f928 <LoRaMacMlmeRequest+0x1fc>)
 800f760:	2101      	movs	r1, #1
 800f762:	f883 1455 	strb.w	r1, [r3, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f766:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800f76a:	f042 0204 	orr.w	r2, r2, #4
 800f76e:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 800f772:	782b      	ldrb	r3, [r5, #0]
 800f774:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f778:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800f77c:	2200      	movs	r2, #0
 800f77e:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800f782:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800f786:	461c      	mov	r4, r3
 800f788:	3b01      	subs	r3, #1
 800f78a:	2b0c      	cmp	r3, #12
 800f78c:	f200 80af 	bhi.w	800f8ee <LoRaMacMlmeRequest+0x1c2>
 800f790:	e8df f003 	tbb	[pc, r3]
 800f794:	adadad0d 	.word	0xadadad0d
 800f798:	adad675d 	.word	0xadad675d
 800f79c:	7f9ead70 	.word	0x7f9ead70
 800f7a0:	95          	.byte	0x95
 800f7a1:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800f7a2:	2214      	movs	r2, #20
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	4861      	ldr	r0, [pc, #388]	; (800f92c <LoRaMacMlmeRequest+0x200>)
 800f7a8:	f004 fb33 	bl	8013e12 <memset1>
 800f7ac:	e7d7      	b.n	800f75e <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800f7ae:	4b5e      	ldr	r3, [pc, #376]	; (800f928 <LoRaMacMlmeRequest+0x1fc>)
 800f7b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f7b4:	f013 0f20 	tst.w	r3, #32
 800f7b8:	d1c6      	bne.n	800f748 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800f7ba:	792b      	ldrb	r3, [r5, #4]
 800f7bc:	2b02      	cmp	r3, #2
 800f7be:	d003      	beq.n	800f7c8 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d026      	beq.n	800f812 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f7c4:	2402      	movs	r4, #2
 800f7c6:	e093      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	f7fe fd5f 	bl	800e28c <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800f7ce:	4c58      	ldr	r4, [pc, #352]	; (800f930 <LoRaMacMlmeRequest+0x204>)
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800f7d6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800f7da:	f001 fb2f 	bl	8010e3c <RegionAlternateDr>
 800f7de:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800f7e2:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800f7e6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800f7ea:	2307      	movs	r3, #7
 800f7ec:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800f7f0:	20ff      	movs	r0, #255	; 0xff
 800f7f2:	f7fe feab 	bl	800e54c <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	d079      	beq.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800f7fc:	4e4c      	ldr	r6, [pc, #304]	; (800f930 <LoRaMacMlmeRequest+0x204>)
 800f7fe:	2201      	movs	r2, #1
 800f800:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800f804:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800f808:	f001 fb18 	bl	8010e3c <RegionAlternateDr>
 800f80c:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800f810:	e06e      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800f812:	4e47      	ldr	r6, [pc, #284]	; (800f930 <LoRaMacMlmeRequest+0x204>)
 800f814:	2400      	movs	r4, #0
 800f816:	f886 411d 	strb.w	r4, [r6, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f81a:	2302      	movs	r3, #2
 800f81c:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f820:	4669      	mov	r1, sp
 800f822:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800f826:	f001 fa4c 	bl	8010cc2 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800f82a:	792b      	ldrb	r3, [r5, #4]
 800f82c:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f830:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800f834:	2301      	movs	r3, #1
 800f836:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800f83a:	f7fc ffa3 	bl	800c784 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f83e:	4a3a      	ldr	r2, [pc, #232]	; (800f928 <LoRaMacMlmeRequest+0x1fc>)
 800f840:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f844:	f043 0310 	orr.w	r3, r3, #16
 800f848:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 800f84c:	e050      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f84e:	2200      	movs	r2, #0
 800f850:	a904      	add	r1, sp, #16
 800f852:	2002      	movs	r0, #2
 800f854:	f000 fad0 	bl	800fdf8 <LoRaMacCommandsAddCmd>
 800f858:	4604      	mov	r4, r0
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d048      	beq.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f85e:	2413      	movs	r4, #19
 800f860:	e046      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800f862:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800f866:	b2d2      	uxtb	r2, r2
 800f868:	68a9      	ldr	r1, [r5, #8]
 800f86a:	88a8      	ldrh	r0, [r5, #4]
 800f86c:	f7fc fee0 	bl	800c630 <SetTxContinuousWave>
 800f870:	4604      	mov	r4, r0
            break;
 800f872:	e03d      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800f874:	4669      	mov	r1, sp
 800f876:	200d      	movs	r0, #13
 800f878:	f000 fb0a 	bl	800fe90 <LoRaMacCommandsGetCmd>
 800f87c:	4604      	mov	r4, r0
 800f87e:	b3b8      	cbz	r0, 800f8f0 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f880:	2200      	movs	r2, #0
 800f882:	a904      	add	r1, sp, #16
 800f884:	200d      	movs	r0, #13
 800f886:	f000 fab7 	bl	800fdf8 <LoRaMacCommandsAddCmd>
 800f88a:	4604      	mov	r4, r0
 800f88c:	b380      	cbz	r0, 800f8f0 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f88e:	2413      	movs	r4, #19
            break;
 800f890:	e02e      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800f892:	4b27      	ldr	r3, [pc, #156]	; (800f930 <LoRaMacMlmeRequest+0x204>)
 800f894:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f898:	b10b      	cbz	r3, 800f89e <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f89a:	2402      	movs	r4, #2
 800f89c:	e028      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800f89e:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800f8a0:	f004 0007 	and.w	r0, r4, #7
 800f8a4:	f000 fa01 	bl	800fcaa <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800f8a8:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	a904      	add	r1, sp, #16
 800f8b0:	2010      	movs	r0, #16
 800f8b2:	f000 faa1 	bl	800fdf8 <LoRaMacCommandsAddCmd>
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	b1d0      	cbz	r0, 800f8f0 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f8ba:	2413      	movs	r4, #19
 800f8bc:	e018      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f8be:	2200      	movs	r2, #0
 800f8c0:	a904      	add	r1, sp, #16
 800f8c2:	2012      	movs	r0, #18
 800f8c4:	f000 fa98 	bl	800fdf8 <LoRaMacCommandsAddCmd>
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	b188      	cbz	r0, 800f8f0 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f8cc:	2413      	movs	r4, #19
 800f8ce:	e00f      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800f8d6:	f000 f9d9 	bl	800fc8c <LoRaMacClassBIsAcquisitionInProgress>
 800f8da:	b108      	cbz	r0, 800f8e0 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800f8dc:	2401      	movs	r4, #1
 800f8de:	e007      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800f8e0:	f000 f9d1 	bl	800fc86 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	f000 f9d3 	bl	800fc90 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800f8ea:	2400      	movs	r4, #0
 800f8ec:	e000      	b.n	800f8f0 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800f8ee:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f8f0:	4b0d      	ldr	r3, [pc, #52]	; (800f928 <LoRaMacMlmeRequest+0x1fc>)
 800f8f2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800f8f6:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800f8f8:	b17c      	cbz	r4, 800f91a <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f8fa:	f000 fc89 	bl	8010210 <LoRaMacConfirmQueueGetCnt>
 800f8fe:	2800      	cmp	r0, #0
 800f900:	f47f af22 	bne.w	800f748 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800f904:	4b08      	ldr	r3, [pc, #32]	; (800f928 <LoRaMacMlmeRequest+0x1fc>)
 800f906:	2100      	movs	r1, #0
 800f908:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f90c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800f910:	f361 0282 	bfi	r2, r1, #2, #1
 800f914:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800f918:	e716      	b.n	800f748 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800f91a:	a805      	add	r0, sp, #20
 800f91c:	f000 fbae 	bl	801007c <LoRaMacConfirmQueueAdd>
 800f920:	e712      	b.n	800f748 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f922:	2403      	movs	r4, #3
 800f924:	e710      	b.n	800f748 <LoRaMacMlmeRequest+0x1c>
 800f926:	bf00      	nop
 800f928:	20003c04 	.word	0x20003c04
 800f92c:	20004058 	.word	0x20004058
 800f930:	20008000 	.word	0x20008000

0800f934 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800f934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f938:	b091      	sub	sp, #68	; 0x44
 800f93a:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800f93c:	2800      	cmp	r0, #0
 800f93e:	f000 80de 	beq.w	800fafe <LoRaMacMcpsRequest+0x1ca>
 800f942:	f04f 0a00 	mov.w	sl, #0
 800f946:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800f948:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800f94c:	f7fe ff74 	bl	800e838 <LoRaMacIsBusy>
 800f950:	4680      	mov	r8, r0
 800f952:	b118      	cbz	r0, 800f95c <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800f954:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800f956:	b011      	add	sp, #68	; 0x44
 800f958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800f95c:	ac06      	add	r4, sp, #24
 800f95e:	462e      	mov	r6, r5
 800f960:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f964:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800f968:	4651      	mov	r1, sl
 800f96a:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800f96e:	4c66      	ldr	r4, [pc, #408]	; (800fb08 <LoRaMacMcpsRequest+0x1d4>)
 800f970:	2214      	movs	r2, #20
 800f972:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 800f976:	f004 fa4c 	bl	8013e12 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f97a:	2301      	movs	r3, #1
 800f97c:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800f980:	4b62      	ldr	r3, [pc, #392]	; (800fb0c <LoRaMacMcpsRequest+0x1d8>)
 800f982:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800f986:	2b02      	cmp	r3, #2
 800f988:	d065      	beq.n	800fa56 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800f98a:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800f98e:	2f01      	cmp	r7, #1
 800f990:	f000 8086 	beq.w	800faa0 <LoRaMacMcpsRequest+0x16c>
 800f994:	2f03      	cmp	r7, #3
 800f996:	f000 8096 	beq.w	800fac6 <LoRaMacMcpsRequest+0x192>
 800f99a:	2f00      	cmp	r7, #0
 800f99c:	d06d      	beq.n	800fa7a <LoRaMacMcpsRequest+0x146>
 800f99e:	f04f 0b00 	mov.w	fp, #0
 800f9a2:	f8cd b014 	str.w	fp, [sp, #20]
 800f9a6:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f9aa:	2302      	movs	r3, #2
 800f9ac:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f9b0:	4e56      	ldr	r6, [pc, #344]	; (800fb0c <LoRaMacMcpsRequest+0x1d8>)
 800f9b2:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800f9b6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f9ba:	a90e      	add	r1, sp, #56	; 0x38
 800f9bc:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800f9c0:	f001 f95b 	bl	8010c7a <RegionGetPhyParam>
 800f9c4:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f9c6:	b244      	sxtb	r4, r0
 800f9c8:	45a3      	cmp	fp, r4
 800f9ca:	bfb8      	it	lt
 800f9cc:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800f9ce:	f896 911a 	ldrb.w	r9, [r6, #282]	; 0x11a
 800f9d2:	f896 211d 	ldrb.w	r2, [r6, #285]	; 0x11d
 800f9d6:	f896 1130 	ldrb.w	r1, [r6, #304]	; 0x130
 800f9da:	4648      	mov	r0, r9
 800f9dc:	f7fc fdfa 	bl	800c5d4 <CheckForMinimumAbpDatarate>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	b900      	cbnz	r0, 800f9e6 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f9e4:	465c      	mov	r4, fp
    if( readyToSend == true )
 800f9e6:	f1b8 0f00 	cmp.w	r8, #0
 800f9ea:	f000 8082 	beq.w	800faf2 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800f9ee:	f1b9 0f00 	cmp.w	r9, #0
 800f9f2:	d000      	beq.n	800f9f6 <LoRaMacMcpsRequest+0xc2>
 800f9f4:	b19b      	cbz	r3, 800fa1e <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800f9f6:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f9fa:	4b44      	ldr	r3, [pc, #272]	; (800fb0c <LoRaMacMcpsRequest+0x1d8>)
 800f9fc:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800fa00:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800fa04:	2205      	movs	r2, #5
 800fa06:	a90b      	add	r1, sp, #44	; 0x2c
 800fa08:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800fa0c:	f001 f966 	bl	8010cdc <RegionVerify>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d076      	beq.n	800fb02 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800fa14:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800fa18:	4b3c      	ldr	r3, [pc, #240]	; (800fb0c <LoRaMacMcpsRequest+0x1d8>)
 800fa1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800fa1e:	4b3a      	ldr	r3, [pc, #232]	; (800fb08 <LoRaMacMcpsRequest+0x1d4>)
 800fa20:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800fa24:	4b39      	ldr	r3, [pc, #228]	; (800fb0c <LoRaMacMcpsRequest+0x1d8>)
 800fa26:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800fa2a:	f7fd ff61 	bl	800d8f0 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800fa2e:	9b03      	ldr	r3, [sp, #12]
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	4653      	mov	r3, sl
 800fa34:	9a05      	ldr	r2, [sp, #20]
 800fa36:	9904      	ldr	r1, [sp, #16]
 800fa38:	a80c      	add	r0, sp, #48	; 0x30
 800fa3a:	f7fe fe6d 	bl	800e718 <Send>
        if( status == LORAMAC_STATUS_OK )
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d152      	bne.n	800fae8 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800fa42:	4b31      	ldr	r3, [pc, #196]	; (800fb08 <LoRaMacMcpsRequest+0x1d4>)
 800fa44:	f883 7440 	strb.w	r7, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800fa48:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800fa4c:	f042 0201 	orr.w	r2, r2, #1
 800fa50:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800fa54:	e04e      	b.n	800faf4 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800fa56:	4b2d      	ldr	r3, [pc, #180]	; (800fb0c <LoRaMacMcpsRequest+0x1d8>)
 800fa58:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	d194      	bne.n	800f98a <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800fa60:	4b2a      	ldr	r3, [pc, #168]	; (800fb0c <LoRaMacMcpsRequest+0x1d8>)
 800fa62:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d18f      	bne.n	800f98a <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800fa6a:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d18b      	bne.n	800f98a <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800fa72:	2301      	movs	r3, #1
 800fa74:	f88d 3018 	strb.w	r3, [sp, #24]
 800fa78:	e787      	b.n	800f98a <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800fa7a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800fa7e:	2202      	movs	r2, #2
 800fa80:	f362 1347 	bfi	r3, r2, #5, #3
 800fa84:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800fa88:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800fa8c:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800fa8e:	9b08      	ldr	r3, [sp, #32]
 800fa90:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800fa92:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800fa96:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800fa9a:	f04f 0801 	mov.w	r8, #1
            break;
 800fa9e:	e784      	b.n	800f9aa <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800faa0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800faa4:	2204      	movs	r2, #4
 800faa6:	f362 1347 	bfi	r3, r2, #5, #3
 800faaa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800faae:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800fab2:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800fab4:	9b08      	ldr	r3, [sp, #32]
 800fab6:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800fab8:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800fabc:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800fac0:	f04f 0801 	mov.w	r8, #1
            break;
 800fac4:	e771      	b.n	800f9aa <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800fac6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800faca:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800face:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800fad2:	9b07      	ldr	r3, [sp, #28]
 800fad4:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800fad6:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800fada:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800fade:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800fae2:	2300      	movs	r3, #0
 800fae4:	9304      	str	r3, [sp, #16]
            break;
 800fae6:	e760      	b.n	800f9aa <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800fae8:	4b07      	ldr	r3, [pc, #28]	; (800fb08 <LoRaMacMcpsRequest+0x1d4>)
 800faea:	2200      	movs	r2, #0
 800faec:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800faf0:	e000      	b.n	800faf4 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800faf2:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800faf4:	4b04      	ldr	r3, [pc, #16]	; (800fb08 <LoRaMacMcpsRequest+0x1d4>)
 800faf6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800fafa:	612b      	str	r3, [r5, #16]
    return status;
 800fafc:	e72b      	b.n	800f956 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fafe:	2003      	movs	r0, #3
 800fb00:	e729      	b.n	800f956 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800fb02:	2003      	movs	r0, #3
 800fb04:	e727      	b.n	800f956 <LoRaMacMcpsRequest+0x22>
 800fb06:	bf00      	nop
 800fb08:	20003c04 	.word	0x20003c04
 800fb0c:	20008000 	.word	0x20008000

0800fb10 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800fb10:	b510      	push	{r4, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800fb16:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800fb1a:	220f      	movs	r2, #15
 800fb1c:	a901      	add	r1, sp, #4
 800fb1e:	4b09      	ldr	r3, [pc, #36]	; (800fb44 <LoRaMacTestSetDutyCycleOn+0x34>)
 800fb20:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800fb24:	f001 f8da 	bl	8010cdc <RegionVerify>
 800fb28:	b148      	cbz	r0, 800fb3e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800fb2a:	4b06      	ldr	r3, [pc, #24]	; (800fb44 <LoRaMacTestSetDutyCycleOn+0x34>)
 800fb2c:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800fb30:	4a05      	ldr	r2, [pc, #20]	; (800fb48 <LoRaMacTestSetDutyCycleOn+0x38>)
 800fb32:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800fb36:	f043 0320 	orr.w	r3, r3, #32
 800fb3a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800fb3e:	b002      	add	sp, #8
 800fb40:	bd10      	pop	{r4, pc}
 800fb42:	bf00      	nop
 800fb44:	20008000 	.word	0x20008000
 800fb48:	20003c04 	.word	0x20003c04

0800fb4c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800fb4c:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800fb4e:	f7ff f8d1 	bl	800ecf4 <LoRaMacStop>
 800fb52:	b110      	cbz	r0, 800fb5a <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800fb54:	2401      	movs	r4, #1
    }
}
 800fb56:	4620      	mov	r0, r4
 800fb58:	bd38      	pop	{r3, r4, r5, pc}
 800fb5a:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800fb5c:	4d0a      	ldr	r5, [pc, #40]	; (800fb88 <LoRaMacDeInitialization+0x3c>)
 800fb5e:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800fb62:	f006 fb6d 	bl	8016240 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800fb66:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800fb6a:	f006 fb69 	bl	8016240 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800fb6e:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800fb72:	f006 fb65 	bl	8016240 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800fb76:	f000 f899 	bl	800fcac <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800fb7a:	2000      	movs	r0, #0
 800fb7c:	f7fe fb86 	bl	800e28c <ResetMacParameters>
        Radio.Sleep( );
 800fb80:	4b02      	ldr	r3, [pc, #8]	; (800fb8c <LoRaMacDeInitialization+0x40>)
 800fb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb84:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800fb86:	e7e6      	b.n	800fb56 <LoRaMacDeInitialization+0xa>
 800fb88:	20003c04 	.word	0x20003c04
 800fb8c:	0801885c 	.word	0x0801885c

0800fb90 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800fb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb94:	b08b      	sub	sp, #44	; 0x2c
 800fb96:	460f      	mov	r7, r1
 800fb98:	4616      	mov	r6, r2
 800fb9a:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800fb9c:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800fba0:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800fba4:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800fba8:	6842      	ldr	r2, [r0, #4]
 800fbaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fbac:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800fbae:	f890 8001 	ldrb.w	r8, [r0, #1]
 800fbb2:	f1b8 0f00 	cmp.w	r8, #0
 800fbb6:	d109      	bne.n	800fbcc <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800fbb8:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800fbbc:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800fbc0:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800fbc4:	4640      	mov	r0, r8
 800fbc6:	b00b      	add	sp, #44	; 0x2c
 800fbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbcc:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800fbce:	2302      	movs	r3, #2
 800fbd0:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800fbd4:	7bc3      	ldrb	r3, [r0, #15]
 800fbd6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800fbda:	a908      	add	r1, sp, #32
 800fbdc:	7c00      	ldrb	r0, [r0, #16]
 800fbde:	f001 f84c 	bl	8010c7a <RegionGetPhyParam>
 800fbe2:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800fbe4:	b243      	sxtb	r3, r0
 800fbe6:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800fbe8:	454b      	cmp	r3, r9
 800fbea:	bfb8      	it	lt
 800fbec:	464b      	movlt	r3, r9
 800fbee:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800fbf0:	6862      	ldr	r2, [r4, #4]
 800fbf2:	8923      	ldrh	r3, [r4, #8]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d201      	bcs.n	800fbfc <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800fbf8:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800fbfc:	8961      	ldrh	r1, [r4, #10]
 800fbfe:	440b      	add	r3, r1
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d224      	bcs.n	800fc4e <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800fc04:	6863      	ldr	r3, [r4, #4]
 800fc06:	8921      	ldrh	r1, [r4, #8]
 800fc08:	8962      	ldrh	r2, [r4, #10]
 800fc0a:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800fc0e:	4283      	cmp	r3, r0
 800fc10:	d332      	bcc.n	800fc78 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800fc12:	1a5b      	subs	r3, r3, r1
 800fc14:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc18:	fb02 3311 	mls	r3, r2, r1, r3
 800fc1c:	bb7b      	cbnz	r3, 800fc7e <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800fc1e:	9b01      	ldr	r3, [sp, #4]
 800fc20:	4599      	cmp	r9, r3
 800fc22:	dc03      	bgt.n	800fc2c <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800fc24:	7823      	ldrb	r3, [r4, #0]
 800fc26:	b9eb      	cbnz	r3, 800fc64 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800fc28:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800fc2c:	2321      	movs	r3, #33	; 0x21
 800fc2e:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800fc32:	9b00      	ldr	r3, [sp, #0]
 800fc34:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800fc38:	7be3      	ldrb	r3, [r4, #15]
 800fc3a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800fc3e:	a908      	add	r1, sp, #32
 800fc40:	7c20      	ldrb	r0, [r4, #16]
 800fc42:	f001 f81a 	bl	8010c7a <RegionGetPhyParam>
 800fc46:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800fc48:	fa4f f980 	sxtb.w	r9, r0
 800fc4c:	e7b4      	b.n	800fbb8 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800fc4e:	230a      	movs	r3, #10
 800fc50:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800fc54:	a908      	add	r1, sp, #32
 800fc56:	7c20      	ldrb	r0, [r4, #16]
 800fc58:	f001 f80f 	bl	8010c7a <RegionGetPhyParam>
 800fc5c:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800fc5e:	fa4f fa80 	sxtb.w	sl, r0
 800fc62:	e7cf      	b.n	800fc04 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800fc64:	2302      	movs	r3, #2
 800fc66:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800fc6a:	a903      	add	r1, sp, #12
 800fc6c:	7c20      	ldrb	r0, [r4, #16]
 800fc6e:	f001 f828 	bl	8010cc2 <RegionInitDefaults>
                    nbTrans = 1;
 800fc72:	f04f 0b01 	mov.w	fp, #1
 800fc76:	e7d9      	b.n	800fc2c <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800fc78:	f8dd 9000 	ldr.w	r9, [sp]
 800fc7c:	e79c      	b.n	800fbb8 <LoRaMacAdrCalcNext+0x28>
 800fc7e:	f8dd 9000 	ldr.w	r9, [sp]
 800fc82:	e799      	b.n	800fbb8 <LoRaMacAdrCalcNext+0x28>

0800fc84 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc84:	4770      	bx	lr

0800fc86 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc86:	4770      	bx	lr

0800fc88 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc88:	4770      	bx	lr

0800fc8a <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc8a:	4770      	bx	lr

0800fc8c <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	4770      	bx	lr

0800fc90 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc90:	4770      	bx	lr

0800fc92 <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc92:	4770      	bx	lr

0800fc94 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc94:	4770      	bx	lr

0800fc96 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc96:	2000      	movs	r0, #0
 800fc98:	4770      	bx	lr

0800fc9a <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc9a:	2000      	movs	r0, #0
 800fc9c:	4770      	bx	lr

0800fc9e <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fc9e:	2000      	movs	r0, #0
 800fca0:	4770      	bx	lr

0800fca2 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fca2:	2000      	movs	r0, #0
 800fca4:	4770      	bx	lr

0800fca6 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fca6:	2000      	movs	r0, #0
 800fca8:	4770      	bx	lr

0800fcaa <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcaa:	4770      	bx	lr

0800fcac <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcac:	4770      	bx	lr

0800fcae <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcae:	4770      	bx	lr

0800fcb0 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcb0:	2002      	movs	r0, #2
 800fcb2:	4770      	bx	lr

0800fcb4 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcb4:	2002      	movs	r0, #2
 800fcb6:	4770      	bx	lr

0800fcb8 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcb8:	2002      	movs	r0, #2
 800fcba:	4770      	bx	lr

0800fcbc <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcbc:	4770      	bx	lr

0800fcbe <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcbe:	2000      	movs	r0, #0
 800fcc0:	4770      	bx	lr

0800fcc2 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcc2:	4770      	bx	lr

0800fcc4 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcc4:	4770      	bx	lr

0800fcc6 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	4770      	bx	lr

0800fcca <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcca:	2000      	movs	r0, #0
 800fccc:	4770      	bx	lr

0800fcce <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcce:	4770      	bx	lr

0800fcd0 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcd0:	4770      	bx	lr

0800fcd2 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fcd2:	4770      	bx	lr

0800fcd4 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	2b0f      	cmp	r3, #15
 800fcd8:	d804      	bhi.n	800fce4 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800fcda:	5cc2      	ldrb	r2, [r0, r3]
 800fcdc:	b922      	cbnz	r2, 800fce8 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800fcde:	3301      	adds	r3, #1
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	e7f8      	b.n	800fcd6 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800fce4:	2001      	movs	r0, #1
 800fce6:	4770      	bx	lr
            return false;
 800fce8:	2000      	movs	r0, #0
}
 800fcea:	4770      	bx	lr

0800fcec <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800fcec:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800fcee:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800fcf0:	0123      	lsls	r3, r4, #4
 800fcf2:	3308      	adds	r3, #8
 800fcf4:	4d06      	ldr	r5, [pc, #24]	; (800fd10 <MallocNewMacCommandSlot+0x24>)
 800fcf6:	441d      	add	r5, r3
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	f7ff ffeb 	bl	800fcd4 <IsSlotFree>
 800fcfe:	b920      	cbnz	r0, 800fd0a <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800fd00:	3401      	adds	r4, #1
 800fd02:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800fd04:	2c20      	cmp	r4, #32
 800fd06:	d1f3      	bne.n	800fcf0 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800fd08:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	bd38      	pop	{r3, r4, r5, pc}
 800fd0e:	bf00      	nop
 800fd10:	200041c4 	.word	0x200041c4

0800fd14 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800fd14:	b120      	cbz	r0, 800fd20 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800fd16:	2200      	movs	r2, #0
 800fd18:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800fd1a:	6042      	str	r2, [r0, #4]

    return true;
 800fd1c:	2001      	movs	r0, #1
 800fd1e:	4770      	bx	lr
        return false;
 800fd20:	2000      	movs	r0, #0
}
 800fd22:	4770      	bx	lr

0800fd24 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800fd24:	4603      	mov	r3, r0
 800fd26:	b160      	cbz	r0, 800fd42 <LinkedListAdd+0x1e>
 800fd28:	b169      	cbz	r1, 800fd46 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800fd2a:	6802      	ldr	r2, [r0, #0]
 800fd2c:	b13a      	cbz	r2, 800fd3e <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800fd2e:	685a      	ldr	r2, [r3, #4]
 800fd30:	b102      	cbz	r2, 800fd34 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800fd32:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800fd34:	2200      	movs	r2, #0
 800fd36:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800fd38:	6059      	str	r1, [r3, #4]

    return true;
 800fd3a:	2001      	movs	r0, #1
 800fd3c:	4770      	bx	lr
        list->First = element;
 800fd3e:	6001      	str	r1, [r0, #0]
 800fd40:	e7f5      	b.n	800fd2e <LinkedListAdd+0xa>
        return false;
 800fd42:	2000      	movs	r0, #0
 800fd44:	4770      	bx	lr
 800fd46:	2000      	movs	r0, #0
}
 800fd48:	4770      	bx	lr

0800fd4a <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800fd4a:	b160      	cbz	r0, 800fd66 <LinkedListGetPrevious+0x1c>
 800fd4c:	b161      	cbz	r1, 800fd68 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800fd4e:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800fd50:	4281      	cmp	r1, r0
 800fd52:	d102      	bne.n	800fd5a <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800fd54:	2000      	movs	r0, #0
    }

    return curElement;
}
 800fd56:	4770      	bx	lr
            curElement = curElement->Next;
 800fd58:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	d0fb      	beq.n	800fd56 <LinkedListGetPrevious+0xc>
 800fd5e:	6803      	ldr	r3, [r0, #0]
 800fd60:	428b      	cmp	r3, r1
 800fd62:	d1f9      	bne.n	800fd58 <LinkedListGetPrevious+0xe>
 800fd64:	4770      	bx	lr
 800fd66:	4770      	bx	lr
        return NULL;
 800fd68:	4608      	mov	r0, r1
 800fd6a:	4770      	bx	lr

0800fd6c <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800fd6c:	b1b8      	cbz	r0, 800fd9e <LinkedListRemove+0x32>
{
 800fd6e:	b538      	push	{r3, r4, r5, lr}
 800fd70:	460c      	mov	r4, r1
 800fd72:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800fd74:	b1a9      	cbz	r1, 800fda2 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800fd76:	f7ff ffe8 	bl	800fd4a <LinkedListGetPrevious>

    if( list->First == element )
 800fd7a:	682b      	ldr	r3, [r5, #0]
 800fd7c:	42a3      	cmp	r3, r4
 800fd7e:	d009      	beq.n	800fd94 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800fd80:	686b      	ldr	r3, [r5, #4]
 800fd82:	42a3      	cmp	r3, r4
 800fd84:	d009      	beq.n	800fd9a <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800fd86:	b108      	cbz	r0, 800fd8c <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800fd88:	6823      	ldr	r3, [r4, #0]
 800fd8a:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	6023      	str	r3, [r4, #0]

    return true;
 800fd90:	2001      	movs	r0, #1
}
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800fd94:	6823      	ldr	r3, [r4, #0]
 800fd96:	602b      	str	r3, [r5, #0]
 800fd98:	e7f2      	b.n	800fd80 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800fd9a:	6068      	str	r0, [r5, #4]
 800fd9c:	e7f3      	b.n	800fd86 <LinkedListRemove+0x1a>
        return false;
 800fd9e:	2000      	movs	r0, #0
}
 800fda0:	4770      	bx	lr
        return false;
 800fda2:	2000      	movs	r0, #0
 800fda4:	e7f5      	b.n	800fd92 <LinkedListRemove+0x26>
	...

0800fda8 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800fda8:	2811      	cmp	r0, #17
 800fdaa:	d805      	bhi.n	800fdb8 <IsSticky+0x10>
 800fdac:	4b03      	ldr	r3, [pc, #12]	; (800fdbc <IsSticky+0x14>)
 800fdae:	fa23 f000 	lsr.w	r0, r3, r0
 800fdb2:	f000 0001 	and.w	r0, r0, #1
 800fdb6:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800fdb8:	2000      	movs	r0, #0
    }
}
 800fdba:	4770      	bx	lr
 800fdbc:	00020720 	.word	0x00020720

0800fdc0 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800fdc0:	2000      	movs	r0, #0
 800fdc2:	4770      	bx	lr

0800fdc4 <FreeMacCommandSlot>:
    if( slot == NULL )
 800fdc4:	b130      	cbz	r0, 800fdd4 <FreeMacCommandSlot+0x10>
{
 800fdc6:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800fdc8:	2210      	movs	r2, #16
 800fdca:	2100      	movs	r1, #0
 800fdcc:	f004 f821 	bl	8013e12 <memset1>
    return true;
 800fdd0:	2001      	movs	r0, #1
}
 800fdd2:	bd08      	pop	{r3, pc}
        return false;
 800fdd4:	2000      	movs	r0, #0
}
 800fdd6:	4770      	bx	lr

0800fdd8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800fdd8:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800fdda:	4c06      	ldr	r4, [pc, #24]	; (800fdf4 <LoRaMacCommandsInit+0x1c>)
 800fddc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800fde0:	2100      	movs	r1, #0
 800fde2:	4620      	mov	r0, r4
 800fde4:	f004 f815 	bl	8013e12 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800fde8:	4620      	mov	r0, r4
 800fdea:	f7ff ff93 	bl	800fd14 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800fdee:	2000      	movs	r0, #0
 800fdf0:	bd10      	pop	{r4, pc}
 800fdf2:	bf00      	nop
 800fdf4:	200041c4 	.word	0x200041c4

0800fdf8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800fdf8:	b321      	cbz	r1, 800fe44 <LoRaMacCommandsAddCmd+0x4c>
{
 800fdfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdfc:	4605      	mov	r5, r0
 800fdfe:	4614      	mov	r4, r2
 800fe00:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800fe02:	f7ff ff73 	bl	800fcec <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800fe06:	4606      	mov	r6, r0
 800fe08:	b1f0      	cbz	r0, 800fe48 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800fe0a:	4601      	mov	r1, r0
 800fe0c:	4810      	ldr	r0, [pc, #64]	; (800fe50 <LoRaMacCommandsAddCmd+0x58>)
 800fe0e:	f7ff ff89 	bl	800fd24 <LinkedListAdd>
 800fe12:	b1d8      	cbz	r0, 800fe4c <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800fe14:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800fe16:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800fe18:	b2a2      	uxth	r2, r4
 800fe1a:	4639      	mov	r1, r7
 800fe1c:	1d70      	adds	r0, r6, #5
 800fe1e:	f003 ffe0 	bl	8013de2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800fe22:	4628      	mov	r0, r5
 800fe24:	f7ff ffc0 	bl	800fda8 <IsSticky>
 800fe28:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	f7ff ffc8 	bl	800fdc0 <IsConfirmationRequired>
 800fe30:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800fe32:	4b07      	ldr	r3, [pc, #28]	; (800fe50 <LoRaMacCommandsAddCmd+0x58>)
 800fe34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800fe38:	4414      	add	r4, r2
 800fe3a:	3401      	adds	r4, #1
 800fe3c:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800fe40:	2000      	movs	r0, #0
}
 800fe42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fe44:	2001      	movs	r0, #1
}
 800fe46:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800fe48:	2002      	movs	r0, #2
 800fe4a:	e7fa      	b.n	800fe42 <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800fe4c:	2005      	movs	r0, #5
 800fe4e:	e7f8      	b.n	800fe42 <LoRaMacCommandsAddCmd+0x4a>
 800fe50:	200041c4 	.word	0x200041c4

0800fe54 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800fe54:	b1a0      	cbz	r0, 800fe80 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800fe56:	b510      	push	{r4, lr}
 800fe58:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800fe5a:	4601      	mov	r1, r0
 800fe5c:	480b      	ldr	r0, [pc, #44]	; (800fe8c <LoRaMacCommandsRemoveCmd+0x38>)
 800fe5e:	f7ff ff85 	bl	800fd6c <LinkedListRemove>
 800fe62:	b178      	cbz	r0, 800fe84 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800fe64:	68a1      	ldr	r1, [r4, #8]
 800fe66:	4a09      	ldr	r2, [pc, #36]	; (800fe8c <LoRaMacCommandsRemoveCmd+0x38>)
 800fe68:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800fe6c:	1a5b      	subs	r3, r3, r1
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800fe74:	4620      	mov	r0, r4
 800fe76:	f7ff ffa5 	bl	800fdc4 <FreeMacCommandSlot>
 800fe7a:	b128      	cbz	r0, 800fe88 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800fe7c:	2000      	movs	r0, #0
}
 800fe7e:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fe80:	2001      	movs	r0, #1
}
 800fe82:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800fe84:	2003      	movs	r0, #3
 800fe86:	e7fa      	b.n	800fe7e <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800fe88:	2005      	movs	r0, #5
 800fe8a:	e7f8      	b.n	800fe7e <LoRaMacCommandsRemoveCmd+0x2a>
 800fe8c:	200041c4 	.word	0x200041c4

0800fe90 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800fe90:	4b06      	ldr	r3, [pc, #24]	; (800feac <LoRaMacCommandsGetCmd+0x1c>)
 800fe92:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800fe94:	e000      	b.n	800fe98 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800fe96:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800fe98:	b113      	cbz	r3, 800fea0 <LoRaMacCommandsGetCmd+0x10>
 800fe9a:	791a      	ldrb	r2, [r3, #4]
 800fe9c:	4282      	cmp	r2, r0
 800fe9e:	d1fa      	bne.n	800fe96 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800fea0:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800fea2:	b10b      	cbz	r3, 800fea8 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800fea4:	2000      	movs	r0, #0
 800fea6:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800fea8:	2003      	movs	r0, #3
}
 800feaa:	4770      	bx	lr
 800feac:	200041c4 	.word	0x200041c4

0800feb0 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800feb0:	4b0a      	ldr	r3, [pc, #40]	; (800fedc <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800feb2:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800feb4:	b120      	cbz	r0, 800fec0 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800feb6:	7b03      	ldrb	r3, [r0, #12]
 800feb8:	b11b      	cbz	r3, 800fec2 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800feba:	6800      	ldr	r0, [r0, #0]
 800febc:	e7fa      	b.n	800feb4 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800febe:	bd10      	pop	{r4, pc}
 800fec0:	4770      	bx	lr
{
 800fec2:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800fec4:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800fec6:	f7ff ffc5 	bl	800fe54 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800feca:	4620      	mov	r0, r4
    while( curElement != NULL )
 800fecc:	2800      	cmp	r0, #0
 800fece:	d0f6      	beq.n	800febe <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800fed0:	7b03      	ldrb	r3, [r0, #12]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d0f6      	beq.n	800fec4 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800fed6:	6800      	ldr	r0, [r0, #0]
 800fed8:	e7f8      	b.n	800fecc <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800feda:	bf00      	nop
 800fedc:	200041c4 	.word	0x200041c4

0800fee0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800fee0:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800fee2:	4b0b      	ldr	r3, [pc, #44]	; (800ff10 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800fee4:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800fee6:	e000      	b.n	800feea <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800fee8:	4634      	mov	r4, r6
    while( curElement != NULL )
 800feea:	b17c      	cbz	r4, 800ff0c <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800feec:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800feee:	7925      	ldrb	r5, [r4, #4]
 800fef0:	4628      	mov	r0, r5
 800fef2:	f7ff ff59 	bl	800fda8 <IsSticky>
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d0f6      	beq.n	800fee8 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800fefa:	4628      	mov	r0, r5
 800fefc:	f7ff ff60 	bl	800fdc0 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d1f1      	bne.n	800fee8 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800ff04:	4620      	mov	r0, r4
 800ff06:	f7ff ffa5 	bl	800fe54 <LoRaMacCommandsRemoveCmd>
 800ff0a:	e7ed      	b.n	800fee8 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	bd70      	pop	{r4, r5, r6, pc}
 800ff10:	200041c4 	.word	0x200041c4

0800ff14 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800ff14:	b128      	cbz	r0, 800ff22 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800ff16:	4a04      	ldr	r2, [pc, #16]	; (800ff28 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800ff18:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800ff1c:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800ff1e:	2000      	movs	r0, #0
 800ff20:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ff22:	2001      	movs	r0, #1
}
 800ff24:	4770      	bx	lr
 800ff26:	bf00      	nop
 800ff28:	200041c4 	.word	0x200041c4

0800ff2c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800ff2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800ff30:	4b16      	ldr	r3, [pc, #88]	; (800ff8c <LoRaMacCommandsSerializeCmds+0x60>)
 800ff32:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800ff34:	b32a      	cbz	r2, 800ff82 <LoRaMacCommandsSerializeCmds+0x56>
 800ff36:	4607      	mov	r7, r0
 800ff38:	4688      	mov	r8, r1
 800ff3a:	4616      	mov	r6, r2
 800ff3c:	b319      	cbz	r1, 800ff86 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800ff3e:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800ff40:	b194      	cbz	r4, 800ff68 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800ff42:	1a7a      	subs	r2, r7, r1
 800ff44:	68a3      	ldr	r3, [r4, #8]
 800ff46:	3301      	adds	r3, #1
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d30d      	bcc.n	800ff68 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800ff4c:	1c4d      	adds	r5, r1, #1
 800ff4e:	b2ed      	uxtb	r5, r5
 800ff50:	7923      	ldrb	r3, [r4, #4]
 800ff52:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800ff54:	8922      	ldrh	r2, [r4, #8]
 800ff56:	1d61      	adds	r1, r4, #5
 800ff58:	1970      	adds	r0, r6, r5
 800ff5a:	f003 ff42 	bl	8013de2 <memcpy1>
            itr += curElement->PayloadSize;
 800ff5e:	68a3      	ldr	r3, [r4, #8]
 800ff60:	441d      	add	r5, r3
 800ff62:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800ff64:	6824      	ldr	r4, [r4, #0]
 800ff66:	e7eb      	b.n	800ff40 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800ff68:	b12c      	cbz	r4, 800ff76 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800ff6a:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f7ff ff71 	bl	800fe54 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800ff72:	462c      	mov	r4, r5
 800ff74:	e7f8      	b.n	800ff68 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800ff76:	4640      	mov	r0, r8
 800ff78:	f7ff ffcc 	bl	800ff14 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800ff7c:	2000      	movs	r0, #0
}
 800ff7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ff82:	2001      	movs	r0, #1
 800ff84:	e7fb      	b.n	800ff7e <LoRaMacCommandsSerializeCmds+0x52>
 800ff86:	2001      	movs	r0, #1
 800ff88:	e7f9      	b.n	800ff7e <LoRaMacCommandsSerializeCmds+0x52>
 800ff8a:	bf00      	nop
 800ff8c:	200041c4 	.word	0x200041c4

0800ff90 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800ff90:	1e83      	subs	r3, r0, #2
 800ff92:	2b11      	cmp	r3, #17
 800ff94:	d80a      	bhi.n	800ffac <LoRaMacCommandsGetCmdSize+0x1c>
 800ff96:	e8df f003 	tbb	[pc, r3]
 800ff9a:	0b23      	.short	0x0b23
 800ff9c:	110f240d 	.word	0x110f240d
 800ffa0:	09171513 	.word	0x09171513
 800ffa4:	09091909 	.word	0x09091909
 800ffa8:	211f1d1b 	.word	0x211f1d1b
 800ffac:	2000      	movs	r0, #0
 800ffae:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800ffb0:	2005      	movs	r0, #5
            break;
 800ffb2:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800ffb4:	2002      	movs	r0, #2
            break;
 800ffb6:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800ffb8:	2001      	movs	r0, #1
            break;
 800ffba:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800ffbc:	2006      	movs	r0, #6
            break;
 800ffbe:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800ffc0:	2002      	movs	r0, #2
            break;
 800ffc2:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800ffc4:	2002      	movs	r0, #2
            break;
 800ffc6:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800ffc8:	2005      	movs	r0, #5
            break;
 800ffca:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800ffcc:	2006      	movs	r0, #6
            break;
 800ffce:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800ffd0:	2001      	movs	r0, #1
            break;
 800ffd2:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800ffd4:	2005      	movs	r0, #5
            break;
 800ffd6:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800ffd8:	2004      	movs	r0, #4
            break;
 800ffda:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800ffdc:	2004      	movs	r0, #4
            break;
 800ffde:	4770      	bx	lr
            cidSize = 3;
 800ffe0:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800ffe2:	4770      	bx	lr

0800ffe4 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ffe4:	4b03      	ldr	r3, [pc, #12]	; (800fff4 <IncreaseBufferPointer+0x10>)
 800ffe6:	4298      	cmp	r0, r3
 800ffe8:	d001      	beq.n	800ffee <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800ffea:	3004      	adds	r0, #4
 800ffec:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ffee:	4802      	ldr	r0, [pc, #8]	; (800fff8 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop
 800fff4:	200043ec 	.word	0x200043ec
 800fff8:	200043dc 	.word	0x200043dc

0800fffc <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800fffc:	b108      	cbz	r0, 8010002 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800fffe:	2000      	movs	r0, #0
 8010000:	4770      	bx	lr
        return true;
 8010002:	2001      	movs	r0, #1
}
 8010004:	4770      	bx	lr

08010006 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8010006:	2804      	cmp	r0, #4
 8010008:	d801      	bhi.n	801000e <IsListFull+0x8>
    {
        return true;
    }
    return false;
 801000a:	2000      	movs	r0, #0
 801000c:	4770      	bx	lr
        return true;
 801000e:	2001      	movs	r0, #1
}
 8010010:	4770      	bx	lr
	...

08010014 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8010014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010016:	4606      	mov	r6, r0
 8010018:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801001a:	4b0d      	ldr	r3, [pc, #52]	; (8010050 <GetElement+0x3c>)
 801001c:	f893 7020 	ldrb.w	r7, [r3, #32]
 8010020:	4638      	mov	r0, r7
 8010022:	f7ff ffeb 	bl	800fffc <IsListEmpty>
 8010026:	b970      	cbnz	r0, 8010046 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8010028:	2500      	movs	r5, #0
 801002a:	42af      	cmp	r7, r5
 801002c:	d909      	bls.n	8010042 <GetElement+0x2e>
    {
        if( element->Request == request )
 801002e:	7823      	ldrb	r3, [r4, #0]
 8010030:	42b3      	cmp	r3, r6
 8010032:	d00a      	beq.n	801004a <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 8010034:	4620      	mov	r0, r4
 8010036:	f7ff ffd5 	bl	800ffe4 <IncreaseBufferPointer>
 801003a:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801003c:	3501      	adds	r5, #1
 801003e:	b2ed      	uxtb	r5, r5
 8010040:	e7f3      	b.n	801002a <GetElement+0x16>
    }

    return NULL;
 8010042:	2000      	movs	r0, #0
}
 8010044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 8010046:	2000      	movs	r0, #0
 8010048:	e7fc      	b.n	8010044 <GetElement+0x30>
            return element;
 801004a:	4620      	mov	r0, r4
 801004c:	e7fa      	b.n	8010044 <GetElement+0x30>
 801004e:	bf00      	nop
 8010050:	200043d0 	.word	0x200043d0

08010054 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8010054:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 8010056:	4c08      	ldr	r4, [pc, #32]	; (8010078 <LoRaMacConfirmQueueInit+0x24>)
 8010058:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801005a:	2300      	movs	r3, #0
 801005c:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010060:	f104 000c 	add.w	r0, r4, #12
 8010064:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8010066:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8010068:	2214      	movs	r2, #20
 801006a:	21ff      	movs	r1, #255	; 0xff
 801006c:	f003 fed1 	bl	8013e12 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010070:	2301      	movs	r3, #1
 8010072:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8010076:	bd10      	pop	{r4, pc}
 8010078:	200043d0 	.word	0x200043d0

0801007c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 801007c:	b538      	push	{r3, r4, r5, lr}
 801007e:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010080:	4b0f      	ldr	r3, [pc, #60]	; (80100c0 <LoRaMacConfirmQueueAdd+0x44>)
 8010082:	f893 0020 	ldrb.w	r0, [r3, #32]
 8010086:	f7ff ffbe 	bl	8010006 <IsListFull>
 801008a:	b9b8      	cbnz	r0, 80100bc <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801008c:	4c0c      	ldr	r4, [pc, #48]	; (80100c0 <LoRaMacConfirmQueueAdd+0x44>)
 801008e:	68a3      	ldr	r3, [r4, #8]
 8010090:	782a      	ldrb	r2, [r5, #0]
 8010092:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8010094:	68a3      	ldr	r3, [r4, #8]
 8010096:	786a      	ldrb	r2, [r5, #1]
 8010098:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801009a:	68a3      	ldr	r3, [r4, #8]
 801009c:	78ea      	ldrb	r2, [r5, #3]
 801009e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80100a0:	68a3      	ldr	r3, [r4, #8]
 80100a2:	78aa      	ldrb	r2, [r5, #2]
 80100a4:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80100a6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80100aa:	3301      	adds	r3, #1
 80100ac:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80100b0:	68a0      	ldr	r0, [r4, #8]
 80100b2:	f7ff ff97 	bl	800ffe4 <IncreaseBufferPointer>
 80100b6:	60a0      	str	r0, [r4, #8]

    return true;
 80100b8:	2001      	movs	r0, #1
}
 80100ba:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 80100bc:	2000      	movs	r0, #0
 80100be:	e7fc      	b.n	80100ba <LoRaMacConfirmQueueAdd+0x3e>
 80100c0:	200043d0 	.word	0x200043d0

080100c4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80100c4:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80100c6:	4b09      	ldr	r3, [pc, #36]	; (80100ec <LoRaMacConfirmQueueRemoveFirst+0x28>)
 80100c8:	f893 4020 	ldrb.w	r4, [r3, #32]
 80100cc:	4620      	mov	r0, r4
 80100ce:	f7ff ff95 	bl	800fffc <IsListEmpty>
 80100d2:	b948      	cbnz	r0, 80100e8 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80100d4:	4d05      	ldr	r5, [pc, #20]	; (80100ec <LoRaMacConfirmQueueRemoveFirst+0x28>)
 80100d6:	3c01      	subs	r4, #1
 80100d8:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80100dc:	6868      	ldr	r0, [r5, #4]
 80100de:	f7ff ff81 	bl	800ffe4 <IncreaseBufferPointer>
 80100e2:	6068      	str	r0, [r5, #4]

    return true;
 80100e4:	2001      	movs	r0, #1
}
 80100e6:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 80100e8:	2000      	movs	r0, #0
 80100ea:	e7fc      	b.n	80100e6 <LoRaMacConfirmQueueRemoveFirst+0x22>
 80100ec:	200043d0 	.word	0x200043d0

080100f0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80100f0:	b538      	push	{r3, r4, r5, lr}
 80100f2:	4605      	mov	r5, r0
 80100f4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80100f6:	4b08      	ldr	r3, [pc, #32]	; (8010118 <LoRaMacConfirmQueueSetStatus+0x28>)
 80100f8:	f893 0020 	ldrb.w	r0, [r3, #32]
 80100fc:	f7ff ff7e 	bl	800fffc <IsListEmpty>
 8010100:	b948      	cbnz	r0, 8010116 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8010102:	4b05      	ldr	r3, [pc, #20]	; (8010118 <LoRaMacConfirmQueueSetStatus+0x28>)
 8010104:	689a      	ldr	r2, [r3, #8]
 8010106:	6859      	ldr	r1, [r3, #4]
 8010108:	4620      	mov	r0, r4
 801010a:	f7ff ff83 	bl	8010014 <GetElement>
        if( element != NULL )
 801010e:	b110      	cbz	r0, 8010116 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 8010110:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 8010112:	2201      	movs	r2, #1
 8010114:	7082      	strb	r2, [r0, #2]
        }
    }
}
 8010116:	bd38      	pop	{r3, r4, r5, pc}
 8010118:	200043d0 	.word	0x200043d0

0801011c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801011c:	b510      	push	{r4, lr}
 801011e:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010120:	4b09      	ldr	r3, [pc, #36]	; (8010148 <LoRaMacConfirmQueueGetStatus+0x2c>)
 8010122:	f893 0020 	ldrb.w	r0, [r3, #32]
 8010126:	f7ff ff69 	bl	800fffc <IsListEmpty>
 801012a:	b940      	cbnz	r0, 801013e <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801012c:	4b06      	ldr	r3, [pc, #24]	; (8010148 <LoRaMacConfirmQueueGetStatus+0x2c>)
 801012e:	689a      	ldr	r2, [r3, #8]
 8010130:	6859      	ldr	r1, [r3, #4]
 8010132:	4620      	mov	r0, r4
 8010134:	f7ff ff6e 	bl	8010014 <GetElement>
        if( element != NULL )
 8010138:	b118      	cbz	r0, 8010142 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 801013a:	7840      	ldrb	r0, [r0, #1]
 801013c:	e000      	b.n	8010140 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801013e:	2001      	movs	r0, #1
}
 8010140:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010142:	2001      	movs	r0, #1
 8010144:	e7fc      	b.n	8010140 <LoRaMacConfirmQueueGetStatus+0x24>
 8010146:	bf00      	nop
 8010148:	200043d0 	.word	0x200043d0

0801014c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801014c:	b538      	push	{r3, r4, r5, lr}
 801014e:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8010150:	4b0c      	ldr	r3, [pc, #48]	; (8010184 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 8010152:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8010154:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010158:	f893 0020 	ldrb.w	r0, [r3, #32]
 801015c:	f7ff ff4e 	bl	800fffc <IsListEmpty>
 8010160:	b150      	cbz	r0, 8010178 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 8010162:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 8010164:	2301      	movs	r3, #1
 8010166:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 8010168:	4620      	mov	r0, r4
 801016a:	f7ff ff3b 	bl	800ffe4 <IncreaseBufferPointer>
 801016e:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 8010170:	4b04      	ldr	r3, [pc, #16]	; (8010184 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 8010172:	689b      	ldr	r3, [r3, #8]
 8010174:	4283      	cmp	r3, r0
 8010176:	d0f4      	beq.n	8010162 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 8010178:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 801017a:	78e3      	ldrb	r3, [r4, #3]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1f3      	bne.n	8010168 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 8010180:	e7f0      	b.n	8010164 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 8010182:	bf00      	nop
 8010184:	200043d0 	.word	0x200043d0

08010188 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8010188:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801018a:	4b04      	ldr	r3, [pc, #16]	; (801019c <LoRaMacConfirmQueueIsCmdActive+0x14>)
 801018c:	689a      	ldr	r2, [r3, #8]
 801018e:	6859      	ldr	r1, [r3, #4]
 8010190:	f7ff ff40 	bl	8010014 <GetElement>
 8010194:	b100      	cbz	r0, 8010198 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 8010196:	2001      	movs	r0, #1
    }
    return false;
}
 8010198:	bd08      	pop	{r3, pc}
 801019a:	bf00      	nop
 801019c:	200043d0 	.word	0x200043d0

080101a0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80101a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101a2:	b083      	sub	sp, #12
 80101a4:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80101a6:	4b19      	ldr	r3, [pc, #100]	; (801020c <LoRaMacConfirmQueueHandleCb+0x6c>)
 80101a8:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80101ac:	2204      	movs	r2, #4
 80101ae:	2100      	movs	r1, #0
 80101b0:	eb0d 0002 	add.w	r0, sp, r2
 80101b4:	f003 fe2d 	bl	8013e12 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80101b8:	2400      	movs	r4, #0
 80101ba:	e00d      	b.n	80101d8 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80101bc:	781a      	ldrb	r2, [r3, #0]
 80101be:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80101c2:	785a      	ldrb	r2, [r3, #1]
 80101c4:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80101c8:	78db      	ldrb	r3, [r3, #3]
 80101ca:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80101ce:	f7ff ff79 	bl	80100c4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80101d2:	b1a5      	cbz	r5, 80101fe <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 80101d4:	3401      	adds	r4, #1
 80101d6:	b2e4      	uxtb	r4, r4
 80101d8:	42bc      	cmp	r4, r7
 80101da:	d214      	bcs.n	8010206 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80101dc:	4b0b      	ldr	r3, [pc, #44]	; (801020c <LoRaMacConfirmQueueHandleCb+0x6c>)
 80101de:	685a      	ldr	r2, [r3, #4]
 80101e0:	7812      	ldrb	r2, [r2, #0]
 80101e2:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	7852      	ldrb	r2, [r2, #1]
 80101e8:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 80101ee:	2d00      	cmp	r5, #0
 80101f0:	d0e4      	beq.n	80101bc <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80101f2:	4b06      	ldr	r3, [pc, #24]	; (801020c <LoRaMacConfirmQueueHandleCb+0x6c>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	689b      	ldr	r3, [r3, #8]
 80101f8:	4630      	mov	r0, r6
 80101fa:	4798      	blx	r3
 80101fc:	e7e7      	b.n	80101ce <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80101fe:	a801      	add	r0, sp, #4
 8010200:	f7ff ff3c 	bl	801007c <LoRaMacConfirmQueueAdd>
 8010204:	e7e6      	b.n	80101d4 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 8010206:	b003      	add	sp, #12
 8010208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020a:	bf00      	nop
 801020c:	200043d0 	.word	0x200043d0

08010210 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 8010210:	4b01      	ldr	r3, [pc, #4]	; (8010218 <LoRaMacConfirmQueueGetCnt+0x8>)
 8010212:	f893 0020 	ldrb.w	r0, [r3, #32]
 8010216:	4770      	bx	lr
 8010218:	200043d0 	.word	0x200043d0

0801021c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801021c:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801021e:	4b03      	ldr	r3, [pc, #12]	; (801022c <LoRaMacConfirmQueueIsFull+0x10>)
 8010220:	f893 0020 	ldrb.w	r0, [r3, #32]
 8010224:	f7ff feef 	bl	8010006 <IsListFull>
    }
    else
    {
        return false;
    }
}
 8010228:	bd08      	pop	{r3, pc}
 801022a:	bf00      	nop
 801022c:	200043d0 	.word	0x200043d0

08010230 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8010230:	b410      	push	{r4}
 8010232:	9c01      	ldr	r4, [sp, #4]
 8010234:	9902      	ldr	r1, [sp, #8]
 8010236:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 8010238:	b1da      	cbz	r2, 8010272 <PrepareB0+0x42>
 801023a:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 801023c:	2049      	movs	r0, #73	; 0x49
 801023e:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8010240:	2000      	movs	r0, #0
 8010242:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 8010244:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 8010246:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 8010248:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 801024a:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 801024c:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801024e:	0a23      	lsrs	r3, r4, #8
 8010250:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8010252:	0c23      	lsrs	r3, r4, #16
 8010254:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8010256:	0e24      	lsrs	r4, r4, #24
 8010258:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 801025a:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801025c:	0a0b      	lsrs	r3, r1, #8
 801025e:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8010260:	0c0b      	lsrs	r3, r1, #16
 8010262:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8010264:	0e09      	lsrs	r1, r1, #24
 8010266:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 8010268:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 801026a:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 801026e:	bc10      	pop	{r4}
 8010270:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010272:	2009      	movs	r0, #9
 8010274:	e7fb      	b.n	801026e <PrepareB0+0x3e>
	...

08010278 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8010278:	2300      	movs	r3, #0
 801027a:	2b01      	cmp	r3, #1
 801027c:	d80e      	bhi.n	801029c <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801027e:	469c      	mov	ip, r3
 8010280:	4a07      	ldr	r2, [pc, #28]	; (80102a0 <GetKeyAddrItem+0x28>)
 8010282:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8010286:	4282      	cmp	r2, r0
 8010288:	d002      	beq.n	8010290 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801028a:	3301      	adds	r3, #1
 801028c:	b2db      	uxtb	r3, r3
 801028e:	e7f4      	b.n	801027a <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 8010290:	4b03      	ldr	r3, [pc, #12]	; (80102a0 <GetKeyAddrItem+0x28>)
 8010292:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8010296:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8010298:	2000      	movs	r0, #0
 801029a:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801029c:	200b      	movs	r0, #11
}
 801029e:	4770      	bx	lr
 80102a0:	2000016c 	.word	0x2000016c

080102a4 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 80102a4:	b1f1      	cbz	r1, 80102e4 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 80102a6:	3801      	subs	r0, #1
 80102a8:	2803      	cmp	r0, #3
 80102aa:	d81d      	bhi.n	80102e8 <GetLastFcntDown+0x44>
 80102ac:	e8df f000 	tbb	[pc, r0]
 80102b0:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80102b4:	4a0d      	ldr	r2, [pc, #52]	; (80102ec <GetLastFcntDown+0x48>)
 80102b6:	6812      	ldr	r2, [r2, #0]
 80102b8:	6912      	ldr	r2, [r2, #16]
 80102ba:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80102bc:	2000      	movs	r0, #0
            break;
 80102be:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80102c0:	4a0a      	ldr	r2, [pc, #40]	; (80102ec <GetLastFcntDown+0x48>)
 80102c2:	6812      	ldr	r2, [r2, #0]
 80102c4:	6952      	ldr	r2, [r2, #20]
 80102c6:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80102c8:	2000      	movs	r0, #0
            break;
 80102ca:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80102cc:	4a07      	ldr	r2, [pc, #28]	; (80102ec <GetLastFcntDown+0x48>)
 80102ce:	6812      	ldr	r2, [r2, #0]
 80102d0:	6992      	ldr	r2, [r2, #24]
 80102d2:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80102d4:	2000      	movs	r0, #0
            break;
 80102d6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80102d8:	4a04      	ldr	r2, [pc, #16]	; (80102ec <GetLastFcntDown+0x48>)
 80102da:	6812      	ldr	r2, [r2, #0]
 80102dc:	69d2      	ldr	r2, [r2, #28]
 80102de:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80102e0:	2000      	movs	r0, #0
            break;
 80102e2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 80102e4:	2009      	movs	r0, #9
 80102e6:	4770      	bx	lr
    switch( fCntID )
 80102e8:	2005      	movs	r0, #5
}
 80102ea:	4770      	bx	lr
 80102ec:	200043f4 	.word	0x200043f4

080102f0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80102f0:	b510      	push	{r4, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 80102f6:	2300      	movs	r3, #0
 80102f8:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80102fa:	a901      	add	r1, sp, #4
 80102fc:	f7ff ffd2 	bl	80102a4 <GetLastFcntDown>
 8010300:	b948      	cbnz	r0, 8010316 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 8010302:	9b01      	ldr	r3, [sp, #4]
 8010304:	42a3      	cmp	r3, r4
 8010306:	d309      	bcc.n	801031c <CheckFCntDown+0x2c>
 8010308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801030c:	d001      	beq.n	8010312 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 801030e:	2000      	movs	r0, #0
 8010310:	e002      	b.n	8010318 <CheckFCntDown+0x28>
        return true;
 8010312:	2001      	movs	r0, #1
 8010314:	e000      	b.n	8010318 <CheckFCntDown+0x28>
        return false;
 8010316:	2000      	movs	r0, #0
    }
}
 8010318:	b002      	add	sp, #8
 801031a:	bd10      	pop	{r4, pc}
        return true;
 801031c:	2001      	movs	r0, #1
 801031e:	e7fb      	b.n	8010318 <CheckFCntDown+0x28>

08010320 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 8010320:	3801      	subs	r0, #1
 8010322:	2803      	cmp	r0, #3
 8010324:	d815      	bhi.n	8010352 <UpdateFCntDown+0x32>
 8010326:	e8df f000 	tbb	[pc, r0]
 801032a:	0702      	.short	0x0702
 801032c:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801032e:	4b09      	ldr	r3, [pc, #36]	; (8010354 <UpdateFCntDown+0x34>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8010334:	6219      	str	r1, [r3, #32]
            break;
 8010336:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8010338:	4b06      	ldr	r3, [pc, #24]	; (8010354 <UpdateFCntDown+0x34>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801033e:	6219      	str	r1, [r3, #32]
            break;
 8010340:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8010342:	4b04      	ldr	r3, [pc, #16]	; (8010354 <UpdateFCntDown+0x34>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8010348:	6219      	str	r1, [r3, #32]
            break;
 801034a:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801034c:	4b01      	ldr	r3, [pc, #4]	; (8010354 <UpdateFCntDown+0x34>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 8010352:	4770      	bx	lr
 8010354:	200043f4 	.word	0x200043f4

08010358 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 8010358:	4b0a      	ldr	r3, [pc, #40]	; (8010384 <ResetFCnts+0x2c>)
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	2300      	movs	r3, #0
 801035e:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010360:	f04f 31ff 	mov.w	r1, #4294967295
 8010364:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010366:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010368:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801036a:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801036c:	2b00      	cmp	r3, #0
 801036e:	dd00      	ble.n	8010372 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 8010370:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8010372:	1d99      	adds	r1, r3, #6
 8010374:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010378:	f04f 30ff 	mov.w	r0, #4294967295
 801037c:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801037e:	3301      	adds	r3, #1
 8010380:	e7f4      	b.n	801036c <ResetFCnts+0x14>
 8010382:	bf00      	nop
 8010384:	200043f4 	.word	0x200043f4

08010388 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8010388:	4b03      	ldr	r3, [pc, #12]	; (8010398 <IsJoinNonce10xOk+0x10>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801038e:	4283      	cmp	r3, r0
 8010390:	bf2c      	ite	cs
 8010392:	2000      	movcs	r0, #0
 8010394:	2001      	movcc	r0, #1
 8010396:	4770      	bx	lr
 8010398:	200043f4 	.word	0x200043f4

0801039c <ComputeCmacB0>:
{
 801039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a0:	b088      	sub	sp, #32
 80103a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80103a4:	b1f0      	cbz	r0, 80103e4 <ComputeCmacB0+0x48>
 80103a6:	460c      	mov	r4, r1
 80103a8:	4615      	mov	r5, r2
 80103aa:	461a      	mov	r2, r3
 80103ac:	4680      	mov	r8, r0
 80103ae:	b1de      	cbz	r6, 80103e8 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80103b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80103b4:	d81a      	bhi.n	80103ec <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80103b6:	af04      	add	r7, sp, #16
 80103b8:	9702      	str	r7, [sp, #8]
 80103ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103bc:	9301      	str	r3, [sp, #4]
 80103be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103c0:	9300      	str	r3, [sp, #0]
 80103c2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80103c6:	4629      	mov	r1, r5
 80103c8:	4620      	mov	r0, r4
 80103ca:	f7ff ff31 	bl	8010230 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80103ce:	9600      	str	r6, [sp, #0]
 80103d0:	462b      	mov	r3, r5
 80103d2:	4622      	mov	r2, r4
 80103d4:	4641      	mov	r1, r8
 80103d6:	4638      	mov	r0, r7
 80103d8:	f003 fabe 	bl	8013958 <SecureElementComputeAesCmac>
 80103dc:	b940      	cbnz	r0, 80103f0 <ComputeCmacB0+0x54>
}
 80103de:	b008      	add	sp, #32
 80103e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80103e4:	2009      	movs	r0, #9
 80103e6:	e7fa      	b.n	80103de <ComputeCmacB0+0x42>
 80103e8:	2009      	movs	r0, #9
 80103ea:	e7f8      	b.n	80103de <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80103ec:	200d      	movs	r0, #13
 80103ee:	e7f6      	b.n	80103de <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80103f0:	200e      	movs	r0, #14
 80103f2:	e7f4      	b.n	80103de <ComputeCmacB0+0x42>

080103f4 <DeriveSessionKey10x>:
{
 80103f4:	b510      	push	{r4, lr}
 80103f6:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 80103f8:	2400      	movs	r4, #0
 80103fa:	9400      	str	r4, [sp, #0]
 80103fc:	9401      	str	r4, [sp, #4]
 80103fe:	9402      	str	r4, [sp, #8]
 8010400:	9403      	str	r4, [sp, #12]
    switch( keyID )
 8010402:	2808      	cmp	r0, #8
 8010404:	d003      	beq.n	801040e <DeriveSessionKey10x+0x1a>
 8010406:	2809      	cmp	r0, #9
 8010408:	d025      	beq.n	8010456 <DeriveSessionKey10x+0x62>
 801040a:	200a      	movs	r0, #10
 801040c:	e021      	b.n	8010452 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 801040e:	2401      	movs	r4, #1
 8010410:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8010414:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8010418:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801041c:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8010420:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8010424:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8010428:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801042c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8010430:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8010434:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8010438:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801043c:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8010440:	0a1b      	lsrs	r3, r3, #8
 8010442:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010446:	4602      	mov	r2, r0
 8010448:	2101      	movs	r1, #1
 801044a:	4668      	mov	r0, sp
 801044c:	f003 fb22 	bl	8013a94 <SecureElementDeriveAndStoreKey>
 8010450:	b928      	cbnz	r0, 801045e <DeriveSessionKey10x+0x6a>
}
 8010452:	b004      	add	sp, #16
 8010454:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 8010456:	2402      	movs	r4, #2
 8010458:	f88d 4000 	strb.w	r4, [sp]
            break;
 801045c:	e7da      	b.n	8010414 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801045e:	200e      	movs	r0, #14
 8010460:	e7f7      	b.n	8010452 <DeriveSessionKey10x+0x5e>

08010462 <PayloadEncrypt>:
{
 8010462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010466:	b088      	sub	sp, #32
 8010468:	4690      	mov	r8, r2
 801046a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 801046c:	2800      	cmp	r0, #0
 801046e:	d052      	beq.n	8010516 <PayloadEncrypt+0xb4>
 8010470:	460d      	mov	r5, r1
 8010472:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 8010474:	2600      	movs	r6, #0
 8010476:	9604      	str	r6, [sp, #16]
 8010478:	9605      	str	r6, [sp, #20]
 801047a:	9606      	str	r6, [sp, #24]
 801047c:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 801047e:	9600      	str	r6, [sp, #0]
 8010480:	9601      	str	r6, [sp, #4]
 8010482:	9602      	str	r6, [sp, #8]
 8010484:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 8010486:	2701      	movs	r7, #1
 8010488:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 801048c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8010490:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 8010494:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8010498:	0a19      	lsrs	r1, r3, #8
 801049a:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801049e:	0c19      	lsrs	r1, r3, #16
 80104a0:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80104a4:	0e1b      	lsrs	r3, r3, #24
 80104a6:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 80104aa:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80104ae:	0a13      	lsrs	r3, r2, #8
 80104b0:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80104b4:	0c13      	lsrs	r3, r2, #16
 80104b6:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80104ba:	0e12      	lsrs	r2, r2, #24
 80104bc:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 80104c0:	e014      	b.n	80104ec <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80104c2:	18f2      	adds	r2, r6, r3
 80104c4:	5ca0      	ldrb	r0, [r4, r2]
 80104c6:	f103 0120 	add.w	r1, r3, #32
 80104ca:	4469      	add	r1, sp
 80104cc:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 80104d0:	4048      	eors	r0, r1
 80104d2:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80104d4:	3301      	adds	r3, #1
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	462a      	mov	r2, r5
 80104da:	2d10      	cmp	r5, #16
 80104dc:	bfa8      	it	ge
 80104de:	2210      	movge	r2, #16
 80104e0:	4293      	cmp	r3, r2
 80104e2:	dbee      	blt.n	80104c2 <PayloadEncrypt+0x60>
        size -= 16;
 80104e4:	3d10      	subs	r5, #16
 80104e6:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 80104e8:	3610      	adds	r6, #16
 80104ea:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 80104ec:	2d00      	cmp	r5, #0
 80104ee:	dd0e      	ble.n	801050e <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 80104f0:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 80104f4:	3701      	adds	r7, #1
 80104f6:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80104f8:	ab04      	add	r3, sp, #16
 80104fa:	4642      	mov	r2, r8
 80104fc:	2110      	movs	r1, #16
 80104fe:	4668      	mov	r0, sp
 8010500:	f003 fa4f 	bl	80139a2 <SecureElementAesEncrypt>
 8010504:	4603      	mov	r3, r0
 8010506:	2800      	cmp	r0, #0
 8010508:	d0e6      	beq.n	80104d8 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801050a:	200e      	movs	r0, #14
 801050c:	e000      	b.n	8010510 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 801050e:	2000      	movs	r0, #0
}
 8010510:	b008      	add	sp, #32
 8010512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010516:	2009      	movs	r0, #9
 8010518:	e7fa      	b.n	8010510 <PayloadEncrypt+0xae>

0801051a <VerifyCmacB0>:
    if( msg == 0 )
 801051a:	b368      	cbz	r0, 8010578 <VerifyCmacB0+0x5e>
{
 801051c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010520:	b0c8      	sub	sp, #288	; 0x120
 8010522:	460c      	mov	r4, r1
 8010524:	4615      	mov	r5, r2
 8010526:	461e      	mov	r6, r3
 8010528:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801052a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 801052e:	d825      	bhi.n	801057c <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8010530:	af04      	add	r7, sp, #16
 8010532:	f44f 7288 	mov.w	r2, #272	; 0x110
 8010536:	2100      	movs	r1, #0
 8010538:	4638      	mov	r0, r7
 801053a:	f003 fc6a 	bl	8013e12 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801053e:	9702      	str	r7, [sp, #8]
 8010540:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8010542:	9301      	str	r3, [sp, #4]
 8010544:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8010546:	9300      	str	r3, [sp, #0]
 8010548:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 801054c:	4632      	mov	r2, r6
 801054e:	4629      	mov	r1, r5
 8010550:	4620      	mov	r0, r4
 8010552:	f7ff fe6d 	bl	8010230 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8010556:	4622      	mov	r2, r4
 8010558:	4641      	mov	r1, r8
 801055a:	a808      	add	r0, sp, #32
 801055c:	f003 fc41 	bl	8013de2 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8010560:	462b      	mov	r3, r5
 8010562:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8010564:	f104 0110 	add.w	r1, r4, #16
 8010568:	4638      	mov	r0, r7
 801056a:	f003 fa04 	bl	8013976 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 801056e:	b130      	cbz	r0, 801057e <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8010570:	2801      	cmp	r0, #1
 8010572:	d004      	beq.n	801057e <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010574:	200e      	movs	r0, #14
 8010576:	e002      	b.n	801057e <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010578:	2009      	movs	r0, #9
}
 801057a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801057c:	200d      	movs	r0, #13
}
 801057e:	b048      	add	sp, #288	; 0x120
 8010580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010584 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 8010584:	b188      	cbz	r0, 80105aa <LoRaMacCryptoInit+0x26>
{
 8010586:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8010588:	4c09      	ldr	r4, [pc, #36]	; (80105b0 <LoRaMacCryptoInit+0x2c>)
 801058a:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801058c:	2228      	movs	r2, #40	; 0x28
 801058e:	2100      	movs	r1, #0
 8010590:	f003 fc3f 	bl	8013e12 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8010594:	6823      	ldr	r3, [r4, #0]
 8010596:	2201      	movs	r2, #1
 8010598:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801059a:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801059c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801059e:	2400      	movs	r4, #0
 80105a0:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80105a2:	f7ff fed9 	bl	8010358 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80105a6:	4620      	mov	r0, r4
}
 80105a8:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80105aa:	2008      	movs	r0, #8
}
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	200043f4 	.word	0x200043f4

080105b4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 80105b4:	4b02      	ldr	r3, [pc, #8]	; (80105c0 <LoRaMacCryptoSetLrWanVersion+0xc>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 80105ba:	2000      	movs	r0, #0
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop
 80105c0:	200043f4 	.word	0x200043f4

080105c4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 80105c4:	b130      	cbz	r0, 80105d4 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80105c6:	4b04      	ldr	r3, [pc, #16]	; (80105d8 <LoRaMacCryptoGetFCntUp+0x14>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	3301      	adds	r3, #1
 80105ce:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80105d0:	2000      	movs	r0, #0
 80105d2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 80105d4:	2009      	movs	r0, #9
}
 80105d6:	4770      	bx	lr
 80105d8:	200043f4 	.word	0x200043f4

080105dc <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80105dc:	b530      	push	{r4, r5, lr}
 80105de:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 80105e0:	2300      	movs	r3, #0
 80105e2:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 80105e4:	b1f2      	cbz	r2, 8010624 <LoRaMacCryptoGetFCntDown+0x48>
 80105e6:	460c      	mov	r4, r1
 80105e8:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80105ea:	a901      	add	r1, sp, #4
 80105ec:	f7ff fe5a 	bl	80102a4 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80105f0:	b948      	cbnz	r0, 8010606 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 80105f2:	9b01      	ldr	r3, [sp, #4]
 80105f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f8:	d007      	beq.n	801060a <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 80105fe:	2a00      	cmp	r2, #0
 8010600:	dd05      	ble.n	801060e <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8010602:	4413      	add	r3, r2
 8010604:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8010606:	b003      	add	sp, #12
 8010608:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 801060a:	602c      	str	r4, [r5, #0]
 801060c:	e7fb      	b.n	8010606 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 801060e:	b132      	cbz	r2, 801061e <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8010610:	0c1b      	lsrs	r3, r3, #16
 8010612:	041b      	lsls	r3, r3, #16
 8010614:	4423      	add	r3, r4
 8010616:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801061a:	602b      	str	r3, [r5, #0]
 801061c:	e7f3      	b.n	8010606 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 801061e:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8010620:	2007      	movs	r0, #7
 8010622:	e7f0      	b.n	8010606 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010624:	2009      	movs	r0, #9
 8010626:	e7ee      	b.n	8010606 <LoRaMacCryptoGetFCntDown+0x2a>

08010628 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 8010628:	4601      	mov	r1, r0
 801062a:	b908      	cbnz	r0, 8010630 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801062c:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 801062e:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010630:	2300      	movs	r3, #0
 8010632:	2b00      	cmp	r3, #0
 8010634:	dd01      	ble.n	801063a <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 8010636:	2000      	movs	r0, #0
 8010638:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801063a:	4a07      	ldr	r2, [pc, #28]	; (8010658 <LoRaMacCryptoSetMulticastReference+0x30>)
 801063c:	6812      	ldr	r2, [r2, #0]
 801063e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8010642:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8010646:	f103 0c06 	add.w	ip, r3, #6
 801064a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 801064e:	3204      	adds	r2, #4
 8010650:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010652:	3301      	adds	r3, #1
 8010654:	e7ed      	b.n	8010632 <LoRaMacCryptoSetMulticastReference+0xa>
 8010656:	bf00      	nop
 8010658:	200043f4 	.word	0x200043f4

0801065c <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 801065c:	b1d8      	cbz	r0, 8010696 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 801065e:	b510      	push	{r4, lr}
 8010660:	b082      	sub	sp, #8
 8010662:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8010664:	4b0f      	ldr	r3, [pc, #60]	; (80106a4 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	8893      	ldrh	r3, [r2, #4]
 801066a:	3301      	adds	r3, #1
 801066c:	b29b      	uxth	r3, r3
 801066e:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8010670:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010672:	f000 fa32 	bl	8010ada <LoRaMacSerializerJoinRequest>
 8010676:	b980      	cbnz	r0, 801069a <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8010678:	4623      	mov	r3, r4
 801067a:	f853 1b18 	ldr.w	r1, [r3], #24
 801067e:	9300      	str	r3, [sp, #0]
 8010680:	2301      	movs	r3, #1
 8010682:	2213      	movs	r2, #19
 8010684:	f003 f968 	bl	8013958 <SecureElementComputeAesCmac>
 8010688:	b950      	cbnz	r0, 80106a0 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801068a:	4620      	mov	r0, r4
 801068c:	f000 fa25 	bl	8010ada <LoRaMacSerializerJoinRequest>
 8010690:	b120      	cbz	r0, 801069c <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010692:	2010      	movs	r0, #16
 8010694:	e002      	b.n	801069c <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010696:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8010698:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801069a:	2010      	movs	r0, #16
}
 801069c:	b002      	add	sp, #8
 801069e:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80106a0:	200e      	movs	r0, #14
 80106a2:	e7fb      	b.n	801069c <LoRaMacCryptoPrepareJoinRequest+0x40>
 80106a4:	200043f4 	.word	0x200043f4

080106a8 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d036      	beq.n	801071a <LoRaMacCryptoSecureMessage+0x72>
{
 80106ac:	b530      	push	{r4, r5, lr}
 80106ae:	b085      	sub	sp, #20
 80106b0:	4604      	mov	r4, r0
 80106b2:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80106b4:	4b1d      	ldr	r3, [pc, #116]	; (801072c <LoRaMacCryptoSecureMessage+0x84>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	4283      	cmp	r3, r0
 80106bc:	d82f      	bhi.n	801071e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80106be:	f895 2020 	ldrb.w	r2, [r5, #32]
 80106c2:	b342      	cbz	r2, 8010716 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80106c4:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80106c6:	42a3      	cmp	r3, r4
 80106c8:	d209      	bcs.n	80106de <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80106ca:	9401      	str	r4, [sp, #4]
 80106cc:	2300      	movs	r3, #0
 80106ce:	9300      	str	r3, [sp, #0]
 80106d0:	68ab      	ldr	r3, [r5, #8]
 80106d2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80106d6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80106d8:	f7ff fec3 	bl	8010462 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80106dc:	bb10      	cbnz	r0, 8010724 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80106de:	4628      	mov	r0, r5
 80106e0:	f000 fa31 	bl	8010b46 <LoRaMacSerializerData>
 80106e4:	b9e8      	cbnz	r0, 8010722 <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80106e6:	7929      	ldrb	r1, [r5, #4]
 80106e8:	3904      	subs	r1, #4
 80106ea:	462b      	mov	r3, r5
 80106ec:	f853 0b2c 	ldr.w	r0, [r3], #44
 80106f0:	9303      	str	r3, [sp, #12]
 80106f2:	9402      	str	r4, [sp, #8]
 80106f4:	68ab      	ldr	r3, [r5, #8]
 80106f6:	9301      	str	r3, [sp, #4]
 80106f8:	2300      	movs	r3, #0
 80106fa:	9300      	str	r3, [sp, #0]
 80106fc:	2208      	movs	r2, #8
 80106fe:	b289      	uxth	r1, r1
 8010700:	f7ff fe4c 	bl	801039c <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010704:	b970      	cbnz	r0, 8010724 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010706:	4628      	mov	r0, r5
 8010708:	f000 fa1d 	bl	8010b46 <LoRaMacSerializerData>
 801070c:	b960      	cbnz	r0, 8010728 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801070e:	4b07      	ldr	r3, [pc, #28]	; (801072c <LoRaMacCryptoSecureMessage+0x84>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8010714:	e006      	b.n	8010724 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 8010716:	2208      	movs	r2, #8
 8010718:	e7d5      	b.n	80106c6 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 801071a:	2009      	movs	r0, #9
}
 801071c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801071e:	2006      	movs	r0, #6
 8010720:	e000      	b.n	8010724 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010722:	2010      	movs	r0, #16
}
 8010724:	b005      	add	sp, #20
 8010726:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010728:	2010      	movs	r0, #16
 801072a:	e7fb      	b.n	8010724 <LoRaMacCryptoSecureMessage+0x7c>
 801072c:	200043f4 	.word	0x200043f4

08010730 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8010730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010734:	b087      	sub	sp, #28
 8010736:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 8010738:	2e00      	cmp	r6, #0
 801073a:	d049      	beq.n	80107d0 <LoRaMacCryptoUnsecureMessage+0xa0>
 801073c:	4605      	mov	r5, r0
 801073e:	4688      	mov	r8, r1
 8010740:	4617      	mov	r7, r2
 8010742:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8010744:	4619      	mov	r1, r3
 8010746:	4610      	mov	r0, r2
 8010748:	f7ff fdd2 	bl	80102f0 <CheckFCntDown>
 801074c:	2800      	cmp	r0, #0
 801074e:	d041      	beq.n	80107d4 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8010750:	4630      	mov	r0, r6
 8010752:	f000 f963 	bl	8010a1c <LoRaMacParserData>
 8010756:	2800      	cmp	r0, #0
 8010758:	d141      	bne.n	80107de <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801075a:	a905      	add	r1, sp, #20
 801075c:	4628      	mov	r0, r5
 801075e:	f7ff fd8b 	bl	8010278 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010762:	4605      	mov	r5, r0
 8010764:	2800      	cmp	r0, #0
 8010766:	d136      	bne.n	80107d6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8010768:	9b05      	ldr	r3, [sp, #20]
 801076a:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 801076e:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8010770:	68b3      	ldr	r3, [r6, #8]
 8010772:	4543      	cmp	r3, r8
 8010774:	d135      	bne.n	80107e2 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8010776:	7b33      	ldrb	r3, [r6, #12]
 8010778:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801077c:	491a      	ldr	r1, [pc, #104]	; (80107e8 <LoRaMacCryptoUnsecureMessage+0xb8>)
 801077e:	6809      	ldr	r1, [r1, #0]
 8010780:	7889      	ldrb	r1, [r1, #2]
 8010782:	b901      	cbnz	r1, 8010786 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8010784:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8010786:	7931      	ldrb	r1, [r6, #4]
 8010788:	3904      	subs	r1, #4
 801078a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 801078c:	9003      	str	r0, [sp, #12]
 801078e:	9402      	str	r4, [sp, #8]
 8010790:	f8cd 8004 	str.w	r8, [sp, #4]
 8010794:	2001      	movs	r0, #1
 8010796:	9000      	str	r0, [sp, #0]
 8010798:	b289      	uxth	r1, r1
 801079a:	6830      	ldr	r0, [r6, #0]
 801079c:	f7ff febd 	bl	801051a <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80107a0:	4605      	mov	r5, r0
 80107a2:	b9c0      	cbnz	r0, 80107d6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80107a4:	f896 3020 	ldrb.w	r3, [r6, #32]
 80107a8:	b90b      	cbnz	r3, 80107ae <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80107aa:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80107ae:	9401      	str	r4, [sp, #4]
 80107b0:	2301      	movs	r3, #1
 80107b2:	9300      	str	r3, [sp, #0]
 80107b4:	4643      	mov	r3, r8
 80107b6:	464a      	mov	r2, r9
 80107b8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80107bc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80107be:	f7ff fe50 	bl	8010462 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80107c2:	4605      	mov	r5, r0
 80107c4:	b938      	cbnz	r0, 80107d6 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80107c6:	4621      	mov	r1, r4
 80107c8:	4638      	mov	r0, r7
 80107ca:	f7ff fda9 	bl	8010320 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80107ce:	e002      	b.n	80107d6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80107d0:	2509      	movs	r5, #9
 80107d2:	e000      	b.n	80107d6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80107d4:	2506      	movs	r5, #6
}
 80107d6:	4628      	mov	r0, r5
 80107d8:	b007      	add	sp, #28
 80107da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80107de:	250f      	movs	r5, #15
 80107e0:	e7f9      	b.n	80107d6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80107e2:	2502      	movs	r5, #2
 80107e4:	e7f7      	b.n	80107d6 <LoRaMacCryptoUnsecureMessage+0xa6>
 80107e6:	bf00      	nop
 80107e8:	200043f4 	.word	0x200043f4

080107ec <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80107ec:	b500      	push	{lr}
 80107ee:	b085      	sub	sp, #20
 80107f0:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 80107f2:	2300      	movs	r3, #0
 80107f4:	9300      	str	r3, [sp, #0]
 80107f6:	9301      	str	r3, [sp, #4]
 80107f8:	9302      	str	r3, [sp, #8]
 80107fa:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 80107fc:	290b      	cmp	r1, #11
 80107fe:	d007      	beq.n	8010810 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 8010800:	290c      	cmp	r1, #12
 8010802:	d013      	beq.n	801082c <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8010804:	290a      	cmp	r1, #10
 8010806:	d00c      	beq.n	8010822 <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 8010808:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 801080a:	b005      	add	sp, #20
 801080c:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 8010810:	2801      	cmp	r0, #1
 8010812:	d001      	beq.n	8010818 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 8010814:	2100      	movs	r1, #0
 8010816:	e00a      	b.n	801082e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 8010818:	2320      	movs	r3, #32
 801081a:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 801081e:	2100      	movs	r1, #0
 8010820:	e005      	b.n	801082e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 8010822:	2330      	movs	r3, #48	; 0x30
 8010824:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8010828:	2100      	movs	r1, #0
            break;
 801082a:	e000      	b.n	801082e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 801082c:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801082e:	4668      	mov	r0, sp
 8010830:	f003 f930 	bl	8013a94 <SecureElementDeriveAndStoreKey>
 8010834:	2800      	cmp	r0, #0
 8010836:	d0e8      	beq.n	801080a <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010838:	200e      	movs	r0, #14
 801083a:	e7e6      	b.n	801080a <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0801083c <LoRaMacCryptoSetKey>:
{
 801083c:	b510      	push	{r4, lr}
 801083e:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8010840:	f003 f8e6 	bl	8013a10 <SecureElementSetKey>
 8010844:	b998      	cbnz	r0, 801086e <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 8010846:	b104      	cbz	r4, 801084a <LoRaMacCryptoSetKey+0xe>
}
 8010848:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801084a:	4b0c      	ldr	r3, [pc, #48]	; (801087c <LoRaMacCryptoSetKey+0x40>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	210b      	movs	r1, #11
 8010850:	7898      	ldrb	r0, [r3, #2]
 8010852:	f7ff ffcb 	bl	80107ec <LoRaMacCryptoDeriveLifeTimeKey>
 8010856:	b960      	cbnz	r0, 8010872 <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010858:	210c      	movs	r1, #12
 801085a:	f7ff ffc7 	bl	80107ec <LoRaMacCryptoDeriveLifeTimeKey>
 801085e:	b950      	cbnz	r0, 8010876 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010860:	210a      	movs	r1, #10
 8010862:	f7ff ffc3 	bl	80107ec <LoRaMacCryptoDeriveLifeTimeKey>
 8010866:	2800      	cmp	r0, #0
 8010868:	d0ee      	beq.n	8010848 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801086a:	200e      	movs	r0, #14
 801086c:	e7ec      	b.n	8010848 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801086e:	200e      	movs	r0, #14
 8010870:	e7ea      	b.n	8010848 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010872:	200e      	movs	r0, #14
 8010874:	e7e8      	b.n	8010848 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010876:	200e      	movs	r0, #14
 8010878:	e7e6      	b.n	8010848 <LoRaMacCryptoSetKey+0xc>
 801087a:	bf00      	nop
 801087c:	200043f4 	.word	0x200043f4

08010880 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8010880:	2a00      	cmp	r2, #0
 8010882:	d06c      	beq.n	801095e <LoRaMacCryptoHandleJoinAccept+0xde>
{
 8010884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010886:	b08f      	sub	sp, #60	; 0x3c
 8010888:	4607      	mov	r7, r0
 801088a:	460d      	mov	r5, r1
 801088c:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801088e:	2900      	cmp	r1, #0
 8010890:	d067      	beq.n	8010962 <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8010892:	2600      	movs	r6, #0
 8010894:	9605      	str	r6, [sp, #20]
 8010896:	221d      	movs	r2, #29
 8010898:	4631      	mov	r1, r6
 801089a:	a806      	add	r0, sp, #24
 801089c:	f006 fe46 	bl	801752c <memset>
    uint8_t versionMinor         = 0;
 80108a0:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80108a4:	4b33      	ldr	r3, [pc, #204]	; (8010974 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80108aa:	f10d 0313 	add.w	r3, sp, #19
 80108ae:	9302      	str	r3, [sp, #8]
 80108b0:	ab05      	add	r3, sp, #20
 80108b2:	9301      	str	r3, [sp, #4]
 80108b4:	7923      	ldrb	r3, [r4, #4]
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	6823      	ldr	r3, [r4, #0]
 80108ba:	4632      	mov	r2, r6
 80108bc:	4629      	mov	r1, r5
 80108be:	4638      	mov	r0, r7
 80108c0:	f003 f908 	bl	8013ad4 <SecureElementProcessJoinAccept>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d14e      	bne.n	8010966 <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80108c8:	7922      	ldrb	r2, [r4, #4]
 80108ca:	a905      	add	r1, sp, #20
 80108cc:	6820      	ldr	r0, [r4, #0]
 80108ce:	f003 fa88 	bl	8013de2 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80108d2:	4620      	mov	r0, r4
 80108d4:	f000 f850 	bl	8010978 <LoRaMacParserJoinAccept>
 80108d8:	2800      	cmp	r0, #0
 80108da:	d147      	bne.n	801096c <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80108dc:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80108de:	79e3      	ldrb	r3, [r4, #7]
 80108e0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80108e4:	7a23      	ldrb	r3, [r4, #8]
 80108e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80108ea:	4628      	mov	r0, r5
 80108ec:	f7ff fd4c 	bl	8010388 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 80108f0:	2800      	cmp	r0, #0
 80108f2:	d03d      	beq.n	8010970 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 80108f4:	4b1f      	ldr	r3, [pc, #124]	; (8010974 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80108fa:	210b      	movs	r1, #11
 80108fc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8010900:	f7ff ff74 	bl	80107ec <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010904:	bb80      	cbnz	r0, 8010968 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8010906:	210c      	movs	r1, #12
 8010908:	2000      	movs	r0, #0
 801090a:	f7ff ff6f 	bl	80107ec <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801090e:	bb58      	cbnz	r0, 8010968 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8010910:	210a      	movs	r1, #10
 8010912:	2000      	movs	r0, #0
 8010914:	f7ff ff6a 	bl	80107ec <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010918:	bb30      	cbnz	r0, 8010968 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 801091a:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801091c:	7aa2      	ldrb	r2, [r4, #10]
 801091e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8010922:	7ae2      	ldrb	r2, [r4, #11]
 8010924:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8010928:	4633      	mov	r3, r6
 801092a:	4622      	mov	r2, r4
 801092c:	4629      	mov	r1, r5
 801092e:	2009      	movs	r0, #9
 8010930:	f7ff fd60 	bl	80103f4 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010934:	b9c0      	cbnz	r0, 8010968 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8010936:	4633      	mov	r3, r6
 8010938:	4622      	mov	r2, r4
 801093a:	4629      	mov	r1, r5
 801093c:	2008      	movs	r0, #8
 801093e:	f7ff fd59 	bl	80103f4 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010942:	b988      	cbnz	r0, 8010968 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8010944:	4b0b      	ldr	r3, [pc, #44]	; (8010974 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f89d 2013 	ldrb.w	r2, [sp, #19]
 801094c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 801094e:	2200      	movs	r2, #0
 8010950:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010952:	f04f 32ff 	mov.w	r2, #4294967295
 8010956:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010958:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801095a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 801095c:	e004      	b.n	8010968 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 801095e:	2009      	movs	r0, #9
}
 8010960:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010962:	2009      	movs	r0, #9
 8010964:	e000      	b.n	8010968 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010966:	200e      	movs	r0, #14
}
 8010968:	b00f      	add	sp, #60	; 0x3c
 801096a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801096c:	200f      	movs	r0, #15
 801096e:	e7fb      	b.n	8010968 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8010970:	2003      	movs	r0, #3
 8010972:	e7f9      	b.n	8010968 <LoRaMacCryptoHandleJoinAccept+0xe8>
 8010974:	200043f4 	.word	0x200043f4

08010978 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010978:	2800      	cmp	r0, #0
 801097a:	d049      	beq.n	8010a10 <LoRaMacParserJoinAccept+0x98>
{
 801097c:	b510      	push	{r4, lr}
 801097e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010980:	6801      	ldr	r1, [r0, #0]
 8010982:	2900      	cmp	r1, #0
 8010984:	d046      	beq.n	8010a14 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8010986:	f811 3b01 	ldrb.w	r3, [r1], #1
 801098a:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801098c:	2203      	movs	r2, #3
 801098e:	3006      	adds	r0, #6
 8010990:	f003 fa27 	bl	8013de2 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8010994:	4620      	mov	r0, r4
 8010996:	f850 1b09 	ldr.w	r1, [r0], #9
 801099a:	2203      	movs	r2, #3
 801099c:	3104      	adds	r1, #4
 801099e:	f003 fa20 	bl	8013de2 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80109a2:	6821      	ldr	r1, [r4, #0]
 80109a4:	79cb      	ldrb	r3, [r1, #7]
 80109a6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80109a8:	7a0a      	ldrb	r2, [r1, #8]
 80109aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80109ae:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80109b0:	7a4a      	ldrb	r2, [r1, #9]
 80109b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109b6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80109b8:	7a8a      	ldrb	r2, [r1, #10]
 80109ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80109be:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80109c0:	7acb      	ldrb	r3, [r1, #11]
 80109c2:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80109c4:	7b0b      	ldrb	r3, [r1, #12]
 80109c6:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80109c8:	7923      	ldrb	r3, [r4, #4]
 80109ca:	2b21      	cmp	r3, #33	; 0x21
 80109cc:	d018      	beq.n	8010a00 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80109ce:	2b11      	cmp	r3, #17
 80109d0:	dc22      	bgt.n	8010a18 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80109d2:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80109d4:	6821      	ldr	r1, [r4, #0]
 80109d6:	f102 0c01 	add.w	ip, r2, #1
 80109da:	5c8b      	ldrb	r3, [r1, r2]
 80109dc:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80109de:	1c90      	adds	r0, r2, #2
 80109e0:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80109e4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80109e8:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80109ea:	3203      	adds	r2, #3
 80109ec:	5c08      	ldrb	r0, [r1, r0]
 80109ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80109f2:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80109f4:	5c8a      	ldrb	r2, [r1, r2]
 80109f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80109fa:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80109fc:	2000      	movs	r0, #0
}
 80109fe:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8010a00:	2210      	movs	r2, #16
 8010a02:	310d      	adds	r1, #13
 8010a04:	f104 0012 	add.w	r0, r4, #18
 8010a08:	f003 f9eb 	bl	8013de2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8010a0c:	221d      	movs	r2, #29
 8010a0e:	e7e1      	b.n	80109d4 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 8010a10:	2002      	movs	r0, #2
}
 8010a12:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 8010a14:	2002      	movs	r0, #2
 8010a16:	e7f2      	b.n	80109fe <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 8010a18:	2001      	movs	r0, #1
 8010a1a:	e7f0      	b.n	80109fe <LoRaMacParserJoinAccept+0x86>

08010a1c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d058      	beq.n	8010ad2 <LoRaMacParserData+0xb6>
{
 8010a20:	b510      	push	{r4, lr}
 8010a22:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010a24:	6801      	ldr	r1, [r0, #0]
 8010a26:	2900      	cmp	r1, #0
 8010a28:	d055      	beq.n	8010ad6 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8010a2a:	780b      	ldrb	r3, [r1, #0]
 8010a2c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8010a2e:	784b      	ldrb	r3, [r1, #1]
 8010a30:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010a32:	788a      	ldrb	r2, [r1, #2]
 8010a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010a38:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010a3a:	78ca      	ldrb	r2, [r1, #3]
 8010a3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a40:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010a42:	790a      	ldrb	r2, [r1, #4]
 8010a44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010a48:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8010a4a:	794b      	ldrb	r3, [r1, #5]
 8010a4c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8010a4e:	798b      	ldrb	r3, [r1, #6]
 8010a50:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8010a52:	79ca      	ldrb	r2, [r1, #7]
 8010a54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010a58:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8010a5a:	7b02      	ldrb	r2, [r0, #12]
 8010a5c:	f002 020f 	and.w	r2, r2, #15
 8010a60:	3108      	adds	r1, #8
 8010a62:	3010      	adds	r0, #16
 8010a64:	f003 f9bd 	bl	8013de2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010a68:	7b23      	ldrb	r3, [r4, #12]
 8010a6a:	f003 030f 	and.w	r3, r3, #15
 8010a6e:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8010a72:	2200      	movs	r2, #0
 8010a74:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 8010a78:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8010a7c:	7922      	ldrb	r2, [r4, #4]
 8010a7e:	1a11      	subs	r1, r2, r0
 8010a80:	2904      	cmp	r1, #4
 8010a82:	dc16      	bgt.n	8010ab2 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8010a84:	6822      	ldr	r2, [r4, #0]
 8010a86:	7923      	ldrb	r3, [r4, #4]
 8010a88:	441a      	add	r2, r3
 8010a8a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 8010a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8010a90:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8010a94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8010a98:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8010a9a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8010a9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010aa2:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8010aa4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8010aa8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010aac:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8010aae:	2000      	movs	r0, #0
}
 8010ab0:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8010ab2:	6821      	ldr	r1, [r4, #0]
 8010ab4:	3309      	adds	r3, #9
 8010ab6:	5c08      	ldrb	r0, [r1, r0]
 8010ab8:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8010abc:	1ad2      	subs	r2, r2, r3
 8010abe:	b2d2      	uxtb	r2, r2
 8010ac0:	3a04      	subs	r2, #4
 8010ac2:	b2d2      	uxtb	r2, r2
 8010ac4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8010ac8:	4419      	add	r1, r3
 8010aca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010acc:	f003 f989 	bl	8013de2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8010ad0:	e7d8      	b.n	8010a84 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 8010ad2:	2002      	movs	r0, #2
}
 8010ad4:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 8010ad6:	2002      	movs	r0, #2
 8010ad8:	e7ea      	b.n	8010ab0 <LoRaMacParserData+0x94>

08010ada <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010ada:	b370      	cbz	r0, 8010b3a <LoRaMacSerializerJoinRequest+0x60>
{
 8010adc:	b510      	push	{r4, lr}
 8010ade:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010ae0:	6803      	ldr	r3, [r0, #0]
 8010ae2:	b363      	cbz	r3, 8010b3e <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8010ae4:	7902      	ldrb	r2, [r0, #4]
 8010ae6:	2a16      	cmp	r2, #22
 8010ae8:	d92b      	bls.n	8010b42 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8010aea:	7942      	ldrb	r2, [r0, #5]
 8010aec:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010aee:	4601      	mov	r1, r0
 8010af0:	f851 0b06 	ldr.w	r0, [r1], #6
 8010af4:	2208      	movs	r2, #8
 8010af6:	3001      	adds	r0, #1
 8010af8:	f003 f97e 	bl	8013df8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8010afc:	4621      	mov	r1, r4
 8010afe:	f851 0b0e 	ldr.w	r0, [r1], #14
 8010b02:	2208      	movs	r2, #8
 8010b04:	3009      	adds	r0, #9
 8010b06:	f003 f977 	bl	8013df8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8010b0a:	8ae2      	ldrh	r2, [r4, #22]
 8010b0c:	6823      	ldr	r3, [r4, #0]
 8010b0e:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8010b10:	8ae3      	ldrh	r3, [r4, #22]
 8010b12:	6822      	ldr	r2, [r4, #0]
 8010b14:	0a1b      	lsrs	r3, r3, #8
 8010b16:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8010b18:	69a2      	ldr	r2, [r4, #24]
 8010b1a:	6823      	ldr	r3, [r4, #0]
 8010b1c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8010b1e:	69a3      	ldr	r3, [r4, #24]
 8010b20:	0a1b      	lsrs	r3, r3, #8
 8010b22:	6822      	ldr	r2, [r4, #0]
 8010b24:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8010b26:	8b62      	ldrh	r2, [r4, #26]
 8010b28:	6823      	ldr	r3, [r4, #0]
 8010b2a:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8010b2c:	7ee2      	ldrb	r2, [r4, #27]
 8010b2e:	6823      	ldr	r3, [r4, #0]
 8010b30:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 8010b32:	2317      	movs	r3, #23
 8010b34:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8010b36:	2000      	movs	r0, #0
}
 8010b38:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8010b3a:	2001      	movs	r0, #1
}
 8010b3c:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8010b3e:	2001      	movs	r0, #1
 8010b40:	e7fa      	b.n	8010b38 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8010b42:	2002      	movs	r0, #2
 8010b44:	e7f8      	b.n	8010b38 <LoRaMacSerializerJoinRequest+0x5e>

08010b46 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d066      	beq.n	8010c18 <LoRaMacSerializerData+0xd2>
{
 8010b4a:	b538      	push	{r3, r4, r5, lr}
 8010b4c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010b4e:	6801      	ldr	r1, [r0, #0]
 8010b50:	2900      	cmp	r1, #0
 8010b52:	d063      	beq.n	8010c1c <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010b54:	7b02      	ldrb	r2, [r0, #12]
 8010b56:	f002 020f 	and.w	r2, r2, #15
 8010b5a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 8010b5e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010b62:	b10b      	cbz	r3, 8010b68 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8010b64:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8010b68:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8010b6a:	3304      	adds	r3, #4
 8010b6c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 8010b6e:	7922      	ldrb	r2, [r4, #4]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d355      	bcc.n	8010c20 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8010b74:	7963      	ldrb	r3, [r4, #5]
 8010b76:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8010b78:	68a2      	ldr	r2, [r4, #8]
 8010b7a:	6823      	ldr	r3, [r4, #0]
 8010b7c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8010b7e:	68a3      	ldr	r3, [r4, #8]
 8010b80:	0a1b      	lsrs	r3, r3, #8
 8010b82:	6822      	ldr	r2, [r4, #0]
 8010b84:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8010b86:	8962      	ldrh	r2, [r4, #10]
 8010b88:	6823      	ldr	r3, [r4, #0]
 8010b8a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8010b8c:	7ae2      	ldrb	r2, [r4, #11]
 8010b8e:	6823      	ldr	r3, [r4, #0]
 8010b90:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8010b92:	6823      	ldr	r3, [r4, #0]
 8010b94:	7b22      	ldrb	r2, [r4, #12]
 8010b96:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8010b98:	89e2      	ldrh	r2, [r4, #14]
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8010b9e:	89e3      	ldrh	r3, [r4, #14]
 8010ba0:	6822      	ldr	r2, [r4, #0]
 8010ba2:	0a1b      	lsrs	r3, r3, #8
 8010ba4:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8010ba6:	4621      	mov	r1, r4
 8010ba8:	f851 0b10 	ldr.w	r0, [r1], #16
 8010bac:	7b22      	ldrb	r2, [r4, #12]
 8010bae:	f002 020f 	and.w	r2, r2, #15
 8010bb2:	3008      	adds	r0, #8
 8010bb4:	f003 f915 	bl	8013de2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010bb8:	7b23      	ldrb	r3, [r4, #12]
 8010bba:	f003 030f 	and.w	r3, r3, #15
 8010bbe:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 8010bc2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8010bc6:	b12a      	cbz	r2, 8010bd4 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8010bc8:	6822      	ldr	r2, [r4, #0]
 8010bca:	f894 1020 	ldrb.w	r1, [r4, #32]
 8010bce:	5551      	strb	r1, [r2, r5]
 8010bd0:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8010bd4:	6820      	ldr	r0, [r4, #0]
 8010bd6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8010bda:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010bdc:	4428      	add	r0, r5
 8010bde:	f003 f900 	bl	8013de2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8010be2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010be6:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8010be8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010bea:	6821      	ldr	r1, [r4, #0]
 8010bec:	1c5a      	adds	r2, r3, #1
 8010bee:	b292      	uxth	r2, r2
 8010bf0:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8010bf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010bf4:	0a08      	lsrs	r0, r1, #8
 8010bf6:	6825      	ldr	r5, [r4, #0]
 8010bf8:	1c99      	adds	r1, r3, #2
 8010bfa:	b289      	uxth	r1, r1
 8010bfc:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8010bfe:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8010c00:	6820      	ldr	r0, [r4, #0]
 8010c02:	1cda      	adds	r2, r3, #3
 8010c04:	b292      	uxth	r2, r2
 8010c06:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8010c08:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8010c0c:	6821      	ldr	r1, [r4, #0]
 8010c0e:	3304      	adds	r3, #4
 8010c10:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 8010c12:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8010c14:	2000      	movs	r0, #0
}
 8010c16:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8010c18:	2001      	movs	r0, #1
}
 8010c1a:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8010c1c:	2001      	movs	r0, #1
 8010c1e:	e7fa      	b.n	8010c16 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8010c20:	2002      	movs	r0, #2
 8010c22:	e7f8      	b.n	8010c16 <LoRaMacSerializerData+0xd0>

08010c24 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 8010c24:	4b02      	ldr	r3, [pc, #8]	; (8010c30 <NvmDataMgmtEvent+0xc>)
 8010c26:	881a      	ldrh	r2, [r3, #0]
 8010c28:	4310      	orrs	r0, r2
 8010c2a:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8010c2c:	4770      	bx	lr
 8010c2e:	bf00      	nop
 8010c30:	200043f8 	.word	0x200043f8

08010c34 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 8010c34:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 8010c36:	4b06      	ldr	r3, [pc, #24]	; (8010c50 <NvmDataMgmtStoreBegin+0x1c>)
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	b11b      	cbz	r3, 8010c44 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 8010c3c:	f7fe f85a 	bl	800ecf4 <LoRaMacStop>
 8010c40:	b918      	cbnz	r0, 8010c4a <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010c42:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 8010c44:	f06f 0001 	mvn.w	r0, #1
 8010c48:	e7fb      	b.n	8010c42 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 8010c4a:	f06f 0002 	mvn.w	r0, #2
 8010c4e:	e7f8      	b.n	8010c42 <NvmDataMgmtStoreBegin+0xe>
 8010c50:	200043f8 	.word	0x200043f8

08010c54 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 8010c54:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010c56:	2400      	movs	r4, #0
 8010c58:	4b02      	ldr	r3, [pc, #8]	; (8010c64 <NvmDataMgmtStoreEnd+0x10>)
 8010c5a:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 8010c5c:	f7fe f83e 	bl	800ecdc <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010c60:	4620      	mov	r0, r4
 8010c62:	bd10      	pop	{r4, pc}
 8010c64:	200043f8 	.word	0x200043f8

08010c68 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 8010c68:	b128      	cbz	r0, 8010c76 <RegionIsActive+0xe>
 8010c6a:	2808      	cmp	r0, #8
 8010c6c:	d001      	beq.n	8010c72 <RegionIsActive+0xa>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8010c6e:	2000      	movs	r0, #0
        }
    }
}
 8010c70:	4770      	bx	lr
    switch( region )
 8010c72:	2001      	movs	r0, #1
 8010c74:	4770      	bx	lr
 8010c76:	2001      	movs	r0, #1
 8010c78:	4770      	bx	lr

08010c7a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8010c7a:	b500      	push	{lr}
 8010c7c:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 8010c7e:	2300      	movs	r3, #0
 8010c80:	9300      	str	r3, [sp, #0]
    switch( region )
 8010c82:	b120      	cbz	r0, 8010c8e <RegionGetPhyParam+0x14>
 8010c84:	2808      	cmp	r0, #8
 8010c86:	d00a      	beq.n	8010c9e <RegionGetPhyParam+0x24>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8010c88:	9b00      	ldr	r3, [sp, #0]
 8010c8a:	9301      	str	r3, [sp, #4]
 8010c8c:	e003      	b.n	8010c96 <RegionGetPhyParam+0x1c>
        AS923_GET_PHY_PARAM( );
 8010c8e:	4608      	mov	r0, r1
 8010c90:	f000 f952 	bl	8010f38 <RegionAS923GetPhyParam>
 8010c94:	9001      	str	r0, [sp, #4]
        }
    }
}
 8010c96:	9801      	ldr	r0, [sp, #4]
 8010c98:	b003      	add	sp, #12
 8010c9a:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 8010c9e:	4608      	mov	r0, r1
 8010ca0:	f001 fbbe 	bl	8012420 <RegionUS915GetPhyParam>
 8010ca4:	9001      	str	r0, [sp, #4]
 8010ca6:	e7f6      	b.n	8010c96 <RegionGetPhyParam+0x1c>

08010ca8 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8010ca8:	b508      	push	{r3, lr}
    switch( region )
 8010caa:	b110      	cbz	r0, 8010cb2 <RegionSetBandTxDone+0xa>
 8010cac:	2808      	cmp	r0, #8
 8010cae:	d004      	beq.n	8010cba <RegionSetBandTxDone+0x12>
        default:
        {
            return;
        }
    }
}
 8010cb0:	bd08      	pop	{r3, pc}
        AS923_SET_BAND_TX_DONE( );
 8010cb2:	4608      	mov	r0, r1
 8010cb4:	f000 fa44 	bl	8011140 <RegionAS923SetBandTxDone>
 8010cb8:	e7fa      	b.n	8010cb0 <RegionSetBandTxDone+0x8>
        US915_SET_BAND_TX_DONE( );
 8010cba:	4608      	mov	r0, r1
 8010cbc:	f001 fc86 	bl	80125cc <RegionUS915SetBandTxDone>
 8010cc0:	e7f6      	b.n	8010cb0 <RegionSetBandTxDone+0x8>

08010cc2 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8010cc2:	b508      	push	{r3, lr}
    switch( region )
 8010cc4:	b110      	cbz	r0, 8010ccc <RegionInitDefaults+0xa>
 8010cc6:	2808      	cmp	r0, #8
 8010cc8:	d004      	beq.n	8010cd4 <RegionInitDefaults+0x12>
        default:
        {
            break;
        }
    }
}
 8010cca:	bd08      	pop	{r3, pc}
        AS923_INIT_DEFAULTS( );
 8010ccc:	4608      	mov	r0, r1
 8010cce:	f000 fa55 	bl	801117c <RegionAS923InitDefaults>
 8010cd2:	e7fa      	b.n	8010cca <RegionInitDefaults+0x8>
        US915_INIT_DEFAULTS( );
 8010cd4:	4608      	mov	r0, r1
 8010cd6:	f001 fc97 	bl	8012608 <RegionUS915InitDefaults>
}
 8010cda:	e7f6      	b.n	8010cca <RegionInitDefaults+0x8>

08010cdc <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010cdc:	b508      	push	{r3, lr}
 8010cde:	460b      	mov	r3, r1
 8010ce0:	4611      	mov	r1, r2
    switch( region )
 8010ce2:	b118      	cbz	r0, 8010cec <RegionVerify+0x10>
 8010ce4:	2808      	cmp	r0, #8
 8010ce6:	d005      	beq.n	8010cf4 <RegionVerify+0x18>
 8010ce8:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8010cea:	bd08      	pop	{r3, pc}
        AS923_VERIFY( );
 8010cec:	4618      	mov	r0, r3
 8010cee:	f000 fa9f 	bl	8011230 <RegionAS923Verify>
 8010cf2:	e7fa      	b.n	8010cea <RegionVerify+0xe>
        US915_VERIFY( );
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f001 fd2b 	bl	8012750 <RegionUS915Verify>
 8010cfa:	e7f6      	b.n	8010cea <RegionVerify+0xe>

08010cfc <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8010cfc:	b508      	push	{r3, lr}
    switch( region )
 8010cfe:	b110      	cbz	r0, 8010d06 <RegionApplyCFList+0xa>
 8010d00:	2808      	cmp	r0, #8
 8010d02:	d004      	beq.n	8010d0e <RegionApplyCFList+0x12>
        default:
        {
            break;
        }
    }
}
 8010d04:	bd08      	pop	{r3, pc}
        AS923_APPLY_CF_LIST( );
 8010d06:	4608      	mov	r0, r1
 8010d08:	f000 fe5a 	bl	80119c0 <RegionAS923ApplyCFList>
 8010d0c:	e7fa      	b.n	8010d04 <RegionApplyCFList+0x8>
        US915_APPLY_CF_LIST( );
 8010d0e:	4608      	mov	r0, r1
 8010d10:	f001 fd58 	bl	80127c4 <RegionUS915ApplyCFList>
}
 8010d14:	e7f6      	b.n	8010d04 <RegionApplyCFList+0x8>

08010d16 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8010d16:	b508      	push	{r3, lr}
    switch( region )
 8010d18:	b118      	cbz	r0, 8010d22 <RegionChanMaskSet+0xc>
 8010d1a:	2808      	cmp	r0, #8
 8010d1c:	d005      	beq.n	8010d2a <RegionChanMaskSet+0x14>
 8010d1e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8010d20:	bd08      	pop	{r3, pc}
        AS923_CHAN_MASK_SET( );
 8010d22:	4608      	mov	r0, r1
 8010d24:	f000 fad6 	bl	80112d4 <RegionAS923ChanMaskSet>
 8010d28:	e7fa      	b.n	8010d20 <RegionChanMaskSet+0xa>
        US915_CHAN_MASK_SET( );
 8010d2a:	4608      	mov	r0, r1
 8010d2c:	f001 fd88 	bl	8012840 <RegionUS915ChanMaskSet>
 8010d30:	e7f6      	b.n	8010d20 <RegionChanMaskSet+0xa>

08010d32 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010d32:	b508      	push	{r3, lr}
 8010d34:	468c      	mov	ip, r1
 8010d36:	4611      	mov	r1, r2
 8010d38:	461a      	mov	r2, r3
    switch( region )
 8010d3a:	b110      	cbz	r0, 8010d42 <RegionComputeRxWindowParameters+0x10>
 8010d3c:	2808      	cmp	r0, #8
 8010d3e:	d005      	beq.n	8010d4c <RegionComputeRxWindowParameters+0x1a>
        default:
        {
            break;
        }
    }
}
 8010d40:	bd08      	pop	{r3, pc}
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8010d42:	9b02      	ldr	r3, [sp, #8]
 8010d44:	4660      	mov	r0, ip
 8010d46:	f000 fae3 	bl	8011310 <RegionAS923ComputeRxWindowParameters>
 8010d4a:	e7f9      	b.n	8010d40 <RegionComputeRxWindowParameters+0xe>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8010d4c:	9b02      	ldr	r3, [sp, #8]
 8010d4e:	4660      	mov	r0, ip
 8010d50:	f001 fdb8 	bl	80128c4 <RegionUS915ComputeRxWindowParameters>
}
 8010d54:	e7f4      	b.n	8010d40 <RegionComputeRxWindowParameters+0xe>

08010d56 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010d56:	b508      	push	{r3, lr}
 8010d58:	460b      	mov	r3, r1
 8010d5a:	4611      	mov	r1, r2
    switch( region )
 8010d5c:	b118      	cbz	r0, 8010d66 <RegionRxConfig+0x10>
 8010d5e:	2808      	cmp	r0, #8
 8010d60:	d005      	beq.n	8010d6e <RegionRxConfig+0x18>
 8010d62:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8010d64:	bd08      	pop	{r3, pc}
        AS923_RX_CONFIG( );
 8010d66:	4618      	mov	r0, r3
 8010d68:	f000 fb08 	bl	801137c <RegionAS923RxConfig>
 8010d6c:	e7fa      	b.n	8010d64 <RegionRxConfig+0xe>
        US915_RX_CONFIG( );
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f001 fdd6 	bl	8012920 <RegionUS915RxConfig>
 8010d74:	e7f6      	b.n	8010d64 <RegionRxConfig+0xe>

08010d76 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010d76:	b508      	push	{r3, lr}
 8010d78:	468c      	mov	ip, r1
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	461a      	mov	r2, r3
    switch( region )
 8010d7e:	b118      	cbz	r0, 8010d88 <RegionTxConfig+0x12>
 8010d80:	2808      	cmp	r0, #8
 8010d82:	d005      	beq.n	8010d90 <RegionTxConfig+0x1a>
 8010d84:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8010d86:	bd08      	pop	{r3, pc}
        AS923_TX_CONFIG( );
 8010d88:	4660      	mov	r0, ip
 8010d8a:	f000 fb7b 	bl	8011484 <RegionAS923TxConfig>
 8010d8e:	e7fa      	b.n	8010d86 <RegionTxConfig+0x10>
        US915_TX_CONFIG( );
 8010d90:	4660      	mov	r0, ip
 8010d92:	f001 fe1f 	bl	80129d4 <RegionUS915TxConfig>
 8010d96:	e7f6      	b.n	8010d86 <RegionTxConfig+0x10>

08010d98 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010d98:	b500      	push	{lr}
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	468c      	mov	ip, r1
 8010d9e:	4611      	mov	r1, r2
 8010da0:	461a      	mov	r2, r3
    switch( region )
 8010da2:	b128      	cbz	r0, 8010db0 <RegionLinkAdrReq+0x18>
 8010da4:	2808      	cmp	r0, #8
 8010da6:	d00a      	beq.n	8010dbe <RegionLinkAdrReq+0x26>
 8010da8:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010daa:	b003      	add	sp, #12
 8010dac:	f85d fb04 	ldr.w	pc, [sp], #4
        AS923_LINK_ADR_REQ( );
 8010db0:	9b05      	ldr	r3, [sp, #20]
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	9b04      	ldr	r3, [sp, #16]
 8010db6:	4660      	mov	r0, ip
 8010db8:	f000 fbfc 	bl	80115b4 <RegionAS923LinkAdrReq>
 8010dbc:	e7f5      	b.n	8010daa <RegionLinkAdrReq+0x12>
        US915_LINK_ADR_REQ( );
 8010dbe:	9b05      	ldr	r3, [sp, #20]
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	9b04      	ldr	r3, [sp, #16]
 8010dc4:	4660      	mov	r0, ip
 8010dc6:	f001 fe7f 	bl	8012ac8 <RegionUS915LinkAdrReq>
 8010dca:	e7ee      	b.n	8010daa <RegionLinkAdrReq+0x12>

08010dcc <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8010dcc:	b508      	push	{r3, lr}
    switch( region )
 8010dce:	b118      	cbz	r0, 8010dd8 <RegionRxParamSetupReq+0xc>
 8010dd0:	2808      	cmp	r0, #8
 8010dd2:	d005      	beq.n	8010de0 <RegionRxParamSetupReq+0x14>
 8010dd4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010dd6:	bd08      	pop	{r3, pc}
        AS923_RX_PARAM_SETUP_REQ( );
 8010dd8:	4608      	mov	r0, r1
 8010dda:	f000 fcb1 	bl	8011740 <RegionAS923RxParamSetupReq>
 8010dde:	e7fa      	b.n	8010dd6 <RegionRxParamSetupReq+0xa>
        US915_RX_PARAM_SETUP_REQ( );
 8010de0:	4608      	mov	r0, r1
 8010de2:	f001 ffbd 	bl	8012d60 <RegionUS915RxParamSetupReq>
 8010de6:	e7f6      	b.n	8010dd6 <RegionRxParamSetupReq+0xa>

08010de8 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8010de8:	b508      	push	{r3, lr}
    switch( region )
 8010dea:	b118      	cbz	r0, 8010df4 <RegionNewChannelReq+0xc>
 8010dec:	2808      	cmp	r0, #8
 8010dee:	d005      	beq.n	8010dfc <RegionNewChannelReq+0x14>
 8010df0:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010df2:	bd08      	pop	{r3, pc}
        AS923_NEW_CHANNEL_REQ( );
 8010df4:	4608      	mov	r0, r1
 8010df6:	f000 fe24 	bl	8011a42 <RegionAS923NewChannelReq>
 8010dfa:	e7fa      	b.n	8010df2 <RegionNewChannelReq+0xa>
        US915_NEW_CHANNEL_REQ( );
 8010dfc:	4608      	mov	r0, r1
 8010dfe:	f001 ffda 	bl	8012db6 <RegionUS915NewChannelReq>
 8010e02:	e7f6      	b.n	8010df2 <RegionNewChannelReq+0xa>

08010e04 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8010e04:	b508      	push	{r3, lr}
    switch( region )
 8010e06:	b118      	cbz	r0, 8010e10 <RegionTxParamSetupReq+0xc>
 8010e08:	2808      	cmp	r0, #8
 8010e0a:	d005      	beq.n	8010e18 <RegionTxParamSetupReq+0x14>
 8010e0c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010e0e:	bd08      	pop	{r3, pc}
        AS923_TX_PARAM_SETUP_REQ( );
 8010e10:	4608      	mov	r0, r1
 8010e12:	f000 fcb2 	bl	801177a <RegionAS923TxParamSetupReq>
 8010e16:	e7fa      	b.n	8010e0e <RegionTxParamSetupReq+0xa>
        US915_TX_PARAM_SETUP_REQ( );
 8010e18:	4608      	mov	r0, r1
 8010e1a:	f001 ffcf 	bl	8012dbc <RegionUS915TxParamSetupReq>
 8010e1e:	e7f6      	b.n	8010e0e <RegionTxParamSetupReq+0xa>

08010e20 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8010e20:	b508      	push	{r3, lr}
    switch( region )
 8010e22:	b118      	cbz	r0, 8010e2c <RegionDlChannelReq+0xc>
 8010e24:	2808      	cmp	r0, #8
 8010e26:	d005      	beq.n	8010e34 <RegionDlChannelReq+0x14>
 8010e28:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010e2a:	bd08      	pop	{r3, pc}
        AS923_DL_CHANNEL_REQ( );
 8010e2c:	4608      	mov	r0, r1
 8010e2e:	f000 fca7 	bl	8011780 <RegionAS923DlChannelReq>
 8010e32:	e7fa      	b.n	8010e2a <RegionDlChannelReq+0xa>
        US915_DL_CHANNEL_REQ( );
 8010e34:	4608      	mov	r0, r1
 8010e36:	f001 ffc4 	bl	8012dc2 <RegionUS915DlChannelReq>
 8010e3a:	e7f6      	b.n	8010e2a <RegionDlChannelReq+0xa>

08010e3c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8010e3c:	b508      	push	{r3, lr}
 8010e3e:	460b      	mov	r3, r1
 8010e40:	4611      	mov	r1, r2
    switch( region )
 8010e42:	b118      	cbz	r0, 8010e4c <RegionAlternateDr+0x10>
 8010e44:	2808      	cmp	r0, #8
 8010e46:	d005      	beq.n	8010e54 <RegionAlternateDr+0x18>
 8010e48:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010e4a:	bd08      	pop	{r3, pc}
        AS923_ALTERNATE_DR( );
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f000 fcbd 	bl	80117cc <RegionAS923AlternateDr>
 8010e52:	e7fa      	b.n	8010e4a <RegionAlternateDr+0xe>
        US915_ALTERNATE_DR( );
 8010e54:	4618      	mov	r0, r3
 8010e56:	f001 ffb7 	bl	8012dc8 <RegionUS915AlternateDr>
 8010e5a:	e7f6      	b.n	8010e4a <RegionAlternateDr+0xe>

08010e5c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010e5c:	b508      	push	{r3, lr}
 8010e5e:	468c      	mov	ip, r1
 8010e60:	4611      	mov	r1, r2
 8010e62:	461a      	mov	r2, r3
    switch( region )
 8010e64:	b118      	cbz	r0, 8010e6e <RegionNextChannel+0x12>
 8010e66:	2808      	cmp	r0, #8
 8010e68:	d006      	beq.n	8010e78 <RegionNextChannel+0x1c>
 8010e6a:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 8010e6c:	bd08      	pop	{r3, pc}
        AS923_NEXT_CHANNEL( );
 8010e6e:	9b02      	ldr	r3, [sp, #8]
 8010e70:	4660      	mov	r0, ip
 8010e72:	f000 fcad 	bl	80117d0 <RegionAS923NextChannel>
 8010e76:	e7f9      	b.n	8010e6c <RegionNextChannel+0x10>
        US915_NEXT_CHANNEL( );
 8010e78:	9b02      	ldr	r3, [sp, #8]
 8010e7a:	4660      	mov	r0, ip
 8010e7c:	f001 ffc6 	bl	8012e0c <RegionUS915NextChannel>
 8010e80:	e7f4      	b.n	8010e6c <RegionNextChannel+0x10>

08010e82 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8010e82:	b508      	push	{r3, lr}
 8010e84:	468c      	mov	ip, r1
 8010e86:	4611      	mov	r1, r2
 8010e88:	461a      	mov	r2, r3
    switch( region )
 8010e8a:	b118      	cbz	r0, 8010e94 <RegionApplyDrOffset+0x12>
 8010e8c:	2808      	cmp	r0, #8
 8010e8e:	d005      	beq.n	8010e9c <RegionApplyDrOffset+0x1a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8010e90:	b2c8      	uxtb	r0, r1
 8010e92:	e002      	b.n	8010e9a <RegionApplyDrOffset+0x18>
        AS923_APPLY_DR_OFFSET( );
 8010e94:	4660      	mov	r0, ip
 8010e96:	f000 fdff 	bl	8011a98 <RegionAS923ApplyDrOffset>
        }
    }
}
 8010e9a:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 8010e9c:	4660      	mov	r0, ip
 8010e9e:	f002 f863 	bl	8012f68 <RegionUS915ApplyDrOffset>
 8010ea2:	e7fa      	b.n	8010e9a <RegionApplyDrOffset+0x18>

08010ea4 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 8010ea4:	4800      	ldr	r0, [pc, #0]	; (8010ea8 <RegionGetVersion+0x4>)
 8010ea6:	4770      	bx	lr
 8010ea8:	02010001 	.word	0x02010001

08010eac <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8010eac:	b510      	push	{r4, lr}
 8010eae:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8010eb0:	4b05      	ldr	r3, [pc, #20]	; (8010ec8 <VerifyRfFreq+0x1c>)
 8010eb2:	6a1b      	ldr	r3, [r3, #32]
 8010eb4:	4798      	blx	r3
 8010eb6:	b120      	cbz	r0, 8010ec2 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8010eb8:	4b04      	ldr	r3, [pc, #16]	; (8010ecc <VerifyRfFreq+0x20>)
 8010eba:	4423      	add	r3, r4
 8010ebc:	4a04      	ldr	r2, [pc, #16]	; (8010ed0 <VerifyRfFreq+0x24>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d800      	bhi.n	8010ec4 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 8010ec2:	bd10      	pop	{r4, pc}
        return false;
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	e7fc      	b.n	8010ec2 <VerifyRfFreq+0x16>
 8010ec8:	0801885c 	.word	0x0801885c
 8010ecc:	c9763540 	.word	0xc9763540
 8010ed0:	00c65d40 	.word	0x00c65d40

08010ed4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8010ed4:	b570      	push	{r4, r5, r6, lr}
 8010ed6:	b084      	sub	sp, #16
 8010ed8:	4605      	mov	r5, r0
 8010eda:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAS923[datarate];
 8010edc:	4b13      	ldr	r3, [pc, #76]	; (8010f2c <GetTimeOnAir+0x58>)
 8010ede:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8010ee0:	4913      	ldr	r1, [pc, #76]	; (8010f30 <GetTimeOnAir+0x5c>)
 8010ee2:	f001 f9ef 	bl	80122c4 <RegionCommonGetBandwidth>
 8010ee6:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8010ee8:	2d07      	cmp	r5, #7
 8010eea:	d00e      	beq.n	8010f0a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8010eec:	4b11      	ldr	r3, [pc, #68]	; (8010f34 <GetTimeOnAir+0x60>)
 8010eee:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010ef0:	2001      	movs	r0, #1
 8010ef2:	9003      	str	r0, [sp, #12]
 8010ef4:	b2e4      	uxtb	r4, r4
 8010ef6:	9402      	str	r4, [sp, #8]
 8010ef8:	2300      	movs	r3, #0
 8010efa:	9301      	str	r3, [sp, #4]
 8010efc:	2308      	movs	r3, #8
 8010efe:	9300      	str	r3, [sp, #0]
 8010f00:	4603      	mov	r3, r0
 8010f02:	4632      	mov	r2, r6
 8010f04:	47a8      	blx	r5
    }
    return timeOnAir;
}
 8010f06:	b004      	add	sp, #16
 8010f08:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8010f0a:	4b0a      	ldr	r3, [pc, #40]	; (8010f34 <GetTimeOnAir+0x60>)
 8010f0c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010f0e:	2301      	movs	r3, #1
 8010f10:	9303      	str	r3, [sp, #12]
 8010f12:	b2e4      	uxtb	r4, r4
 8010f14:	9402      	str	r4, [sp, #8]
 8010f16:	2000      	movs	r0, #0
 8010f18:	9001      	str	r0, [sp, #4]
 8010f1a:	2305      	movs	r3, #5
 8010f1c:	9300      	str	r3, [sp, #0]
 8010f1e:	4603      	mov	r3, r0
 8010f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010f24:	fb06 f202 	mul.w	r2, r6, r2
 8010f28:	47a8      	blx	r5
 8010f2a:	e7ec      	b.n	8010f06 <GetTimeOnAir+0x32>
 8010f2c:	0801812c 	.word	0x0801812c
 8010f30:	0801810c 	.word	0x0801810c
 8010f34:	0801885c 	.word	0x0801885c

08010f38 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8010f38:	b500      	push	{lr}
 8010f3a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	9304      	str	r3, [sp, #16]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8010f40:	7803      	ldrb	r3, [r0, #0]
 8010f42:	3b01      	subs	r3, #1
 8010f44:	2b37      	cmp	r3, #55	; 0x37
 8010f46:	d845      	bhi.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
 8010f48:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010f4c:	003d0038 	.word	0x003d0038
 8010f50:	00440044 	.word	0x00440044
 8010f54:	00420044 	.word	0x00420044
 8010f58:	00440044 	.word	0x00440044
 8010f5c:	00440044 	.word	0x00440044
 8010f60:	00660063 	.word	0x00660063
 8010f64:	00770069 	.word	0x00770069
 8010f68:	00850044 	.word	0x00850044
 8010f6c:	008d0089 	.word	0x008d0089
 8010f70:	00950091 	.word	0x00950091
 8010f74:	00440099 	.word	0x00440099
 8010f78:	00a500a2 	.word	0x00a500a2
 8010f7c:	00ae00a8 	.word	0x00ae00a8
 8010f80:	00b700b4 	.word	0x00b700b4
 8010f84:	004400bb 	.word	0x004400bb
 8010f88:	00c200be 	.word	0x00c200be
 8010f8c:	00440049 	.word	0x00440049
 8010f90:	00440044 	.word	0x00440044
 8010f94:	00440044 	.word	0x00440044
 8010f98:	00440044 	.word	0x00440044
 8010f9c:	00440044 	.word	0x00440044
 8010fa0:	00440044 	.word	0x00440044
 8010fa4:	00440044 	.word	0x00440044
 8010fa8:	00c800c5 	.word	0x00c800c5
 8010fac:	004400cf 	.word	0x004400cf
 8010fb0:	00d20044 	.word	0x00d20044
 8010fb4:	004400d5 	.word	0x004400d5
 8010fb8:	00de00d8 	.word	0x00de00d8
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8010fbc:	78c3      	ldrb	r3, [r0, #3]
 8010fbe:	b14b      	cbz	r3, 8010fd4 <RegionAS923GetPhyParam+0x9c>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8010fc0:	2302      	movs	r3, #2
 8010fc2:	9304      	str	r3, [sp, #16]
 8010fc4:	e006      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8010fc6:	7883      	ldrb	r3, [r0, #2]
 8010fc8:	b123      	cbz	r3, 8010fd4 <RegionAS923GetPhyParam+0x9c>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8010fca:	2302      	movs	r3, #2
 8010fcc:	9304      	str	r3, [sp, #16]
 8010fce:	e001      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8010fd0:	2302      	movs	r3, #2
 8010fd2:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 8010fd4:	9804      	ldr	r0, [sp, #16]
 8010fd6:	9005      	str	r0, [sp, #20]
}
 8010fd8:	b007      	add	sp, #28
 8010fda:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8010fde:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010fe2:	f88d 3004 	strb.w	r3, [sp, #4]
 8010fe6:	2307      	movs	r3, #7
 8010fe8:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8010fec:	7883      	ldrb	r3, [r0, #2]
 8010fee:	b103      	cbz	r3, 8010ff2 <RegionAS923GetPhyParam+0xba>
 8010ff0:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010ff2:	f88d 3006 	strb.w	r3, [sp, #6]
 8010ff6:	2310      	movs	r3, #16
 8010ff8:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8010ffc:	4b46      	ldr	r3, [pc, #280]	; (8011118 <RegionAS923GetPhyParam+0x1e0>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011004:	9202      	str	r2, [sp, #8]
 8011006:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8011008:	a801      	add	r0, sp, #4
 801100a:	f001 f938 	bl	801227e <RegionCommonGetNextLowerTxDr>
 801100e:	9004      	str	r0, [sp, #16]
            break;
 8011010:	e7e0      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8011012:	2340      	movs	r3, #64	; 0x40
 8011014:	9304      	str	r3, [sp, #16]
            break;
 8011016:	e7dd      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8011018:	2320      	movs	r3, #32
 801101a:	9304      	str	r3, [sp, #16]
            break;
 801101c:	e7da      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            if( getPhy->UplinkDwellTime == 0 )
 801101e:	7883      	ldrb	r3, [r0, #2]
 8011020:	b92b      	cbnz	r3, 801102e <RegionAS923GetPhyParam+0xf6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8011022:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011026:	4a3d      	ldr	r2, [pc, #244]	; (801111c <RegionAS923GetPhyParam+0x1e4>)
 8011028:	5cd3      	ldrb	r3, [r2, r3]
 801102a:	9304      	str	r3, [sp, #16]
 801102c:	e7d2      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 801102e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011032:	4a3b      	ldr	r2, [pc, #236]	; (8011120 <RegionAS923GetPhyParam+0x1e8>)
 8011034:	5cd3      	ldrb	r3, [r2, r3]
 8011036:	9304      	str	r3, [sp, #16]
 8011038:	e7cc      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            if( getPhy->UplinkDwellTime == 0 )
 801103a:	7883      	ldrb	r3, [r0, #2]
 801103c:	b92b      	cbnz	r3, 801104a <RegionAS923GetPhyParam+0x112>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 801103e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011042:	4a38      	ldr	r2, [pc, #224]	; (8011124 <RegionAS923GetPhyParam+0x1ec>)
 8011044:	5cd3      	ldrb	r3, [r2, r3]
 8011046:	9304      	str	r3, [sp, #16]
 8011048:	e7c4      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 801104a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801104e:	4a34      	ldr	r2, [pc, #208]	; (8011120 <RegionAS923GetPhyParam+0x1e8>)
 8011050:	5cd3      	ldrb	r3, [r2, r3]
 8011052:	9304      	str	r3, [sp, #16]
 8011054:	e7be      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8011056:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801105a:	9304      	str	r3, [sp, #16]
            break;
 801105c:	e7ba      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011062:	9304      	str	r3, [sp, #16]
            break;
 8011064:	e7b6      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8011066:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801106a:	9304      	str	r3, [sp, #16]
            break;
 801106c:	e7b2      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801106e:	f241 3388 	movw	r3, #5000	; 0x1388
 8011072:	9304      	str	r3, [sp, #16]
            break;
 8011074:	e7ae      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8011076:	f241 7370 	movw	r3, #6000	; 0x1770
 801107a:	9304      	str	r3, [sp, #16]
            break;
 801107c:	e7aa      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801107e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011082:	4829      	ldr	r0, [pc, #164]	; (8011128 <RegionAS923GetPhyParam+0x1f0>)
 8011084:	f002 fea0 	bl	8013dc8 <randr>
 8011088:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801108c:	9004      	str	r0, [sp, #16]
            break;
 801108e:	e7a1      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8011090:	4b26      	ldr	r3, [pc, #152]	; (801112c <RegionAS923GetPhyParam+0x1f4>)
 8011092:	9304      	str	r3, [sp, #16]
            break;
 8011094:	e79e      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_RX_WND_2_DR;
 8011096:	2302      	movs	r3, #2
 8011098:	9304      	str	r3, [sp, #16]
            break;
 801109a:	e79b      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801109c:	4b1e      	ldr	r3, [pc, #120]	; (8011118 <RegionAS923GetPhyParam+0x1e0>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80110a4:	9304      	str	r3, [sp, #16]
            break;
 80110a6:	e795      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80110a8:	4b1b      	ldr	r3, [pc, #108]	; (8011118 <RegionAS923GetPhyParam+0x1e0>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80110b0:	9304      	str	r3, [sp, #16]
            break;
 80110b2:	e78f      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 80110b4:	2310      	movs	r3, #16
 80110b6:	9304      	str	r3, [sp, #16]
            break;
 80110b8:	e78c      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Channels = RegionNvmGroup2->Channels;
 80110ba:	4b17      	ldr	r3, [pc, #92]	; (8011118 <RegionAS923GetPhyParam+0x1e0>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	9304      	str	r3, [sp, #16]
            break;
 80110c0:	e788      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 80110c2:	2301      	movs	r3, #1
 80110c4:	9304      	str	r3, [sp, #16]
            break;
 80110c6:	e785      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 80110c8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80110cc:	9304      	str	r3, [sp, #16]
            break;
 80110ce:	e781      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 80110d0:	4b17      	ldr	r3, [pc, #92]	; (8011130 <RegionAS923GetPhyParam+0x1f8>)
 80110d2:	9304      	str	r3, [sp, #16]
            break;
 80110d4:	e77e      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80110d6:	4b17      	ldr	r3, [pc, #92]	; (8011134 <RegionAS923GetPhyParam+0x1fc>)
 80110d8:	9304      	str	r3, [sp, #16]
            break;
 80110da:	e77b      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 80110dc:	2311      	movs	r3, #17
 80110de:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 80110e2:	2301      	movs	r3, #1
 80110e4:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 80110e8:	e774      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 80110ea:	2303      	movs	r3, #3
 80110ec:	9304      	str	r3, [sp, #16]
            break;
 80110ee:	e771      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80110f0:	4b10      	ldr	r3, [pc, #64]	; (8011134 <RegionAS923GetPhyParam+0x1fc>)
 80110f2:	9304      	str	r3, [sp, #16]
            break;
 80110f4:	e76e      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 80110f6:	2303      	movs	r3, #3
 80110f8:	9304      	str	r3, [sp, #16]
            break;
 80110fa:	e76b      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 80110fc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011100:	4a0d      	ldr	r2, [pc, #52]	; (8011138 <RegionAS923GetPhyParam+0x200>)
 8011102:	5cd3      	ldrb	r3, [r2, r3]
 8011104:	9304      	str	r3, [sp, #16]
            break;
 8011106:	e765      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8011108:	490c      	ldr	r1, [pc, #48]	; (801113c <RegionAS923GetPhyParam+0x204>)
 801110a:	f990 0001 	ldrsb.w	r0, [r0, #1]
 801110e:	f001 f8d9 	bl	80122c4 <RegionCommonGetBandwidth>
 8011112:	9004      	str	r0, [sp, #16]
            break;
 8011114:	e75e      	b.n	8010fd4 <RegionAS923GetPhyParam+0x9c>
 8011116:	bf00      	nop
 8011118:	20004400 	.word	0x20004400
 801111c:	080181b4 	.word	0x080181b4
 8011120:	080181bc 	.word	0x080181bc
 8011124:	080181c4 	.word	0x080181c4
 8011128:	fffffc18 	.word	0xfffffc18
 801112c:	3706ea00 	.word	0x3706ea00
 8011130:	4009999a 	.word	0x4009999a
 8011134:	3709f740 	.word	0x3709f740
 8011138:	0801812c 	.word	0x0801812c
 801113c:	0801810c 	.word	0x0801810c

08011140 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8011140:	b510      	push	{r4, lr}
 8011142:	b082      	sub	sp, #8
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8011144:	4b0b      	ldr	r3, [pc, #44]	; (8011174 <RegionAS923SetBandTxDone+0x34>)
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	7803      	ldrb	r3, [r0, #0]
 801114a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801114e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011152:	7a5b      	ldrb	r3, [r3, #9]
 8011154:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8011158:	4b07      	ldr	r3, [pc, #28]	; (8011178 <RegionAS923SetBandTxDone+0x38>)
 801115a:	681c      	ldr	r4, [r3, #0]
 801115c:	6903      	ldr	r3, [r0, #16]
 801115e:	9300      	str	r3, [sp, #0]
 8011160:	68c3      	ldr	r3, [r0, #12]
 8011162:	7842      	ldrb	r2, [r0, #1]
 8011164:	6881      	ldr	r1, [r0, #8]
 8011166:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 801116a:	f000 fe61 	bl	8011e30 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 801116e:	b002      	add	sp, #8
 8011170:	bd10      	pop	{r4, pc}
 8011172:	bf00      	nop
 8011174:	20004400 	.word	0x20004400
 8011178:	200043fc 	.word	0x200043fc

0801117c <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 801117c:	b510      	push	{r4, lr}
 801117e:	b086      	sub	sp, #24
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8011180:	2364      	movs	r3, #100	; 0x64
 8011182:	f8ad 3000 	strh.w	r3, [sp]
 8011186:	2300      	movs	r3, #0
 8011188:	f88d 3002 	strb.w	r3, [sp, #2]
 801118c:	9301      	str	r3, [sp, #4]
 801118e:	9302      	str	r3, [sp, #8]
 8011190:	9303      	str	r3, [sp, #12]
 8011192:	9304      	str	r3, [sp, #16]
 8011194:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AS923_BAND0
    };

    switch( params->Type )
 8011198:	7b03      	ldrb	r3, [r0, #12]
 801119a:	2b01      	cmp	r3, #1
 801119c:	d02b      	beq.n	80111f6 <RegionAS923InitDefaults+0x7a>
 801119e:	2b02      	cmp	r3, #2
 80111a0:	d036      	beq.n	8011210 <RegionAS923InitDefaults+0x94>
 80111a2:	b10b      	cbz	r3, 80111a8 <RegionAS923InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_AS923 */
}
 80111a4:	b006      	add	sp, #24
 80111a6:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80111a8:	6803      	ldr	r3, [r0, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d0fa      	beq.n	80111a4 <RegionAS923InitDefaults+0x28>
 80111ae:	6843      	ldr	r3, [r0, #4]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d0f7      	beq.n	80111a4 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80111b4:	4c1b      	ldr	r4, [pc, #108]	; (8011224 <RegionAS923InitDefaults+0xa8>)
 80111b6:	6023      	str	r3, [r4, #0]
            RegionBands = (Band_t*) params->Bands;
 80111b8:	6880      	ldr	r0, [r0, #8]
 80111ba:	4b1b      	ldr	r3, [pc, #108]	; (8011228 <RegionAS923InitDefaults+0xac>)
 80111bc:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 80111be:	2218      	movs	r2, #24
 80111c0:	4669      	mov	r1, sp
 80111c2:	f002 fe0e 	bl	8013de2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 80111c6:	6824      	ldr	r4, [r4, #0]
 80111c8:	4b18      	ldr	r3, [pc, #96]	; (801122c <RegionAS923InitDefaults+0xb0>)
 80111ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80111ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 80111d2:	f104 0c0c 	add.w	ip, r4, #12
 80111d6:	330c      	adds	r3, #12
 80111d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80111dc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 80111e0:	2303      	movs	r3, #3
 80111e2:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80111e6:	2201      	movs	r2, #1
 80111e8:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 80111ec:	f504 7058 	add.w	r0, r4, #864	; 0x360
 80111f0:	f000 fe0f 	bl	8011e12 <RegionCommonChanMaskCopy>
            break;
 80111f4:	e7d6      	b.n	80111a4 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80111f6:	4b0b      	ldr	r3, [pc, #44]	; (8011224 <RegionAS923InitDefaults+0xa8>)
 80111f8:	6818      	ldr	r0, [r3, #0]
 80111fa:	2300      	movs	r3, #0
 80111fc:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80111fe:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8011200:	2201      	movs	r2, #1
 8011202:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8011206:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801120a:	f000 fe02 	bl	8011e12 <RegionCommonChanMaskCopy>
            break;
 801120e:	e7c9      	b.n	80111a4 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8011210:	4b04      	ldr	r3, [pc, #16]	; (8011224 <RegionAS923InitDefaults+0xa8>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8011218:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 801121c:	430a      	orrs	r2, r1
 801121e:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8011222:	e7bf      	b.n	80111a4 <RegionAS923InitDefaults+0x28>
 8011224:	20004400 	.word	0x20004400
 8011228:	200043fc 	.word	0x200043fc
 801122c:	08017a00 	.word	0x08017a00

08011230 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8011230:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8011232:	290a      	cmp	r1, #10
 8011234:	d84b      	bhi.n	80112ce <RegionAS923Verify+0x9e>
 8011236:	e8df f001 	tbb	[pc, r1]
 801123a:	4a06      	.short	0x4a06
 801123c:	0a4a4a4a 	.word	0x0a4a4a4a
 8011240:	404a2a20 	.word	0x404a2a20
 8011244:	40          	.byte	0x40
 8011245:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8011246:	6800      	ldr	r0, [r0, #0]
 8011248:	f7ff fe30 	bl	8010eac <VerifyRfFreq>
 801124c:	e040      	b.n	80112d0 <RegionAS923Verify+0xa0>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 801124e:	7883      	ldrb	r3, [r0, #2]
 8011250:	b94b      	cbnz	r3, 8011266 <RegionAS923Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8011252:	2207      	movs	r2, #7
 8011254:	2100      	movs	r1, #0
 8011256:	f990 0000 	ldrsb.w	r0, [r0]
 801125a:	f000 fd66 	bl	8011d2a <RegionCommonValueInRange>
 801125e:	3800      	subs	r0, #0
 8011260:	bf18      	it	ne
 8011262:	2001      	movne	r0, #1
 8011264:	e034      	b.n	80112d0 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8011266:	2207      	movs	r2, #7
 8011268:	2102      	movs	r1, #2
 801126a:	f990 0000 	ldrsb.w	r0, [r0]
 801126e:	f000 fd5c 	bl	8011d2a <RegionCommonValueInRange>
 8011272:	3800      	subs	r0, #0
 8011274:	bf18      	it	ne
 8011276:	2001      	movne	r0, #1
 8011278:	e02a      	b.n	80112d0 <RegionAS923Verify+0xa0>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801127a:	2205      	movs	r2, #5
 801127c:	2100      	movs	r1, #0
 801127e:	f990 0000 	ldrsb.w	r0, [r0]
 8011282:	f000 fd52 	bl	8011d2a <RegionCommonValueInRange>
 8011286:	3800      	subs	r0, #0
 8011288:	bf18      	it	ne
 801128a:	2001      	movne	r0, #1
 801128c:	e020      	b.n	80112d0 <RegionAS923Verify+0xa0>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 801128e:	7843      	ldrb	r3, [r0, #1]
 8011290:	b94b      	cbnz	r3, 80112a6 <RegionAS923Verify+0x76>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8011292:	2207      	movs	r2, #7
 8011294:	2100      	movs	r1, #0
 8011296:	f990 0000 	ldrsb.w	r0, [r0]
 801129a:	f000 fd46 	bl	8011d2a <RegionCommonValueInRange>
 801129e:	3800      	subs	r0, #0
 80112a0:	bf18      	it	ne
 80112a2:	2001      	movne	r0, #1
 80112a4:	e014      	b.n	80112d0 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 80112a6:	2207      	movs	r2, #7
 80112a8:	2102      	movs	r1, #2
 80112aa:	f990 0000 	ldrsb.w	r0, [r0]
 80112ae:	f000 fd3c 	bl	8011d2a <RegionCommonValueInRange>
 80112b2:	3800      	subs	r0, #0
 80112b4:	bf18      	it	ne
 80112b6:	2001      	movne	r0, #1
 80112b8:	e00a      	b.n	80112d0 <RegionAS923Verify+0xa0>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 80112ba:	2207      	movs	r2, #7
 80112bc:	2100      	movs	r1, #0
 80112be:	f990 0000 	ldrsb.w	r0, [r0]
 80112c2:	f000 fd32 	bl	8011d2a <RegionCommonValueInRange>
 80112c6:	3800      	subs	r0, #0
 80112c8:	bf18      	it	ne
 80112ca:	2001      	movne	r0, #1
 80112cc:	e000      	b.n	80112d0 <RegionAS923Verify+0xa0>
    switch( phyAttribute )
 80112ce:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 80112d0:	bd08      	pop	{r3, pc}
	...

080112d4 <RegionAS923ChanMaskSet>:
    }
#endif /* REGION_AS923 */
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80112d4:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 80112d6:	7903      	ldrb	r3, [r0, #4]
 80112d8:	b11b      	cbz	r3, 80112e2 <RegionAS923ChanMaskSet+0xe>
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d00b      	beq.n	80112f6 <RegionAS923ChanMaskSet+0x22>
 80112de:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 80112e0:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80112e2:	4b0a      	ldr	r3, [pc, #40]	; (801130c <RegionAS923ChanMaskSet+0x38>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2201      	movs	r2, #1
 80112e8:	6801      	ldr	r1, [r0, #0]
 80112ea:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80112ee:	f000 fd90 	bl	8011e12 <RegionCommonChanMaskCopy>
    return true;
 80112f2:	2001      	movs	r0, #1
            break;
 80112f4:	e7f4      	b.n	80112e0 <RegionAS923ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80112f6:	4b05      	ldr	r3, [pc, #20]	; (801130c <RegionAS923ChanMaskSet+0x38>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2201      	movs	r2, #1
 80112fc:	6801      	ldr	r1, [r0, #0]
 80112fe:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8011302:	f000 fd86 	bl	8011e12 <RegionCommonChanMaskCopy>
    return true;
 8011306:	2001      	movs	r0, #1
            break;
 8011308:	e7ea      	b.n	80112e0 <RegionAS923ChanMaskSet+0xc>
 801130a:	bf00      	nop
 801130c:	20004400 	.word	0x20004400

08011310 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011312:	b083      	sub	sp, #12
 8011314:	460e      	mov	r6, r1
 8011316:	4617      	mov	r7, r2
 8011318:	461c      	mov	r4, r3
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 801131a:	2807      	cmp	r0, #7
 801131c:	bfa8      	it	ge
 801131e:	2007      	movge	r0, #7
 8011320:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8011322:	4913      	ldr	r1, [pc, #76]	; (8011370 <RegionAS923ComputeRxWindowParameters+0x60>)
 8011324:	f000 ffce 	bl	80122c4 <RegionCommonGetBandwidth>
 8011328:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801132a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801132e:	2b07      	cmp	r3, #7
 8011330:	d017      	beq.n	8011362 <RegionAS923ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8011332:	4a0f      	ldr	r2, [pc, #60]	; (8011370 <RegionAS923ComputeRxWindowParameters+0x60>)
 8011334:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011338:	4a0e      	ldr	r2, [pc, #56]	; (8011374 <RegionAS923ComputeRxWindowParameters+0x64>)
 801133a:	5cd0      	ldrb	r0, [r2, r3]
 801133c:	f000 fe90 	bl	8012060 <RegionCommonComputeSymbolTimeLoRa>
 8011340:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8011342:	4b0d      	ldr	r3, [pc, #52]	; (8011378 <RegionAS923ComputeRxWindowParameters+0x68>)
 8011344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011346:	4798      	blx	r3
 8011348:	4603      	mov	r3, r0
 801134a:	f104 020c 	add.w	r2, r4, #12
 801134e:	9201      	str	r2, [sp, #4]
 8011350:	3408      	adds	r4, #8
 8011352:	9400      	str	r4, [sp, #0]
 8011354:	463a      	mov	r2, r7
 8011356:	4631      	mov	r1, r6
 8011358:	4628      	mov	r0, r5
 801135a:	f000 fe8f 	bl	801207c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 801135e:	b003      	add	sp, #12
 8011360:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8011362:	4a04      	ldr	r2, [pc, #16]	; (8011374 <RegionAS923ComputeRxWindowParameters+0x64>)
 8011364:	5cd0      	ldrb	r0, [r2, r3]
 8011366:	f000 fe83 	bl	8012070 <RegionCommonComputeSymbolTimeFsk>
 801136a:	4605      	mov	r5, r0
 801136c:	e7e9      	b.n	8011342 <RegionAS923ComputeRxWindowParameters+0x32>
 801136e:	bf00      	nop
 8011370:	0801810c 	.word	0x0801810c
 8011374:	0801812c 	.word	0x0801812c
 8011378:	0801885c 	.word	0x0801885c

0801137c <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801137c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011380:	b08a      	sub	sp, #40	; 0x28
 8011382:	4604      	mov	r4, r0
 8011384:	460f      	mov	r7, r1
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8011386:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801138a:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801138e:	4b37      	ldr	r3, [pc, #220]	; (801146c <RegionAS923RxConfig+0xf0>)
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	4798      	blx	r3
 8011394:	2800      	cmp	r0, #0
 8011396:	d167      	bne.n	8011468 <RegionAS923RxConfig+0xec>
 8011398:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801139a:	7ce3      	ldrb	r3, [r4, #19]
 801139c:	b983      	cbnz	r3, 80113c0 <RegionAS923RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801139e:	4b34      	ldr	r3, [pc, #208]	; (8011470 <RegionAS923RxConfig+0xf4>)
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	7823      	ldrb	r3, [r4, #0]
 80113a4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80113a8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80113ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80113b0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80113b4:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80113b8:	f1b8 0f00 	cmp.w	r8, #0
 80113bc:	d100      	bne.n	80113c0 <RegionAS923RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80113be:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 80113c0:	4b2c      	ldr	r3, [pc, #176]	; (8011474 <RegionAS923RxConfig+0xf8>)
 80113c2:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 80113c6:	4b29      	ldr	r3, [pc, #164]	; (801146c <RegionAS923RxConfig+0xf0>)
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	4640      	mov	r0, r8
 80113cc:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80113ce:	2d07      	cmp	r5, #7
 80113d0:	d02b      	beq.n	801142a <RegionAS923RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80113d2:	4b26      	ldr	r3, [pc, #152]	; (801146c <RegionAS923RxConfig+0xf0>)
 80113d4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80113d8:	7ca3      	ldrb	r3, [r4, #18]
 80113da:	9309      	str	r3, [sp, #36]	; 0x24
 80113dc:	2601      	movs	r6, #1
 80113de:	9608      	str	r6, [sp, #32]
 80113e0:	2300      	movs	r3, #0
 80113e2:	9307      	str	r3, [sp, #28]
 80113e4:	9306      	str	r3, [sp, #24]
 80113e6:	9305      	str	r3, [sp, #20]
 80113e8:	9304      	str	r3, [sp, #16]
 80113ea:	9303      	str	r3, [sp, #12]
 80113ec:	8922      	ldrh	r2, [r4, #8]
 80113ee:	9202      	str	r2, [sp, #8]
 80113f0:	2208      	movs	r2, #8
 80113f2:	9201      	str	r2, [sp, #4]
 80113f4:	9300      	str	r3, [sp, #0]
 80113f6:	4633      	mov	r3, r6
 80113f8:	464a      	mov	r2, r9
 80113fa:	78a1      	ldrb	r1, [r4, #2]
 80113fc:	4630      	mov	r0, r6
 80113fe:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 8011400:	7c63      	ldrb	r3, [r4, #17]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d02d      	beq.n	8011462 <RegionAS923RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 8011406:	4b1c      	ldr	r3, [pc, #112]	; (8011478 <RegionAS923RxConfig+0xfc>)
 8011408:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801140a:	4b18      	ldr	r3, [pc, #96]	; (801146c <RegionAS923RxConfig+0xf0>)
 801140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801140e:	310d      	adds	r1, #13
 8011410:	b2c9      	uxtb	r1, r1
 8011412:	4630      	mov	r0, r6
 8011414:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8011416:	462a      	mov	r2, r5
 8011418:	4641      	mov	r1, r8
 801141a:	7ce0      	ldrb	r0, [r4, #19]
 801141c:	f000 ff64 	bl	80122e8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8011420:	703d      	strb	r5, [r7, #0]
    return true;
 8011422:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8011424:	b00a      	add	sp, #40	; 0x28
 8011426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801142a:	4b10      	ldr	r3, [pc, #64]	; (801146c <RegionAS923RxConfig+0xf0>)
 801142c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8011430:	7ca3      	ldrb	r3, [r4, #18]
 8011432:	9309      	str	r3, [sp, #36]	; 0x24
 8011434:	2000      	movs	r0, #0
 8011436:	9008      	str	r0, [sp, #32]
 8011438:	9007      	str	r0, [sp, #28]
 801143a:	9006      	str	r0, [sp, #24]
 801143c:	2301      	movs	r3, #1
 801143e:	9305      	str	r3, [sp, #20]
 8011440:	9004      	str	r0, [sp, #16]
 8011442:	9003      	str	r0, [sp, #12]
 8011444:	8923      	ldrh	r3, [r4, #8]
 8011446:	9302      	str	r3, [sp, #8]
 8011448:	2305      	movs	r3, #5
 801144a:	9301      	str	r3, [sp, #4]
 801144c:	4b0b      	ldr	r3, [pc, #44]	; (801147c <RegionAS923RxConfig+0x100>)
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	4603      	mov	r3, r0
 8011452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011456:	fb02 f209 	mul.w	r2, r2, r9
 801145a:	f24c 3150 	movw	r1, #50000	; 0xc350
 801145e:	47d0      	blx	sl
 8011460:	e7ce      	b.n	8011400 <RegionAS923RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8011462:	4b07      	ldr	r3, [pc, #28]	; (8011480 <RegionAS923RxConfig+0x104>)
 8011464:	5d59      	ldrb	r1, [r3, r5]
 8011466:	e7d0      	b.n	801140a <RegionAS923RxConfig+0x8e>
        return false;
 8011468:	2000      	movs	r0, #0
 801146a:	e7db      	b.n	8011424 <RegionAS923RxConfig+0xa8>
 801146c:	0801885c 	.word	0x0801885c
 8011470:	20004400 	.word	0x20004400
 8011474:	0801812c 	.word	0x0801812c
 8011478:	080181c4 	.word	0x080181c4
 801147c:	00014585 	.word	0x00014585
 8011480:	080181b4 	.word	0x080181b4

08011484 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011488:	b08d      	sub	sp, #52	; 0x34
 801148a:	4604      	mov	r4, r0
 801148c:	460f      	mov	r7, r1
 801148e:	4690      	mov	r8, r2
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8011490:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011494:	4a42      	ldr	r2, [pc, #264]	; (80115a0 <RegionAS923TxConfig+0x11c>)
 8011496:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801149a:	4d42      	ldr	r5, [pc, #264]	; (80115a4 <RegionAS923TxConfig+0x120>)
 801149c:	682a      	ldr	r2, [r5, #0]
 801149e:	7803      	ldrb	r3, [r0, #0]
 80114a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80114a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80114a8:	7a53      	ldrb	r3, [r2, #9]
 80114aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80114ae:	4a3e      	ldr	r2, [pc, #248]	; (80115a8 <RegionAS923TxConfig+0x124>)
 80114b0:	6812      	ldr	r2, [r2, #0]
 80114b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80114b6:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80114ba:	f990 0002 	ldrsb.w	r0, [r0, #2]
 80114be:	f000 fefd 	bl	80122bc <RegionCommonLimitTxPower>
 80114c2:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 80114c4:	4939      	ldr	r1, [pc, #228]	; (80115ac <RegionAS923TxConfig+0x128>)
 80114c6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80114ca:	f000 fefb 	bl	80122c4 <RegionCommonGetBandwidth>
 80114ce:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80114d0:	68a2      	ldr	r2, [r4, #8]
 80114d2:	6861      	ldr	r1, [r4, #4]
 80114d4:	4630      	mov	r0, r6
 80114d6:	f000 fe0d 	bl	80120f4 <RegionCommonComputeTxPower>
 80114da:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80114dc:	4b34      	ldr	r3, [pc, #208]	; (80115b0 <RegionAS923TxConfig+0x12c>)
 80114de:	68da      	ldr	r2, [r3, #12]
 80114e0:	6829      	ldr	r1, [r5, #0]
 80114e2:	7823      	ldrb	r3, [r4, #0]
 80114e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80114e8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80114ec:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80114ee:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80114f2:	2b07      	cmp	r3, #7
 80114f4:	d031      	beq.n	801155a <RegionAS923TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80114f6:	4b2e      	ldr	r3, [pc, #184]	; (80115b0 <RegionAS923TxConfig+0x12c>)
 80114f8:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80114fc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8011500:	9308      	str	r3, [sp, #32]
 8011502:	2200      	movs	r2, #0
 8011504:	9207      	str	r2, [sp, #28]
 8011506:	9206      	str	r2, [sp, #24]
 8011508:	9205      	str	r2, [sp, #20]
 801150a:	2501      	movs	r5, #1
 801150c:	9504      	str	r5, [sp, #16]
 801150e:	9203      	str	r2, [sp, #12]
 8011510:	2308      	movs	r3, #8
 8011512:	9302      	str	r3, [sp, #8]
 8011514:	9501      	str	r5, [sp, #4]
 8011516:	f8cd a000 	str.w	sl, [sp]
 801151a:	464b      	mov	r3, r9
 801151c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801151e:	4628      	mov	r0, r5
 8011520:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8011522:	4b20      	ldr	r3, [pc, #128]	; (80115a4 <RegionAS923TxConfig+0x120>)
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	7823      	ldrb	r3, [r4, #0]
 8011528:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801152c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8011530:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011534:	f000 fefa 	bl	801232c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8011538:	89a1      	ldrh	r1, [r4, #12]
 801153a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801153e:	f7ff fcc9 	bl	8010ed4 <GetTimeOnAir>
 8011542:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8011546:	4b1a      	ldr	r3, [pc, #104]	; (80115b0 <RegionAS923TxConfig+0x12c>)
 8011548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801154a:	7b21      	ldrb	r1, [r4, #12]
 801154c:	4628      	mov	r0, r5
 801154e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8011550:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 8011552:	2001      	movs	r0, #1
 8011554:	b00d      	add	sp, #52	; 0x34
 8011556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801155a:	4b15      	ldr	r3, [pc, #84]	; (80115b0 <RegionAS923TxConfig+0x12c>)
 801155c:	69dd      	ldr	r5, [r3, #28]
 801155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011562:	fb03 f30a 	mul.w	r3, r3, sl
 8011566:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801156a:	9208      	str	r2, [sp, #32]
 801156c:	f04f 0a00 	mov.w	sl, #0
 8011570:	f8cd a01c 	str.w	sl, [sp, #28]
 8011574:	f8cd a018 	str.w	sl, [sp, #24]
 8011578:	f8cd a014 	str.w	sl, [sp, #20]
 801157c:	2201      	movs	r2, #1
 801157e:	9204      	str	r2, [sp, #16]
 8011580:	f8cd a00c 	str.w	sl, [sp, #12]
 8011584:	2205      	movs	r2, #5
 8011586:	9202      	str	r2, [sp, #8]
 8011588:	f8cd a004 	str.w	sl, [sp, #4]
 801158c:	9300      	str	r3, [sp, #0]
 801158e:	464b      	mov	r3, r9
 8011590:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8011594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011596:	4650      	mov	r0, sl
 8011598:	47a8      	blx	r5
        modem = MODEM_FSK;
 801159a:	4655      	mov	r5, sl
 801159c:	e7c1      	b.n	8011522 <RegionAS923TxConfig+0x9e>
 801159e:	bf00      	nop
 80115a0:	0801812c 	.word	0x0801812c
 80115a4:	20004400 	.word	0x20004400
 80115a8:	200043fc 	.word	0x200043fc
 80115ac:	0801810c 	.word	0x0801810c
 80115b0:	0801885c 	.word	0x0801885c

080115b4 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80115b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115b8:	b08f      	sub	sp, #60	; 0x3c
 80115ba:	4605      	mov	r5, r0
 80115bc:	4689      	mov	r9, r1
 80115be:	4690      	mov	r8, r2
 80115c0:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80115c2:	2400      	movs	r4, #0
 80115c4:	940c      	str	r4, [sp, #48]	; 0x30
 80115c6:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 80115ca:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 80115ce:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80115d0:	e030      	b.n	8011634 <RegionAS923LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 80115d2:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 80115d6:	2607      	movs	r6, #7
 80115d8:	e012      	b.n	8011600 <RegionAS923LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80115da:	4a58      	ldr	r2, [pc, #352]	; (801173c <RegionAS923LinkAdrReq+0x188>)
 80115dc:	6812      	ldr	r2, [r2, #0]
 80115de:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 80115e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80115e6:	b13a      	cbz	r2, 80115f8 <RegionAS923LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 80115e8:	2201      	movs	r2, #1
 80115ea:	fa02 f20c 	lsl.w	r2, r2, ip
 80115ee:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80115f2:	430a      	orrs	r2, r1
 80115f4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 80115f8:	f10c 0c01 	add.w	ip, ip, #1
 80115fc:	fa5f fc8c 	uxtb.w	ip, ip
 8011600:	f1bc 0f0f 	cmp.w	ip, #15
 8011604:	d816      	bhi.n	8011634 <RegionAS923LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 8011606:	2b06      	cmp	r3, #6
 8011608:	d0e7      	beq.n	80115da <RegionAS923LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801160a:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 801160e:	fa4e fe0c 	asr.w	lr, lr, ip
 8011612:	f01e 0f01 	tst.w	lr, #1
 8011616:	d0ef      	beq.n	80115f8 <RegionAS923LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8011618:	4a48      	ldr	r2, [pc, #288]	; (801173c <RegionAS923LinkAdrReq+0x188>)
 801161a:	6812      	ldr	r2, [r2, #0]
 801161c:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8011620:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8011624:	2a00      	cmp	r2, #0
 8011626:	d1e7      	bne.n	80115f8 <RegionAS923LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8011628:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 801162c:	e7e4      	b.n	80115f8 <RegionAS923LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 801162e:	2606      	movs	r6, #6
 8011630:	e000      	b.n	8011634 <RegionAS923LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 8011632:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011634:	7a2b      	ldrb	r3, [r5, #8]
 8011636:	42a3      	cmp	r3, r4
 8011638:	d919      	bls.n	801166e <RegionAS923LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801163a:	6868      	ldr	r0, [r5, #4]
 801163c:	a90c      	add	r1, sp, #48	; 0x30
 801163e:	4420      	add	r0, r4
 8011640:	f000 fc98 	bl	8011f74 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8011644:	4603      	mov	r3, r0
 8011646:	b190      	cbz	r0, 801166e <RegionAS923LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 8011648:	4423      	add	r3, r4
 801164a:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 801164c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011650:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8011654:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011658:	b90b      	cbnz	r3, 801165e <RegionAS923LinkAdrReq+0xaa>
 801165a:	2a00      	cmp	r2, #0
 801165c:	d0e7      	beq.n	801162e <RegionAS923LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801165e:	1e5a      	subs	r2, r3, #1
 8011660:	b2d2      	uxtb	r2, r2
 8011662:	2a04      	cmp	r2, #4
 8011664:	d9e5      	bls.n	8011632 <RegionAS923LinkAdrReq+0x7e>
 8011666:	2b06      	cmp	r3, #6
 8011668:	d9b3      	bls.n	80115d2 <RegionAS923LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 801166a:	2606      	movs	r6, #6
 801166c:	e7e2      	b.n	8011634 <RegionAS923LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801166e:	2302      	movs	r3, #2
 8011670:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8011674:	7a6b      	ldrb	r3, [r5, #9]
 8011676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionAS923GetPhyParam( &getPhy );
 801167a:	a80a      	add	r0, sp, #40	; 0x28
 801167c:	f7ff fc5c 	bl	8010f38 <RegionAS923GetPhyParam>
 8011680:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 8011682:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8011686:	7aab      	ldrb	r3, [r5, #10]
 8011688:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801168c:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011690:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8011694:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8011698:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801169c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80116a0:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80116a4:	f995 300b 	ldrsb.w	r3, [r5, #11]
 80116a8:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80116ac:	f995 300c 	ldrsb.w	r3, [r5, #12]
 80116b0:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80116b4:	f995 300d 	ldrsb.w	r3, [r5, #13]
 80116b8:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 80116bc:	2310      	movs	r3, #16
 80116be:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80116c2:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80116c6:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80116c8:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 80116cc:	2307      	movs	r3, #7
 80116ce:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80116d2:	4a1a      	ldr	r2, [pc, #104]	; (801173c <RegionAS923LinkAdrReq+0x188>)
 80116d4:	6812      	ldr	r2, [r2, #0]
 80116d6:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 80116d8:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 80116dc:	2300      	movs	r3, #0
 80116de:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80116e2:	682b      	ldr	r3, [r5, #0]
 80116e4:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80116e6:	ab0c      	add	r3, sp, #48	; 0x30
 80116e8:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80116ec:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 80116f0:	a801      	add	r0, sp, #4
 80116f2:	f000 fc5d 	bl	8011fb0 <RegionCommonLinkAdrReqVerifyParams>
 80116f6:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80116f8:	2807      	cmp	r0, #7
 80116fa:	d010      	beq.n	801171e <RegionAS923LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80116fc:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011700:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 8011704:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8011708:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 801170c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8011710:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 8011712:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011714:	701c      	strb	r4, [r3, #0]

#endif /* REGION_AS923 */
    return status;
}
 8011716:	4628      	mov	r0, r5
 8011718:	b00f      	add	sp, #60	; 0x3c
 801171a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801171e:	4e07      	ldr	r6, [pc, #28]	; (801173c <RegionAS923LinkAdrReq+0x188>)
 8011720:	6830      	ldr	r0, [r6, #0]
 8011722:	220c      	movs	r2, #12
 8011724:	2100      	movs	r1, #0
 8011726:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801172a:	f002 fb72 	bl	8013e12 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801172e:	6833      	ldr	r3, [r6, #0]
 8011730:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8011734:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 8011738:	e7e0      	b.n	80116fc <RegionAS923LinkAdrReq+0x148>
 801173a:	bf00      	nop
 801173c:	20004400 	.word	0x20004400

08011740 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011740:	b538      	push	{r3, r4, r5, lr}
 8011742:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011744:	6840      	ldr	r0, [r0, #4]
 8011746:	f7ff fbb1 	bl	8010eac <VerifyRfFreq>
 801174a:	b1a0      	cbz	r0, 8011776 <RegionAS923RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 801174c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 801174e:	2207      	movs	r2, #7
 8011750:	2100      	movs	r1, #0
 8011752:	f994 0000 	ldrsb.w	r0, [r4]
 8011756:	f000 fae8 	bl	8011d2a <RegionCommonValueInRange>
 801175a:	b908      	cbnz	r0, 8011760 <RegionAS923RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 801175c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8011760:	2207      	movs	r2, #7
 8011762:	2100      	movs	r1, #0
 8011764:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011768:	f000 fadf 	bl	8011d2a <RegionCommonValueInRange>
 801176c:	b908      	cbnz	r0, 8011772 <RegionAS923RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801176e:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_AS923 */
    return status;
}
 8011772:	4628      	mov	r0, r5
 8011774:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8011776:	2506      	movs	r5, #6
 8011778:	e7e9      	b.n	801174e <RegionAS923RxParamSetupReq+0xe>

0801177a <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 801177a:	2000      	movs	r0, #0
 801177c:	4770      	bx	lr
	...

08011780 <RegionAS923DlChannelReq>:
int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    uint8_t status = 0x03;

#if defined( REGION_AS923 )
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8011780:	7803      	ldrb	r3, [r0, #0]
 8011782:	2b0f      	cmp	r3, #15
 8011784:	d901      	bls.n	801178a <RegionAS923DlChannelReq+0xa>
    {
        return 0;
 8011786:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_AS923 */
    return status;
}
 8011788:	4770      	bx	lr
{
 801178a:	b510      	push	{r4, lr}
 801178c:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 801178e:	6840      	ldr	r0, [r0, #4]
 8011790:	f7ff fb8c 	bl	8010eac <VerifyRfFreq>
 8011794:	b170      	cbz	r0, 80117b4 <RegionAS923DlChannelReq+0x34>
    uint8_t status = 0x03;
 8011796:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8011798:	4b0b      	ldr	r3, [pc, #44]	; (80117c8 <RegionAS923DlChannelReq+0x48>)
 801179a:	681a      	ldr	r2, [r3, #0]
 801179c:	7823      	ldrb	r3, [r4, #0]
 801179e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80117a2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80117a6:	b909      	cbnz	r1, 80117ac <RegionAS923DlChannelReq+0x2c>
        status &= 0xFD;
 80117a8:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 80117ac:	2803      	cmp	r0, #3
 80117ae:	d003      	beq.n	80117b8 <RegionAS923DlChannelReq+0x38>
    return status;
 80117b0:	b240      	sxtb	r0, r0
}
 80117b2:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 80117b4:	2002      	movs	r0, #2
 80117b6:	e7ef      	b.n	8011798 <RegionAS923DlChannelReq+0x18>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80117b8:	6861      	ldr	r1, [r4, #4]
 80117ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80117be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80117c2:	6051      	str	r1, [r2, #4]
 80117c4:	e7f4      	b.n	80117b0 <RegionAS923DlChannelReq+0x30>
 80117c6:	bf00      	nop
 80117c8:	20004400 	.word	0x20004400

080117cc <RegionAS923AlternateDr>:
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
#else
    return -1;
#endif /* REGION_AS923 */
}
 80117cc:	2002      	movs	r0, #2
 80117ce:	4770      	bx	lr

080117d0 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80117d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117d2:	b097      	sub	sp, #92	; 0x5c
 80117d4:	4604      	mov	r4, r0
 80117d6:	460f      	mov	r7, r1
 80117d8:	4616      	mov	r6, r2
 80117da:	461d      	mov	r5, r3
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 80117dc:	2100      	movs	r1, #0
 80117de:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 80117e2:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 80117e6:	9111      	str	r1, [sp, #68]	; 0x44
 80117e8:	9112      	str	r1, [sp, #72]	; 0x48
 80117ea:	9113      	str	r1, [sp, #76]	; 0x4c
 80117ec:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 80117ee:	2303      	movs	r3, #3
 80117f0:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80117f4:	4b34      	ldr	r3, [pc, #208]	; (80118c8 <RegionAS923NextChannel+0xf8>)
 80117f6:	6818      	ldr	r0, [r3, #0]
 80117f8:	2201      	movs	r2, #1
 80117fa:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80117fe:	f000 faf2 	bl	8011de6 <RegionCommonCountChannels>
 8011802:	b938      	cbnz	r0, 8011814 <RegionAS923NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8011804:	4b30      	ldr	r3, [pc, #192]	; (80118c8 <RegionAS923NextChannel+0xf8>)
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 801180c:	f043 0303 	orr.w	r3, r3, #3
 8011810:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8011814:	7a63      	ldrb	r3, [r4, #9]
 8011816:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801181a:	7a23      	ldrb	r3, [r4, #8]
 801181c:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011820:	4b29      	ldr	r3, [pc, #164]	; (80118c8 <RegionAS923NextChannel+0xf8>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f503 7258 	add.w	r2, r3, #864	; 0x360
 8011828:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801182a:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801182c:	4b27      	ldr	r3, [pc, #156]	; (80118cc <RegionAS923NextChannel+0xfc>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 8011832:	2310      	movs	r3, #16
 8011834:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 8011838:	f10d 030a 	add.w	r3, sp, #10
 801183c:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801183e:	6823      	ldr	r3, [r4, #0]
 8011840:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011842:	6863      	ldr	r3, [r4, #4]
 8011844:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8011846:	7aa3      	ldrb	r3, [r4, #10]
 8011848:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 801184c:	2301      	movs	r3, #1
 801184e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8011852:	ab0c      	add	r3, sp, #48	; 0x30
 8011854:	f104 020c 	add.w	r2, r4, #12
 8011858:	e892 0003 	ldmia.w	r2, {r0, r1}
 801185c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011860:	7d23      	ldrb	r3, [r4, #20]
 8011862:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8011866:	8ae1      	ldrh	r1, [r4, #22]
 8011868:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801186c:	f7ff fb32 	bl	8010ed4 <GetTimeOnAir>
 8011870:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011872:	ab03      	add	r3, sp, #12
 8011874:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8011876:	9601      	str	r6, [sp, #4]
 8011878:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8011882:	aa11      	add	r2, sp, #68	; 0x44
 8011884:	4629      	mov	r1, r5
 8011886:	a809      	add	r0, sp, #36	; 0x24
 8011888:	f000 fcaf 	bl	80121ea <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801188c:	4604      	mov	r4, r0
 801188e:	b120      	cbz	r0, 801189a <RegionAS923NextChannel+0xca>
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8011890:	280c      	cmp	r0, #12
 8011892:	d00f      	beq.n	80118b4 <RegionAS923NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8011894:	4620      	mov	r0, r4
 8011896:	b017      	add	sp, #92	; 0x5c
 8011898:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801189a:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 801189e:	3901      	subs	r1, #1
 80118a0:	f002 fa92 	bl	8013dc8 <randr>
 80118a4:	f100 0358 	add.w	r3, r0, #88	; 0x58
 80118a8:	eb0d 0003 	add.w	r0, sp, r3
 80118ac:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 80118b0:	703b      	strb	r3, [r7, #0]
 80118b2:	e7ef      	b.n	8011894 <RegionAS923NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 80118b4:	4b04      	ldr	r3, [pc, #16]	; (80118c8 <RegionAS923NextChannel+0xf8>)
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 80118bc:	f043 0303 	orr.w	r3, r3, #3
 80118c0:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 80118c4:	e7e6      	b.n	8011894 <RegionAS923NextChannel+0xc4>
 80118c6:	bf00      	nop
 80118c8:	20004400 	.word	0x20004400
 80118cc:	200043fc 	.word	0x200043fc

080118d0 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80118d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_AS923 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 80118d2:	7905      	ldrb	r5, [r0, #4]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80118d4:	2d01      	cmp	r5, #1
 80118d6:	d94a      	bls.n	801196e <RegionAS923ChannelAdd+0x9e>
 80118d8:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 80118da:	2d0f      	cmp	r5, #15
 80118dc:	d849      	bhi.n	8011972 <RegionAS923ChannelAdd+0xa2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80118de:	6803      	ldr	r3, [r0, #0]
 80118e0:	7a18      	ldrb	r0, [r3, #8]
 80118e2:	f340 0003 	sbfx	r0, r0, #0, #4
 80118e6:	2207      	movs	r2, #7
 80118e8:	2100      	movs	r1, #0
 80118ea:	b240      	sxtb	r0, r0
 80118ec:	f000 fa1d 	bl	8011d2a <RegionCommonValueInRange>
 80118f0:	2800      	cmp	r0, #0
 80118f2:	d038      	beq.n	8011966 <RegionAS923ChannelAdd+0x96>
    bool drInvalid = false;
 80118f4:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80118f6:	6823      	ldr	r3, [r4, #0]
 80118f8:	7a18      	ldrb	r0, [r3, #8]
 80118fa:	f340 1003 	sbfx	r0, r0, #4, #4
 80118fe:	2207      	movs	r2, #7
 8011900:	2100      	movs	r1, #0
 8011902:	b240      	sxtb	r0, r0
 8011904:	f000 fa11 	bl	8011d2a <RegionCommonValueInRange>
 8011908:	b900      	cbnz	r0, 801190c <RegionAS923ChannelAdd+0x3c>
    {
        drInvalid = true;
 801190a:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801190c:	6821      	ldr	r1, [r4, #0]
 801190e:	7a0b      	ldrb	r3, [r1, #8]
 8011910:	f343 0203 	sbfx	r2, r3, #0, #4
 8011914:	b252      	sxtb	r2, r2
 8011916:	f343 1303 	sbfx	r3, r3, #4, #4
 801191a:	b25b      	sxtb	r3, r3
 801191c:	429a      	cmp	r2, r3
 801191e:	dd00      	ble.n	8011922 <RegionAS923ChannelAdd+0x52>
    {
        drInvalid = true;
 8011920:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8011922:	6808      	ldr	r0, [r1, #0]
 8011924:	f7ff fac2 	bl	8010eac <VerifyRfFreq>
 8011928:	b1f8      	cbz	r0, 801196a <RegionAS923ChannelAdd+0x9a>
    bool freqInvalid = false;
 801192a:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801192c:	b106      	cbz	r6, 8011930 <RegionAS923ChannelAdd+0x60>
 801192e:	bb13      	cbnz	r3, 8011976 <RegionAS923ChannelAdd+0xa6>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8011930:	bb1e      	cbnz	r6, 801197a <RegionAS923ChannelAdd+0xaa>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8011932:	bb23      	cbnz	r3, 801197e <RegionAS923ChannelAdd+0xae>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8011934:	4f13      	ldr	r7, [pc, #76]	; (8011984 <RegionAS923ChannelAdd+0xb4>)
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	006e      	lsls	r6, r5, #1
 801193a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801193e:	220c      	movs	r2, #12
 8011940:	6821      	ldr	r1, [r4, #0]
 8011942:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011946:	f002 fa4c 	bl	8013de2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801194a:	683a      	ldr	r2, [r7, #0]
 801194c:	442e      	add	r6, r5
 801194e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011952:	2000      	movs	r0, #0
 8011954:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8011956:	2301      	movs	r3, #1
 8011958:	40ab      	lsls	r3, r5
 801195a:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 801195e:	430b      	orrs	r3, r1
 8011960:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8011964:	e006      	b.n	8011974 <RegionAS923ChannelAdd+0xa4>
        drInvalid = true;
 8011966:	2601      	movs	r6, #1
 8011968:	e7c5      	b.n	80118f6 <RegionAS923ChannelAdd+0x26>
            freqInvalid = true;
 801196a:	2301      	movs	r3, #1
 801196c:	e7de      	b.n	801192c <RegionAS923ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801196e:	2006      	movs	r0, #6
 8011970:	e000      	b.n	8011974 <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011972:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8011974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011976:	2006      	movs	r0, #6
 8011978:	e7fc      	b.n	8011974 <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 801197a:	2005      	movs	r0, #5
 801197c:	e7fa      	b.n	8011974 <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801197e:	2004      	movs	r0, #4
 8011980:	e7f8      	b.n	8011974 <RegionAS923ChannelAdd+0xa4>
 8011982:	bf00      	nop
 8011984:	20004400 	.word	0x20004400

08011988 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 8011988:	7801      	ldrb	r1, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 801198a:	2901      	cmp	r1, #1
 801198c:	d913      	bls.n	80119b6 <RegionAS923ChannelsRemove+0x2e>
{
 801198e:	b508      	push	{r3, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8011990:	4b0a      	ldr	r3, [pc, #40]	; (80119bc <RegionAS923ChannelsRemove+0x34>)
 8011992:	6818      	ldr	r0, [r3, #0]
 8011994:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8011998:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801199c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80119a0:	2200      	movs	r2, #0
 80119a2:	f840 200c 	str.w	r2, [r0, ip]
 80119a6:	605a      	str	r2, [r3, #4]
 80119a8:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 80119aa:	2210      	movs	r2, #16
 80119ac:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80119b0:	f000 f9fd 	bl	8011dae <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_AS923 */
}
 80119b4:	bd08      	pop	{r3, pc}
        return false;
 80119b6:	2000      	movs	r0, #0
}
 80119b8:	4770      	bx	lr
 80119ba:	bf00      	nop
 80119bc:	20004400 	.word	0x20004400

080119c0 <RegionAS923ApplyCFList>:
{
 80119c0:	b570      	push	{r4, r5, r6, lr}
 80119c2:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80119c4:	2350      	movs	r3, #80	; 0x50
 80119c6:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 80119ca:	7a03      	ldrb	r3, [r0, #8]
 80119cc:	2b10      	cmp	r3, #16
 80119ce:	d136      	bne.n	8011a3e <RegionAS923ApplyCFList+0x7e>
 80119d0:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 80119d2:	6843      	ldr	r3, [r0, #4]
 80119d4:	7bdd      	ldrb	r5, [r3, #15]
 80119d6:	2d00      	cmp	r5, #0
 80119d8:	d131      	bne.n	8011a3e <RegionAS923ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80119da:	2402      	movs	r4, #2
 80119dc:	e01b      	b.n	8011a16 <RegionAS923ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80119de:	6872      	ldr	r2, [r6, #4]
 80119e0:	5d53      	ldrb	r3, [r2, r5]
 80119e2:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80119e4:	442a      	add	r2, r5
 80119e6:	7851      	ldrb	r1, [r2, #1]
 80119e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80119ec:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80119ee:	7892      	ldrb	r2, [r2, #2]
 80119f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119f4:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 80119f6:	2264      	movs	r2, #100	; 0x64
 80119f8:	fb02 f303 	mul.w	r3, r2, r3
 80119fc:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 80119fe:	2300      	movs	r3, #0
 8011a00:	9304      	str	r3, [sp, #16]
 8011a02:	e011      	b.n	8011a28 <RegionAS923ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 8011a04:	f88d 4000 	strb.w	r4, [sp]
            RegionAS923ChannelsRemove( &channelRemove );
 8011a08:	4668      	mov	r0, sp
 8011a0a:	f7ff ffbd 	bl	8011988 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011a0e:	3503      	adds	r5, #3
 8011a10:	b2ed      	uxtb	r5, r5
 8011a12:	3401      	adds	r4, #1
 8011a14:	b2e4      	uxtb	r4, r4
 8011a16:	2c0f      	cmp	r4, #15
 8011a18:	d811      	bhi.n	8011a3e <RegionAS923ApplyCFList+0x7e>
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8011a1a:	2c06      	cmp	r4, #6
 8011a1c:	d9df      	bls.n	80119de <RegionAS923ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8011a22:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8011a26:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8011a28:	9b03      	ldr	r3, [sp, #12]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d0ea      	beq.n	8011a04 <RegionAS923ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 8011a2e:	ab03      	add	r3, sp, #12
 8011a30:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8011a32:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionAS923ChannelAdd( &channelAdd );
 8011a36:	a801      	add	r0, sp, #4
 8011a38:	f7ff ff4a 	bl	80118d0 <RegionAS923ChannelAdd>
 8011a3c:	e7e7      	b.n	8011a0e <RegionAS923ApplyCFList+0x4e>
}
 8011a3e:	b006      	add	sp, #24
 8011a40:	bd70      	pop	{r4, r5, r6, pc}

08011a42 <RegionAS923NewChannelReq>:
{
 8011a42:	b500      	push	{lr}
 8011a44:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8011a46:	6803      	ldr	r3, [r0, #0]
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	b952      	cbnz	r2, 8011a62 <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8011a4c:	7903      	ldrb	r3, [r0, #4]
 8011a4e:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8011a52:	a801      	add	r0, sp, #4
 8011a54:	f7ff ff98 	bl	8011988 <RegionAS923ChannelsRemove>
 8011a58:	b1d0      	cbz	r0, 8011a90 <RegionAS923NewChannelReq+0x4e>
    uint8_t status = 0x03;
 8011a5a:	2003      	movs	r0, #3
}
 8011a5c:	b005      	add	sp, #20
 8011a5e:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8011a62:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8011a64:	7903      	ldrb	r3, [r0, #4]
 8011a66:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8011a6a:	a802      	add	r0, sp, #8
 8011a6c:	f7ff ff30 	bl	80118d0 <RegionAS923ChannelAdd>
 8011a70:	2806      	cmp	r0, #6
 8011a72:	d80b      	bhi.n	8011a8c <RegionAS923NewChannelReq+0x4a>
 8011a74:	e8df f000 	tbb	[pc, r0]
 8011a78:	0a0a0a04 	.word	0x0a0a0a04
 8011a7c:	060e      	.short	0x060e
 8011a7e:	08          	.byte	0x08
 8011a7f:	00          	.byte	0x00
 8011a80:	2003      	movs	r0, #3
 8011a82:	e7eb      	b.n	8011a5c <RegionAS923NewChannelReq+0x1a>
                status &= 0xFD;
 8011a84:	2001      	movs	r0, #1
                break;
 8011a86:	e7e9      	b.n	8011a5c <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 8011a88:	2000      	movs	r0, #0
                break;
 8011a8a:	e7e7      	b.n	8011a5c <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 8011a8c:	2000      	movs	r0, #0
                break;
 8011a8e:	e7e5      	b.n	8011a5c <RegionAS923NewChannelReq+0x1a>
            status &= 0xFC;
 8011a90:	2000      	movs	r0, #0
 8011a92:	e7e3      	b.n	8011a5c <RegionAS923NewChannelReq+0x1a>
                status &= 0xFE;
 8011a94:	2002      	movs	r0, #2
 8011a96:	e7e1      	b.n	8011a5c <RegionAS923NewChannelReq+0x1a>

08011a98 <RegionAS923ApplyDrOffset>:
{
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 8011a98:	b928      	cbnz	r0, 8011aa6 <RegionAS923ApplyDrOffset+0xe>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 8011a9a:	4b05      	ldr	r3, [pc, #20]	; (8011ab0 <RegionAS923ApplyDrOffset+0x18>)
 8011a9c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011aa0:	5698      	ldrsb	r0, [r3, r2]
    return minDr;
#else
    return 0;
#endif /* REGION_AS923 */

}
 8011aa2:	b2c0      	uxtb	r0, r0
 8011aa4:	4770      	bx	lr
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 8011aa6:	4b03      	ldr	r3, [pc, #12]	; (8011ab4 <RegionAS923ApplyDrOffset+0x1c>)
 8011aa8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011aac:	5698      	ldrsb	r0, [r3, r2]
 8011aae:	e7f8      	b.n	8011aa2 <RegionAS923ApplyDrOffset+0xa>
 8011ab0:	08018134 	.word	0x08018134
 8011ab4:	08018174 	.word	0x08018174

08011ab8 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8011ab8:	468c      	mov	ip, r1
 8011aba:	b1a9      	cbz	r1, 8011ae8 <FindAvailable125kHzChannels+0x30>
 8011abc:	b1b2      	cbz	r2, 8011aec <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8011ac2:	e001      	b.n	8011ac8 <FindAvailable125kHzChannels+0x10>
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	2b07      	cmp	r3, #7
 8011aca:	d80b      	bhi.n	8011ae4 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8011acc:	fa40 f103 	asr.w	r1, r0, r3
 8011ad0:	f011 0f01 	tst.w	r1, #1
 8011ad4:	d0f6      	beq.n	8011ac4 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8011ad6:	7811      	ldrb	r1, [r2, #0]
 8011ad8:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8011adc:	7811      	ldrb	r1, [r2, #0]
 8011ade:	3101      	adds	r1, #1
 8011ae0:	7011      	strb	r1, [r2, #0]
 8011ae2:	e7ef      	b.n	8011ac4 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ae8:	2003      	movs	r0, #3
 8011aea:	4770      	bx	lr
 8011aec:	2003      	movs	r0, #3
}
 8011aee:	4770      	bx	lr

08011af0 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8011af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011af2:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8011af4:	2300      	movs	r3, #0
 8011af6:	9302      	str	r3, [sp, #8]
 8011af8:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 8011afa:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8011afe:	2800      	cmp	r0, #0
 8011b00:	d03e      	beq.n	8011b80 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 8011b02:	460d      	mov	r5, r1
 8011b04:	4617      	mov	r7, r2
 8011b06:	4606      	mov	r6, r0
 8011b08:	2900      	cmp	r1, #0
 8011b0a:	d03b      	beq.n	8011b84 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 8011b0c:	2a00      	cmp	r2, #0
 8011b0e:	d03b      	beq.n	8011b88 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8011b10:	780c      	ldrb	r4, [r1, #0]
 8011b12:	e017      	b.n	8011b44 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8011b14:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 8011b18:	0a00      	lsrs	r0, r0, #8
 8011b1a:	e019      	b.n	8011b50 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8011b1c:	3901      	subs	r1, #1
 8011b1e:	2000      	movs	r0, #0
 8011b20:	f002 f952 	bl	8013dc8 <randr>
 8011b24:	f100 0310 	add.w	r3, r0, #16
 8011b28:	eb0d 0003 	add.w	r0, sp, r3
 8011b2c:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 8011b30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b34:	703b      	strb	r3, [r7, #0]
 8011b36:	e016      	b.n	8011b66 <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8011b38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b3c:	b9cb      	cbnz	r3, 8011b72 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 8011b3e:	782a      	ldrb	r2, [r5, #0]
 8011b40:	42a2      	cmp	r2, r4
 8011b42:	d016      	beq.n	8011b72 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8011b44:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 8011b46:	f014 0f01 	tst.w	r4, #1
 8011b4a:	d1e3      	bne.n	8011b14 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8011b4c:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8011b50:	f10d 0207 	add.w	r2, sp, #7
 8011b54:	a902      	add	r1, sp, #8
 8011b56:	f7ff ffaf 	bl	8011ab8 <FindAvailable125kHzChannels>
 8011b5a:	2803      	cmp	r0, #3
 8011b5c:	d00b      	beq.n	8011b76 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 8011b5e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011b62:	2900      	cmp	r1, #0
 8011b64:	d1da      	bne.n	8011b1c <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 8011b66:	3401      	adds	r4, #1
 8011b68:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 8011b6a:	2c07      	cmp	r4, #7
 8011b6c:	d9e4      	bls.n	8011b38 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 8011b6e:	2400      	movs	r4, #0
 8011b70:	e7e2      	b.n	8011b38 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 8011b72:	b913      	cbnz	r3, 8011b7a <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b74:	2003      	movs	r0, #3
}
 8011b76:	b005      	add	sp, #20
 8011b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 8011b7a:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 8011b7c:	2000      	movs	r0, #0
 8011b7e:	e7fa      	b.n	8011b76 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b80:	2003      	movs	r0, #3
 8011b82:	e7f8      	b.n	8011b76 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 8011b84:	2003      	movs	r0, #3
 8011b86:	e7f6      	b.n	8011b76 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 8011b88:	2003      	movs	r0, #3
 8011b8a:	e7f4      	b.n	8011b76 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

08011b8c <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 8011b8c:	fb02 1000 	mla	r0, r2, r0, r1
 8011b90:	4770      	bx	lr

08011b92 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8011b92:	b082      	sub	sp, #8
 8011b94:	f10d 0c08 	add.w	ip, sp, #8
 8011b98:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 8011b9c:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 8011b9e:	b971      	cbnz	r1, 8011bbe <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 8011ba6:	d306      	bcc.n	8011bb6 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8011ba8:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8011bac:	4293      	cmp	r3, r2
 8011bae:	d80a      	bhi.n	8011bc6 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8011bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011bb4:	e000      	b.n	8011bb8 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8011bb6:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8011bb8:	4298      	cmp	r0, r3
 8011bba:	bf38      	it	cc
 8011bbc:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8011bbe:	b900      	cbnz	r0, 8011bc2 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 8011bc0:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 8011bc2:	b002      	add	sp, #8
 8011bc4:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8011bc6:	f242 7310 	movw	r3, #10000	; 0x2710
 8011bca:	e7f5      	b.n	8011bb8 <GetDutyCycle+0x26>

08011bcc <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8011bcc:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 8011bce:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 8011bd0:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 8011bd2:	e001      	b.n	8011bd8 <CountChannels+0xc>
 8011bd4:	3301      	adds	r3, #1
 8011bd6:	b2db      	uxtb	r3, r3
 8011bd8:	428b      	cmp	r3, r1
 8011bda:	d207      	bcs.n	8011bec <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8011bdc:	2201      	movs	r2, #1
 8011bde:	409a      	lsls	r2, r3
 8011be0:	ea32 020c 	bics.w	r2, r2, ip
 8011be4:	d1f6      	bne.n	8011bd4 <CountChannels+0x8>
        {
            nbActiveBits++;
 8011be6:	3001      	adds	r0, #1
 8011be8:	b2c0      	uxtb	r0, r0
 8011bea:	e7f3      	b.n	8011bd4 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 8011bec:	4770      	bx	lr
	...

08011bf0 <SetMaxTimeCredits>:
{
 8011bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bf4:	b089      	sub	sp, #36	; 0x24
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	460e      	mov	r6, r1
 8011bfa:	ad02      	add	r5, sp, #8
 8011bfc:	e885 000c 	stmia.w	r5, {r2, r3}
 8011c00:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 8011c04:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8011c08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011c0c:	f004 fa62 	bl	80160d4 <SysTimeToMs>
 8011c10:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 8011c12:	2300      	movs	r3, #0
 8011c14:	9304      	str	r3, [sp, #16]
 8011c16:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8011c18:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011c1c:	4631      	mov	r1, r6
 8011c1e:	4620      	mov	r0, r4
 8011c20:	f7ff ffb7 	bl	8011b92 <GetDutyCycle>
 8011c24:	4605      	mov	r5, r0
    if( joined == false )
 8011c26:	2e00      	cmp	r6, #0
 8011c28:	d14c      	bne.n	8011cc4 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8011c2a:	2864      	cmp	r0, #100	; 0x64
 8011c2c:	d025      	beq.n	8011c7a <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8011c2e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8011c32:	d025      	beq.n	8011c80 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8011c34:	4e27      	ldr	r6, [pc, #156]	; (8011cd4 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8011c36:	68a1      	ldr	r1, [r4, #8]
 8011c38:	a806      	add	r0, sp, #24
 8011c3a:	f004 fa6b 	bl	8016114 <SysTimeFromMs>
 8011c3e:	9b07      	ldr	r3, [sp, #28]
 8011c40:	9300      	str	r3, [sp, #0]
 8011c42:	9b06      	ldr	r3, [sp, #24]
 8011c44:	aa02      	add	r2, sp, #8
 8011c46:	ca06      	ldmia	r2, {r1, r2}
 8011c48:	a804      	add	r0, sp, #16
 8011c4a:	f004 f9ca 	bl	8015fe2 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8011c4e:	f1b8 0f00 	cmp.w	r8, #0
 8011c52:	d102      	bne.n	8011c5a <SetMaxTimeCredits+0x6a>
 8011c54:	f1b9 0f00 	cmp.w	r9, #0
 8011c58:	d002      	beq.n	8011c60 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 8011c5a:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8011c5c:	42b3      	cmp	r3, r6
 8011c5e:	d012      	beq.n	8011c86 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 8011c60:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8011c62:	9b02      	ldr	r3, [sp, #8]
 8011c64:	4a1c      	ldr	r2, [pc, #112]	; (8011cd8 <SetMaxTimeCredits+0xe8>)
 8011c66:	4293      	cmp	r3, r2
 8011c68:	d812      	bhi.n	8011c90 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 8011c6a:	6863      	ldr	r3, [r4, #4]
 8011c6c:	b903      	cbnz	r3, 8011c70 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 8011c6e:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 8011c70:	6126      	str	r6, [r4, #16]
}
 8011c72:	4628      	mov	r0, r5
 8011c74:	b009      	add	sp, #36	; 0x24
 8011c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 8011c7a:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8011c7c:	4e17      	ldr	r6, [pc, #92]	; (8011cdc <SetMaxTimeCredits+0xec>)
 8011c7e:	e7da      	b.n	8011c36 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 8011c80:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8011c82:	4e17      	ldr	r6, [pc, #92]	; (8011ce0 <SetMaxTimeCredits+0xf0>)
 8011c84:	e7d7      	b.n	8011c36 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 8011c86:	9a04      	ldr	r2, [sp, #16]
 8011c88:	4b16      	ldr	r3, [pc, #88]	; (8011ce4 <SetMaxTimeCredits+0xf4>)
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d9ed      	bls.n	8011c6a <SetMaxTimeCredits+0x7a>
 8011c8e:	e7e7      	b.n	8011c60 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8011c90:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8011c94:	3b30      	subs	r3, #48	; 0x30
 8011c96:	4a14      	ldr	r2, [pc, #80]	; (8011ce8 <SetMaxTimeCredits+0xf8>)
 8011c98:	fba2 2303 	umull	r2, r3, r2, r3
 8011c9c:	0c1b      	lsrs	r3, r3, #16
 8011c9e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8011ca0:	4a12      	ldr	r2, [pc, #72]	; (8011cec <SetMaxTimeCredits+0xfc>)
 8011ca2:	fb02 f303 	mul.w	r3, r2, r3
 8011ca6:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8011ca8:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8011cac:	3330      	adds	r3, #48	; 0x30
 8011cae:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8011cb6:	ab04      	add	r3, sp, #16
 8011cb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cbc:	f004 fa0a 	bl	80160d4 <SysTimeToMs>
 8011cc0:	60a0      	str	r0, [r4, #8]
 8011cc2:	e7d2      	b.n	8011c6a <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 8011cc4:	f1b8 0f00 	cmp.w	r8, #0
 8011cc8:	d102      	bne.n	8011cd0 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 8011cca:	4e04      	ldr	r6, [pc, #16]	; (8011cdc <SetMaxTimeCredits+0xec>)
 8011ccc:	60e6      	str	r6, [r4, #12]
 8011cce:	e7cc      	b.n	8011c6a <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8011cd0:	4e02      	ldr	r6, [pc, #8]	; (8011cdc <SetMaxTimeCredits+0xec>)
 8011cd2:	e7ca      	b.n	8011c6a <SetMaxTimeCredits+0x7a>
 8011cd4:	02932e00 	.word	0x02932e00
 8011cd8:	0001ec2f 	.word	0x0001ec2f
 8011cdc:	001b7740 	.word	0x001b7740
 8011ce0:	0112a880 	.word	0x0112a880
 8011ce4:	0001517f 	.word	0x0001517f
 8011ce8:	c22e4507 	.word	0xc22e4507
 8011cec:	00015180 	.word	0x00015180

08011cf0 <UpdateTimeCredits>:
{
 8011cf0:	b570      	push	{r4, r5, r6, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8011cf8:	9301      	str	r3, [sp, #4]
 8011cfa:	9200      	str	r2, [sp, #0]
 8011cfc:	ab06      	add	r3, sp, #24
 8011cfe:	cb0c      	ldmia	r3, {r2, r3}
 8011d00:	f7ff ff76 	bl	8011bf0 <SetMaxTimeCredits>
 8011d04:	4605      	mov	r5, r0
    if( joined == true )
 8011d06:	b94e      	cbnz	r6, 8011d1c <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 8011d08:	68e2      	ldr	r2, [r4, #12]
 8011d0a:	6923      	ldr	r3, [r4, #16]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d900      	bls.n	8011d12 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 8011d10:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 8011d12:	9b08      	ldr	r3, [sp, #32]
 8011d14:	6063      	str	r3, [r4, #4]
}
 8011d16:	4628      	mov	r0, r5
 8011d18:	b002      	add	sp, #8
 8011d1a:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8011d1c:	6860      	ldr	r0, [r4, #4]
 8011d1e:	f004 fa59 	bl	80161d4 <UTIL_TIMER_GetElapsedTime>
 8011d22:	68e3      	ldr	r3, [r4, #12]
 8011d24:	4403      	add	r3, r0
 8011d26:	60e3      	str	r3, [r4, #12]
 8011d28:	e7ee      	b.n	8011d08 <UpdateTimeCredits+0x18>

08011d2a <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8011d2a:	4288      	cmp	r0, r1
 8011d2c:	db03      	blt.n	8011d36 <RegionCommonValueInRange+0xc>
 8011d2e:	4290      	cmp	r0, r2
 8011d30:	dd03      	ble.n	8011d3a <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 8011d32:	2000      	movs	r0, #0
 8011d34:	4770      	bx	lr
 8011d36:	2000      	movs	r0, #0
 8011d38:	4770      	bx	lr
        return 1;
 8011d3a:	2001      	movs	r0, #1
}
 8011d3c:	4770      	bx	lr

08011d3e <RegionCommonChanVerifyDr>:
{
 8011d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d42:	4682      	mov	sl, r0
 8011d44:	460e      	mov	r6, r1
 8011d46:	4690      	mov	r8, r2
 8011d48:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8011d4c:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 8011d50:	4619      	mov	r1, r3
 8011d52:	4640      	mov	r0, r8
 8011d54:	f7ff ffe9 	bl	8011d2a <RegionCommonValueInRange>
 8011d58:	b338      	cbz	r0, 8011daa <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011d5a:	2500      	movs	r5, #0
 8011d5c:	462f      	mov	r7, r5
 8011d5e:	e01e      	b.n	8011d9e <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 8011d60:	3401      	adds	r4, #1
 8011d62:	b2e4      	uxtb	r4, r4
 8011d64:	2c0f      	cmp	r4, #15
 8011d66:	d816      	bhi.n	8011d96 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8011d68:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 8011d6c:	4123      	asrs	r3, r4
 8011d6e:	f013 0f01 	tst.w	r3, #1
 8011d72:	d0f5      	beq.n	8011d60 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8011d74:	193b      	adds	r3, r7, r4
 8011d76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011d7a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8011d7e:	7a19      	ldrb	r1, [r3, #8]
 8011d80:	090a      	lsrs	r2, r1, #4
 8011d82:	f001 010f 	and.w	r1, r1, #15
 8011d86:	4640      	mov	r0, r8
 8011d88:	f7ff ffcf 	bl	8011d2a <RegionCommonValueInRange>
 8011d8c:	2801      	cmp	r0, #1
 8011d8e:	d1e7      	bne.n	8011d60 <RegionCommonChanVerifyDr+0x22>
                    return true;
 8011d90:	2001      	movs	r0, #1
}
 8011d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011d96:	3710      	adds	r7, #16
 8011d98:	b2ff      	uxtb	r7, r7
 8011d9a:	3501      	adds	r5, #1
 8011d9c:	b2ed      	uxtb	r5, r5
 8011d9e:	4557      	cmp	r7, sl
 8011da0:	d201      	bcs.n	8011da6 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 8011da2:	2400      	movs	r4, #0
 8011da4:	e7de      	b.n	8011d64 <RegionCommonChanVerifyDr+0x26>
    return false;
 8011da6:	2000      	movs	r0, #0
 8011da8:	e7f3      	b.n	8011d92 <RegionCommonChanVerifyDr+0x54>
        return false;
 8011daa:	2000      	movs	r0, #0
 8011dac:	e7f1      	b.n	8011d92 <RegionCommonChanVerifyDr+0x54>

08011dae <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8011dae:	0913      	lsrs	r3, r2, #4
 8011db0:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 8011db4:	d313      	bcc.n	8011dde <RegionCommonChanDisable+0x30>
{
 8011db6:	b500      	push	{lr}
 8011db8:	4684      	mov	ip, r0
 8011dba:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8011dbe:	4291      	cmp	r1, r2
 8011dc0:	d20f      	bcs.n	8011de2 <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8011dc2:	f001 030f 	and.w	r3, r1, #15
 8011dc6:	2001      	movs	r0, #1
 8011dc8:	fa00 f303 	lsl.w	r3, r0, r3
 8011dcc:	43db      	mvns	r3, r3
 8011dce:	b21b      	sxth	r3, r3
 8011dd0:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 8011dd4:	4013      	ands	r3, r2
 8011dd6:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 8011dda:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 8011dde:	2000      	movs	r0, #0
}
 8011de0:	4770      	bx	lr
        return false;
 8011de2:	2000      	movs	r0, #0
 8011de4:	e7f9      	b.n	8011dda <RegionCommonChanDisable+0x2c>

08011de6 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8011de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8011de8:	b188      	cbz	r0, 8011e0e <RegionCommonCountChannels+0x28>
 8011dea:	460c      	mov	r4, r1
 8011dec:	4616      	mov	r6, r2
 8011dee:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 8011df0:	2500      	movs	r5, #0
 8011df2:	e008      	b.n	8011e06 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8011df4:	2110      	movs	r1, #16
 8011df6:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8011dfa:	f7ff fee7 	bl	8011bcc <CountChannels>
 8011dfe:	4405      	add	r5, r0
 8011e00:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8011e02:	3401      	adds	r4, #1
 8011e04:	b2e4      	uxtb	r4, r4
 8011e06:	42b4      	cmp	r4, r6
 8011e08:	d3f4      	bcc.n	8011df4 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 8011e0a:	4628      	mov	r0, r5
 8011e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8011e0e:	2500      	movs	r5, #0
 8011e10:	e7fb      	b.n	8011e0a <RegionCommonCountChannels+0x24>

08011e12 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8011e12:	4684      	mov	ip, r0
 8011e14:	b158      	cbz	r0, 8011e2e <RegionCommonChanMaskCopy+0x1c>
 8011e16:	b109      	cbz	r1, 8011e1c <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 8011e18:	2300      	movs	r3, #0
 8011e1a:	e006      	b.n	8011e2a <RegionCommonChanMaskCopy+0x18>
 8011e1c:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8011e1e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011e22:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 8011e26:	3301      	adds	r3, #1
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	4293      	cmp	r3, r2
 8011e2c:	d3f7      	bcc.n	8011e1e <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 8011e2e:	4770      	bx	lr

08011e30 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8011e30:	b082      	sub	sp, #8
 8011e32:	b538      	push	{r3, r4, r5, lr}
 8011e34:	4604      	mov	r4, r0
 8011e36:	460d      	mov	r5, r1
 8011e38:	4611      	mov	r1, r2
 8011e3a:	aa04      	add	r2, sp, #16
 8011e3c:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8011e40:	ca0c      	ldmia	r2, {r2, r3}
 8011e42:	f7ff fea6 	bl	8011b92 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8011e46:	68e3      	ldr	r3, [r4, #12]
 8011e48:	fb05 f100 	mul.w	r1, r5, r0
 8011e4c:	428b      	cmp	r3, r1
 8011e4e:	d905      	bls.n	8011e5c <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8011e50:	1a5b      	subs	r3, r3, r1
 8011e52:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8011e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e58:	b002      	add	sp, #8
 8011e5a:	4770      	bx	lr
        band->TimeCredits = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	60e3      	str	r3, [r4, #12]
}
 8011e60:	e7f8      	b.n	8011e54 <RegionCommonSetBandTxDone+0x24>
	...

08011e64 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8011e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e68:	b089      	sub	sp, #36	; 0x24
 8011e6a:	4607      	mov	r7, r0
 8011e6c:	468b      	mov	fp, r1
 8011e6e:	4691      	mov	r9, r2
 8011e70:	4698      	mov	r8, r3
 8011e72:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8011e76:	f004 f9a3 	bl	80161c0 <UTIL_TIMER_GetCurrentTime>
 8011e7a:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 8011e7c:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 8011e7e:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8011e80:	f04f 33ff 	mov.w	r3, #4294967295
 8011e84:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 8011e86:	e005      	b.n	8011e94 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 8011e88:	2301      	movs	r3, #1
 8011e8a:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8011e8c:	441e      	add	r6, r3
 8011e8e:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 8011e90:	3401      	adds	r4, #1
 8011e92:	b2e4      	uxtb	r4, r4
 8011e94:	454c      	cmp	r4, r9
 8011e96:	d25d      	bcs.n	8011f54 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8011e98:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8011e9c:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8011ea0:	9b04      	ldr	r3, [sp, #16]
 8011ea2:	9302      	str	r3, [sp, #8]
 8011ea4:	ab13      	add	r3, sp, #76	; 0x4c
 8011ea6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011eaa:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011eae:	4653      	mov	r3, sl
 8011eb0:	4642      	mov	r2, r8
 8011eb2:	4639      	mov	r1, r7
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	f7ff ff1b 	bl	8011cf0 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 8011eba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ebc:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8011ec0:	68ea      	ldr	r2, [r5, #12]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d2e0      	bcs.n	8011e88 <RegionCommonUpdateBandTimeOff+0x24>
 8011ec6:	f1b8 0f00 	cmp.w	r8, #0
 8011eca:	d101      	bne.n	8011ed0 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8011ecc:	2f00      	cmp	r7, #0
 8011ece:	d1db      	bne.n	8011e88 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8011ed0:	2100      	movs	r1, #0
 8011ed2:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8011ed4:	6929      	ldr	r1, [r5, #16]
 8011ed6:	4299      	cmp	r1, r3
 8011ed8:	d307      	bcc.n	8011eea <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8011eda:	1a9b      	subs	r3, r3, r2
 8011edc:	9a05      	ldr	r2, [sp, #20]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	bf28      	it	cs
 8011ee2:	461a      	movcs	r2, r3
 8011ee4:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8011ee6:	3601      	adds	r6, #1
 8011ee8:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8011eea:	2f00      	cmp	r7, #0
 8011eec:	d1d0      	bne.n	8011e90 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 8011eee:	2300      	movs	r3, #0
 8011ef0:	9306      	str	r3, [sp, #24]
 8011ef2:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8011ef6:	2864      	cmp	r0, #100	; 0x64
 8011ef8:	d024      	beq.n	8011f44 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8011efa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8011efe:	d025      	beq.n	8011f4c <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8011f00:	4b19      	ldr	r3, [pc, #100]	; (8011f68 <RegionCommonUpdateBandTimeOff+0x104>)
 8011f02:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8011f04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f06:	4a18      	ldr	r2, [pc, #96]	; (8011f68 <RegionCommonUpdateBandTimeOff+0x104>)
 8011f08:	4293      	cmp	r3, r2
 8011f0a:	d90c      	bls.n	8011f26 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8011f0c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8011f10:	3b30      	subs	r3, #48	; 0x30
 8011f12:	4a16      	ldr	r2, [pc, #88]	; (8011f6c <RegionCommonUpdateBandTimeOff+0x108>)
 8011f14:	fba2 2303 	umull	r2, r3, r2, r3
 8011f18:	0c1b      	lsrs	r3, r3, #16
 8011f1a:	4a15      	ldr	r2, [pc, #84]	; (8011f70 <RegionCommonUpdateBandTimeOff+0x10c>)
 8011f1c:	fb03 2202 	mla	r2, r3, r2, r2
 8011f20:	9b06      	ldr	r3, [sp, #24]
 8011f22:	4413      	add	r3, r2
 8011f24:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8011f26:	ad06      	add	r5, sp, #24
 8011f28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f2a:	9300      	str	r3, [sp, #0]
 8011f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f2e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8011f32:	4628      	mov	r0, r5
 8011f34:	f004 f855 	bl	8015fe2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8011f38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011f3c:	f004 f8ca 	bl	80160d4 <SysTimeToMs>
 8011f40:	9005      	str	r0, [sp, #20]
 8011f42:	e7a5      	b.n	8011e90 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8011f44:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8011f48:	9306      	str	r3, [sp, #24]
 8011f4a:	e7db      	b.n	8011f04 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8011f4c:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8011f50:	9306      	str	r3, [sp, #24]
 8011f52:	e7d7      	b.n	8011f04 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 8011f54:	b11e      	cbz	r6, 8011f5e <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 8011f56:	9805      	ldr	r0, [sp, #20]
 8011f58:	b009      	add	sp, #36	; 0x24
 8011f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 8011f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f62:	9305      	str	r3, [sp, #20]
 8011f64:	e7f7      	b.n	8011f56 <RegionCommonUpdateBandTimeOff+0xf2>
 8011f66:	bf00      	nop
 8011f68:	0001ec30 	.word	0x0001ec30
 8011f6c:	c22e4507 	.word	0xc22e4507
 8011f70:	00015180 	.word	0x00015180

08011f74 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8011f74:	7803      	ldrb	r3, [r0, #0]
 8011f76:	2b03      	cmp	r3, #3
 8011f78:	d001      	beq.n	8011f7e <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 8011f7a:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 8011f7c:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 8011f7e:	7842      	ldrb	r2, [r0, #1]
 8011f80:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011f84:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8011f86:	f003 030f 	and.w	r3, r3, #15
 8011f8a:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8011f8c:	0913      	lsrs	r3, r2, #4
 8011f8e:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8011f90:	7883      	ldrb	r3, [r0, #2]
 8011f92:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8011f94:	78c2      	ldrb	r2, [r0, #3]
 8011f96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011f9a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8011f9c:	7903      	ldrb	r3, [r0, #4]
 8011f9e:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8011fa0:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8011fa4:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8011fa6:	f003 030f 	and.w	r3, r3, #15
 8011faa:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8011fac:	2005      	movs	r0, #5
 8011fae:	4770      	bx	lr

08011fb0 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8011fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb4:	b085      	sub	sp, #20
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	4688      	mov	r8, r1
 8011fba:	4617      	mov	r7, r2
 8011fbc:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 8011fbe:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 8011fc0:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 8011fc4:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8011fc8:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8011fcc:	7943      	ldrb	r3, [r0, #5]
 8011fce:	b92b      	cbnz	r3, 8011fdc <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8011fd0:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8011fd4:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8011fd8:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 8011fdc:	b355      	cbz	r5, 8012034 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8011fde:	f1ba 0f0f 	cmp.w	sl, #15
 8011fe2:	d114      	bne.n	801200e <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8011fe4:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 8011fe8:	f1b9 0f0f 	cmp.w	r9, #15
 8011fec:	d020      	beq.n	8012030 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8011fee:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8011ff2:	9303      	str	r3, [sp, #12]
 8011ff4:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8011ff8:	461c      	mov	r4, r3
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	4648      	mov	r0, r9
 8011ffe:	f7ff fe94 	bl	8011d2a <RegionCommonValueInRange>
 8012002:	b9b8      	cbnz	r0, 8012034 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8012004:	454c      	cmp	r4, r9
 8012006:	dc21      	bgt.n	801204c <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8012008:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 801200c:	e012      	b.n	8012034 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801200e:	69a3      	ldr	r3, [r4, #24]
 8012010:	9301      	str	r3, [sp, #4]
 8012012:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8012016:	9300      	str	r3, [sp, #0]
 8012018:	f994 3014 	ldrsb.w	r3, [r4, #20]
 801201c:	4652      	mov	r2, sl
 801201e:	6921      	ldr	r1, [r4, #16]
 8012020:	7b20      	ldrb	r0, [r4, #12]
 8012022:	f7ff fe8c 	bl	8011d3e <RegionCommonChanVerifyDr>
 8012026:	2800      	cmp	r0, #0
 8012028:	d1de      	bne.n	8011fe8 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 801202a:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 801202e:	e7db      	b.n	8011fe8 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 8012030:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8012034:	2d07      	cmp	r5, #7
 8012036:	d00c      	beq.n	8012052 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 8012038:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 801203c:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 8012040:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 8012044:	4628      	mov	r0, r5
 8012046:	b005      	add	sp, #20
 8012048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 801204c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012050:	e7f0      	b.n	8012034 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 8012052:	f1bb 0f00 	cmp.w	fp, #0
 8012056:	d1ef      	bne.n	8012038 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 8012058:	f04f 0b01 	mov.w	fp, #1
 801205c:	e7ec      	b.n	8012038 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

08012060 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8012060:	4b02      	ldr	r3, [pc, #8]	; (801206c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 8012062:	fa03 f000 	lsl.w	r0, r3, r0
}
 8012066:	fbb0 f0f1 	udiv	r0, r0, r1
 801206a:	4770      	bx	lr
 801206c:	000f4240 	.word	0x000f4240

08012070 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 8012070:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8012074:	fbb3 f0f0 	udiv	r0, r3, r0
 8012078:	4770      	bx	lr
	...

0801207c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801207c:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801207e:	f1a1 0c04 	sub.w	ip, r1, #4
 8012082:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8012086:	fb0e f202 	mul.w	r2, lr, r2
 801208a:	fb00 220c 	mla	r2, r0, ip, r2
 801208e:	0052      	lsls	r2, r2, #1
 8012090:	d021      	beq.n	80120d6 <RegionCommonComputeRxWindowParameters+0x5a>
 8012092:	4402      	add	r2, r0
 8012094:	3a01      	subs	r2, #1
 8012096:	fbb2 f2f0 	udiv	r2, r2, r0
 801209a:	4291      	cmp	r1, r2
 801209c:	bf38      	it	cc
 801209e:	4611      	movcc	r1, r2
 80120a0:	9a01      	ldr	r2, [sp, #4]
 80120a2:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80120a4:	0082      	lsls	r2, r0, #2
 80120a6:	fb01 f000 	mul.w	r0, r1, r0
 80120aa:	b1b8      	cbz	r0, 80120dc <RegionCommonComputeRxWindowParameters+0x60>
 80120ac:	3001      	adds	r0, #1
 80120ae:	0840      	lsrs	r0, r0, #1
 80120b0:	1a12      	subs	r2, r2, r0
 80120b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80120b6:	fb01 2313 	mls	r3, r1, r3, r2
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	dd10      	ble.n	80120e0 <RegionCommonComputeRxWindowParameters+0x64>
 80120be:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80120c2:	4a0b      	ldr	r2, [pc, #44]	; (80120f0 <RegionCommonComputeRxWindowParameters+0x74>)
 80120c4:	fb82 1203 	smull	r1, r2, r2, r3
 80120c8:	17db      	asrs	r3, r3, #31
 80120ca:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80120ce:	9a02      	ldr	r2, [sp, #8]
 80120d0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80120d2:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80120d6:	fbb2 f2f0 	udiv	r2, r2, r0
 80120da:	e7de      	b.n	801209a <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80120dc:	0840      	lsrs	r0, r0, #1
 80120de:	e7e7      	b.n	80120b0 <RegionCommonComputeRxWindowParameters+0x34>
 80120e0:	4a03      	ldr	r2, [pc, #12]	; (80120f0 <RegionCommonComputeRxWindowParameters+0x74>)
 80120e2:	fb82 1203 	smull	r1, r2, r2, r3
 80120e6:	17db      	asrs	r3, r3, #31
 80120e8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80120ec:	e7ef      	b.n	80120ce <RegionCommonComputeRxWindowParameters+0x52>
 80120ee:	bf00      	nop
 80120f0:	10624dd3 	.word	0x10624dd3

080120f4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80120f4:	b538      	push	{r3, r4, r5, lr}
 80120f6:	460d      	mov	r5, r1
 80120f8:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80120fa:	0040      	lsls	r0, r0, #1
 80120fc:	f7ee fdde 	bl	8000cbc <__aeabi_ui2f>
 8012100:	4601      	mov	r1, r0
 8012102:	4628      	mov	r0, r5
 8012104:	f7ee fd28 	bl	8000b58 <__aeabi_fsub>
 8012108:	4621      	mov	r1, r4
 801210a:	f7ee fd25 	bl	8000b58 <__aeabi_fsub>
 801210e:	f7ee f99f 	bl	8000450 <__aeabi_f2d>
 8012112:	f005 fbc5 	bl	80178a0 <floor>
 8012116:	f7ee fca3 	bl	8000a60 <__aeabi_d2iz>

    return phyTxPower;
}
 801211a:	b240      	sxtb	r0, r0
 801211c:	bd38      	pop	{r3, r4, r5, pc}

0801211e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801211e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012122:	b083      	sub	sp, #12
 8012124:	4605      	mov	r5, r0
 8012126:	468b      	mov	fp, r1
 8012128:	9200      	str	r2, [sp, #0]
 801212a:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801212c:	2600      	movs	r6, #0
 801212e:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 8012130:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 8012132:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8012134:	e049      	b.n	80121ca <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8012136:	7a3a      	ldrb	r2, [r7, #8]
 8012138:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801213c:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8012140:	b252      	sxtb	r2, r2
 8012142:	b249      	sxtb	r1, r1
 8012144:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8012148:	f7ff fdef 	bl	8011d2a <RegionCommonValueInRange>
 801214c:	b178      	cbz	r0, 801216e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801214e:	68ea      	ldr	r2, [r5, #12]
 8012150:	7a7b      	ldrb	r3, [r7, #9]
 8012152:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012156:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801215a:	7d13      	ldrb	r3, [r2, #20]
 801215c:	b353      	cbz	r3, 80121b4 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 801215e:	f109 0301 	add.w	r3, r9, #1
 8012162:	eb08 0204 	add.w	r2, r8, r4
 8012166:	f80b 2009 	strb.w	r2, [fp, r9]
 801216a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 801216e:	3401      	adds	r4, #1
 8012170:	b2e4      	uxtb	r4, r4
 8012172:	2c0f      	cmp	r4, #15
 8012174:	d823      	bhi.n	80121be <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8012176:	686b      	ldr	r3, [r5, #4]
 8012178:	0072      	lsls	r2, r6, #1
 801217a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 801217e:	4123      	asrs	r3, r4
 8012180:	f013 0f01 	tst.w	r3, #1
 8012184:	d0f3      	beq.n	801216e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8012186:	68a8      	ldr	r0, [r5, #8]
 8012188:	eb08 0304 	add.w	r3, r8, r4
 801218c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012190:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8012194:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d0e8      	beq.n	801216e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801219c:	782b      	ldrb	r3, [r5, #0]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d1c9      	bne.n	8012136 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80121a2:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d0c6      	beq.n	8012136 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80121a8:	5a9b      	ldrh	r3, [r3, r2]
 80121aa:	4123      	asrs	r3, r4
 80121ac:	f013 0f01 	tst.w	r3, #1
 80121b0:	d1c1      	bne.n	8012136 <RegionCommonCountNbOfEnabledChannels+0x18>
 80121b2:	e7dc      	b.n	801216e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 80121b4:	f10a 0a01 	add.w	sl, sl, #1
 80121b8:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 80121bc:	e7d7      	b.n	801216e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80121be:	f108 0810 	add.w	r8, r8, #16
 80121c2:	fa5f f888 	uxtb.w	r8, r8
 80121c6:	3601      	adds	r6, #1
 80121c8:	b2f6      	uxtb	r6, r6
 80121ca:	8a2b      	ldrh	r3, [r5, #16]
 80121cc:	fa1f f288 	uxth.w	r2, r8
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d201      	bcs.n	80121d8 <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 80121d4:	2400      	movs	r4, #0
 80121d6:	e7cc      	b.n	8012172 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80121d8:	9b00      	ldr	r3, [sp, #0]
 80121da:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80121de:	9b01      	ldr	r3, [sp, #4]
 80121e0:	f883 a000 	strb.w	sl, [r3]
}
 80121e4:	b003      	add	sp, #12
 80121e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080121ea <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80121ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121ee:	b085      	sub	sp, #20
 80121f0:	4604      	mov	r4, r0
 80121f2:	460f      	mov	r7, r1
 80121f4:	4616      	mov	r6, r2
 80121f6:	461d      	mov	r5, r3
 80121f8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80121fc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8012200:	6840      	ldr	r0, [r0, #4]
 8012202:	f003 ffe7 	bl	80161d4 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8012206:	6823      	ldr	r3, [r4, #0]
 8012208:	1a1b      	subs	r3, r3, r0
 801220a:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 801220e:	2301      	movs	r3, #1
 8012210:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 8012214:	2300      	movs	r3, #0
 8012216:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8012218:	6863      	ldr	r3, [r4, #4]
 801221a:	b113      	cbz	r3, 8012222 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801221c:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801221e:	4283      	cmp	r3, r0
 8012220:	d81e      	bhi.n	8012260 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8012222:	2300      	movs	r3, #0
 8012224:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8012226:	69e3      	ldr	r3, [r4, #28]
 8012228:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801222c:	781f      	ldrb	r7, [r3, #0]
 801222e:	69a3      	ldr	r3, [r4, #24]
 8012230:	9303      	str	r3, [sp, #12]
 8012232:	ab01      	add	r3, sp, #4
 8012234:	f104 020c 	add.w	r2, r4, #12
 8012238:	e892 0003 	ldmia.w	r2, {r0, r1}
 801223c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012240:	7d23      	ldrb	r3, [r4, #20]
 8012242:	9300      	str	r3, [sp, #0]
 8012244:	7a23      	ldrb	r3, [r4, #8]
 8012246:	7a62      	ldrb	r2, [r4, #9]
 8012248:	4661      	mov	r1, ip
 801224a:	4638      	mov	r0, r7
 801224c:	f7ff fe0a 	bl	8011e64 <RegionCommonUpdateBandTimeOff>
 8012250:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8012254:	4643      	mov	r3, r8
 8012256:	462a      	mov	r2, r5
 8012258:	4631      	mov	r1, r6
 801225a:	69e0      	ldr	r0, [r4, #28]
 801225c:	f7ff ff5f 	bl	801211e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8012260:	782b      	ldrb	r3, [r5, #0]
 8012262:	b923      	cbnz	r3, 801226e <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 8012264:	f898 3000 	ldrb.w	r3, [r8]
 8012268:	b13b      	cbz	r3, 801227a <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801226a:	200b      	movs	r0, #11
 801226c:	e002      	b.n	8012274 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 801226e:	2000      	movs	r0, #0
 8012270:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8012274:	b005      	add	sp, #20
 8012276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801227a:	200c      	movs	r0, #12
 801227c:	e7fa      	b.n	8012274 <RegionCommonIdentifyChannels+0x8a>

0801227e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801227e:	b570      	push	{r4, r5, r6, lr}
 8012280:	b082      	sub	sp, #8
 8012282:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 8012284:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 8012288:	f990 6002 	ldrsb.w	r6, [r0, #2]
 801228c:	42a6      	cmp	r6, r4
 801228e:	d011      	beq.n	80122b4 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8012290:	3c01      	subs	r4, #1
 8012292:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 8012294:	42a6      	cmp	r6, r4
 8012296:	d00e      	beq.n	80122b6 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8012298:	68ab      	ldr	r3, [r5, #8]
 801229a:	9301      	str	r3, [sp, #4]
 801229c:	f995 3001 	ldrsb.w	r3, [r5, #1]
 80122a0:	9300      	str	r3, [sp, #0]
 80122a2:	4633      	mov	r3, r6
 80122a4:	4622      	mov	r2, r4
 80122a6:	6869      	ldr	r1, [r5, #4]
 80122a8:	78e8      	ldrb	r0, [r5, #3]
 80122aa:	f7ff fd48 	bl	8011d3e <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 80122ae:	2800      	cmp	r0, #0
 80122b0:	d0ee      	beq.n	8012290 <RegionCommonGetNextLowerTxDr+0x12>
 80122b2:	e000      	b.n	80122b6 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 80122b4:	4634      	mov	r4, r6

        return drLocal;
    }
}
 80122b6:	4620      	mov	r0, r4
 80122b8:	b002      	add	sp, #8
 80122ba:	bd70      	pop	{r4, r5, r6, pc}

080122bc <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 80122bc:	4288      	cmp	r0, r1
 80122be:	bfb8      	it	lt
 80122c0:	4608      	movlt	r0, r1
 80122c2:	4770      	bx	lr

080122c4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 80122c4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 80122c8:	4a05      	ldr	r2, [pc, #20]	; (80122e0 <RegionCommonGetBandwidth+0x1c>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d004      	beq.n	80122d8 <RegionCommonGetBandwidth+0x14>
 80122ce:	4a05      	ldr	r2, [pc, #20]	; (80122e4 <RegionCommonGetBandwidth+0x20>)
 80122d0:	4293      	cmp	r3, r2
 80122d2:	d103      	bne.n	80122dc <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 80122d4:	2002      	movs	r0, #2
 80122d6:	4770      	bx	lr
            return 1;
 80122d8:	2001      	movs	r0, #1
 80122da:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 80122dc:	2000      	movs	r0, #0
    }
}
 80122de:	4770      	bx	lr
 80122e0:	0003d090 	.word	0x0003d090
 80122e4:	0007a120 	.word	0x0007a120

080122e8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80122e8:	b500      	push	{lr}
 80122ea:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 80122ec:	2805      	cmp	r0, #5
 80122ee:	d80e      	bhi.n	801230e <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80122f0:	9202      	str	r2, [sp, #8]
 80122f2:	9101      	str	r1, [sp, #4]
 80122f4:	4b0a      	ldr	r3, [pc, #40]	; (8012320 <RegionCommonRxConfigPrint+0x38>)
 80122f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80122fa:	9300      	str	r3, [sp, #0]
 80122fc:	4b09      	ldr	r3, [pc, #36]	; (8012324 <RegionCommonRxConfigPrint+0x3c>)
 80122fe:	2201      	movs	r2, #1
 8012300:	2100      	movs	r1, #0
 8012302:	2002      	movs	r0, #2
 8012304:	f003 fc4a 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8012308:	b005      	add	sp, #20
 801230a:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801230e:	9201      	str	r2, [sp, #4]
 8012310:	9100      	str	r1, [sp, #0]
 8012312:	4b05      	ldr	r3, [pc, #20]	; (8012328 <RegionCommonRxConfigPrint+0x40>)
 8012314:	2201      	movs	r2, #1
 8012316:	2100      	movs	r1, #0
 8012318:	2002      	movs	r0, #2
 801231a:	f003 fc3f 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 801231e:	e7f3      	b.n	8012308 <RegionCommonRxConfigPrint+0x20>
 8012320:	08018234 	.word	0x08018234
 8012324:	080181cc 	.word	0x080181cc
 8012328:	080181ec 	.word	0x080181ec

0801232c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801232c:	b500      	push	{lr}
 801232e:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8012330:	9101      	str	r1, [sp, #4]
 8012332:	9000      	str	r0, [sp, #0]
 8012334:	4b04      	ldr	r3, [pc, #16]	; (8012348 <RegionCommonTxConfigPrint+0x1c>)
 8012336:	2201      	movs	r2, #1
 8012338:	2100      	movs	r1, #0
 801233a:	2002      	movs	r0, #2
 801233c:	f003 fc2e 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 8012340:	b003      	add	sp, #12
 8012342:	f85d fb04 	ldr.w	pc, [sp], #4
 8012346:	bf00      	nop
 8012348:	08018208 	.word	0x08018208

0801234c <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 801234c:	b510      	push	{r4, lr}
 801234e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8012350:	4b10      	ldr	r3, [pc, #64]	; (8012394 <VerifyRfFreq+0x48>)
 8012352:	6a1b      	ldr	r3, [r3, #32]
 8012354:	4798      	blx	r3
 8012356:	b1c8      	cbz	r0, 801238c <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8012358:	4b0f      	ldr	r3, [pc, #60]	; (8012398 <VerifyRfFreq+0x4c>)
 801235a:	4423      	add	r3, r4
 801235c:	4a0f      	ldr	r2, [pc, #60]	; (801239c <VerifyRfFreq+0x50>)
 801235e:	4293      	cmp	r3, r2
 8012360:	d813      	bhi.n	801238a <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8012362:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 8012366:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 801236a:	f202 7245 	addw	r2, r2, #1861	; 0x745
 801236e:	fba2 1203 	umull	r1, r2, r2, r3
 8012372:	0c92      	lsrs	r2, r2, #18
 8012374:	490a      	ldr	r1, [pc, #40]	; (80123a0 <VerifyRfFreq+0x54>)
 8012376:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801237a:	b942      	cbnz	r2, 801238e <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801237c:	4b09      	ldr	r3, [pc, #36]	; (80123a4 <VerifyRfFreq+0x58>)
 801237e:	4423      	add	r3, r4
 8012380:	4a09      	ldr	r2, [pc, #36]	; (80123a8 <VerifyRfFreq+0x5c>)
 8012382:	4293      	cmp	r3, r2
 8012384:	d902      	bls.n	801238c <VerifyRfFreq+0x40>
    {
        return false;
 8012386:	2000      	movs	r0, #0
 8012388:	e000      	b.n	801238c <VerifyRfFreq+0x40>
        return false;
 801238a:	2000      	movs	r0, #0
    }
    return true;
}
 801238c:	bd10      	pop	{r4, pc}
        return false;
 801238e:	2000      	movs	r0, #0
 8012390:	e7fc      	b.n	801238c <VerifyRfFreq+0x40>
 8012392:	bf00      	nop
 8012394:	0801885c 	.word	0x0801885c
 8012398:	c8f78f60 	.word	0xc8f78f60
 801239c:	00401640 	.word	0x00401640
 80123a0:	000927c0 	.word	0x000927c0
 80123a4:	ca37fea0 	.word	0xca37fea0
 80123a8:	01808580 	.word	0x01808580

080123ac <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80123ac:	b570      	push	{r4, r5, r6, lr}
 80123ae:	b084      	sub	sp, #16
 80123b0:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 80123b2:	4b0a      	ldr	r3, [pc, #40]	; (80123dc <GetTimeOnAir+0x30>)
 80123b4:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 80123b6:	490a      	ldr	r1, [pc, #40]	; (80123e0 <GetTimeOnAir+0x34>)
 80123b8:	f7ff ff84 	bl	80122c4 <RegionCommonGetBandwidth>
 80123bc:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80123be:	4b09      	ldr	r3, [pc, #36]	; (80123e4 <GetTimeOnAir+0x38>)
 80123c0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80123c2:	2001      	movs	r0, #1
 80123c4:	9003      	str	r0, [sp, #12]
 80123c6:	b2e4      	uxtb	r4, r4
 80123c8:	9402      	str	r4, [sp, #8]
 80123ca:	2200      	movs	r2, #0
 80123cc:	9201      	str	r2, [sp, #4]
 80123ce:	2208      	movs	r2, #8
 80123d0:	9200      	str	r2, [sp, #0]
 80123d2:	4603      	mov	r3, r0
 80123d4:	4632      	mov	r2, r6
 80123d6:	47a8      	blx	r5
}
 80123d8:	b004      	add	sp, #16
 80123da:	bd70      	pop	{r4, r5, r6, pc}
 80123dc:	080182a0 	.word	0x080182a0
 80123e0:	0801824c 	.word	0x0801824c
 80123e4:	0801885c 	.word	0x0801885c

080123e8 <LimitTxPower>:
{
 80123e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ea:	4606      	mov	r6, r0
 80123ec:	4615      	mov	r5, r2
 80123ee:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80123f0:	f7ff ff64 	bl	80122bc <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 80123f4:	2d04      	cmp	r5, #4
 80123f6:	d105      	bne.n	8012404 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 80123f8:	4634      	mov	r4, r6
 80123fa:	2e02      	cmp	r6, #2
 80123fc:	bfb8      	it	lt
 80123fe:	2402      	movlt	r4, #2
}
 8012400:	4620      	mov	r0, r4
 8012402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012404:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8012406:	2204      	movs	r2, #4
 8012408:	2100      	movs	r1, #0
 801240a:	4638      	mov	r0, r7
 801240c:	f7ff fceb 	bl	8011de6 <RegionCommonCountChannels>
 8012410:	2831      	cmp	r0, #49	; 0x31
 8012412:	d8f5      	bhi.n	8012400 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8012414:	4634      	mov	r4, r6
 8012416:	2e05      	cmp	r6, #5
 8012418:	bfb8      	it	lt
 801241a:	2405      	movlt	r4, #5
 801241c:	e7f0      	b.n	8012400 <LimitTxPower+0x18>
	...

08012420 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8012420:	b500      	push	{lr}
 8012422:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8012424:	2300      	movs	r3, #0
 8012426:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8012428:	7803      	ldrb	r3, [r0, #0]
 801242a:	3b01      	subs	r3, #1
 801242c:	2b37      	cmp	r3, #55	; 0x37
 801242e:	d81f      	bhi.n	8012470 <RegionUS915GetPhyParam+0x50>
 8012430:	e8df f003 	tbb	[pc, r3]
 8012434:	1e1e1e1c 	.word	0x1e1e1e1c
 8012438:	1e1e1e1e 	.word	0x1e1e1e1e
 801243c:	3e3b1e1e 	.word	0x3e3b1e1e
 8012440:	4d1e4741 	.word	0x4d1e4741
 8012444:	5d595551 	.word	0x5d595551
 8012448:	6d6a1e61 	.word	0x6d6a1e61
 801244c:	7f7c7670 	.word	0x7f7c7670
 8012450:	86831e1e 	.word	0x86831e1e
 8012454:	1e1e1e23 	.word	0x1e1e1e23
 8012458:	1e1e1e1e 	.word	0x1e1e1e1e
 801245c:	1e1e1e1e 	.word	0x1e1e1e1e
 8012460:	90891e1e 	.word	0x90891e1e
 8012464:	a01e9d9a 	.word	0xa01e9d9a
 8012468:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801246c:	2308      	movs	r3, #8
 801246e:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8012470:	9804      	ldr	r0, [sp, #16]
 8012472:	9005      	str	r0, [sp, #20]
}
 8012474:	b007      	add	sp, #28
 8012476:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 801247a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801247e:	f88d 3004 	strb.w	r3, [sp, #4]
 8012482:	2304      	movs	r3, #4
 8012484:	f88d 3005 	strb.w	r3, [sp, #5]
 8012488:	2300      	movs	r3, #0
 801248a:	f88d 3006 	strb.w	r3, [sp, #6]
 801248e:	2348      	movs	r3, #72	; 0x48
 8012490:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8012494:	4b44      	ldr	r3, [pc, #272]	; (80125a8 <RegionUS915GetPhyParam+0x188>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801249c:	9202      	str	r2, [sp, #8]
 801249e:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80124a0:	a801      	add	r0, sp, #4
 80124a2:	f7ff feec 	bl	801227e <RegionCommonGetNextLowerTxDr>
 80124a6:	9004      	str	r0, [sp, #16]
            break;
 80124a8:	e7e2      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80124aa:	2340      	movs	r3, #64	; 0x40
 80124ac:	9304      	str	r3, [sp, #16]
            break;
 80124ae:	e7df      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80124b0:	2320      	movs	r3, #32
 80124b2:	9304      	str	r3, [sp, #16]
            break;
 80124b4:	e7dc      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 80124b6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80124ba:	4a3c      	ldr	r2, [pc, #240]	; (80125ac <RegionUS915GetPhyParam+0x18c>)
 80124bc:	5cd3      	ldrb	r3, [r2, r3]
 80124be:	9304      	str	r3, [sp, #16]
            break;
 80124c0:	e7d6      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 80124c2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80124c6:	4a3a      	ldr	r2, [pc, #232]	; (80125b0 <RegionUS915GetPhyParam+0x190>)
 80124c8:	5cd3      	ldrb	r3, [r2, r3]
 80124ca:	9304      	str	r3, [sp, #16]
            break;
 80124cc:	e7d0      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 80124ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80124d2:	9304      	str	r3, [sp, #16]
            break;
 80124d4:	e7cc      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80124d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80124da:	9304      	str	r3, [sp, #16]
            break;
 80124dc:	e7c8      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80124de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80124e2:	9304      	str	r3, [sp, #16]
            break;
 80124e4:	e7c4      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80124e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80124ea:	9304      	str	r3, [sp, #16]
            break;
 80124ec:	e7c0      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80124ee:	f241 7370 	movw	r3, #6000	; 0x1770
 80124f2:	9304      	str	r3, [sp, #16]
            break;
 80124f4:	e7bc      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80124f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80124fa:	482e      	ldr	r0, [pc, #184]	; (80125b4 <RegionUS915GetPhyParam+0x194>)
 80124fc:	f001 fc64 	bl	8013dc8 <randr>
 8012500:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8012504:	9004      	str	r0, [sp, #16]
            break;
 8012506:	e7b3      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8012508:	4b2b      	ldr	r3, [pc, #172]	; (80125b8 <RegionUS915GetPhyParam+0x198>)
 801250a:	9304      	str	r3, [sp, #16]
            break;
 801250c:	e7b0      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 801250e:	2308      	movs	r3, #8
 8012510:	9304      	str	r3, [sp, #16]
            break;
 8012512:	e7ad      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8012514:	4b24      	ldr	r3, [pc, #144]	; (80125a8 <RegionUS915GetPhyParam+0x188>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801251c:	9304      	str	r3, [sp, #16]
            break;
 801251e:	e7a7      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8012520:	4b21      	ldr	r3, [pc, #132]	; (80125a8 <RegionUS915GetPhyParam+0x188>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8012528:	9304      	str	r3, [sp, #16]
            break;
 801252a:	e7a1      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801252c:	2348      	movs	r3, #72	; 0x48
 801252e:	9304      	str	r3, [sp, #16]
            break;
 8012530:	e79e      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8012532:	4b1d      	ldr	r3, [pc, #116]	; (80125a8 <RegionUS915GetPhyParam+0x188>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	9304      	str	r3, [sp, #16]
            break;
 8012538:	e79a      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801253a:	4b20      	ldr	r3, [pc, #128]	; (80125bc <RegionUS915GetPhyParam+0x19c>)
 801253c:	9304      	str	r3, [sp, #16]
            break;
 801253e:	e797      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 8012540:	2300      	movs	r3, #0
 8012542:	9304      	str	r3, [sp, #16]
            break;
 8012544:	e794      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8012546:	4a1e      	ldr	r2, [pc, #120]	; (80125c0 <RegionUS915GetPhyParam+0x1a0>)
 8012548:	491b      	ldr	r1, [pc, #108]	; (80125b8 <RegionUS915GetPhyParam+0x198>)
 801254a:	7900      	ldrb	r0, [r0, #4]
 801254c:	f7ff fb1e 	bl	8011b8c <RegionBaseUSCalcDownlinkFrequency>
 8012550:	9004      	str	r0, [sp, #16]
            break;
 8012552:	e78d      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8012554:	2317      	movs	r3, #23
 8012556:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801255a:	2304      	movs	r3, #4
 801255c:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8012560:	2303      	movs	r3, #3
 8012562:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8012566:	e783      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8012568:	2308      	movs	r3, #8
 801256a:	9304      	str	r3, [sp, #16]
            break;
 801256c:	e780      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801256e:	2308      	movs	r3, #8
 8012570:	9304      	str	r3, [sp, #16]
            break;
 8012572:	e77d      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8012574:	4a12      	ldr	r2, [pc, #72]	; (80125c0 <RegionUS915GetPhyParam+0x1a0>)
 8012576:	4910      	ldr	r1, [pc, #64]	; (80125b8 <RegionUS915GetPhyParam+0x198>)
 8012578:	7900      	ldrb	r0, [r0, #4]
 801257a:	f7ff fb07 	bl	8011b8c <RegionBaseUSCalcDownlinkFrequency>
 801257e:	9004      	str	r0, [sp, #16]
            break;
 8012580:	e776      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8012582:	2308      	movs	r3, #8
 8012584:	9304      	str	r3, [sp, #16]
            break;
 8012586:	e773      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8012588:	2308      	movs	r3, #8
 801258a:	9304      	str	r3, [sp, #16]
            break;
 801258c:	e770      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801258e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012592:	4a0c      	ldr	r2, [pc, #48]	; (80125c4 <RegionUS915GetPhyParam+0x1a4>)
 8012594:	5cd3      	ldrb	r3, [r2, r3]
 8012596:	9304      	str	r3, [sp, #16]
            break;
 8012598:	e76a      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801259a:	490b      	ldr	r1, [pc, #44]	; (80125c8 <RegionUS915GetPhyParam+0x1a8>)
 801259c:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80125a0:	f7ff fe90 	bl	80122c4 <RegionCommonGetBandwidth>
 80125a4:	9004      	str	r0, [sp, #16]
            break;
 80125a6:	e763      	b.n	8012470 <RegionUS915GetPhyParam+0x50>
 80125a8:	2000440c 	.word	0x2000440c
 80125ac:	080182c0 	.word	0x080182c0
 80125b0:	080182b0 	.word	0x080182b0
 80125b4:	fffffc18 	.word	0xfffffc18
 80125b8:	370870a0 	.word	0x370870a0
 80125bc:	4200999a 	.word	0x4200999a
 80125c0:	000927c0 	.word	0x000927c0
 80125c4:	080182a0 	.word	0x080182a0
 80125c8:	0801824c 	.word	0x0801824c

080125cc <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80125cc:	b510      	push	{r4, lr}
 80125ce:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80125d0:	4b0b      	ldr	r3, [pc, #44]	; (8012600 <RegionUS915SetBandTxDone+0x34>)
 80125d2:	681a      	ldr	r2, [r3, #0]
 80125d4:	7803      	ldrb	r3, [r0, #0]
 80125d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80125da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125de:	7a5b      	ldrb	r3, [r3, #9]
 80125e0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80125e4:	4b07      	ldr	r3, [pc, #28]	; (8012604 <RegionUS915SetBandTxDone+0x38>)
 80125e6:	681c      	ldr	r4, [r3, #0]
 80125e8:	6903      	ldr	r3, [r0, #16]
 80125ea:	9300      	str	r3, [sp, #0]
 80125ec:	68c3      	ldr	r3, [r0, #12]
 80125ee:	7842      	ldrb	r2, [r0, #1]
 80125f0:	6881      	ldr	r1, [r0, #8]
 80125f2:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 80125f6:	f7ff fc1b 	bl	8011e30 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 80125fa:	b002      	add	sp, #8
 80125fc:	bd10      	pop	{r4, pc}
 80125fe:	bf00      	nop
 8012600:	2000440c 	.word	0x2000440c
 8012604:	20004404 	.word	0x20004404

08012608 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8012608:	b510      	push	{r4, lr}
 801260a:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801260c:	2301      	movs	r3, #1
 801260e:	f8ad 3000 	strh.w	r3, [sp]
 8012612:	2300      	movs	r3, #0
 8012614:	f88d 3002 	strb.w	r3, [sp, #2]
 8012618:	9301      	str	r3, [sp, #4]
 801261a:	9302      	str	r3, [sp, #8]
 801261c:	9303      	str	r3, [sp, #12]
 801261e:	9304      	str	r3, [sp, #16]
 8012620:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8012624:	7b04      	ldrb	r4, [r0, #12]
 8012626:	b174      	cbz	r4, 8012646 <RegionUS915InitDefaults+0x3e>
 8012628:	3c01      	subs	r4, #1
 801262a:	b2e4      	uxtb	r4, r4
 801262c:	2c01      	cmp	r4, #1
 801262e:	d87e      	bhi.n	801272e <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012630:	4b40      	ldr	r3, [pc, #256]	; (8012734 <RegionUS915InitDefaults+0x12c>)
 8012632:	6818      	ldr	r0, [r3, #0]
 8012634:	2206      	movs	r2, #6
 8012636:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801263a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801263e:	f7ff fbe8 	bl	8011e12 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8012642:	2300      	movs	r3, #0
 8012644:	e071      	b.n	801272a <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8012646:	6803      	ldr	r3, [r0, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d070      	beq.n	801272e <RegionUS915InitDefaults+0x126>
 801264c:	6842      	ldr	r2, [r0, #4]
 801264e:	2a00      	cmp	r2, #0
 8012650:	d06d      	beq.n	801272e <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8012652:	4939      	ldr	r1, [pc, #228]	; (8012738 <RegionUS915InitDefaults+0x130>)
 8012654:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8012656:	4937      	ldr	r1, [pc, #220]	; (8012734 <RegionUS915InitDefaults+0x12c>)
 8012658:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 801265a:	6880      	ldr	r0, [r0, #8]
 801265c:	4a37      	ldr	r2, [pc, #220]	; (801273c <RegionUS915InitDefaults+0x134>)
 801265e:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8012660:	2200      	movs	r2, #0
 8012662:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8012664:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8012666:	2218      	movs	r2, #24
 8012668:	4669      	mov	r1, sp
 801266a:	f001 fbba 	bl	8013de2 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801266e:	e011      	b.n	8012694 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8012670:	4b30      	ldr	r3, [pc, #192]	; (8012734 <RegionUS915InitDefaults+0x12c>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	4932      	ldr	r1, [pc, #200]	; (8012740 <RegionUS915InitDefaults+0x138>)
 8012676:	4a33      	ldr	r2, [pc, #204]	; (8012744 <RegionUS915InitDefaults+0x13c>)
 8012678:	fb01 2204 	mla	r2, r1, r4, r2
 801267c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012680:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8012684:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8012688:	2230      	movs	r2, #48	; 0x30
 801268a:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 801268c:	2200      	movs	r2, #0
 801268e:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8012690:	3401      	adds	r4, #1
 8012692:	b2e4      	uxtb	r4, r4
 8012694:	2c3f      	cmp	r4, #63	; 0x3f
 8012696:	d9eb      	bls.n	8012670 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8012698:	2340      	movs	r3, #64	; 0x40
 801269a:	2b47      	cmp	r3, #71	; 0x47
 801269c:	d814      	bhi.n	80126c8 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801269e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 80126a2:	4a24      	ldr	r2, [pc, #144]	; (8012734 <RegionUS915InitDefaults+0x12c>)
 80126a4:	6812      	ldr	r2, [r2, #0]
 80126a6:	4c28      	ldr	r4, [pc, #160]	; (8012748 <RegionUS915InitDefaults+0x140>)
 80126a8:	4928      	ldr	r1, [pc, #160]	; (801274c <RegionUS915InitDefaults+0x144>)
 80126aa:	fb04 1100 	mla	r1, r4, r0, r1
 80126ae:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80126b2:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 80126b6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80126ba:	2144      	movs	r1, #68	; 0x44
 80126bc:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 80126be:	2100      	movs	r1, #0
 80126c0:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80126c2:	3301      	adds	r3, #1
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	e7e8      	b.n	801269a <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 80126c8:	4c1a      	ldr	r4, [pc, #104]	; (8012734 <RegionUS915InitDefaults+0x12c>)
 80126ca:	6820      	ldr	r0, [r4, #0]
 80126cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126d0:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 80126d4:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 80126d8:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 80126dc:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 80126e0:	23ff      	movs	r3, #255	; 0xff
 80126e2:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80126e6:	2300      	movs	r3, #0
 80126e8:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80126ec:	2206      	movs	r2, #6
 80126ee:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 80126f2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80126f6:	f7ff fb8c 	bl	8011e12 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80126fa:	6821      	ldr	r1, [r4, #0]
 80126fc:	2206      	movs	r2, #6
 80126fe:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8012702:	4b0d      	ldr	r3, [pc, #52]	; (8012738 <RegionUS915InitDefaults+0x130>)
 8012704:	6818      	ldr	r0, [r3, #0]
 8012706:	f7ff fb84 	bl	8011e12 <RegionCommonChanMaskCopy>
            break;
 801270a:	e010      	b.n	801272e <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801270c:	4a0a      	ldr	r2, [pc, #40]	; (8012738 <RegionUS915InitDefaults+0x130>)
 801270e:	6811      	ldr	r1, [r2, #0]
 8012710:	4a08      	ldr	r2, [pc, #32]	; (8012734 <RegionUS915InitDefaults+0x12c>)
 8012712:	6812      	ldr	r2, [r2, #0]
 8012714:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8012718:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 801271c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8012720:	4002      	ands	r2, r0
 8012722:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8012726:	3301      	adds	r3, #1
 8012728:	b2db      	uxtb	r3, r3
 801272a:	2b05      	cmp	r3, #5
 801272c:	d9ee      	bls.n	801270c <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 801272e:	b006      	add	sp, #24
 8012730:	bd10      	pop	{r4, pc}
 8012732:	bf00      	nop
 8012734:	2000440c 	.word	0x2000440c
 8012738:	20004408 	.word	0x20004408
 801273c:	20004404 	.word	0x20004404
 8012740:	00030d40 	.word	0x00030d40
 8012744:	35c80160 	.word	0x35c80160
 8012748:	00186a00 	.word	0x00186a00
 801274c:	35d2afc0 	.word	0x35d2afc0

08012750 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012750:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 8012752:	290a      	cmp	r1, #10
 8012754:	d833      	bhi.n	80127be <RegionUS915Verify+0x6e>
 8012756:	e8df f001 	tbb	[pc, r1]
 801275a:	3206      	.short	0x3206
 801275c:	0a323232 	.word	0x0a323232
 8012760:	28321e14 	.word	0x28321e14
 8012764:	28          	.byte	0x28
 8012765:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8012766:	6800      	ldr	r0, [r0, #0]
 8012768:	f7ff fdf0 	bl	801234c <VerifyRfFreq>
 801276c:	e028      	b.n	80127c0 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801276e:	2204      	movs	r2, #4
 8012770:	2100      	movs	r1, #0
 8012772:	f990 0000 	ldrsb.w	r0, [r0]
 8012776:	f7ff fad8 	bl	8011d2a <RegionCommonValueInRange>
 801277a:	3800      	subs	r0, #0
 801277c:	bf18      	it	ne
 801277e:	2001      	movne	r0, #1
 8012780:	e01e      	b.n	80127c0 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8012782:	2205      	movs	r2, #5
 8012784:	2100      	movs	r1, #0
 8012786:	f990 0000 	ldrsb.w	r0, [r0]
 801278a:	f7ff face 	bl	8011d2a <RegionCommonValueInRange>
 801278e:	3800      	subs	r0, #0
 8012790:	bf18      	it	ne
 8012792:	2001      	movne	r0, #1
 8012794:	e014      	b.n	80127c0 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8012796:	220d      	movs	r2, #13
 8012798:	2108      	movs	r1, #8
 801279a:	f990 0000 	ldrsb.w	r0, [r0]
 801279e:	f7ff fac4 	bl	8011d2a <RegionCommonValueInRange>
 80127a2:	3800      	subs	r0, #0
 80127a4:	bf18      	it	ne
 80127a6:	2001      	movne	r0, #1
 80127a8:	e00a      	b.n	80127c0 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80127aa:	220e      	movs	r2, #14
 80127ac:	2100      	movs	r1, #0
 80127ae:	f990 0000 	ldrsb.w	r0, [r0]
 80127b2:	f7ff faba 	bl	8011d2a <RegionCommonValueInRange>
 80127b6:	3800      	subs	r0, #0
 80127b8:	bf18      	it	ne
 80127ba:	2001      	movne	r0, #1
 80127bc:	e000      	b.n	80127c0 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 80127be:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80127c0:	bd08      	pop	{r3, pc}
	...

080127c4 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80127c4:	7a03      	ldrb	r3, [r0, #8]
 80127c6:	2b10      	cmp	r3, #16
 80127c8:	d134      	bne.n	8012834 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80127ca:	6843      	ldr	r3, [r0, #4]
 80127cc:	7bdb      	ldrb	r3, [r3, #15]
 80127ce:	2b01      	cmp	r3, #1
 80127d0:	d130      	bne.n	8012834 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80127d2:	2200      	movs	r2, #0
 80127d4:	4613      	mov	r3, r2
 80127d6:	2a04      	cmp	r2, #4
 80127d8:	d82b      	bhi.n	8012832 <RegionUS915ApplyCFList+0x6e>
{
 80127da:	b530      	push	{r4, r5, lr}
 80127dc:	e010      	b.n	8012800 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80127de:	4916      	ldr	r1, [pc, #88]	; (8012838 <RegionUS915ApplyCFList+0x74>)
 80127e0:	680d      	ldr	r5, [r1, #0]
 80127e2:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 80127e6:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 80127ea:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 80127ee:	4021      	ands	r1, r4
 80127f0:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80127f4:	3301      	adds	r3, #1
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	3202      	adds	r2, #2
 80127fa:	b2d2      	uxtb	r2, r2
 80127fc:	2b04      	cmp	r3, #4
 80127fe:	d817      	bhi.n	8012830 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8012800:	6841      	ldr	r1, [r0, #4]
 8012802:	4c0e      	ldr	r4, [pc, #56]	; (801283c <RegionUS915ApplyCFList+0x78>)
 8012804:	6824      	ldr	r4, [r4, #0]
 8012806:	469c      	mov	ip, r3
 8012808:	5c89      	ldrb	r1, [r1, r2]
 801280a:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 801280e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8012812:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8012816:	4496      	add	lr, r2
 8012818:	f89e e001 	ldrb.w	lr, [lr, #1]
 801281c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 8012820:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8012824:	2b04      	cmp	r3, #4
 8012826:	d1da      	bne.n	80127de <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8012828:	b2c9      	uxtb	r1, r1
 801282a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 801282e:	e7d6      	b.n	80127de <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 8012830:	bd30      	pop	{r4, r5, pc}
 8012832:	4770      	bx	lr
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	20004408 	.word	0x20004408
 801283c:	2000440c 	.word	0x2000440c

08012840 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8012840:	b570      	push	{r4, r5, r6, lr}
 8012842:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8012844:	2204      	movs	r2, #4
 8012846:	2100      	movs	r1, #0
 8012848:	6800      	ldr	r0, [r0, #0]
 801284a:	f7ff facc 	bl	8011de6 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801284e:	2801      	cmp	r0, #1
 8012850:	d031      	beq.n	80128b6 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 8012852:	792c      	ldrb	r4, [r5, #4]
 8012854:	b11c      	cbz	r4, 801285e <RegionUS915ChanMaskSet+0x1e>
 8012856:	2c01      	cmp	r4, #1
 8012858:	d023      	beq.n	80128a2 <RegionUS915ChanMaskSet+0x62>
 801285a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 801285c:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801285e:	4e17      	ldr	r6, [pc, #92]	; (80128bc <RegionUS915ChanMaskSet+0x7c>)
 8012860:	6830      	ldr	r0, [r6, #0]
 8012862:	2206      	movs	r2, #6
 8012864:	6829      	ldr	r1, [r5, #0]
 8012866:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801286a:	f7ff fad2 	bl	8011e12 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801286e:	6830      	ldr	r0, [r6, #0]
 8012870:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 8012874:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8012878:	2300      	movs	r3, #0
 801287a:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801287e:	e00c      	b.n	801289a <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8012880:	4b0f      	ldr	r3, [pc, #60]	; (80128c0 <RegionUS915ChanMaskSet+0x80>)
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 8012888:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801288c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 8012890:	400b      	ands	r3, r1
 8012892:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8012896:	3401      	adds	r4, #1
 8012898:	b2e4      	uxtb	r4, r4
 801289a:	2c05      	cmp	r4, #5
 801289c:	d9f0      	bls.n	8012880 <RegionUS915ChanMaskSet+0x40>
    return true;
 801289e:	2001      	movs	r0, #1
 80128a0:	e7dc      	b.n	801285c <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80128a2:	4b06      	ldr	r3, [pc, #24]	; (80128bc <RegionUS915ChanMaskSet+0x7c>)
 80128a4:	6818      	ldr	r0, [r3, #0]
 80128a6:	2206      	movs	r2, #6
 80128a8:	6829      	ldr	r1, [r5, #0]
 80128aa:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 80128ae:	f7ff fab0 	bl	8011e12 <RegionCommonChanMaskCopy>
    return true;
 80128b2:	2001      	movs	r0, #1
            break;
 80128b4:	e7d2      	b.n	801285c <RegionUS915ChanMaskSet+0x1c>
        return false;
 80128b6:	2000      	movs	r0, #0
 80128b8:	e7d0      	b.n	801285c <RegionUS915ChanMaskSet+0x1c>
 80128ba:	bf00      	nop
 80128bc:	2000440c 	.word	0x2000440c
 80128c0:	20004408 	.word	0x20004408

080128c4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80128c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128c6:	b083      	sub	sp, #12
 80128c8:	460e      	mov	r6, r1
 80128ca:	4617      	mov	r7, r2
 80128cc:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80128ce:	280d      	cmp	r0, #13
 80128d0:	bfa8      	it	ge
 80128d2:	200d      	movge	r0, #13
 80128d4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80128d6:	4d0f      	ldr	r5, [pc, #60]	; (8012914 <RegionUS915ComputeRxWindowParameters+0x50>)
 80128d8:	4629      	mov	r1, r5
 80128da:	f7ff fcf3 	bl	80122c4 <RegionCommonGetBandwidth>
 80128de:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80128e0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80128e4:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80128e8:	4a0b      	ldr	r2, [pc, #44]	; (8012918 <RegionUS915ComputeRxWindowParameters+0x54>)
 80128ea:	5cd0      	ldrb	r0, [r2, r3]
 80128ec:	f7ff fbb8 	bl	8012060 <RegionCommonComputeSymbolTimeLoRa>
 80128f0:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80128f2:	4b0a      	ldr	r3, [pc, #40]	; (801291c <RegionUS915ComputeRxWindowParameters+0x58>)
 80128f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80128f6:	4798      	blx	r3
 80128f8:	4603      	mov	r3, r0
 80128fa:	f104 020c 	add.w	r2, r4, #12
 80128fe:	9201      	str	r2, [sp, #4]
 8012900:	3408      	adds	r4, #8
 8012902:	9400      	str	r4, [sp, #0]
 8012904:	463a      	mov	r2, r7
 8012906:	4631      	mov	r1, r6
 8012908:	4628      	mov	r0, r5
 801290a:	f7ff fbb7 	bl	801207c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801290e:	b003      	add	sp, #12
 8012910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012912:	bf00      	nop
 8012914:	0801824c 	.word	0x0801824c
 8012918:	080182a0 	.word	0x080182a0
 801291c:	0801885c 	.word	0x0801885c

08012920 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012924:	b08b      	sub	sp, #44	; 0x2c
 8012926:	4604      	mov	r4, r0
 8012928:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801292a:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801292e:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8012930:	4b22      	ldr	r3, [pc, #136]	; (80129bc <RegionUS915RxConfig+0x9c>)
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	4798      	blx	r3
 8012936:	2800      	cmp	r0, #0
 8012938:	d13d      	bne.n	80129b6 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801293a:	7ce3      	ldrb	r3, [r4, #19]
 801293c:	b933      	cbnz	r3, 801294c <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801293e:	7823      	ldrb	r3, [r4, #0]
 8012940:	f003 0307 	and.w	r3, r3, #7
 8012944:	4a1e      	ldr	r2, [pc, #120]	; (80129c0 <RegionUS915RxConfig+0xa0>)
 8012946:	4f1f      	ldr	r7, [pc, #124]	; (80129c4 <RegionUS915RxConfig+0xa4>)
 8012948:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801294c:	4b1e      	ldr	r3, [pc, #120]	; (80129c8 <RegionUS915RxConfig+0xa8>)
 801294e:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 8012952:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80129bc <RegionUS915RxConfig+0x9c>
 8012956:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801295a:	4638      	mov	r0, r7
 801295c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801295e:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8012962:	7ca3      	ldrb	r3, [r4, #18]
 8012964:	9309      	str	r3, [sp, #36]	; 0x24
 8012966:	2001      	movs	r0, #1
 8012968:	9008      	str	r0, [sp, #32]
 801296a:	2200      	movs	r2, #0
 801296c:	9207      	str	r2, [sp, #28]
 801296e:	9206      	str	r2, [sp, #24]
 8012970:	9205      	str	r2, [sp, #20]
 8012972:	9204      	str	r2, [sp, #16]
 8012974:	9203      	str	r2, [sp, #12]
 8012976:	8923      	ldrh	r3, [r4, #8]
 8012978:	9302      	str	r3, [sp, #8]
 801297a:	2308      	movs	r3, #8
 801297c:	9301      	str	r3, [sp, #4]
 801297e:	9200      	str	r2, [sp, #0]
 8012980:	4603      	mov	r3, r0
 8012982:	464a      	mov	r2, r9
 8012984:	78a1      	ldrb	r1, [r4, #2]
 8012986:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 8012988:	7c63      	ldrb	r3, [r4, #17]
 801298a:	b18b      	cbz	r3, 80129b0 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801298c:	4b0f      	ldr	r3, [pc, #60]	; (80129cc <RegionUS915RxConfig+0xac>)
 801298e:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8012990:	4b0a      	ldr	r3, [pc, #40]	; (80129bc <RegionUS915RxConfig+0x9c>)
 8012992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012994:	310d      	adds	r1, #13
 8012996:	b2c9      	uxtb	r1, r1
 8012998:	2001      	movs	r0, #1
 801299a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801299c:	4632      	mov	r2, r6
 801299e:	4639      	mov	r1, r7
 80129a0:	7ce0      	ldrb	r0, [r4, #19]
 80129a2:	f7ff fca1 	bl	80122e8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80129a6:	702e      	strb	r6, [r5, #0]
    return true;
 80129a8:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80129aa:	b00b      	add	sp, #44	; 0x2c
 80129ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80129b0:	4b07      	ldr	r3, [pc, #28]	; (80129d0 <RegionUS915RxConfig+0xb0>)
 80129b2:	5d99      	ldrb	r1, [r3, r6]
 80129b4:	e7ec      	b.n	8012990 <RegionUS915RxConfig+0x70>
        return false;
 80129b6:	2000      	movs	r0, #0
 80129b8:	e7f7      	b.n	80129aa <RegionUS915RxConfig+0x8a>
 80129ba:	bf00      	nop
 80129bc:	0801885c 	.word	0x0801885c
 80129c0:	000927c0 	.word	0x000927c0
 80129c4:	370870a0 	.word	0x370870a0
 80129c8:	080182a0 	.word	0x080182a0
 80129cc:	080182b0 	.word	0x080182b0
 80129d0:	080182c0 	.word	0x080182c0

080129d4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80129d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d8:	b08d      	sub	sp, #52	; 0x34
 80129da:	4604      	mov	r4, r0
 80129dc:	468b      	mov	fp, r1
 80129de:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80129e0:	f990 2001 	ldrsb.w	r2, [r0, #1]
 80129e4:	4b32      	ldr	r3, [pc, #200]	; (8012ab0 <RegionUS915TxConfig+0xdc>)
 80129e6:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80129ea:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8012ab4 <RegionUS915TxConfig+0xe0>
 80129ee:	f8d9 3000 	ldr.w	r3, [r9]
 80129f2:	7801      	ldrb	r1, [r0, #0]
 80129f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80129f8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80129fc:	7a49      	ldrb	r1, [r1, #9]
 80129fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012a02:	482d      	ldr	r0, [pc, #180]	; (8012ab8 <RegionUS915TxConfig+0xe4>)
 8012a04:	6800      	ldr	r0, [r0, #0]
 8012a06:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012a0a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012a0e:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8012a12:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8012a16:	f7ff fce7 	bl	80123e8 <LimitTxPower>
 8012a1a:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8012a1c:	4927      	ldr	r1, [pc, #156]	; (8012abc <RegionUS915TxConfig+0xe8>)
 8012a1e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8012a22:	f7ff fc4f 	bl	80122c4 <RegionCommonGetBandwidth>
 8012a26:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8012a28:	2200      	movs	r2, #0
 8012a2a:	4925      	ldr	r1, [pc, #148]	; (8012ac0 <RegionUS915TxConfig+0xec>)
 8012a2c:	4630      	mov	r0, r6
 8012a2e:	f7ff fb61 	bl	80120f4 <RegionCommonComputeTxPower>
 8012a32:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8012a34:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8012ac4 <RegionUS915TxConfig+0xf0>
 8012a38:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8012a3c:	f8d9 1000 	ldr.w	r1, [r9]
 8012a40:	7823      	ldrb	r3, [r4, #0]
 8012a42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a46:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8012a4a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8012a4c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8012a50:	9308      	str	r3, [sp, #32]
 8012a52:	2200      	movs	r2, #0
 8012a54:	9207      	str	r2, [sp, #28]
 8012a56:	9206      	str	r2, [sp, #24]
 8012a58:	9205      	str	r2, [sp, #20]
 8012a5a:	2501      	movs	r5, #1
 8012a5c:	9504      	str	r5, [sp, #16]
 8012a5e:	9203      	str	r2, [sp, #12]
 8012a60:	2308      	movs	r3, #8
 8012a62:	9302      	str	r3, [sp, #8]
 8012a64:	9501      	str	r5, [sp, #4]
 8012a66:	f8cd a000 	str.w	sl, [sp]
 8012a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8012a74:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8012a76:	f8d9 2000 	ldr.w	r2, [r9]
 8012a7a:	7823      	ldrb	r3, [r4, #0]
 8012a7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a80:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8012a84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012a88:	f7ff fc50 	bl	801232c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8012a8c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8012a90:	7b21      	ldrb	r1, [r4, #12]
 8012a92:	4628      	mov	r0, r5
 8012a94:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8012a96:	89a1      	ldrh	r1, [r4, #12]
 8012a98:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8012a9c:	f7ff fc86 	bl	80123ac <GetTimeOnAir>
 8012aa0:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 8012aa2:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	b00d      	add	sp, #52	; 0x34
 8012aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aae:	bf00      	nop
 8012ab0:	080182a0 	.word	0x080182a0
 8012ab4:	2000440c 	.word	0x2000440c
 8012ab8:	20004404 	.word	0x20004404
 8012abc:	0801824c 	.word	0x0801824c
 8012ac0:	41f00000 	.word	0x41f00000
 8012ac4:	0801885c 	.word	0x0801885c

08012ac8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8012ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012acc:	b091      	sub	sp, #68	; 0x44
 8012ace:	4605      	mov	r5, r0
 8012ad0:	4688      	mov	r8, r1
 8012ad2:	4617      	mov	r7, r2
 8012ad4:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8012ad6:	2400      	movs	r4, #0
 8012ad8:	940e      	str	r4, [sp, #56]	; 0x38
 8012ada:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8012ade:	940b      	str	r4, [sp, #44]	; 0x2c
 8012ae0:	940c      	str	r4, [sp, #48]	; 0x30
 8012ae2:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8012ae4:	4b9c      	ldr	r3, [pc, #624]	; (8012d58 <RegionUS915LinkAdrReq+0x290>)
 8012ae6:	6819      	ldr	r1, [r3, #0]
 8012ae8:	2206      	movs	r2, #6
 8012aea:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8012aee:	a80b      	add	r0, sp, #44	; 0x2c
 8012af0:	f7ff f98f 	bl	8011e12 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012af4:	e00d      	b.n	8012b12 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8012af6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012afa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 8012afe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 8012b02:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 8012b06:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8012b0a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8012b0e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012b12:	7a2b      	ldrb	r3, [r5, #8]
 8012b14:	42a3      	cmp	r3, r4
 8012b16:	f240 808b 	bls.w	8012c30 <RegionUS915LinkAdrReq+0x168>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8012b1a:	6868      	ldr	r0, [r5, #4]
 8012b1c:	a90e      	add	r1, sp, #56	; 0x38
 8012b1e:	4420      	add	r0, r4
 8012b20:	f7ff fa28 	bl	8011f74 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8012b24:	4603      	mov	r3, r0
 8012b26:	2800      	cmp	r0, #0
 8012b28:	f000 8082 	beq.w	8012c30 <RegionUS915LinkAdrReq+0x168>
        bytesProcessed += nextIndex;
 8012b2c:	4423      	add	r3, r4
 8012b2e:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 8012b30:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 8012b34:	f1bc 0f06 	cmp.w	ip, #6
 8012b38:	d0dd      	beq.n	8012af6 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8012b3a:	f1bc 0f07 	cmp.w	ip, #7
 8012b3e:	d00a      	beq.n	8012b56 <RegionUS915LinkAdrReq+0x8e>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8012b40:	f1bc 0f05 	cmp.w	ip, #5
 8012b44:	d071      	beq.n	8012c2a <RegionUS915LinkAdrReq+0x162>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8012b46:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012b4a:	aa10      	add	r2, sp, #64	; 0x40
 8012b4c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8012b50:	f82c 3c14 	strh.w	r3, [ip, #-20]
 8012b54:	e7dd      	b.n	8012b12 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 8012b56:	2300      	movs	r3, #0
 8012b58:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 8012b5c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8012b60:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 8012b64:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8012b68:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8012b6c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8012b70:	e7cf      	b.n	8012b12 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8012b72:	aa10      	add	r2, sp, #64	; 0x40
 8012b74:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8012b78:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8012b7c:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8012b80:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8012b84:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012b88:	ea4c 0202 	orr.w	r2, ip, r2
 8012b8c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                        cntChannelMask++;
 8012b90:	3101      	adds	r1, #1
 8012b92:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 8012b94:	3301      	adds	r3, #1
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	2b07      	cmp	r3, #7
 8012b9a:	d8ba      	bhi.n	8012b12 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8012b9c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8012ba0:	f04f 0c01 	mov.w	ip, #1
 8012ba4:	fa0c fc03 	lsl.w	ip, ip, r3
 8012ba8:	ea12 0f0c 	tst.w	r2, ip
 8012bac:	d012      	beq.n	8012bd4 <RegionUS915LinkAdrReq+0x10c>
                    if( ( i % 2 ) == 0 )
 8012bae:	f013 0f01 	tst.w	r3, #1
 8012bb2:	d1de      	bne.n	8012b72 <RegionUS915LinkAdrReq+0xaa>
                        channelsMask[cntChannelMask] |= 0x00FF;
 8012bb4:	aa10      	add	r2, sp, #64	; 0x40
 8012bb6:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8012bba:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8012bbe:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8012bc2:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8012bc6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012bca:	ea4c 0202 	orr.w	r2, ip, r2
 8012bce:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012bd2:	e7df      	b.n	8012b94 <RegionUS915LinkAdrReq+0xcc>
                    if( ( i % 2 ) == 0 )
 8012bd4:	f013 0f01 	tst.w	r3, #1
 8012bd8:	d113      	bne.n	8012c02 <RegionUS915LinkAdrReq+0x13a>
                        channelsMask[cntChannelMask] &= 0xFF00;
 8012bda:	aa10      	add	r2, sp, #64	; 0x40
 8012bdc:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8012be0:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8012be4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012be8:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8012bec:	ea6f 0c0c 	mvn.w	ip, ip
 8012bf0:	fa0f fc8c 	sxth.w	ip, ip
 8012bf4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012bf8:	ea0c 0c02 	and.w	ip, ip, r2
 8012bfc:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
 8012c00:	e7c8      	b.n	8012b94 <RegionUS915LinkAdrReq+0xcc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8012c02:	aa10      	add	r2, sp, #64	; 0x40
 8012c04:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8012c08:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8012c0c:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8012c10:	ea6f 0c0c 	mvn.w	ip, ip
 8012c14:	fa0f fc8c 	sxth.w	ip, ip
 8012c18:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012c1c:	ea0c 0c02 	and.w	ip, ip, r2
 8012c20:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                        cntChannelMask++;
 8012c24:	3101      	adds	r1, #1
 8012c26:	b2c9      	uxtb	r1, r1
 8012c28:	e7b4      	b.n	8012b94 <RegionUS915LinkAdrReq+0xcc>
            for( uint8_t i = 0; i <= 7; i++ )
 8012c2a:	2300      	movs	r3, #0
            uint8_t cntChannelMask = 0;
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	e7b3      	b.n	8012b98 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8012c30:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8012c34:	2b03      	cmp	r3, #3
 8012c36:	dd58      	ble.n	8012cea <RegionUS915LinkAdrReq+0x222>
 8012c38:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012c3c:	2302      	movs	r3, #2
 8012c3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8012c42:	7a6b      	ldrb	r3, [r5, #9]
 8012c44:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8012c48:	a809      	add	r0, sp, #36	; 0x24
 8012c4a:	f7ff fbe9 	bl	8012420 <RegionUS915GetPhyParam>
 8012c4e:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8012c50:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8012c54:	7aab      	ldrb	r3, [r5, #10]
 8012c56:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8012c5a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8012c5e:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8012c62:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8012c66:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8012c6a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8012c6e:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8012c72:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8012c76:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8012c7a:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8012c7e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8012c82:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8012c86:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8012c8a:	2348      	movs	r3, #72	; 0x48
 8012c8c:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8012c90:	ab0b      	add	r3, sp, #44	; 0x2c
 8012c92:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8012c94:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8012c98:	2304      	movs	r3, #4
 8012c9a:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8012c9e:	4b2e      	ldr	r3, [pc, #184]	; (8012d58 <RegionUS915LinkAdrReq+0x290>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8012ca4:	230e      	movs	r3, #14
 8012ca6:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8012caa:	2300      	movs	r3, #0
 8012cac:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8012cb0:	682b      	ldr	r3, [r5, #0]
 8012cb2:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8012cb4:	ab0e      	add	r3, sp, #56	; 0x38
 8012cb6:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8012cba:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 8012cbe:	4668      	mov	r0, sp
 8012cc0:	f7ff f976 	bl	8011fb0 <RegionCommonLinkAdrReqVerifyParams>
 8012cc4:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8012cc6:	2807      	cmp	r0, #7
 8012cc8:	d01c      	beq.n	8012d04 <RegionUS915LinkAdrReq+0x23c>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8012cca:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8012cce:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 8012cd2:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8012cd6:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8012cd8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8012cdc:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 8012cde:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012ce0:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	b011      	add	sp, #68	; 0x44
 8012ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8012cea:	2204      	movs	r2, #4
 8012cec:	2100      	movs	r1, #0
 8012cee:	a80b      	add	r0, sp, #44	; 0x2c
 8012cf0:	f7ff f879 	bl	8011de6 <RegionCommonCountChannels>
 8012cf4:	2801      	cmp	r0, #1
 8012cf6:	d902      	bls.n	8012cfe <RegionUS915LinkAdrReq+0x236>
 8012cf8:	f04f 0907 	mov.w	r9, #7
 8012cfc:	e79e      	b.n	8012c3c <RegionUS915LinkAdrReq+0x174>
        status &= 0xFE; // Channel mask KO
 8012cfe:	f04f 0906 	mov.w	r9, #6
 8012d02:	e79b      	b.n	8012c3c <RegionUS915LinkAdrReq+0x174>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8012d04:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8012d58 <RegionUS915LinkAdrReq+0x290>
 8012d08:	f8d9 0000 	ldr.w	r0, [r9]
 8012d0c:	2206      	movs	r2, #6
 8012d0e:	a90b      	add	r1, sp, #44	; 0x2c
 8012d10:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8012d14:	f7ff f87d 	bl	8011e12 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8012d18:	4b10      	ldr	r3, [pc, #64]	; (8012d5c <RegionUS915LinkAdrReq+0x294>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	f8d9 2000 	ldr.w	r2, [r9]
 8012d20:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 8012d24:	8818      	ldrh	r0, [r3, #0]
 8012d26:	4001      	ands	r1, r0
 8012d28:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8012d2a:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 8012d2e:	8858      	ldrh	r0, [r3, #2]
 8012d30:	4001      	ands	r1, r0
 8012d32:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8012d34:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 8012d38:	8898      	ldrh	r0, [r3, #4]
 8012d3a:	4001      	ands	r1, r0
 8012d3c:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8012d3e:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 8012d42:	88d8      	ldrh	r0, [r3, #6]
 8012d44:	4001      	ands	r1, r0
 8012d46:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8012d48:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 8012d4c:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8012d4e:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8012d52:	815a      	strh	r2, [r3, #10]
 8012d54:	e7b9      	b.n	8012cca <RegionUS915LinkAdrReq+0x202>
 8012d56:	bf00      	nop
 8012d58:	2000440c 	.word	0x2000440c
 8012d5c:	20004408 	.word	0x20004408

08012d60 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8012d60:	b538      	push	{r3, r4, r5, lr}
 8012d62:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8012d64:	6840      	ldr	r0, [r0, #4]
 8012d66:	f7ff faf1 	bl	801234c <VerifyRfFreq>
 8012d6a:	b310      	cbz	r0, 8012db2 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8012d6c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8012d6e:	220d      	movs	r2, #13
 8012d70:	2108      	movs	r1, #8
 8012d72:	f994 0000 	ldrsb.w	r0, [r4]
 8012d76:	f7fe ffd8 	bl	8011d2a <RegionCommonValueInRange>
 8012d7a:	b908      	cbnz	r0, 8012d80 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8012d7c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8012d80:	2207      	movs	r2, #7
 8012d82:	2105      	movs	r1, #5
 8012d84:	f994 0000 	ldrsb.w	r0, [r4]
 8012d88:	f7fe ffcf 	bl	8011d2a <RegionCommonValueInRange>
 8012d8c:	2801      	cmp	r0, #1
 8012d8e:	d003      	beq.n	8012d98 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8012d90:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8012d94:	2b0d      	cmp	r3, #13
 8012d96:	dd01      	ble.n	8012d9c <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 8012d98:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8012d9c:	2203      	movs	r2, #3
 8012d9e:	2100      	movs	r1, #0
 8012da0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8012da4:	f7fe ffc1 	bl	8011d2a <RegionCommonValueInRange>
 8012da8:	b908      	cbnz	r0, 8012dae <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8012daa:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 8012dae:	4628      	mov	r0, r5
 8012db0:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8012db2:	2506      	movs	r5, #6
 8012db4:	e7db      	b.n	8012d6e <RegionUS915RxParamSetupReq+0xe>

08012db6 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 8012db6:	f04f 30ff 	mov.w	r0, #4294967295
 8012dba:	4770      	bx	lr

08012dbc <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8012dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc0:	4770      	bx	lr

08012dc2 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 8012dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc6:	4770      	bx	lr

08012dc8 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8012dc8:	b999      	cbnz	r1, 8012df2 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8012dca:	4b0e      	ldr	r3, [pc, #56]	; (8012e04 <RegionUS915AlternateDr+0x3c>)
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	7b53      	ldrb	r3, [r2, #13]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8012dd4:	4b0b      	ldr	r3, [pc, #44]	; (8012e04 <RegionUS915AlternateDr+0x3c>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	7b5a      	ldrb	r2, [r3, #13]
 8012dda:	4b0b      	ldr	r3, [pc, #44]	; (8012e08 <RegionUS915AlternateDr+0x40>)
 8012ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8012de0:	085b      	lsrs	r3, r3, #1
 8012de2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8012de6:	1ad2      	subs	r2, r2, r3
 8012de8:	f012 0fff 	tst.w	r2, #255	; 0xff
 8012dec:	d007      	beq.n	8012dfe <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 8012dee:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 8012df0:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 8012df2:	4b04      	ldr	r3, [pc, #16]	; (8012e04 <RegionUS915AlternateDr+0x3c>)
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	7b53      	ldrb	r3, [r2, #13]
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	7353      	strb	r3, [r2, #13]
 8012dfc:	e7ea      	b.n	8012dd4 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 8012dfe:	2004      	movs	r0, #4
 8012e00:	4770      	bx	lr
 8012e02:	bf00      	nop
 8012e04:	20004408 	.word	0x20004408
 8012e08:	38e38e39 	.word	0x38e38e39

08012e0c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e10:	b0a4      	sub	sp, #144	; 0x90
 8012e12:	4604      	mov	r4, r0
 8012e14:	460e      	mov	r6, r1
 8012e16:	4690      	mov	r8, r2
 8012e18:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8012e1a:	2500      	movs	r5, #0
 8012e1c:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8012e20:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8012e24:	9511      	str	r5, [sp, #68]	; 0x44
 8012e26:	2244      	movs	r2, #68	; 0x44
 8012e28:	4629      	mov	r1, r5
 8012e2a:	a812      	add	r0, sp, #72	; 0x48
 8012e2c:	f004 fb7e 	bl	801752c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8012e30:	2204      	movs	r2, #4
 8012e32:	4629      	mov	r1, r5
 8012e34:	4b49      	ldr	r3, [pc, #292]	; (8012f5c <RegionUS915NextChannel+0x150>)
 8012e36:	6818      	ldr	r0, [r3, #0]
 8012e38:	f7fe ffd5 	bl	8011de6 <RegionCommonCountChannels>
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	d052      	beq.n	8012ee6 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8012e40:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8012e44:	2b03      	cmp	r3, #3
 8012e46:	dd08      	ble.n	8012e5a <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8012e48:	4b44      	ldr	r3, [pc, #272]	; (8012f5c <RegionUS915NextChannel+0x150>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	7a1a      	ldrb	r2, [r3, #8]
 8012e4e:	b922      	cbnz	r2, 8012e5a <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8012e50:	4a43      	ldr	r2, [pc, #268]	; (8012f60 <RegionUS915NextChannel+0x154>)
 8012e52:	6812      	ldr	r2, [r2, #0]
 8012e54:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8012e58:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8012e5a:	7a63      	ldrb	r3, [r4, #9]
 8012e5c:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8012e60:	7a23      	ldrb	r3, [r4, #8]
 8012e62:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8012e66:	4b3d      	ldr	r3, [pc, #244]	; (8012f5c <RegionUS915NextChannel+0x150>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8012e6c:	4b3c      	ldr	r3, [pc, #240]	; (8012f60 <RegionUS915NextChannel+0x154>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8012e72:	4b3c      	ldr	r3, [pc, #240]	; (8012f64 <RegionUS915NextChannel+0x158>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8012e78:	2348      	movs	r3, #72	; 0x48
 8012e7a:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8012e82:	6823      	ldr	r3, [r4, #0]
 8012e84:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8012e86:	6863      	ldr	r3, [r4, #4]
 8012e88:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8012e8a:	7aa3      	ldrb	r3, [r4, #10]
 8012e8c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8012e90:	2301      	movs	r3, #1
 8012e92:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8012e96:	ab03      	add	r3, sp, #12
 8012e98:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8012e9a:	ab0c      	add	r3, sp, #48	; 0x30
 8012e9c:	f104 020c 	add.w	r2, r4, #12
 8012ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ea4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8012ea8:	7d23      	ldrb	r3, [r4, #20]
 8012eaa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8012eae:	8ae1      	ldrh	r1, [r4, #22]
 8012eb0:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8012eb4:	f7ff fa7a 	bl	80123ac <GetTimeOnAir>
 8012eb8:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8012eba:	f8cd 8004 	str.w	r8, [sp, #4]
 8012ebe:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8012ec2:	9300      	str	r3, [sp, #0]
 8012ec4:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 8012ec8:	aa11      	add	r2, sp, #68	; 0x44
 8012eca:	4639      	mov	r1, r7
 8012ecc:	a809      	add	r0, sp, #36	; 0x24
 8012ece:	f7ff f98c 	bl	80121ea <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8012ed2:	4605      	mov	r5, r0
 8012ed4:	2800      	cmp	r0, #0
 8012ed6:	d13c      	bne.n	8012f52 <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 8012ed8:	7a63      	ldrb	r3, [r4, #9]
 8012eda:	b98b      	cbnz	r3, 8012f00 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8012edc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8012ee0:	b1db      	cbz	r3, 8012f1a <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	e026      	b.n	8012f34 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8012ee6:	4d1d      	ldr	r5, [pc, #116]	; (8012f5c <RegionUS915NextChannel+0x150>)
 8012ee8:	4b1d      	ldr	r3, [pc, #116]	; (8012f60 <RegionUS915NextChannel+0x154>)
 8012eea:	6819      	ldr	r1, [r3, #0]
 8012eec:	2204      	movs	r2, #4
 8012eee:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8012ef2:	6828      	ldr	r0, [r5, #0]
 8012ef4:	f7fe ff8d 	bl	8011e12 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8012ef8:	682b      	ldr	r3, [r5, #0]
 8012efa:	2200      	movs	r2, #0
 8012efc:	731a      	strb	r2, [r3, #12]
 8012efe:	e79f      	b.n	8012e40 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8012f00:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 8012f04:	3901      	subs	r1, #1
 8012f06:	f000 ff5f 	bl	8013dc8 <randr>
 8012f0a:	f100 0390 	add.w	r3, r0, #144	; 0x90
 8012f0e:	eb0d 0003 	add.w	r0, sp, r3
 8012f12:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 8012f16:	7033      	strb	r3, [r6, #0]
 8012f18:	e015      	b.n	8012f46 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8012f1a:	4b10      	ldr	r3, [pc, #64]	; (8012f5c <RegionUS915NextChannel+0x150>)
 8012f1c:	6818      	ldr	r0, [r3, #0]
 8012f1e:	4632      	mov	r2, r6
 8012f20:	f100 010c 	add.w	r1, r0, #12
 8012f24:	f7fe fde4 	bl	8011af0 <RegionBaseUSComputeNext125kHzJoinChannel>
 8012f28:	2803      	cmp	r0, #3
 8012f2a:	d10c      	bne.n	8012f46 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f2c:	4605      	mov	r5, r0
 8012f2e:	e010      	b.n	8012f52 <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8012f30:	3301      	adds	r3, #1
 8012f32:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8012f34:	4a09      	ldr	r2, [pc, #36]	; (8012f5c <RegionUS915NextChannel+0x150>)
 8012f36:	6812      	ldr	r2, [r2, #0]
 8012f38:	7a10      	ldrb	r0, [r2, #8]
 8012f3a:	4118      	asrs	r0, r3
 8012f3c:	f010 0f01 	tst.w	r0, #1
 8012f40:	d0f6      	beq.n	8012f30 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 8012f42:	3340      	adds	r3, #64	; 0x40
 8012f44:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8012f46:	2248      	movs	r2, #72	; 0x48
 8012f48:	7831      	ldrb	r1, [r6, #0]
 8012f4a:	4b04      	ldr	r3, [pc, #16]	; (8012f5c <RegionUS915NextChannel+0x150>)
 8012f4c:	6818      	ldr	r0, [r3, #0]
 8012f4e:	f7fe ff2e 	bl	8011dae <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8012f52:	4628      	mov	r0, r5
 8012f54:	b024      	add	sp, #144	; 0x90
 8012f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f5a:	bf00      	nop
 8012f5c:	20004408 	.word	0x20004408
 8012f60:	2000440c 	.word	0x2000440c
 8012f64:	20004404 	.word	0x20004404

08012f68 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8012f68:	4b04      	ldr	r3, [pc, #16]	; (8012f7c <RegionUS915ApplyDrOffset+0x14>)
 8012f6a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8012f6e:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 8012f70:	2800      	cmp	r0, #0
 8012f72:	db01      	blt.n	8012f78 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 8012f74:	b2c0      	uxtb	r0, r0
 8012f76:	4770      	bx	lr
        datarate = DR_0;
 8012f78:	2000      	movs	r0, #0
 8012f7a:	e7fb      	b.n	8012f74 <RegionUS915ApplyDrOffset+0xc>
 8012f7c:	0801828c 	.word	0x0801828c

08012f80 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8012f80:	b510      	push	{r4, lr}
 8012f82:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8012f84:	2210      	movs	r2, #16
 8012f86:	2100      	movs	r1, #0
 8012f88:	30f1      	adds	r0, #241	; 0xf1
 8012f8a:	f000 ff42 	bl	8013e12 <memset1>
    ctx->M_n = 0;
 8012f8e:	2100      	movs	r1, #0
 8012f90:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8012f94:	22f0      	movs	r2, #240	; 0xf0
 8012f96:	4620      	mov	r0, r4
 8012f98:	f000 ff3b 	bl	8013e12 <memset1>
}
 8012f9c:	bd10      	pop	{r4, pc}

08012f9e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8012f9e:	b508      	push	{r3, lr}
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8012fa4:	2110      	movs	r1, #16
 8012fa6:	f000 fb3b 	bl	8013620 <lorawan_aes_set_key>
}
 8012faa:	bd08      	pop	{r3, pc}

08012fac <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8012fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb0:	b084      	sub	sp, #16
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	460d      	mov	r5, r1
 8012fb6:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8012fb8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d054      	beq.n	801306a <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8012fc0:	f1c3 0810 	rsb	r8, r3, #16
 8012fc4:	4647      	mov	r7, r8
 8012fc6:	4590      	cmp	r8, r2
 8012fc8:	bf28      	it	cs
 8012fca:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8012fcc:	f200 1001 	addw	r0, r0, #257	; 0x101
 8012fd0:	b2ba      	uxth	r2, r7
 8012fd2:	4418      	add	r0, r3
 8012fd4:	f000 ff05 	bl	8013de2 <memcpy1>
        ctx->M_n += mlen;
 8012fd8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8012fdc:	443b      	add	r3, r7
 8012fde:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8012fe2:	2b0f      	cmp	r3, #15
 8012fe4:	d94d      	bls.n	8013082 <AES_CMAC_Update+0xd6>
 8012fe6:	45b0      	cmp	r8, r6
 8012fe8:	d24b      	bcs.n	8013082 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 8012fea:	2300      	movs	r3, #0
 8012fec:	e008      	b.n	8013000 <AES_CMAC_Update+0x54>
 8012fee:	18e2      	adds	r2, r4, r3
 8012ff0:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 8012ff4:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8012ff8:	4041      	eors	r1, r0
 8012ffa:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 8012ffe:	3301      	adds	r3, #1
 8013000:	2b0f      	cmp	r3, #15
 8013002:	ddf4      	ble.n	8012fee <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013004:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 8013008:	2210      	movs	r2, #16
 801300a:	4641      	mov	r1, r8
 801300c:	4668      	mov	r0, sp
 801300e:	f000 fee8 	bl	8013de2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8013012:	4622      	mov	r2, r4
 8013014:	4669      	mov	r1, sp
 8013016:	4668      	mov	r0, sp
 8013018:	f000 fb86 	bl	8013728 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801301c:	2210      	movs	r2, #16
 801301e:	4669      	mov	r1, sp
 8013020:	4640      	mov	r0, r8
 8013022:	f000 fede 	bl	8013de2 <memcpy1>

        data += mlen;
 8013026:	443d      	add	r5, r7
        len -= mlen;
 8013028:	1bf6      	subs	r6, r6, r7
 801302a:	e01e      	b.n	801306a <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 801302c:	eb04 0e03 	add.w	lr, r4, r3
 8013030:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 8013034:	5cea      	ldrb	r2, [r5, r3]
 8013036:	ea8c 0c02 	eor.w	ip, ip, r2
 801303a:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 801303e:	3301      	adds	r3, #1
 8013040:	2b0f      	cmp	r3, #15
 8013042:	ddf3      	ble.n	801302c <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013044:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 8013048:	2210      	movs	r2, #16
 801304a:	4639      	mov	r1, r7
 801304c:	4668      	mov	r0, sp
 801304e:	f000 fec8 	bl	8013de2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8013052:	4622      	mov	r2, r4
 8013054:	4669      	mov	r1, sp
 8013056:	4668      	mov	r0, sp
 8013058:	f000 fb66 	bl	8013728 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801305c:	2210      	movs	r2, #16
 801305e:	4669      	mov	r1, sp
 8013060:	4638      	mov	r0, r7
 8013062:	f000 febe 	bl	8013de2 <memcpy1>

        data += 16;
 8013066:	3510      	adds	r5, #16
        len -= 16;
 8013068:	3e10      	subs	r6, #16
    while( len > 16 )
 801306a:	2e10      	cmp	r6, #16
 801306c:	d901      	bls.n	8013072 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 801306e:	2300      	movs	r3, #0
 8013070:	e7e6      	b.n	8013040 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8013072:	b2b2      	uxth	r2, r6
 8013074:	4629      	mov	r1, r5
 8013076:	f204 1001 	addw	r0, r4, #257	; 0x101
 801307a:	f000 feb2 	bl	8013de2 <memcpy1>
    ctx->M_n = len;
 801307e:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 8013082:	b004      	add	sp, #16
 8013084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013088 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8013088:	b530      	push	{r4, r5, lr}
 801308a:	b089      	sub	sp, #36	; 0x24
 801308c:	4605      	mov	r5, r0
 801308e:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8013090:	2210      	movs	r2, #16
 8013092:	2100      	movs	r1, #0
 8013094:	eb0d 0002 	add.w	r0, sp, r2
 8013098:	f000 febb 	bl	8013e12 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 801309c:	4622      	mov	r2, r4
 801309e:	a904      	add	r1, sp, #16
 80130a0:	4608      	mov	r0, r1
 80130a2:	f000 fb41 	bl	8013728 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80130a6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	db01      	blt.n	80130b2 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 80130ae:	2300      	movs	r3, #0
 80130b0:	e030      	b.n	8013114 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 80130b2:	2300      	movs	r3, #0
 80130b4:	2b0e      	cmp	r3, #14
 80130b6:	dc11      	bgt.n	80130dc <AES_CMAC_Final+0x54>
 80130b8:	f103 0220 	add.w	r2, r3, #32
 80130bc:	eb0d 0102 	add.w	r1, sp, r2
 80130c0:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80130c4:	3301      	adds	r3, #1
 80130c6:	f103 0220 	add.w	r2, r3, #32
 80130ca:	446a      	add	r2, sp
 80130cc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80130d0:	09d2      	lsrs	r2, r2, #7
 80130d2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80130d6:	f801 2c10 	strb.w	r2, [r1, #-16]
 80130da:	e7eb      	b.n	80130b4 <AES_CMAC_Final+0x2c>
 80130dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80130e0:	005b      	lsls	r3, r3, #1
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 80130e8:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80130ec:	f88d 301f 	strb.w	r3, [sp, #31]
 80130f0:	e017      	b.n	8013122 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 80130f2:	f103 0220 	add.w	r2, r3, #32
 80130f6:	eb0d 0102 	add.w	r1, sp, r2
 80130fa:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80130fe:	3301      	adds	r3, #1
 8013100:	f103 0220 	add.w	r2, r3, #32
 8013104:	446a      	add	r2, sp
 8013106:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801310a:	09d2      	lsrs	r2, r2, #7
 801310c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8013110:	f801 2c10 	strb.w	r2, [r1, #-16]
 8013114:	2b0e      	cmp	r3, #14
 8013116:	ddec      	ble.n	80130f2 <AES_CMAC_Final+0x6a>
 8013118:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801311c:	005b      	lsls	r3, r3, #1
 801311e:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8013122:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8013126:	2810      	cmp	r0, #16
 8013128:	d014      	beq.n	8013154 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 801312a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801312e:	2b00      	cmp	r3, #0
 8013130:	db30      	blt.n	8013194 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8013132:	2300      	movs	r3, #0
 8013134:	e041      	b.n	80131ba <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 8013136:	18e1      	adds	r1, r4, r3
 8013138:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801313c:	f103 0020 	add.w	r0, r3, #32
 8013140:	4468      	add	r0, sp
 8013142:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8013146:	4042      	eors	r2, r0
 8013148:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801314c:	3301      	adds	r3, #1
 801314e:	2b0f      	cmp	r3, #15
 8013150:	ddf1      	ble.n	8013136 <AES_CMAC_Final+0xae>
 8013152:	e059      	b.n	8013208 <AES_CMAC_Final+0x180>
 8013154:	2300      	movs	r3, #0
 8013156:	e7fa      	b.n	801314e <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 8013158:	f103 0220 	add.w	r2, r3, #32
 801315c:	eb0d 0102 	add.w	r1, sp, r2
 8013160:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8013164:	3301      	adds	r3, #1
 8013166:	f103 0220 	add.w	r2, r3, #32
 801316a:	446a      	add	r2, sp
 801316c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8013170:	09d2      	lsrs	r2, r2, #7
 8013172:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8013176:	f801 2c10 	strb.w	r2, [r1, #-16]
 801317a:	2b0e      	cmp	r3, #14
 801317c:	ddec      	ble.n	8013158 <AES_CMAC_Final+0xd0>
 801317e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013182:	005b      	lsls	r3, r3, #1
 8013184:	b2db      	uxtb	r3, r3
 8013186:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 801318a:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 801318e:	f88d 301f 	strb.w	r3, [sp, #31]
 8013192:	e019      	b.n	80131c8 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 8013194:	2300      	movs	r3, #0
 8013196:	e7f0      	b.n	801317a <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 8013198:	f103 0220 	add.w	r2, r3, #32
 801319c:	eb0d 0102 	add.w	r1, sp, r2
 80131a0:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80131a4:	3301      	adds	r3, #1
 80131a6:	f103 0220 	add.w	r2, r3, #32
 80131aa:	446a      	add	r2, sp
 80131ac:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80131b0:	09d2      	lsrs	r2, r2, #7
 80131b2:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80131b6:	f801 2c10 	strb.w	r2, [r1, #-16]
 80131ba:	2b0e      	cmp	r3, #14
 80131bc:	ddec      	ble.n	8013198 <AES_CMAC_Final+0x110>
 80131be:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80131c2:	005b      	lsls	r3, r3, #1
 80131c4:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80131c8:	4420      	add	r0, r4
 80131ca:	2380      	movs	r3, #128	; 0x80
 80131cc:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80131d0:	e003      	b.n	80131da <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 80131d2:	4423      	add	r3, r4
 80131d4:	2200      	movs	r2, #0
 80131d6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80131da:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80131de:	3301      	adds	r3, #1
 80131e0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80131e4:	2b0f      	cmp	r3, #15
 80131e6:	d9f4      	bls.n	80131d2 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 80131e8:	2300      	movs	r3, #0
 80131ea:	e00b      	b.n	8013204 <AES_CMAC_Final+0x17c>
 80131ec:	18e1      	adds	r1, r4, r3
 80131ee:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 80131f2:	f103 0020 	add.w	r0, r3, #32
 80131f6:	4468      	add	r0, sp
 80131f8:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80131fc:	4042      	eors	r2, r0
 80131fe:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8013202:	3301      	adds	r3, #1
 8013204:	2b0f      	cmp	r3, #15
 8013206:	ddf1      	ble.n	80131ec <AES_CMAC_Final+0x164>
 8013208:	2300      	movs	r3, #0
 801320a:	e009      	b.n	8013220 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 801320c:	18e2      	adds	r2, r4, r3
 801320e:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 8013212:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8013216:	ea8c 0c01 	eor.w	ip, ip, r1
 801321a:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 801321e:	3301      	adds	r3, #1
 8013220:	2b0f      	cmp	r3, #15
 8013222:	ddf3      	ble.n	801320c <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013224:	2210      	movs	r2, #16
 8013226:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 801322a:	4668      	mov	r0, sp
 801322c:	f000 fdd9 	bl	8013de2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8013230:	4622      	mov	r2, r4
 8013232:	4629      	mov	r1, r5
 8013234:	4668      	mov	r0, sp
 8013236:	f000 fa77 	bl	8013728 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 801323a:	2210      	movs	r2, #16
 801323c:	2100      	movs	r1, #0
 801323e:	eb0d 0002 	add.w	r0, sp, r2
 8013242:	f000 fde6 	bl	8013e12 <memset1>
}
 8013246:	b009      	add	sp, #36	; 0x24
 8013248:	bd30      	pop	{r4, r5, pc}

0801324a <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 801324a:	780b      	ldrb	r3, [r1, #0]
 801324c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 801324e:	784b      	ldrb	r3, [r1, #1]
 8013250:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8013252:	788b      	ldrb	r3, [r1, #2]
 8013254:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8013256:	78cb      	ldrb	r3, [r1, #3]
 8013258:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 801325a:	790b      	ldrb	r3, [r1, #4]
 801325c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 801325e:	794b      	ldrb	r3, [r1, #5]
 8013260:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8013262:	798b      	ldrb	r3, [r1, #6]
 8013264:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8013266:	79cb      	ldrb	r3, [r1, #7]
 8013268:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 801326a:	7a0b      	ldrb	r3, [r1, #8]
 801326c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 801326e:	7a4b      	ldrb	r3, [r1, #9]
 8013270:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8013272:	7a8b      	ldrb	r3, [r1, #10]
 8013274:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8013276:	7acb      	ldrb	r3, [r1, #11]
 8013278:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 801327a:	7b0b      	ldrb	r3, [r1, #12]
 801327c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 801327e:	7b4b      	ldrb	r3, [r1, #13]
 8013280:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8013282:	7b8b      	ldrb	r3, [r1, #14]
 8013284:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8013286:	7bcb      	ldrb	r3, [r1, #15]
 8013288:	73c3      	strb	r3, [r0, #15]
#endif
}
 801328a:	4770      	bx	lr

0801328c <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 801328c:	e004      	b.n	8013298 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 801328e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013292:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 8013296:	461a      	mov	r2, r3
 8013298:	1e53      	subs	r3, r2, #1
 801329a:	b2db      	uxtb	r3, r3
 801329c:	2a00      	cmp	r2, #0
 801329e:	d1f6      	bne.n	801328e <copy_block_nn+0x2>
}
 80132a0:	4770      	bx	lr

080132a2 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80132a2:	780b      	ldrb	r3, [r1, #0]
 80132a4:	7802      	ldrb	r2, [r0, #0]
 80132a6:	4053      	eors	r3, r2
 80132a8:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80132aa:	784b      	ldrb	r3, [r1, #1]
 80132ac:	7842      	ldrb	r2, [r0, #1]
 80132ae:	4053      	eors	r3, r2
 80132b0:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80132b2:	788b      	ldrb	r3, [r1, #2]
 80132b4:	7882      	ldrb	r2, [r0, #2]
 80132b6:	4053      	eors	r3, r2
 80132b8:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80132ba:	78cb      	ldrb	r3, [r1, #3]
 80132bc:	78c2      	ldrb	r2, [r0, #3]
 80132be:	4053      	eors	r3, r2
 80132c0:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80132c2:	790b      	ldrb	r3, [r1, #4]
 80132c4:	7902      	ldrb	r2, [r0, #4]
 80132c6:	4053      	eors	r3, r2
 80132c8:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80132ca:	794b      	ldrb	r3, [r1, #5]
 80132cc:	7942      	ldrb	r2, [r0, #5]
 80132ce:	4053      	eors	r3, r2
 80132d0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80132d2:	798b      	ldrb	r3, [r1, #6]
 80132d4:	7982      	ldrb	r2, [r0, #6]
 80132d6:	4053      	eors	r3, r2
 80132d8:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80132da:	79cb      	ldrb	r3, [r1, #7]
 80132dc:	79c2      	ldrb	r2, [r0, #7]
 80132de:	4053      	eors	r3, r2
 80132e0:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80132e2:	7a0b      	ldrb	r3, [r1, #8]
 80132e4:	7a02      	ldrb	r2, [r0, #8]
 80132e6:	4053      	eors	r3, r2
 80132e8:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80132ea:	7a4b      	ldrb	r3, [r1, #9]
 80132ec:	7a42      	ldrb	r2, [r0, #9]
 80132ee:	4053      	eors	r3, r2
 80132f0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80132f2:	7a8b      	ldrb	r3, [r1, #10]
 80132f4:	7a82      	ldrb	r2, [r0, #10]
 80132f6:	4053      	eors	r3, r2
 80132f8:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80132fa:	7acb      	ldrb	r3, [r1, #11]
 80132fc:	7ac2      	ldrb	r2, [r0, #11]
 80132fe:	4053      	eors	r3, r2
 8013300:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8013302:	7b0b      	ldrb	r3, [r1, #12]
 8013304:	7b02      	ldrb	r2, [r0, #12]
 8013306:	4053      	eors	r3, r2
 8013308:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 801330a:	7b4b      	ldrb	r3, [r1, #13]
 801330c:	7b42      	ldrb	r2, [r0, #13]
 801330e:	4053      	eors	r3, r2
 8013310:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8013312:	7b8b      	ldrb	r3, [r1, #14]
 8013314:	7b82      	ldrb	r2, [r0, #14]
 8013316:	4053      	eors	r3, r2
 8013318:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 801331a:	7bcb      	ldrb	r3, [r1, #15]
 801331c:	7bc2      	ldrb	r2, [r0, #15]
 801331e:	4053      	eors	r3, r2
 8013320:	73c3      	strb	r3, [r0, #15]
#endif
}
 8013322:	4770      	bx	lr

08013324 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8013324:	780b      	ldrb	r3, [r1, #0]
 8013326:	f892 c000 	ldrb.w	ip, [r2]
 801332a:	ea83 030c 	eor.w	r3, r3, ip
 801332e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8013330:	784b      	ldrb	r3, [r1, #1]
 8013332:	f892 c001 	ldrb.w	ip, [r2, #1]
 8013336:	ea83 030c 	eor.w	r3, r3, ip
 801333a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 801333c:	788b      	ldrb	r3, [r1, #2]
 801333e:	f892 c002 	ldrb.w	ip, [r2, #2]
 8013342:	ea83 030c 	eor.w	r3, r3, ip
 8013346:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8013348:	78cb      	ldrb	r3, [r1, #3]
 801334a:	f892 c003 	ldrb.w	ip, [r2, #3]
 801334e:	ea83 030c 	eor.w	r3, r3, ip
 8013352:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8013354:	790b      	ldrb	r3, [r1, #4]
 8013356:	f892 c004 	ldrb.w	ip, [r2, #4]
 801335a:	ea83 030c 	eor.w	r3, r3, ip
 801335e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8013360:	794b      	ldrb	r3, [r1, #5]
 8013362:	f892 c005 	ldrb.w	ip, [r2, #5]
 8013366:	ea83 030c 	eor.w	r3, r3, ip
 801336a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 801336c:	798b      	ldrb	r3, [r1, #6]
 801336e:	f892 c006 	ldrb.w	ip, [r2, #6]
 8013372:	ea83 030c 	eor.w	r3, r3, ip
 8013376:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8013378:	79cb      	ldrb	r3, [r1, #7]
 801337a:	f892 c007 	ldrb.w	ip, [r2, #7]
 801337e:	ea83 030c 	eor.w	r3, r3, ip
 8013382:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8013384:	7a0b      	ldrb	r3, [r1, #8]
 8013386:	f892 c008 	ldrb.w	ip, [r2, #8]
 801338a:	ea83 030c 	eor.w	r3, r3, ip
 801338e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8013390:	7a4b      	ldrb	r3, [r1, #9]
 8013392:	f892 c009 	ldrb.w	ip, [r2, #9]
 8013396:	ea83 030c 	eor.w	r3, r3, ip
 801339a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 801339c:	7a8b      	ldrb	r3, [r1, #10]
 801339e:	f892 c00a 	ldrb.w	ip, [r2, #10]
 80133a2:	ea83 030c 	eor.w	r3, r3, ip
 80133a6:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80133a8:	7acb      	ldrb	r3, [r1, #11]
 80133aa:	f892 c00b 	ldrb.w	ip, [r2, #11]
 80133ae:	ea83 030c 	eor.w	r3, r3, ip
 80133b2:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80133b4:	7b0b      	ldrb	r3, [r1, #12]
 80133b6:	f892 c00c 	ldrb.w	ip, [r2, #12]
 80133ba:	ea83 030c 	eor.w	r3, r3, ip
 80133be:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80133c0:	7b4b      	ldrb	r3, [r1, #13]
 80133c2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80133c6:	ea83 030c 	eor.w	r3, r3, ip
 80133ca:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80133cc:	7b8b      	ldrb	r3, [r1, #14]
 80133ce:	f892 c00e 	ldrb.w	ip, [r2, #14]
 80133d2:	ea83 030c 	eor.w	r3, r3, ip
 80133d6:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80133d8:	7bcb      	ldrb	r3, [r1, #15]
 80133da:	7bd2      	ldrb	r2, [r2, #15]
 80133dc:	4053      	eors	r3, r2
 80133de:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80133e0:	4770      	bx	lr

080133e2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80133e2:	b508      	push	{r3, lr}
    xor_block(d, k);
 80133e4:	f7ff ff5d 	bl	80132a2 <xor_block>
}
 80133e8:	bd08      	pop	{r3, pc}
	...

080133ec <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80133ec:	7802      	ldrb	r2, [r0, #0]
 80133ee:	4b18      	ldr	r3, [pc, #96]	; (8013450 <shift_sub_rows+0x64>)
 80133f0:	5c9a      	ldrb	r2, [r3, r2]
 80133f2:	7002      	strb	r2, [r0, #0]
 80133f4:	7902      	ldrb	r2, [r0, #4]
 80133f6:	5c9a      	ldrb	r2, [r3, r2]
 80133f8:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80133fa:	7a02      	ldrb	r2, [r0, #8]
 80133fc:	5c9a      	ldrb	r2, [r3, r2]
 80133fe:	7202      	strb	r2, [r0, #8]
 8013400:	7b02      	ldrb	r2, [r0, #12]
 8013402:	5c9a      	ldrb	r2, [r3, r2]
 8013404:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8013406:	7842      	ldrb	r2, [r0, #1]
 8013408:	7941      	ldrb	r1, [r0, #5]
 801340a:	5c59      	ldrb	r1, [r3, r1]
 801340c:	7041      	strb	r1, [r0, #1]
 801340e:	7a41      	ldrb	r1, [r0, #9]
 8013410:	5c59      	ldrb	r1, [r3, r1]
 8013412:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8013414:	7b41      	ldrb	r1, [r0, #13]
 8013416:	5c59      	ldrb	r1, [r3, r1]
 8013418:	7241      	strb	r1, [r0, #9]
 801341a:	5c9a      	ldrb	r2, [r3, r2]
 801341c:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 801341e:	7882      	ldrb	r2, [r0, #2]
 8013420:	7a81      	ldrb	r1, [r0, #10]
 8013422:	5c59      	ldrb	r1, [r3, r1]
 8013424:	7081      	strb	r1, [r0, #2]
 8013426:	5c9a      	ldrb	r2, [r3, r2]
 8013428:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 801342a:	7982      	ldrb	r2, [r0, #6]
 801342c:	7b81      	ldrb	r1, [r0, #14]
 801342e:	5c59      	ldrb	r1, [r3, r1]
 8013430:	7181      	strb	r1, [r0, #6]
 8013432:	5c9a      	ldrb	r2, [r3, r2]
 8013434:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8013436:	7bc2      	ldrb	r2, [r0, #15]
 8013438:	7ac1      	ldrb	r1, [r0, #11]
 801343a:	5c59      	ldrb	r1, [r3, r1]
 801343c:	73c1      	strb	r1, [r0, #15]
 801343e:	79c1      	ldrb	r1, [r0, #7]
 8013440:	5c59      	ldrb	r1, [r3, r1]
 8013442:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8013444:	78c1      	ldrb	r1, [r0, #3]
 8013446:	5c59      	ldrb	r1, [r3, r1]
 8013448:	71c1      	strb	r1, [r0, #7]
 801344a:	5c9b      	ldrb	r3, [r3, r2]
 801344c:	70c3      	strb	r3, [r0, #3]
}
 801344e:	4770      	bx	lr
 8013450:	080184d0 	.word	0x080184d0

08013454 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8013454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013458:	b084      	sub	sp, #16
 801345a:	4604      	mov	r4, r0
    block_copy(st, dt);
 801345c:	4601      	mov	r1, r0
 801345e:	4668      	mov	r0, sp
 8013460:	f7ff fef3 	bl	801324a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8013464:	f89d c000 	ldrb.w	ip, [sp]
 8013468:	4b6a      	ldr	r3, [pc, #424]	; (8013614 <mix_sub_columns+0x1c0>)
 801346a:	f813 000c 	ldrb.w	r0, [r3, ip]
 801346e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013472:	4a69      	ldr	r2, [pc, #420]	; (8013618 <mix_sub_columns+0x1c4>)
 8013474:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013478:	f89d e00a 	ldrb.w	lr, [sp, #10]
 801347c:	4967      	ldr	r1, [pc, #412]	; (801361c <mix_sub_columns+0x1c8>)
 801347e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013482:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8013486:	5dce      	ldrb	r6, [r1, r7]
 8013488:	ea80 0009 	eor.w	r0, r0, r9
 801348c:	4068      	eors	r0, r5
 801348e:	4070      	eors	r0, r6
 8013490:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8013492:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013496:	f813 a008 	ldrb.w	sl, [r3, r8]
 801349a:	f812 900e 	ldrb.w	r9, [r2, lr]
 801349e:	ea80 0a0a 	eor.w	sl, r0, sl
 80134a2:	ea89 090a 	eor.w	r9, r9, sl
 80134a6:	ea86 0609 	eor.w	r6, r6, r9
 80134aa:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80134ac:	f811 8008 	ldrb.w	r8, [r1, r8]
 80134b0:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80134b4:	5dd6      	ldrb	r6, [r2, r7]
 80134b6:	ea80 0008 	eor.w	r0, r0, r8
 80134ba:	ea8e 0000 	eor.w	r0, lr, r0
 80134be:	4070      	eors	r0, r6
 80134c0:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80134c2:	f812 600c 	ldrb.w	r6, [r2, ip]
 80134c6:	5dd8      	ldrb	r0, [r3, r7]
 80134c8:	ea86 0608 	eor.w	r6, r6, r8
 80134cc:	4075      	eors	r5, r6
 80134ce:	4068      	eors	r0, r5
 80134d0:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80134d2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80134d6:	f813 000c 	ldrb.w	r0, [r3, ip]
 80134da:	f89d 8009 	ldrb.w	r8, [sp, #9]
 80134de:	f812 9008 	ldrb.w	r9, [r2, r8]
 80134e2:	f89d e00e 	ldrb.w	lr, [sp, #14]
 80134e6:	f811 500e 	ldrb.w	r5, [r1, lr]
 80134ea:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80134ee:	5dce      	ldrb	r6, [r1, r7]
 80134f0:	ea80 0009 	eor.w	r0, r0, r9
 80134f4:	4068      	eors	r0, r5
 80134f6:	4070      	eors	r0, r6
 80134f8:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80134fa:	f811 000c 	ldrb.w	r0, [r1, ip]
 80134fe:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013502:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013506:	ea80 0a0a 	eor.w	sl, r0, sl
 801350a:	ea89 090a 	eor.w	r9, r9, sl
 801350e:	ea86 0609 	eor.w	r6, r6, r9
 8013512:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8013514:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013518:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801351c:	5dd6      	ldrb	r6, [r2, r7]
 801351e:	ea80 0008 	eor.w	r0, r0, r8
 8013522:	ea8e 0000 	eor.w	r0, lr, r0
 8013526:	4070      	eors	r0, r6
 8013528:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 801352a:	f812 600c 	ldrb.w	r6, [r2, ip]
 801352e:	5dd8      	ldrb	r0, [r3, r7]
 8013530:	ea86 0608 	eor.w	r6, r6, r8
 8013534:	4075      	eors	r5, r6
 8013536:	4068      	eors	r0, r5
 8013538:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 801353a:	f89d c008 	ldrb.w	ip, [sp, #8]
 801353e:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013542:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8013546:	f812 9008 	ldrb.w	r9, [r2, r8]
 801354a:	f89d e002 	ldrb.w	lr, [sp, #2]
 801354e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013552:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8013556:	5dce      	ldrb	r6, [r1, r7]
 8013558:	ea80 0009 	eor.w	r0, r0, r9
 801355c:	4068      	eors	r0, r5
 801355e:	4070      	eors	r0, r6
 8013560:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8013562:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013566:	f813 a008 	ldrb.w	sl, [r3, r8]
 801356a:	f812 900e 	ldrb.w	r9, [r2, lr]
 801356e:	ea80 0a0a 	eor.w	sl, r0, sl
 8013572:	ea89 090a 	eor.w	r9, r9, sl
 8013576:	ea86 0609 	eor.w	r6, r6, r9
 801357a:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 801357c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013580:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013584:	5dd6      	ldrb	r6, [r2, r7]
 8013586:	ea80 0008 	eor.w	r0, r0, r8
 801358a:	ea8e 0000 	eor.w	r0, lr, r0
 801358e:	4070      	eors	r0, r6
 8013590:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8013592:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013596:	5dd8      	ldrb	r0, [r3, r7]
 8013598:	ea86 0608 	eor.w	r6, r6, r8
 801359c:	4075      	eors	r5, r6
 801359e:	4068      	eors	r0, r5
 80135a0:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80135a2:	f89d 600c 	ldrb.w	r6, [sp, #12]
 80135a6:	5d98      	ldrb	r0, [r3, r6]
 80135a8:	f89d 8001 	ldrb.w	r8, [sp, #1]
 80135ac:	f812 9008 	ldrb.w	r9, [r2, r8]
 80135b0:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80135b4:	f811 c007 	ldrb.w	ip, [r1, r7]
 80135b8:	f89d 500b 	ldrb.w	r5, [sp, #11]
 80135bc:	f811 e005 	ldrb.w	lr, [r1, r5]
 80135c0:	ea80 0009 	eor.w	r0, r0, r9
 80135c4:	ea8c 0000 	eor.w	r0, ip, r0
 80135c8:	ea8e 0000 	eor.w	r0, lr, r0
 80135cc:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80135ce:	5d88      	ldrb	r0, [r1, r6]
 80135d0:	f813 a008 	ldrb.w	sl, [r3, r8]
 80135d4:	f812 9007 	ldrb.w	r9, [r2, r7]
 80135d8:	ea80 0a0a 	eor.w	sl, r0, sl
 80135dc:	ea89 090a 	eor.w	r9, r9, sl
 80135e0:	ea8e 0e09 	eor.w	lr, lr, r9
 80135e4:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80135e8:	f811 1008 	ldrb.w	r1, [r1, r8]
 80135ec:	f813 e007 	ldrb.w	lr, [r3, r7]
 80135f0:	5d57      	ldrb	r7, [r2, r5]
 80135f2:	4048      	eors	r0, r1
 80135f4:	ea8e 0000 	eor.w	r0, lr, r0
 80135f8:	4078      	eors	r0, r7
 80135fa:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80135fc:	5d92      	ldrb	r2, [r2, r6]
 80135fe:	5d5b      	ldrb	r3, [r3, r5]
 8013600:	4051      	eors	r1, r2
 8013602:	ea8c 0c01 	eor.w	ip, ip, r1
 8013606:	ea83 030c 	eor.w	r3, r3, ip
 801360a:	73e3      	strb	r3, [r4, #15]
  }
 801360c:	b004      	add	sp, #16
 801360e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013612:	bf00      	nop
 8013614:	080182d0 	.word	0x080182d0
 8013618:	080183d0 	.word	0x080183d0
 801361c:	080184d0 	.word	0x080184d0

08013620 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8013620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013624:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8013626:	f1a1 0310 	sub.w	r3, r1, #16
 801362a:	b2db      	uxtb	r3, r3
 801362c:	2b10      	cmp	r3, #16
 801362e:	d806      	bhi.n	801363e <lorawan_aes_set_key+0x1e>
 8013630:	460d      	mov	r5, r1
 8013632:	4a3b      	ldr	r2, [pc, #236]	; (8013720 <lorawan_aes_set_key+0x100>)
 8013634:	fa22 f303 	lsr.w	r3, r2, r3
 8013638:	f013 0f01 	tst.w	r3, #1
 801363c:	d105      	bne.n	801364a <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 801363e:	2300      	movs	r3, #0
 8013640:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8013644:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8013646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 801364a:	460a      	mov	r2, r1
 801364c:	4601      	mov	r1, r0
 801364e:	4620      	mov	r0, r4
 8013650:	f7ff fe1c 	bl	801328c <copy_block_nn>
    hi = (keylen + 28) << 2;
 8013654:	f105 031c 	add.w	r3, r5, #28
 8013658:	b2db      	uxtb	r3, r3
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8013660:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8013664:	3b01      	subs	r3, #1
 8013666:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801366a:	462b      	mov	r3, r5
 801366c:	f04f 0c01 	mov.w	ip, #1
 8013670:	e023      	b.n	80136ba <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 8013672:	2d18      	cmp	r5, #24
 8013674:	d901      	bls.n	801367a <lorawan_aes_set_key+0x5a>
 8013676:	2a10      	cmp	r2, #16
 8013678:	d048      	beq.n	801370c <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 801367a:	1b5a      	subs	r2, r3, r5
 801367c:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 801367e:	f814 9002 	ldrb.w	r9, [r4, r2]
 8013682:	ea89 0808 	eor.w	r8, r9, r8
 8013686:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 801368a:	f102 0801 	add.w	r8, r2, #1
 801368e:	f814 8008 	ldrb.w	r8, [r4, r8]
 8013692:	f100 0901 	add.w	r9, r0, #1
 8013696:	ea88 0707 	eor.w	r7, r8, r7
 801369a:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 801369e:	1c97      	adds	r7, r2, #2
 80136a0:	5de7      	ldrb	r7, [r4, r7]
 80136a2:	f100 0802 	add.w	r8, r0, #2
 80136a6:	407e      	eors	r6, r7
 80136a8:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80136ac:	3203      	adds	r2, #3
 80136ae:	5ca6      	ldrb	r6, [r4, r2]
 80136b0:	1cc2      	adds	r2, r0, #3
 80136b2:	4071      	eors	r1, r6
 80136b4:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80136b6:	3304      	adds	r3, #4
 80136b8:	b2db      	uxtb	r3, r3
 80136ba:	4573      	cmp	r3, lr
 80136bc:	d22d      	bcs.n	801371a <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 80136be:	4618      	mov	r0, r3
 80136c0:	1f1a      	subs	r2, r3, #4
 80136c2:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 80136c6:	1eda      	subs	r2, r3, #3
 80136c8:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 80136ca:	1e9a      	subs	r2, r3, #2
 80136cc:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 80136ce:	1e5a      	subs	r2, r3, #1
 80136d0:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 80136d2:	fbb3 f2f5 	udiv	r2, r3, r5
 80136d6:	fb05 3212 	mls	r2, r5, r2, r3
 80136da:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80136de:	d1c8      	bne.n	8013672 <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 80136e0:	4a10      	ldr	r2, [pc, #64]	; (8013724 <lorawan_aes_set_key+0x104>)
 80136e2:	f812 9007 	ldrb.w	r9, [r2, r7]
 80136e6:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 80136ea:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 80136ec:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 80136ee:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 80136f2:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 80136f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80136fa:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80136fe:	b2d2      	uxtb	r2, r2
 8013700:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 8013704:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 8013708:	46c8      	mov	r8, r9
 801370a:	e7b6      	b.n	801367a <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 801370c:	4a05      	ldr	r2, [pc, #20]	; (8013724 <lorawan_aes_set_key+0x104>)
 801370e:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8013712:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8013714:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8013716:	5c51      	ldrb	r1, [r2, r1]
 8013718:	e7af      	b.n	801367a <lorawan_aes_set_key+0x5a>
    return 0;
 801371a:	2000      	movs	r0, #0
 801371c:	e793      	b.n	8013646 <lorawan_aes_set_key+0x26>
 801371e:	bf00      	nop
 8013720:	00010101 	.word	0x00010101
 8013724:	080184d0 	.word	0x080184d0

08013728 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8013728:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 801372c:	b31b      	cbz	r3, 8013776 <lorawan_aes_encrypt+0x4e>
{
 801372e:	b570      	push	{r4, r5, r6, lr}
 8013730:	b084      	sub	sp, #16
 8013732:	460e      	mov	r6, r1
 8013734:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8013736:	4601      	mov	r1, r0
 8013738:	4668      	mov	r0, sp
 801373a:	f7ff fdf3 	bl	8013324 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 801373e:	2401      	movs	r4, #1
 8013740:	e009      	b.n	8013756 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8013742:	4668      	mov	r0, sp
 8013744:	f7ff fe86 	bl	8013454 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8013748:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 801374c:	4668      	mov	r0, sp
 801374e:	f7ff fe48 	bl	80133e2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8013752:	3401      	adds	r4, #1
 8013754:	b2e4      	uxtb	r4, r4
 8013756:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 801375a:	42a3      	cmp	r3, r4
 801375c:	d8f1      	bhi.n	8013742 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 801375e:	4668      	mov	r0, sp
 8013760:	f7ff fe44 	bl	80133ec <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8013764:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8013768:	4669      	mov	r1, sp
 801376a:	4630      	mov	r0, r6
 801376c:	f7ff fdda 	bl	8013324 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8013770:	2000      	movs	r0, #0
}
 8013772:	b004      	add	sp, #16
 8013774:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8013776:	20ff      	movs	r0, #255	; 0xff
}
 8013778:	4770      	bx	lr
	...

0801377c <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801377c:	2300      	movs	r3, #0
 801377e:	2b0a      	cmp	r3, #10
 8013780:	d817      	bhi.n	80137b2 <GetKeyByID+0x36>
{
 8013782:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8013784:	4a0c      	ldr	r2, [pc, #48]	; (80137b8 <GetKeyByID+0x3c>)
 8013786:	6814      	ldr	r4, [r2, #0]
 8013788:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801378c:	4422      	add	r2, r4
 801378e:	7e12      	ldrb	r2, [r2, #24]
 8013790:	4282      	cmp	r2, r0
 8013792:	d006      	beq.n	80137a2 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013794:	3301      	adds	r3, #1
 8013796:	b2db      	uxtb	r3, r3
 8013798:	2b0a      	cmp	r3, #10
 801379a:	d9f3      	bls.n	8013784 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801379c:	2003      	movs	r0, #3
}
 801379e:	bc10      	pop	{r4}
 80137a0:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 80137a2:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 80137a6:	f10c 0c18 	add.w	ip, ip, #24
 80137aa:	4464      	add	r4, ip
 80137ac:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80137ae:	2000      	movs	r0, #0
 80137b0:	e7f5      	b.n	801379e <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80137b2:	2003      	movs	r0, #3
}
 80137b4:	4770      	bx	lr
 80137b6:	bf00      	nop
 80137b8:	20004410 	.word	0x20004410

080137bc <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 80137bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c0:	b0cc      	sub	sp, #304	; 0x130
 80137c2:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 80137c4:	b3a9      	cbz	r1, 8013832 <ComputeCmac+0x76>
 80137c6:	4607      	mov	r7, r0
 80137c8:	4616      	mov	r6, r2
 80137ca:	461c      	mov	r4, r3
 80137cc:	4688      	mov	r8, r1
 80137ce:	b395      	cbz	r5, 8013836 <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 80137d0:	a802      	add	r0, sp, #8
 80137d2:	f7ff fbd5 	bl	8012f80 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80137d6:	a901      	add	r1, sp, #4
 80137d8:	4620      	mov	r0, r4
 80137da:	f7ff ffcf 	bl	801377c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80137de:	4604      	mov	r4, r0
 80137e0:	b118      	cbz	r0, 80137ea <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 80137e2:	4620      	mov	r0, r4
 80137e4:	b04c      	add	sp, #304	; 0x130
 80137e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80137ea:	9901      	ldr	r1, [sp, #4]
 80137ec:	3101      	adds	r1, #1
 80137ee:	a802      	add	r0, sp, #8
 80137f0:	f7ff fbd5 	bl	8012f9e <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 80137f4:	b127      	cbz	r7, 8013800 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 80137f6:	2210      	movs	r2, #16
 80137f8:	4639      	mov	r1, r7
 80137fa:	a802      	add	r0, sp, #8
 80137fc:	f7ff fbd6 	bl	8012fac <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8013800:	4632      	mov	r2, r6
 8013802:	4641      	mov	r1, r8
 8013804:	a802      	add	r0, sp, #8
 8013806:	f7ff fbd1 	bl	8012fac <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 801380a:	a902      	add	r1, sp, #8
 801380c:	a848      	add	r0, sp, #288	; 0x120
 801380e:	f7ff fc3b 	bl	8013088 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8013812:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 8013816:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 801381a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801381e:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 8013822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013826:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 801382a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801382e:	602b      	str	r3, [r5, #0]
 8013830:	e7d7      	b.n	80137e2 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8013832:	2402      	movs	r4, #2
 8013834:	e7d5      	b.n	80137e2 <ComputeCmac+0x26>
 8013836:	2402      	movs	r4, #2
 8013838:	e7d3      	b.n	80137e2 <ComputeCmac+0x26>
	...

0801383c <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 801383c:	b140      	cbz	r0, 8013850 <SecureElementInit+0x14>
{
 801383e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8013840:	4a04      	ldr	r2, [pc, #16]	; (8013854 <SecureElementInit+0x18>)
 8013842:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8013844:	22d8      	movs	r2, #216	; 0xd8
 8013846:	4904      	ldr	r1, [pc, #16]	; (8013858 <SecureElementInit+0x1c>)
 8013848:	f000 facb 	bl	8013de2 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 801384c:	2000      	movs	r0, #0
}
 801384e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013850:	2002      	movs	r0, #2
}
 8013852:	4770      	bx	lr
 8013854:	20004410 	.word	0x20004410
 8013858:	0803e500 	.word	0x0803e500

0801385c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801385c:	2300      	movs	r3, #0
 801385e:	2b0a      	cmp	r3, #10
 8013860:	d817      	bhi.n	8013892 <SecureElementGetKeyByID+0x36>
{
 8013862:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8013864:	4a0c      	ldr	r2, [pc, #48]	; (8013898 <SecureElementGetKeyByID+0x3c>)
 8013866:	6814      	ldr	r4, [r2, #0]
 8013868:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801386c:	4422      	add	r2, r4
 801386e:	7e12      	ldrb	r2, [r2, #24]
 8013870:	4282      	cmp	r2, r0
 8013872:	d006      	beq.n	8013882 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013874:	3301      	adds	r3, #1
 8013876:	b2db      	uxtb	r3, r3
 8013878:	2b0a      	cmp	r3, #10
 801387a:	d9f3      	bls.n	8013864 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801387c:	2003      	movs	r0, #3
}
 801387e:	bc10      	pop	{r4}
 8013880:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8013882:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8013886:	f10c 0c18 	add.w	ip, ip, #24
 801388a:	4464      	add	r4, ip
 801388c:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 801388e:	2000      	movs	r0, #0
 8013890:	e7f5      	b.n	801387e <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013892:	2003      	movs	r0, #3
}
 8013894:	4770      	bx	lr
 8013896:	bf00      	nop
 8013898:	20004410 	.word	0x20004410

0801389c <PrintKey>:
{
 801389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a0:	b099      	sub	sp, #100	; 0x64
 80138a2:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 80138a4:	a917      	add	r1, sp, #92	; 0x5c
 80138a6:	f7ff ffd9 	bl	801385c <SecureElementGetKeyByID>
 80138aa:	4603      	mov	r3, r0
 80138ac:	2800      	cmp	r0, #0
 80138ae:	d042      	beq.n	8013936 <PrintKey+0x9a>
}
 80138b0:	b019      	add	sp, #100	; 0x64
 80138b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 80138b6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80138ba:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 80138be:	689b      	ldr	r3, [r3, #8]
 80138c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80138c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80138c4:	785a      	ldrb	r2, [r3, #1]
 80138c6:	9214      	str	r2, [sp, #80]	; 0x50
 80138c8:	7899      	ldrb	r1, [r3, #2]
 80138ca:	9115      	str	r1, [sp, #84]	; 0x54
 80138cc:	78da      	ldrb	r2, [r3, #3]
 80138ce:	7919      	ldrb	r1, [r3, #4]
 80138d0:	7958      	ldrb	r0, [r3, #5]
 80138d2:	799c      	ldrb	r4, [r3, #6]
 80138d4:	79dd      	ldrb	r5, [r3, #7]
 80138d6:	7a1e      	ldrb	r6, [r3, #8]
 80138d8:	7a5f      	ldrb	r7, [r3, #9]
 80138da:	f893 c00a 	ldrb.w	ip, [r3, #10]
 80138de:	f893 e00b 	ldrb.w	lr, [r3, #11]
 80138e2:	f893 800c 	ldrb.w	r8, [r3, #12]
 80138e6:	f893 900d 	ldrb.w	r9, [r3, #13]
 80138ea:	f893 a00e 	ldrb.w	sl, [r3, #14]
 80138ee:	f893 b00f 	ldrb.w	fp, [r3, #15]
 80138f2:	7c1b      	ldrb	r3, [r3, #16]
 80138f4:	9310      	str	r3, [sp, #64]	; 0x40
 80138f6:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 80138fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80138fe:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8013902:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8013906:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 801390a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 801390e:	9709      	str	r7, [sp, #36]	; 0x24
 8013910:	9608      	str	r6, [sp, #32]
 8013912:	9507      	str	r5, [sp, #28]
 8013914:	9406      	str	r4, [sp, #24]
 8013916:	9005      	str	r0, [sp, #20]
 8013918:	9104      	str	r1, [sp, #16]
 801391a:	9203      	str	r2, [sp, #12]
 801391c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801391e:	9102      	str	r1, [sp, #8]
 8013920:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013922:	9201      	str	r2, [sp, #4]
 8013924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	4b09      	ldr	r3, [pc, #36]	; (8013950 <PrintKey+0xb4>)
 801392a:	2200      	movs	r2, #0
 801392c:	4611      	mov	r1, r2
 801392e:	2002      	movs	r0, #2
 8013930:	f002 f934 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
                return;
 8013934:	e7bc      	b.n	80138b0 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013936:	2b0a      	cmp	r3, #10
 8013938:	d8ba      	bhi.n	80138b0 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 801393a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801393e:	4905      	ldr	r1, [pc, #20]	; (8013954 <PrintKey+0xb8>)
 8013940:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 8013944:	42a2      	cmp	r2, r4
 8013946:	d0b6      	beq.n	80138b6 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013948:	3301      	adds	r3, #1
 801394a:	b2db      	uxtb	r3, r3
 801394c:	e7f3      	b.n	8013936 <PrintKey+0x9a>
 801394e:	bf00      	nop
 8013950:	080185d0 	.word	0x080185d0
 8013954:	08018768 	.word	0x08018768

08013958 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 8013958:	2b0b      	cmp	r3, #11
 801395a:	d80a      	bhi.n	8013972 <SecureElementComputeAesCmac+0x1a>
{
 801395c:	b500      	push	{lr}
 801395e:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8013960:	f8dd c010 	ldr.w	ip, [sp, #16]
 8013964:	f8cd c000 	str.w	ip, [sp]
 8013968:	f7ff ff28 	bl	80137bc <ComputeCmac>
}
 801396c:	b003      	add	sp, #12
 801396e:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013972:	2003      	movs	r0, #3
}
 8013974:	4770      	bx	lr

08013976 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8013976:	b190      	cbz	r0, 801399e <SecureElementVerifyAesCmac+0x28>
{
 8013978:	b510      	push	{r4, lr}
 801397a:	b084      	sub	sp, #16
 801397c:	468c      	mov	ip, r1
 801397e:	4614      	mov	r4, r2
 8013980:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8013982:	2000      	movs	r0, #0
 8013984:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8013986:	aa03      	add	r2, sp, #12
 8013988:	9200      	str	r2, [sp, #0]
 801398a:	4662      	mov	r2, ip
 801398c:	f7ff ff16 	bl	80137bc <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8013990:	b918      	cbnz	r0, 801399a <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8013992:	9b03      	ldr	r3, [sp, #12]
 8013994:	42a3      	cmp	r3, r4
 8013996:	d000      	beq.n	801399a <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8013998:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 801399a:	b004      	add	sp, #16
 801399c:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801399e:	2002      	movs	r0, #2
}
 80139a0:	4770      	bx	lr

080139a2 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 80139a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139a6:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 80139a8:	b348      	cbz	r0, 80139fe <SecureElementAesEncrypt+0x5c>
 80139aa:	460d      	mov	r5, r1
 80139ac:	4614      	mov	r4, r2
 80139ae:	461e      	mov	r6, r3
 80139b0:	4607      	mov	r7, r0
 80139b2:	b33b      	cbz	r3, 8013a04 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 80139b4:	f011 0f0f 	tst.w	r1, #15
 80139b8:	d127      	bne.n	8013a0a <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80139ba:	22f0      	movs	r2, #240	; 0xf0
 80139bc:	2100      	movs	r1, #0
 80139be:	a801      	add	r0, sp, #4
 80139c0:	f000 fa27 	bl	8013e12 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80139c4:	4669      	mov	r1, sp
 80139c6:	4620      	mov	r0, r4
 80139c8:	f7ff fed8 	bl	801377c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80139cc:	4680      	mov	r8, r0
 80139ce:	b118      	cbz	r0, 80139d8 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 80139d0:	4640      	mov	r0, r8
 80139d2:	b03e      	add	sp, #248	; 0xf8
 80139d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80139d8:	aa01      	add	r2, sp, #4
 80139da:	2110      	movs	r1, #16
 80139dc:	9800      	ldr	r0, [sp, #0]
 80139de:	3001      	adds	r0, #1
 80139e0:	f7ff fe1e 	bl	8013620 <lorawan_aes_set_key>
        uint8_t block = 0;
 80139e4:	4644      	mov	r4, r8
        while( size != 0 )
 80139e6:	e007      	b.n	80139f8 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 80139e8:	aa01      	add	r2, sp, #4
 80139ea:	1931      	adds	r1, r6, r4
 80139ec:	1938      	adds	r0, r7, r4
 80139ee:	f7ff fe9b 	bl	8013728 <lorawan_aes_encrypt>
            block = block + 16;
 80139f2:	3410      	adds	r4, #16
 80139f4:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 80139f6:	3d10      	subs	r5, #16
        while( size != 0 )
 80139f8:	2d00      	cmp	r5, #0
 80139fa:	d1f5      	bne.n	80139e8 <SecureElementAesEncrypt+0x46>
 80139fc:	e7e8      	b.n	80139d0 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 80139fe:	f04f 0802 	mov.w	r8, #2
 8013a02:	e7e5      	b.n	80139d0 <SecureElementAesEncrypt+0x2e>
 8013a04:	f04f 0802 	mov.w	r8, #2
 8013a08:	e7e2      	b.n	80139d0 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8013a0a:	f04f 0805 	mov.w	r8, #5
 8013a0e:	e7df      	b.n	80139d0 <SecureElementAesEncrypt+0x2e>

08013a10 <SecureElementSetKey>:
{
 8013a10:	b530      	push	{r4, r5, lr}
 8013a12:	b085      	sub	sp, #20
    if( key == NULL )
 8013a14:	2900      	cmp	r1, #0
 8013a16:	d038      	beq.n	8013a8a <SecureElementSetKey+0x7a>
 8013a18:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	2b0a      	cmp	r3, #10
 8013a1e:	d830      	bhi.n	8013a82 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8013a20:	4a1b      	ldr	r2, [pc, #108]	; (8013a90 <SecureElementSetKey+0x80>)
 8013a22:	6811      	ldr	r1, [r2, #0]
 8013a24:	461c      	mov	r4, r3
 8013a26:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8013a2a:	440a      	add	r2, r1
 8013a2c:	7e12      	ldrb	r2, [r2, #24]
 8013a2e:	4282      	cmp	r2, r0
 8013a30:	d002      	beq.n	8013a38 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013a32:	3301      	adds	r3, #1
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	e7f1      	b.n	8013a1c <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 8013a38:	280d      	cmp	r0, #13
 8013a3a:	d00a      	beq.n	8013a52 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8013a3c:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8013a40:	3418      	adds	r4, #24
 8013a42:	1908      	adds	r0, r1, r4
 8013a44:	2210      	movs	r2, #16
 8013a46:	4661      	mov	r1, ip
 8013a48:	3001      	adds	r0, #1
 8013a4a:	f000 f9ca 	bl	8013de2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8013a4e:	2500      	movs	r5, #0
 8013a50:	e018      	b.n	8013a84 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8013a52:	2300      	movs	r3, #0
 8013a54:	9300      	str	r3, [sp, #0]
 8013a56:	9301      	str	r3, [sp, #4]
 8013a58:	9302      	str	r3, [sp, #8]
 8013a5a:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8013a5c:	466b      	mov	r3, sp
 8013a5e:	220c      	movs	r2, #12
 8013a60:	2110      	movs	r1, #16
 8013a62:	4660      	mov	r0, ip
 8013a64:	f7ff ff9d 	bl	80139a2 <SecureElementAesEncrypt>
 8013a68:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8013a6a:	4b09      	ldr	r3, [pc, #36]	; (8013a90 <SecureElementSetKey+0x80>)
 8013a6c:	6818      	ldr	r0, [r3, #0]
 8013a6e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8013a72:	3418      	adds	r4, #24
 8013a74:	4420      	add	r0, r4
 8013a76:	2210      	movs	r2, #16
 8013a78:	4669      	mov	r1, sp
 8013a7a:	3001      	adds	r0, #1
 8013a7c:	f000 f9b1 	bl	8013de2 <memcpy1>
                return retval;
 8013a80:	e000      	b.n	8013a84 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013a82:	2503      	movs	r5, #3
}
 8013a84:	4628      	mov	r0, r5
 8013a86:	b005      	add	sp, #20
 8013a88:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013a8a:	2502      	movs	r5, #2
 8013a8c:	e7fa      	b.n	8013a84 <SecureElementSetKey+0x74>
 8013a8e:	bf00      	nop
 8013a90:	20004410 	.word	0x20004410

08013a94 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8013a94:	b1d0      	cbz	r0, 8013acc <SecureElementDeriveAndStoreKey+0x38>
{
 8013a96:	b510      	push	{r4, lr}
 8013a98:	b084      	sub	sp, #16
 8013a9a:	4614      	mov	r4, r2
 8013a9c:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8013a9e:	2a0c      	cmp	r2, #12
 8013aa0:	d101      	bne.n	8013aa6 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8013aa2:	290b      	cmp	r1, #11
 8013aa4:	d114      	bne.n	8013ad0 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	9300      	str	r3, [sp, #0]
 8013aaa:	9301      	str	r3, [sp, #4]
 8013aac:	9302      	str	r3, [sp, #8]
 8013aae:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8013ab0:	466b      	mov	r3, sp
 8013ab2:	460a      	mov	r2, r1
 8013ab4:	2110      	movs	r1, #16
 8013ab6:	4660      	mov	r0, ip
 8013ab8:	f7ff ff73 	bl	80139a2 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8013abc:	b108      	cbz	r0, 8013ac2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8013abe:	b004      	add	sp, #16
 8013ac0:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8013ac2:	4669      	mov	r1, sp
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	f7ff ffa3 	bl	8013a10 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8013aca:	e7f8      	b.n	8013abe <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8013acc:	2002      	movs	r0, #2
}
 8013ace:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013ad0:	2003      	movs	r0, #3
 8013ad2:	e7f4      	b.n	8013abe <SecureElementDeriveAndStoreKey+0x2a>

08013ad4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8013ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ad6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013ada:	9c07      	ldr	r4, [sp, #28]
 8013adc:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8013ade:	b35b      	cbz	r3, 8013b38 <SecureElementProcessJoinAccept+0x64>
 8013ae0:	461f      	mov	r7, r3
 8013ae2:	b35c      	cbz	r4, 8013b3c <SecureElementProcessJoinAccept+0x68>
 8013ae4:	b366      	cbz	r6, 8013b40 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8013ae6:	2d21      	cmp	r5, #33	; 0x21
 8013ae8:	d82c      	bhi.n	8013b44 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8013aea:	462a      	mov	r2, r5
 8013aec:	4619      	mov	r1, r3
 8013aee:	4620      	mov	r0, r4
 8013af0:	f000 f977 	bl	8013de2 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8013af4:	1c63      	adds	r3, r4, #1
 8013af6:	2201      	movs	r2, #1
 8013af8:	1e69      	subs	r1, r5, #1
 8013afa:	18b8      	adds	r0, r7, r2
 8013afc:	f7ff ff51 	bl	80139a2 <SecureElementAesEncrypt>
 8013b00:	bb10      	cbnz	r0, 8013b48 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8013b02:	7ae3      	ldrb	r3, [r4, #11]
 8013b04:	09db      	lsrs	r3, r3, #7
 8013b06:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8013b08:	1961      	adds	r1, r4, r5
 8013b0a:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8013b0e:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8013b12:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8013b16:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8013b1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8013b1e:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8013b22:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8013b26:	b98b      	cbnz	r3, 8013b4c <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8013b28:	2301      	movs	r3, #1
 8013b2a:	1f29      	subs	r1, r5, #4
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	f7ff ff22 	bl	8013976 <SecureElementVerifyAesCmac>
 8013b32:	b140      	cbz	r0, 8013b46 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8013b34:	2001      	movs	r0, #1
 8013b36:	e006      	b.n	8013b46 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8013b38:	2002      	movs	r0, #2
 8013b3a:	e004      	b.n	8013b46 <SecureElementProcessJoinAccept+0x72>
 8013b3c:	2002      	movs	r0, #2
 8013b3e:	e002      	b.n	8013b46 <SecureElementProcessJoinAccept+0x72>
 8013b40:	2002      	movs	r0, #2
 8013b42:	e000      	b.n	8013b46 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8013b44:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8013b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8013b48:	2007      	movs	r0, #7
 8013b4a:	e7fc      	b.n	8013b46 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8013b4c:	2004      	movs	r0, #4
 8013b4e:	e7fa      	b.n	8013b46 <SecureElementProcessJoinAccept+0x72>

08013b50 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8013b50:	b140      	cbz	r0, 8013b64 <SecureElementSetDevEui+0x14>
{
 8013b52:	b508      	push	{r3, lr}
 8013b54:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8013b56:	2208      	movs	r2, #8
 8013b58:	4b03      	ldr	r3, [pc, #12]	; (8013b68 <SecureElementSetDevEui+0x18>)
 8013b5a:	6818      	ldr	r0, [r3, #0]
 8013b5c:	f000 f941 	bl	8013de2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8013b60:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8013b62:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013b64:	2002      	movs	r0, #2
}
 8013b66:	4770      	bx	lr
 8013b68:	20004410 	.word	0x20004410

08013b6c <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8013b6c:	b138      	cbz	r0, 8013b7e <SecureElementGetDevEui+0x12>
{
 8013b6e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8013b70:	2208      	movs	r2, #8
 8013b72:	4904      	ldr	r1, [pc, #16]	; (8013b84 <SecureElementGetDevEui+0x18>)
 8013b74:	6809      	ldr	r1, [r1, #0]
 8013b76:	f000 f934 	bl	8013de2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8013b7a:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8013b7c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013b7e:	2002      	movs	r0, #2
}
 8013b80:	4770      	bx	lr
 8013b82:	bf00      	nop
 8013b84:	20004410 	.word	0x20004410

08013b88 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8013b88:	b148      	cbz	r0, 8013b9e <SecureElementSetJoinEui+0x16>
{
 8013b8a:	b508      	push	{r3, lr}
 8013b8c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8013b8e:	4b05      	ldr	r3, [pc, #20]	; (8013ba4 <SecureElementSetJoinEui+0x1c>)
 8013b90:	6818      	ldr	r0, [r3, #0]
 8013b92:	2208      	movs	r2, #8
 8013b94:	4410      	add	r0, r2
 8013b96:	f000 f924 	bl	8013de2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8013b9a:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8013b9c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013b9e:	2002      	movs	r0, #2
}
 8013ba0:	4770      	bx	lr
 8013ba2:	bf00      	nop
 8013ba4:	20004410 	.word	0x20004410

08013ba8 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8013ba8:	b140      	cbz	r0, 8013bbc <SecureElementGetJoinEui+0x14>
{
 8013baa:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8013bac:	4a04      	ldr	r2, [pc, #16]	; (8013bc0 <SecureElementGetJoinEui+0x18>)
 8013bae:	6811      	ldr	r1, [r2, #0]
 8013bb0:	2208      	movs	r2, #8
 8013bb2:	4411      	add	r1, r2
 8013bb4:	f000 f915 	bl	8013de2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8013bb8:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8013bba:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013bbc:	2002      	movs	r0, #2
}
 8013bbe:	4770      	bx	lr
 8013bc0:	20004410 	.word	0x20004410

08013bc4 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8013bc4:	2802      	cmp	r0, #2
 8013bc6:	d004      	beq.n	8013bd2 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8013bc8:	4b04      	ldr	r3, [pc, #16]	; (8013bdc <SecureElementSetDevAddr+0x18>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8013bce:	2000      	movs	r0, #0
 8013bd0:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8013bd2:	4b02      	ldr	r3, [pc, #8]	; (8013bdc <SecureElementSetDevAddr+0x18>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	6119      	str	r1, [r3, #16]
 8013bd8:	e7f9      	b.n	8013bce <SecureElementSetDevAddr+0xa>
 8013bda:	bf00      	nop
 8013bdc:	20004410 	.word	0x20004410

08013be0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 8013be0:	b169      	cbz	r1, 8013bfe <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8013be2:	2802      	cmp	r0, #2
 8013be4:	d005      	beq.n	8013bf2 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8013be6:	4a07      	ldr	r2, [pc, #28]	; (8013c04 <SecureElementGetDevAddr+0x24>)
 8013be8:	6812      	ldr	r2, [r2, #0]
 8013bea:	6952      	ldr	r2, [r2, #20]
 8013bec:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8013bee:	2000      	movs	r0, #0
 8013bf0:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8013bf2:	4a04      	ldr	r2, [pc, #16]	; (8013c04 <SecureElementGetDevAddr+0x24>)
 8013bf4:	6812      	ldr	r2, [r2, #0]
 8013bf6:	6912      	ldr	r2, [r2, #16]
 8013bf8:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 8013bfa:	2000      	movs	r0, #0
 8013bfc:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8013bfe:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8013c00:	4770      	bx	lr
 8013c02:	bf00      	nop
 8013c04:	20004410 	.word	0x20004410

08013c08 <SecureElementInitMcuID>:
{
 8013c08:	b530      	push	{r4, r5, lr}
 8013c0a:	b085      	sub	sp, #20
 8013c0c:	4605      	mov	r5, r0
 8013c0e:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 8013c10:	2300      	movs	r3, #0
 8013c12:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 8013c14:	a802      	add	r0, sp, #8
 8013c16:	f7ff ffa9 	bl	8013b6c <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8013c1a:	a901      	add	r1, sp, #4
 8013c1c:	2001      	movs	r0, #1
 8013c1e:	f7ff ffdf 	bl	8013be0 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 8013c22:	b195      	cbz	r5, 8013c4a <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8013c24:	2300      	movs	r3, #0
 8013c26:	2b07      	cmp	r3, #7
 8013c28:	d808      	bhi.n	8013c3c <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 8013c2a:	f103 0210 	add.w	r2, r3, #16
 8013c2e:	446a      	add	r2, sp
 8013c30:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8013c34:	b9aa      	cbnz	r2, 8013c62 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8013c36:	3301      	adds	r3, #1
 8013c38:	b2db      	uxtb	r3, r3
 8013c3a:	e7f4      	b.n	8013c26 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 8013c3c:	2300      	movs	r3, #0
        if( id_init == false )
 8013c3e:	b923      	cbnz	r3, 8013c4a <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8013c40:	a802      	add	r0, sp, #8
 8013c42:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 8013c44:	a802      	add	r0, sp, #8
 8013c46:	f7ff ff83 	bl	8013b50 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8013c4a:	b13c      	cbz	r4, 8013c5c <SecureElementInitMcuID+0x54>
 8013c4c:	9b01      	ldr	r3, [sp, #4]
 8013c4e:	b92b      	cbnz	r3, 8013c5c <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8013c50:	a801      	add	r0, sp, #4
 8013c52:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8013c54:	9901      	ldr	r1, [sp, #4]
 8013c56:	2001      	movs	r0, #1
 8013c58:	f7ff ffb4 	bl	8013bc4 <SecureElementSetDevAddr>
}
 8013c5c:	2000      	movs	r0, #0
 8013c5e:	b005      	add	sp, #20
 8013c60:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 8013c62:	2301      	movs	r3, #1
 8013c64:	e7eb      	b.n	8013c3e <SecureElementInitMcuID+0x36>
	...

08013c68 <PrintIds>:
{
 8013c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c6a:	b08f      	sub	sp, #60	; 0x3c
 8013c6c:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8013c6e:	2400      	movs	r4, #0
 8013c70:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 8013c72:	a80a      	add	r0, sp, #40	; 0x28
 8013c74:	f7ff ff7a 	bl	8013b6c <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8013c78:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8013c7c:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8013c80:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 8013c84:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8013c88:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8013c8c:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 8013c90:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 8013c94:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 8013c98:	f8cd e01c 	str.w	lr, [sp, #28]
 8013c9c:	f8cd c018 	str.w	ip, [sp, #24]
 8013ca0:	9705      	str	r7, [sp, #20]
 8013ca2:	9604      	str	r6, [sp, #16]
 8013ca4:	9003      	str	r0, [sp, #12]
 8013ca6:	9102      	str	r1, [sp, #8]
 8013ca8:	9201      	str	r2, [sp, #4]
 8013caa:	9300      	str	r3, [sp, #0]
 8013cac:	4b20      	ldr	r3, [pc, #128]	; (8013d30 <PrintIds+0xc8>)
 8013cae:	4622      	mov	r2, r4
 8013cb0:	4621      	mov	r1, r4
 8013cb2:	2002      	movs	r0, #2
 8013cb4:	f001 ff72 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 8013cb8:	a80c      	add	r0, sp, #48	; 0x30
 8013cba:	f7ff ff75 	bl	8013ba8 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8013cbe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8013cc2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8013cc6:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8013cca:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8013cce:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8013cd2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 8013cd6:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 8013cda:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 8013cde:	f8cd e01c 	str.w	lr, [sp, #28]
 8013ce2:	f8cd c018 	str.w	ip, [sp, #24]
 8013ce6:	9705      	str	r7, [sp, #20]
 8013ce8:	9604      	str	r6, [sp, #16]
 8013cea:	9003      	str	r0, [sp, #12]
 8013cec:	9102      	str	r1, [sp, #8]
 8013cee:	9201      	str	r2, [sp, #4]
 8013cf0:	9300      	str	r3, [sp, #0]
 8013cf2:	4b10      	ldr	r3, [pc, #64]	; (8013d34 <PrintIds+0xcc>)
 8013cf4:	4622      	mov	r2, r4
 8013cf6:	4621      	mov	r1, r4
 8013cf8:	2002      	movs	r0, #2
 8013cfa:	f001 ff4f 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 8013cfe:	a909      	add	r1, sp, #36	; 0x24
 8013d00:	4628      	mov	r0, r5
 8013d02:	f7ff ff6d 	bl	8013be0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8013d06:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8013d0a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8013d0e:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8013d12:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8013d16:	9003      	str	r0, [sp, #12]
 8013d18:	9102      	str	r1, [sp, #8]
 8013d1a:	9201      	str	r2, [sp, #4]
 8013d1c:	9300      	str	r3, [sp, #0]
 8013d1e:	4b06      	ldr	r3, [pc, #24]	; (8013d38 <PrintIds+0xd0>)
 8013d20:	4622      	mov	r2, r4
 8013d22:	4621      	mov	r1, r4
 8013d24:	2002      	movs	r0, #2
 8013d26:	f001 ff39 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 8013d2a:	b00f      	add	sp, #60	; 0x3c
 8013d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d2e:	bf00      	nop
 8013d30:	0801862c 	.word	0x0801862c
 8013d34:	0801866c 	.word	0x0801866c
 8013d38:	080186ac 	.word	0x080186ac

08013d3c <SecureElementPrintKeys>:
{
 8013d3c:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 8013d3e:	2000      	movs	r0, #0
 8013d40:	f7ff fdac 	bl	801389c <PrintKey>
    PrintKey( NWK_KEY );
 8013d44:	2001      	movs	r0, #1
 8013d46:	f7ff fda9 	bl	801389c <PrintKey>
    PrintKey( APP_S_KEY );
 8013d4a:	2009      	movs	r0, #9
 8013d4c:	f7ff fda6 	bl	801389c <PrintKey>
    PrintKey( NWK_S_KEY );
 8013d50:	2008      	movs	r0, #8
 8013d52:	f7ff fda3 	bl	801389c <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 8013d56:	2000      	movs	r0, #0
 8013d58:	f7ff ff86 	bl	8013c68 <PrintIds>
}
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	bd08      	pop	{r3, pc}

08013d60 <SecureElementPrintSessionKeys>:
{
 8013d60:	b510      	push	{r4, lr}
 8013d62:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 8013d64:	200b      	movs	r0, #11
 8013d66:	f7ff fd99 	bl	801389c <PrintKey>
    PrintKey( MC_KE_KEY );
 8013d6a:	200c      	movs	r0, #12
 8013d6c:	f7ff fd96 	bl	801389c <PrintKey>
    PrintKey( APP_S_KEY );
 8013d70:	2009      	movs	r0, #9
 8013d72:	f7ff fd93 	bl	801389c <PrintKey>
    PrintKey( NWK_S_KEY );
 8013d76:	2008      	movs	r0, #8
 8013d78:	f7ff fd90 	bl	801389c <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8013d7c:	200a      	movs	r0, #10
 8013d7e:	f7ff fd8d 	bl	801389c <PrintKey>
    PrintIds( mode );
 8013d82:	4620      	mov	r0, r4
 8013d84:	f7ff ff70 	bl	8013c68 <PrintIds>
}
 8013d88:	2000      	movs	r0, #0
 8013d8a:	bd10      	pop	{r4, pc}

08013d8c <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8013d8c:	4b09      	ldr	r3, [pc, #36]	; (8013db4 <rand1+0x28>)
 8013d8e:	681a      	ldr	r2, [r3, #0]
 8013d90:	4909      	ldr	r1, [pc, #36]	; (8013db8 <rand1+0x2c>)
 8013d92:	f243 0039 	movw	r0, #12345	; 0x3039
 8013d96:	fb01 0002 	mla	r0, r1, r2, r0
 8013d9a:	6018      	str	r0, [r3, #0]
 8013d9c:	2303      	movs	r3, #3
 8013d9e:	fba3 2300 	umull	r2, r3, r3, r0
 8013da2:	1ac2      	subs	r2, r0, r3
 8013da4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8013da8:	0f9b      	lsrs	r3, r3, #30
 8013daa:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8013dae:	1ac0      	subs	r0, r0, r3
 8013db0:	4770      	bx	lr
 8013db2:	bf00      	nop
 8013db4:	20000174 	.word	0x20000174
 8013db8:	41c64e6d 	.word	0x41c64e6d

08013dbc <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8013dbc:	4b01      	ldr	r3, [pc, #4]	; (8013dc4 <srand1+0x8>)
 8013dbe:	6018      	str	r0, [r3, #0]
}
 8013dc0:	4770      	bx	lr
 8013dc2:	bf00      	nop
 8013dc4:	20000174 	.word	0x20000174

08013dc8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8013dc8:	b538      	push	{r3, r4, r5, lr}
 8013dca:	4605      	mov	r5, r0
 8013dcc:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8013dce:	f7ff ffdd 	bl	8013d8c <rand1>
 8013dd2:	1b61      	subs	r1, r4, r5
 8013dd4:	3101      	adds	r1, #1
 8013dd6:	fb90 f3f1 	sdiv	r3, r0, r1
 8013dda:	fb01 0013 	mls	r0, r1, r3, r0
}
 8013dde:	4428      	add	r0, r5
 8013de0:	bd38      	pop	{r3, r4, r5, pc}

08013de2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8013de2:	e004      	b.n	8013dee <memcpy1+0xc>
    {
        *dst++ = *src++;
 8013de4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013de8:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8013dec:	461a      	mov	r2, r3
 8013dee:	1e53      	subs	r3, r2, #1
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	2a00      	cmp	r2, #0
 8013df4:	d1f6      	bne.n	8013de4 <memcpy1+0x2>
    }
}
 8013df6:	4770      	bx	lr

08013df8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8013df8:	1e53      	subs	r3, r2, #1
 8013dfa:	4418      	add	r0, r3
    while( size-- )
 8013dfc:	e004      	b.n	8013e08 <memcpyr+0x10>
    {
        *dst-- = *src++;
 8013dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e02:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8013e06:	461a      	mov	r2, r3
 8013e08:	1e53      	subs	r3, r2, #1
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	2a00      	cmp	r2, #0
 8013e0e:	d1f6      	bne.n	8013dfe <memcpyr+0x6>
    }
}
 8013e10:	4770      	bx	lr

08013e12 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8013e12:	e002      	b.n	8013e1a <memset1+0x8>
    {
        *dst++ = value;
 8013e14:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8013e18:	461a      	mov	r2, r3
 8013e1a:	1e53      	subs	r3, r2, #1
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	2a00      	cmp	r2, #0
 8013e20:	d1f8      	bne.n	8013e14 <memset1+0x2>
    }
}
 8013e22:	4770      	bx	lr

08013e24 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8013e24:	b1f0      	cbz	r0, 8013e64 <Crc32+0x40>
{
 8013e26:	b510      	push	{r4, lr}
 8013e28:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8013e2a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8013e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e32:	e00e      	b.n	8013e52 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8013e34:	f340 0c00 	sbfx	ip, r0, #0, #1
 8013e38:	4a0b      	ldr	r2, [pc, #44]	; (8013e68 <Crc32+0x44>)
 8013e3a:	ea0c 0202 	and.w	r2, ip, r2
 8013e3e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8013e42:	3301      	adds	r3, #1
 8013e44:	b29b      	uxth	r3, r3
 8013e46:	2b07      	cmp	r3, #7
 8013e48:	d9f4      	bls.n	8013e34 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8013e4a:	f10e 0e01 	add.w	lr, lr, #1
 8013e4e:	fa1f fe8e 	uxth.w	lr, lr
 8013e52:	458e      	cmp	lr, r1
 8013e54:	d204      	bcs.n	8013e60 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8013e56:	f814 300e 	ldrb.w	r3, [r4, lr]
 8013e5a:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	e7f2      	b.n	8013e46 <Crc32+0x22>
        }
    }

    return ~crc;
 8013e60:	43c0      	mvns	r0, r0
}
 8013e62:	bd10      	pop	{r4, pc}
        return 0;
 8013e64:	2000      	movs	r0, #0
}
 8013e66:	4770      	bx	lr
 8013e68:	edb88320 	.word	0xedb88320

08013e6c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8013e6c:	2001      	movs	r0, #1
 8013e6e:	4770      	bx	lr

08013e70 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8013e70:	280a      	cmp	r0, #10
 8013e72:	d807      	bhi.n	8013e84 <RadioGetLoRaBandwidthInHz+0x14>
 8013e74:	e8df f000 	tbb	[pc, r0]
 8013e78:	17110b20 	.word	0x17110b20
 8013e7c:	061e1c1a 	.word	0x061e1c1a
 8013e80:	0e08      	.short	0x0e08
 8013e82:	14          	.byte	0x14
 8013e83:	00          	.byte	0x00
 8013e84:	2000      	movs	r0, #0
 8013e86:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8013e88:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8013e8c:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8013e8e:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8013e92:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8013e94:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8013e98:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8013e9a:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8013e9e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8013ea0:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8013ea4:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8013ea6:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8013eaa:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8013eac:	4804      	ldr	r0, [pc, #16]	; (8013ec0 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8013eae:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8013eb0:	4804      	ldr	r0, [pc, #16]	; (8013ec4 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8013eb2:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8013eb4:	4804      	ldr	r0, [pc, #16]	; (8013ec8 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8013eb6:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8013eb8:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8013ebc:	4770      	bx	lr
 8013ebe:	bf00      	nop
 8013ec0:	0001e848 	.word	0x0001e848
 8013ec4:	0003d090 	.word	0x0003d090
 8013ec8:	0007a120 	.word	0x0007a120

08013ecc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8013ecc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8013ed0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013ed2:	b953      	cbnz	r3, 8013eea <RadioGetGfskTimeOnAirNumerator+0x1e>
 8013ed4:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8013ed6:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013ed8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8013eda:	b141      	cbz	r1, 8013eee <RadioGetGfskTimeOnAirNumerator+0x22>
 8013edc:	2302      	movs	r3, #2
 8013ede:	f89d 0000 	ldrb.w	r0, [sp]
 8013ee2:	4418      	add	r0, r3
}
 8013ee4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8013ee8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013eea:	2300      	movs	r3, #0
 8013eec:	e7f3      	b.n	8013ed6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8013eee:	2300      	movs	r3, #0
 8013ef0:	e7f5      	b.n	8013ede <RadioGetGfskTimeOnAirNumerator+0x12>

08013ef2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8013ef2:	b570      	push	{r4, r5, r6, lr}
 8013ef4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8013ef8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8013efc:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8013efe:	f1a1 0c05 	sub.w	ip, r1, #5
 8013f02:	f1bc 0f01 	cmp.w	ip, #1
 8013f06:	d931      	bls.n	8013f6c <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013f08:	b918      	cbnz	r0, 8013f12 <RadioGetLoRaTimeOnAirNumerator+0x20>
 8013f0a:	f1a1 060b 	sub.w	r6, r1, #11
 8013f0e:	2e01      	cmp	r6, #1
 8013f10:	d934      	bls.n	8013f7c <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8013f12:	2801      	cmp	r0, #1
 8013f14:	d02e      	beq.n	8013f74 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8013f16:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8013f18:	f89d c014 	ldrb.w	ip, [sp, #20]
 8013f1c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8013f20:	b385      	cbz	r5, 8013f84 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8013f22:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8013f24:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8013f26:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8013f28:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8013f2c:	b364      	cbz	r4, 8013f88 <RadioGetLoRaTimeOnAirNumerator+0x96>
 8013f2e:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8013f32:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8013f34:	2906      	cmp	r1, #6
 8013f36:	d904      	bls.n	8013f42 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8013f38:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8013f3c:	b10e      	cbz	r6, 8013f42 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8013f3e:	1e88      	subs	r0, r1, #2
 8013f40:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8013f42:	f1bc 0f00 	cmp.w	ip, #0
 8013f46:	db22      	blt.n	8013f8e <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8013f48:	4484      	add	ip, r0
 8013f4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013f4e:	fb9c fcf0 	sdiv	ip, ip, r0
 8013f52:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8013f56:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8013f5a:	2906      	cmp	r1, #6
 8013f5c:	d801      	bhi.n	8013f62 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8013f5e:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8013f62:	0080      	lsls	r0, r0, #2
 8013f64:	3001      	adds	r0, #1
 8013f66:	3902      	subs	r1, #2
}
 8013f68:	4088      	lsls	r0, r1
 8013f6a:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8013f6c:	2b0b      	cmp	r3, #11
 8013f6e:	d8cb      	bhi.n	8013f08 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8013f70:	230c      	movs	r3, #12
 8013f72:	e7c9      	b.n	8013f08 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013f74:	290c      	cmp	r1, #12
 8013f76:	d003      	beq.n	8013f80 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8013f78:	2600      	movs	r6, #0
 8013f7a:	e7cd      	b.n	8013f18 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8013f7c:	2601      	movs	r6, #1
 8013f7e:	e7cb      	b.n	8013f18 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8013f80:	2601      	movs	r6, #1
 8013f82:	e7c9      	b.n	8013f18 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8013f84:	2000      	movs	r0, #0
 8013f86:	e7cd      	b.n	8013f24 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8013f88:	f04f 0e14 	mov.w	lr, #20
 8013f8c:	e7d1      	b.n	8013f32 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 8013f8e:	f04f 0c00 	mov.w	ip, #0
 8013f92:	e7d9      	b.n	8013f48 <RadioGetLoRaTimeOnAirNumerator+0x56>

08013f94 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8013f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f96:	b085      	sub	sp, #20
 8013f98:	460e      	mov	r6, r1
 8013f9a:	4615      	mov	r5, r2
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013fa2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8013fa6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8013faa:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8013fae:	b148      	cbz	r0, 8013fc4 <RadioTimeOnAir+0x30>
 8013fb0:	2801      	cmp	r0, #1
 8013fb2:	d012      	beq.n	8013fda <RadioTimeOnAir+0x46>
 8013fb4:	2501      	movs	r5, #1
 8013fb6:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8013fb8:	442c      	add	r4, r5
 8013fba:	1e60      	subs	r0, r4, #1
}
 8013fbc:	fbb0 f0f5 	udiv	r0, r0, r5
 8013fc0:	b005      	add	sp, #20
 8013fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8013fc4:	f8cd c004 	str.w	ip, [sp, #4]
 8013fc8:	9700      	str	r7, [sp, #0]
 8013fca:	4628      	mov	r0, r5
 8013fcc:	f7ff ff7e 	bl	8013ecc <RadioGetGfskTimeOnAirNumerator>
 8013fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013fd4:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8013fd8:	e7ee      	b.n	8013fb8 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8013fda:	f8cd c008 	str.w	ip, [sp, #8]
 8013fde:	9701      	str	r7, [sp, #4]
 8013fe0:	9300      	str	r3, [sp, #0]
 8013fe2:	4613      	mov	r3, r2
 8013fe4:	460a      	mov	r2, r1
 8013fe6:	4629      	mov	r1, r5
 8013fe8:	4630      	mov	r0, r6
 8013fea:	f7ff ff82 	bl	8013ef2 <RadioGetLoRaTimeOnAirNumerator>
 8013fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013ff2:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8013ff6:	4b03      	ldr	r3, [pc, #12]	; (8014004 <RadioTimeOnAir+0x70>)
 8013ff8:	5d98      	ldrb	r0, [r3, r6]
 8013ffa:	f7ff ff39 	bl	8013e70 <RadioGetLoRaBandwidthInHz>
 8013ffe:	4605      	mov	r5, r0
        break;
 8014000:	e7da      	b.n	8013fb8 <RadioTimeOnAir+0x24>
 8014002:	bf00      	nop
 8014004:	08018858 	.word	0x08018858

08014008 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8014008:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 801400a:	4b05      	ldr	r3, [pc, #20]	; (8014020 <RadioOnTxTimeoutProcess+0x18>)
 801400c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014010:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014012:	4b04      	ldr	r3, [pc, #16]	; (8014024 <RadioOnTxTimeoutProcess+0x1c>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	b113      	cbz	r3, 801401e <RadioOnTxTimeoutProcess+0x16>
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	b103      	cbz	r3, 801401e <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 801401c:	4798      	blx	r3
    }
}
 801401e:	bd08      	pop	{r3, pc}
 8014020:	48000400 	.word	0x48000400
 8014024:	20004514 	.word	0x20004514

08014028 <RadioOnTxTimeoutIrq>:
{
 8014028:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 801402a:	f7ff ffed 	bl	8014008 <RadioOnTxTimeoutProcess>
}
 801402e:	bd08      	pop	{r3, pc}

08014030 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8014030:	b508      	push	{r3, lr}
 8014032:	4b05      	ldr	r3, [pc, #20]	; (8014048 <RadioOnRxTimeoutProcess+0x18>)
 8014034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014038:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801403a:	4b04      	ldr	r3, [pc, #16]	; (801404c <RadioOnRxTimeoutProcess+0x1c>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	b113      	cbz	r3, 8014046 <RadioOnRxTimeoutProcess+0x16>
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	b103      	cbz	r3, 8014046 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8014044:	4798      	blx	r3
    }
}
 8014046:	bd08      	pop	{r3, pc}
 8014048:	48000400 	.word	0x48000400
 801404c:	20004514 	.word	0x20004514

08014050 <RadioOnRxTimeoutIrq>:
{
 8014050:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8014052:	f7ff ffed 	bl	8014030 <RadioOnRxTimeoutProcess>
}
 8014056:	bd08      	pop	{r3, pc}

08014058 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8014058:	f04f 30ff 	mov.w	r0, #4294967295
 801405c:	4770      	bx	lr

0801405e <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801405e:	f04f 30ff 	mov.w	r0, #4294967295
 8014062:	4770      	bx	lr

08014064 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8014064:	2001      	movs	r0, #1
 8014066:	4770      	bx	lr

08014068 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8014068:	2001      	movs	r0, #1
 801406a:	4770      	bx	lr

0801406c <RadioWrite>:
{
 801406c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 801406e:	f000 fe37 	bl	8014ce0 <SUBGRF_WriteRegister>
}
 8014072:	bd08      	pop	{r3, pc}

08014074 <RadioTxCw>:
{
 8014074:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8014076:	f001 fbcf 	bl	8015818 <SUBGRF_SetRfTxPower>
 801407a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801407c:	210e      	movs	r1, #14
 801407e:	f640 101f 	movw	r0, #2335	; 0x91f
 8014082:	f000 fe2d 	bl	8014ce0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8014086:	2101      	movs	r1, #1
 8014088:	4620      	mov	r0, r4
 801408a:	f001 fbb1 	bl	80157f0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801408e:	f000 fff7 	bl	8015080 <SUBGRF_SetTxContinuousWave>
}
 8014092:	bd10      	pop	{r4, pc}

08014094 <RadioTxPrbs>:
{
 8014094:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8014096:	2101      	movs	r1, #1
 8014098:	4b07      	ldr	r3, [pc, #28]	; (80140b8 <RadioTxPrbs+0x24>)
 801409a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801409e:	f001 fba7 	bl	80157f0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80140a2:	212d      	movs	r1, #45	; 0x2d
 80140a4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80140a8:	f7ff ffe0 	bl	801406c <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80140ac:	f000 ffef 	bl	801508e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80140b0:	4802      	ldr	r0, [pc, #8]	; (80140bc <RadioTxPrbs+0x28>)
 80140b2:	f000 ff25 	bl	8014f00 <SUBGRF_SetTx>
}
 80140b6:	bd08      	pop	{r3, pc}
 80140b8:	20004530 	.word	0x20004530
 80140bc:	000fffff 	.word	0x000fffff

080140c0 <RadioSetRxDutyCycle>:
{
 80140c0:	b570      	push	{r4, r5, r6, lr}
 80140c2:	4604      	mov	r4, r0
 80140c4:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80140c6:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80140ca:	4e09      	ldr	r6, [pc, #36]	; (80140f0 <RadioSetRxDutyCycle+0x30>)
 80140cc:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80140ce:	2300      	movs	r3, #0
 80140d0:	461a      	mov	r2, r3
 80140d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80140d6:	4608      	mov	r0, r1
 80140d8:	f001 f8a5 	bl	8015226 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80140dc:	2100      	movs	r1, #0
 80140de:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80140e2:	f001 fb85 	bl	80157f0 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80140e6:	4629      	mov	r1, r5
 80140e8:	4620      	mov	r0, r4
 80140ea:	f000 ff99 	bl	8015020 <SUBGRF_SetRxDutyCycle>
}
 80140ee:	bd70      	pop	{r4, r5, r6, pc}
 80140f0:	20004530 	.word	0x20004530

080140f4 <RadioRxBoosted>:
{
 80140f4:	b538      	push	{r3, r4, r5, lr}
 80140f6:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 80140f8:	f001 fc69 	bl	80159ce <RFW_Is_Init>
 80140fc:	2801      	cmp	r0, #1
 80140fe:	d019      	beq.n	8014134 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8014100:	2300      	movs	r3, #0
 8014102:	461a      	mov	r2, r3
 8014104:	f240 2162 	movw	r1, #610	; 0x262
 8014108:	4608      	mov	r0, r1
 801410a:	f001 f88c 	bl	8015226 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801410e:	b9a4      	cbnz	r4, 801413a <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8014110:	4c11      	ldr	r4, [pc, #68]	; (8014158 <RadioRxBoosted+0x64>)
 8014112:	2100      	movs	r1, #0
 8014114:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8014116:	4b11      	ldr	r3, [pc, #68]	; (801415c <RadioRxBoosted+0x68>)
 8014118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801411c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801411e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8014122:	f001 fb65 	bl	80157f0 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8014126:	7863      	ldrb	r3, [r4, #1]
 8014128:	b183      	cbz	r3, 801414c <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801412a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801412e:	f000 ff59 	bl	8014fe4 <SUBGRF_SetRxBoosted>
}
 8014132:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8014134:	f001 fc53 	bl	80159de <RFW_ReceiveInit>
 8014138:	e7e9      	b.n	801410e <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801413a:	4d09      	ldr	r5, [pc, #36]	; (8014160 <RadioRxBoosted+0x6c>)
 801413c:	4621      	mov	r1, r4
 801413e:	4628      	mov	r0, r5
 8014140:	f002 f91e 	bl	8016380 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8014144:	4628      	mov	r0, r5
 8014146:	f002 f8d5 	bl	80162f4 <UTIL_TIMER_Start>
 801414a:	e7e1      	b.n	8014110 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801414c:	4b02      	ldr	r3, [pc, #8]	; (8014158 <RadioRxBoosted+0x64>)
 801414e:	6898      	ldr	r0, [r3, #8]
 8014150:	0180      	lsls	r0, r0, #6
 8014152:	f000 ff47 	bl	8014fe4 <SUBGRF_SetRxBoosted>
}
 8014156:	e7ec      	b.n	8014132 <RadioRxBoosted+0x3e>
 8014158:	20004530 	.word	0x20004530
 801415c:	48000400 	.word	0x48000400
 8014160:	20004518 	.word	0x20004518

08014164 <RadioStandby>:
{
 8014164:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8014166:	2000      	movs	r0, #0
 8014168:	f000 feb0 	bl	8014ecc <SUBGRF_SetStandby>
}
 801416c:	bd08      	pop	{r3, pc}

0801416e <RadioRead>:
{
 801416e:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8014170:	f000 fdc6 	bl	8014d00 <SUBGRF_ReadRegister>
}
 8014174:	bd08      	pop	{r3, pc}

08014176 <RadioGetStatus>:
{
 8014176:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8014178:	f000 fda6 	bl	8014cc8 <SUBGRF_GetOperatingMode>
 801417c:	2805      	cmp	r0, #5
 801417e:	d007      	beq.n	8014190 <RadioGetStatus+0x1a>
 8014180:	2807      	cmp	r0, #7
 8014182:	d007      	beq.n	8014194 <RadioGetStatus+0x1e>
 8014184:	2804      	cmp	r0, #4
 8014186:	d001      	beq.n	801418c <RadioGetStatus+0x16>
            return RF_IDLE;
 8014188:	2000      	movs	r0, #0
}
 801418a:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 801418c:	2002      	movs	r0, #2
 801418e:	e7fc      	b.n	801418a <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8014190:	2001      	movs	r0, #1
 8014192:	e7fa      	b.n	801418a <RadioGetStatus+0x14>
            return RF_CAD;
 8014194:	2003      	movs	r0, #3
 8014196:	e7f8      	b.n	801418a <RadioGetStatus+0x14>

08014198 <RadioIrqProcess>:
{
 8014198:	b530      	push	{r4, r5, lr}
 801419a:	b083      	sub	sp, #12
    uint8_t size = 0;
 801419c:	2300      	movs	r3, #0
 801419e:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80141a2:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80141a4:	4ba5      	ldr	r3, [pc, #660]	; (801443c <RadioIrqProcess+0x2a4>)
 80141a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80141aa:	2b20      	cmp	r3, #32
 80141ac:	d829      	bhi.n	8014202 <RadioIrqProcess+0x6a>
 80141ae:	b21a      	sxth	r2, r3
 80141b0:	2a00      	cmp	r2, #0
 80141b2:	f000 8140 	beq.w	8014436 <RadioIrqProcess+0x29e>
 80141b6:	3b01      	subs	r3, #1
 80141b8:	2b1f      	cmp	r3, #31
 80141ba:	f200 813c 	bhi.w	8014436 <RadioIrqProcess+0x29e>
 80141be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80141c2:	0063      	.short	0x0063
 80141c4:	013a007f 	.word	0x013a007f
 80141c8:	013a00f7 	.word	0x013a00f7
 80141cc:	013a013a 	.word	0x013a013a
 80141d0:	013a0127 	.word	0x013a0127
 80141d4:	013a013a 	.word	0x013a013a
 80141d8:	013a013a 	.word	0x013a013a
 80141dc:	013a013a 	.word	0x013a013a
 80141e0:	013a0134 	.word	0x013a0134
 80141e4:	013a013a 	.word	0x013a013a
 80141e8:	013a013a 	.word	0x013a013a
 80141ec:	013a013a 	.word	0x013a013a
 80141f0:	013a013a 	.word	0x013a013a
 80141f4:	013a013a 	.word	0x013a013a
 80141f8:	013a013a 	.word	0x013a013a
 80141fc:	013a013a 	.word	0x013a013a
 8014200:	0155      	.short	0x0155
 8014202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014206:	f000 80b3 	beq.w	8014370 <RadioIrqProcess+0x1d8>
 801420a:	d928      	bls.n	801425e <RadioIrqProcess+0xc6>
 801420c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014210:	f040 8111 	bne.w	8014436 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8014214:	4b8a      	ldr	r3, [pc, #552]	; (8014440 <RadioIrqProcess+0x2a8>)
 8014216:	2201      	movs	r2, #1
 8014218:	2100      	movs	r1, #0
 801421a:	2002      	movs	r0, #2
 801421c:	f001 fcbe 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8014220:	f000 fd52 	bl	8014cc8 <SUBGRF_GetOperatingMode>
 8014224:	2804      	cmp	r0, #4
 8014226:	f000 80b0 	beq.w	801438a <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801422a:	f000 fd4d 	bl	8014cc8 <SUBGRF_GetOperatingMode>
 801422e:	2805      	cmp	r0, #5
 8014230:	f040 8101 	bne.w	8014436 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8014234:	4b83      	ldr	r3, [pc, #524]	; (8014444 <RadioIrqProcess+0x2ac>)
 8014236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801423a:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 801423c:	4882      	ldr	r0, [pc, #520]	; (8014448 <RadioIrqProcess+0x2b0>)
 801423e:	f001 ffff 	bl	8016240 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8014242:	2000      	movs	r0, #0
 8014244:	f000 fe42 	bl	8014ecc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014248:	4b80      	ldr	r3, [pc, #512]	; (801444c <RadioIrqProcess+0x2b4>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	2b00      	cmp	r3, #0
 801424e:	f000 80f2 	beq.w	8014436 <RadioIrqProcess+0x29e>
 8014252:	68db      	ldr	r3, [r3, #12]
 8014254:	2b00      	cmp	r3, #0
 8014256:	f000 80ee 	beq.w	8014436 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 801425a:	4798      	blx	r3
 801425c:	e0eb      	b.n	8014436 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 801425e:	2b40      	cmp	r3, #64	; 0x40
 8014260:	f000 811d 	beq.w	801449e <RadioIrqProcess+0x306>
 8014264:	2b80      	cmp	r3, #128	; 0x80
 8014266:	f040 80e6 	bne.w	8014436 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 801426a:	2000      	movs	r0, #0
 801426c:	f000 fe2e 	bl	8014ecc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8014270:	4b76      	ldr	r3, [pc, #472]	; (801444c <RadioIrqProcess+0x2b4>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	2b00      	cmp	r3, #0
 8014276:	f000 80de 	beq.w	8014436 <RadioIrqProcess+0x29e>
 801427a:	699b      	ldr	r3, [r3, #24]
 801427c:	2b00      	cmp	r3, #0
 801427e:	f000 80da 	beq.w	8014436 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8014282:	2000      	movs	r0, #0
 8014284:	4798      	blx	r3
 8014286:	e0d6      	b.n	8014436 <RadioIrqProcess+0x29e>
 8014288:	4b6e      	ldr	r3, [pc, #440]	; (8014444 <RadioIrqProcess+0x2ac>)
 801428a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801428e:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8014290:	486f      	ldr	r0, [pc, #444]	; (8014450 <RadioIrqProcess+0x2b8>)
 8014292:	f001 ffd5 	bl	8016240 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8014296:	2000      	movs	r0, #0
 8014298:	f000 fe18 	bl	8014ecc <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801429c:	f001 fb99 	bl	80159d2 <RFW_Is_LongPacketModeEnabled>
 80142a0:	2801      	cmp	r0, #1
 80142a2:	d00a      	beq.n	80142ba <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80142a4:	4b69      	ldr	r3, [pc, #420]	; (801444c <RadioIrqProcess+0x2b4>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	f000 80c4 	beq.w	8014436 <RadioIrqProcess+0x29e>
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	f000 80c0 	beq.w	8014436 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80142b6:	4798      	blx	r3
 80142b8:	e0bd      	b.n	8014436 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80142ba:	f001 fb93 	bl	80159e4 <RFW_DeInit_TxLongPacket>
 80142be:	e7f1      	b.n	80142a4 <RadioIrqProcess+0x10c>
 80142c0:	4b60      	ldr	r3, [pc, #384]	; (8014444 <RadioIrqProcess+0x2ac>)
 80142c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80142c6:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 80142c8:	485f      	ldr	r0, [pc, #380]	; (8014448 <RadioIrqProcess+0x2b0>)
 80142ca:	f001 ffb9 	bl	8016240 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80142ce:	4b5b      	ldr	r3, [pc, #364]	; (801443c <RadioIrqProcess+0x2a4>)
 80142d0:	785b      	ldrb	r3, [r3, #1]
 80142d2:	b303      	cbz	r3, 8014316 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80142d4:	22ff      	movs	r2, #255	; 0xff
 80142d6:	f10d 0107 	add.w	r1, sp, #7
 80142da:	485e      	ldr	r0, [pc, #376]	; (8014454 <RadioIrqProcess+0x2bc>)
 80142dc:	f001 fa32 	bl	8015744 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80142e0:	485d      	ldr	r0, [pc, #372]	; (8014458 <RadioIrqProcess+0x2c0>)
 80142e2:	f001 fa49 	bl	8015778 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80142e6:	4b59      	ldr	r3, [pc, #356]	; (801444c <RadioIrqProcess+0x2b4>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	f000 80a3 	beq.w	8014436 <RadioIrqProcess+0x29e>
 80142f0:	689c      	ldr	r4, [r3, #8]
 80142f2:	2c00      	cmp	r4, #0
 80142f4:	f000 809f 	beq.w	8014436 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 80142f8:	4b50      	ldr	r3, [pc, #320]	; (801443c <RadioIrqProcess+0x2a4>)
 80142fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80142fe:	2b01      	cmp	r3, #1
 8014300:	d11d      	bne.n	801433e <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8014302:	4a4e      	ldr	r2, [pc, #312]	; (801443c <RadioIrqProcess+0x2a4>)
 8014304:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8014308:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 801430c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014310:	4850      	ldr	r0, [pc, #320]	; (8014454 <RadioIrqProcess+0x2bc>)
 8014312:	47a0      	blx	r4
                break;
 8014314:	e08f      	b.n	8014436 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8014316:	2000      	movs	r0, #0
 8014318:	f000 fdd8 	bl	8014ecc <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801431c:	2100      	movs	r1, #0
 801431e:	f640 1002 	movw	r0, #2306	; 0x902
 8014322:	f000 fcdd 	bl	8014ce0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8014326:	f640 1044 	movw	r0, #2372	; 0x944
 801432a:	f000 fce9 	bl	8014d00 <SUBGRF_ReadRegister>
 801432e:	f040 0102 	orr.w	r1, r0, #2
 8014332:	b2c9      	uxtb	r1, r1
 8014334:	f640 1044 	movw	r0, #2372	; 0x944
 8014338:	f000 fcd2 	bl	8014ce0 <SUBGRF_WriteRegister>
 801433c:	e7ca      	b.n	80142d4 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801433e:	4c3f      	ldr	r4, [pc, #252]	; (801443c <RadioIrqProcess+0x2a4>)
 8014340:	4669      	mov	r1, sp
 8014342:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014344:	f001 faf8 	bl	8015938 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8014348:	4b40      	ldr	r3, [pc, #256]	; (801444c <RadioIrqProcess+0x2b4>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	689d      	ldr	r5, [r3, #8]
 801434e:	9b00      	ldr	r3, [sp, #0]
 8014350:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8014354:	4a41      	ldr	r2, [pc, #260]	; (801445c <RadioIrqProcess+0x2c4>)
 8014356:	fb82 1203 	smull	r1, r2, r2, r3
 801435a:	17db      	asrs	r3, r3, #31
 801435c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8014360:	b25b      	sxtb	r3, r3
 8014362:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8014366:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801436a:	483a      	ldr	r0, [pc, #232]	; (8014454 <RadioIrqProcess+0x2bc>)
 801436c:	47a8      	blx	r5
                break;
 801436e:	e062      	b.n	8014436 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8014370:	2000      	movs	r0, #0
 8014372:	f000 fdab 	bl	8014ecc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8014376:	4b35      	ldr	r3, [pc, #212]	; (801444c <RadioIrqProcess+0x2b4>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d05b      	beq.n	8014436 <RadioIrqProcess+0x29e>
 801437e:	699b      	ldr	r3, [r3, #24]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d058      	beq.n	8014436 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8014384:	2001      	movs	r0, #1
 8014386:	4798      	blx	r3
 8014388:	e055      	b.n	8014436 <RadioIrqProcess+0x29e>
 801438a:	4b2e      	ldr	r3, [pc, #184]	; (8014444 <RadioIrqProcess+0x2ac>)
 801438c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014390:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8014392:	482f      	ldr	r0, [pc, #188]	; (8014450 <RadioIrqProcess+0x2b8>)
 8014394:	f001 ff54 	bl	8016240 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8014398:	2000      	movs	r0, #0
 801439a:	f000 fd97 	bl	8014ecc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801439e:	4b2b      	ldr	r3, [pc, #172]	; (801444c <RadioIrqProcess+0x2b4>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d047      	beq.n	8014436 <RadioIrqProcess+0x29e>
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d044      	beq.n	8014436 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80143ac:	4798      	blx	r3
 80143ae:	e042      	b.n	8014436 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80143b0:	4b2b      	ldr	r3, [pc, #172]	; (8014460 <RadioIrqProcess+0x2c8>)
 80143b2:	2201      	movs	r2, #1
 80143b4:	2100      	movs	r1, #0
 80143b6:	2002      	movs	r0, #2
 80143b8:	f001 fbf0 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80143bc:	4b1f      	ldr	r3, [pc, #124]	; (801443c <RadioIrqProcess+0x2a4>)
 80143be:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80143c0:	b3c9      	cbz	r1, 8014436 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80143c2:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80143c6:	f640 1003 	movw	r0, #2307	; 0x903
 80143ca:	f7ff fe4f 	bl	801406c <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80143ce:	4c1b      	ldr	r4, [pc, #108]	; (801443c <RadioIrqProcess+0x2a4>)
 80143d0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80143d4:	f640 1004 	movw	r0, #2308	; 0x904
 80143d8:	f7ff fe48 	bl	801406c <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80143dc:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 80143e0:	f640 1005 	movw	r0, #2309	; 0x905
 80143e4:	f7ff fe42 	bl	801406c <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80143e8:	f640 1002 	movw	r0, #2306	; 0x902
 80143ec:	f7ff febf 	bl	801416e <RadioRead>
 80143f0:	f040 0101 	orr.w	r1, r0, #1
 80143f4:	b2c9      	uxtb	r1, r1
 80143f6:	f640 1002 	movw	r0, #2306	; 0x902
 80143fa:	f7ff fe37 	bl	801406c <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80143fe:	2200      	movs	r2, #0
 8014400:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8014402:	4613      	mov	r3, r2
 8014404:	f240 2162 	movw	r1, #610	; 0x262
 8014408:	4608      	mov	r0, r1
 801440a:	f000 ff0c 	bl	8015226 <SUBGRF_SetDioIrqParams>
 801440e:	e012      	b.n	8014436 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8014410:	4b14      	ldr	r3, [pc, #80]	; (8014464 <RadioIrqProcess+0x2cc>)
 8014412:	2201      	movs	r2, #1
 8014414:	2100      	movs	r1, #0
 8014416:	2002      	movs	r0, #2
 8014418:	f001 fbc0 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801441c:	f001 fad7 	bl	80159ce <RFW_Is_Init>
 8014420:	2801      	cmp	r0, #1
 8014422:	d108      	bne.n	8014436 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8014424:	f001 fadf 	bl	80159e6 <RFW_ReceivePayload>
 8014428:	e005      	b.n	8014436 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801442a:	4b0f      	ldr	r3, [pc, #60]	; (8014468 <RadioIrqProcess+0x2d0>)
 801442c:	2201      	movs	r2, #1
 801442e:	2100      	movs	r1, #0
 8014430:	2002      	movs	r0, #2
 8014432:	f001 fbb3 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
}
 8014436:	b003      	add	sp, #12
 8014438:	bd30      	pop	{r4, r5, pc}
 801443a:	bf00      	nop
 801443c:	20004530 	.word	0x20004530
 8014440:	080187ec 	.word	0x080187ec
 8014444:	48000400 	.word	0x48000400
 8014448:	20004518 	.word	0x20004518
 801444c:	20004514 	.word	0x20004514
 8014450:	2000458c 	.word	0x2000458c
 8014454:	20004414 	.word	0x20004414
 8014458:	20004554 	.word	0x20004554
 801445c:	10624dd3 	.word	0x10624dd3
 8014460:	08018800 	.word	0x08018800
 8014464:	0801880c 	.word	0x0801880c
 8014468:	08018818 	.word	0x08018818
        TimerStop( &RxTimeoutTimer );
 801446c:	4817      	ldr	r0, [pc, #92]	; (80144cc <RadioIrqProcess+0x334>)
 801446e:	f001 fee7 	bl	8016240 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8014472:	4b17      	ldr	r3, [pc, #92]	; (80144d0 <RadioIrqProcess+0x338>)
 8014474:	785b      	ldrb	r3, [r3, #1]
 8014476:	b173      	cbz	r3, 8014496 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014478:	4b16      	ldr	r3, [pc, #88]	; (80144d4 <RadioIrqProcess+0x33c>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d0da      	beq.n	8014436 <RadioIrqProcess+0x29e>
 8014480:	68db      	ldr	r3, [r3, #12]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d0d7      	beq.n	8014436 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8014486:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8014488:	4b13      	ldr	r3, [pc, #76]	; (80144d8 <RadioIrqProcess+0x340>)
 801448a:	2201      	movs	r2, #1
 801448c:	2100      	movs	r1, #0
 801448e:	2002      	movs	r0, #2
 8014490:	f001 fb84 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
 8014494:	e7cf      	b.n	8014436 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8014496:	2000      	movs	r0, #0
 8014498:	f000 fd18 	bl	8014ecc <SUBGRF_SetStandby>
 801449c:	e7ec      	b.n	8014478 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801449e:	4b0f      	ldr	r3, [pc, #60]	; (80144dc <RadioIrqProcess+0x344>)
 80144a0:	2201      	movs	r2, #1
 80144a2:	2100      	movs	r1, #0
 80144a4:	2002      	movs	r0, #2
 80144a6:	f001 fb79 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80144aa:	4b09      	ldr	r3, [pc, #36]	; (80144d0 <RadioIrqProcess+0x338>)
 80144ac:	785b      	ldrb	r3, [r3, #1]
 80144ae:	b143      	cbz	r3, 80144c2 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80144b0:	4b08      	ldr	r3, [pc, #32]	; (80144d4 <RadioIrqProcess+0x33c>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d0be      	beq.n	8014436 <RadioIrqProcess+0x29e>
 80144b8:	691b      	ldr	r3, [r3, #16]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d0bb      	beq.n	8014436 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 80144be:	4798      	blx	r3
}
 80144c0:	e7b9      	b.n	8014436 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80144c2:	2000      	movs	r0, #0
 80144c4:	f000 fd02 	bl	8014ecc <SUBGRF_SetStandby>
 80144c8:	e7f2      	b.n	80144b0 <RadioIrqProcess+0x318>
 80144ca:	bf00      	nop
 80144cc:	20004518 	.word	0x20004518
 80144d0:	20004530 	.word	0x20004530
 80144d4:	20004514 	.word	0x20004514
 80144d8:	08018824 	.word	0x08018824
 80144dc:	08018830 	.word	0x08018830

080144e0 <RadioOnDioIrq>:
{
 80144e0:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80144e2:	4b03      	ldr	r3, [pc, #12]	; (80144f0 <RadioOnDioIrq+0x10>)
 80144e4:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 80144e8:	f7ff fe56 	bl	8014198 <RadioIrqProcess>
}
 80144ec:	bd08      	pop	{r3, pc}
 80144ee:	bf00      	nop
 80144f0:	20004530 	.word	0x20004530

080144f4 <RadioGetWakeupTime>:
{
 80144f4:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80144f6:	f001 f9a6 	bl	8015846 <SUBGRF_GetRadioWakeUpTime>
}
 80144fa:	3003      	adds	r0, #3
 80144fc:	bd08      	pop	{r3, pc}
	...

08014500 <RadioSetMaxPayloadLength>:
{
 8014500:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8014502:	2801      	cmp	r0, #1
 8014504:	d004      	beq.n	8014510 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8014506:	4b0a      	ldr	r3, [pc, #40]	; (8014530 <RadioSetMaxPayloadLength+0x30>)
 8014508:	7d5b      	ldrb	r3, [r3, #21]
 801450a:	2b01      	cmp	r3, #1
 801450c:	d008      	beq.n	8014520 <RadioSetMaxPayloadLength+0x20>
}
 801450e:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8014510:	4b08      	ldr	r3, [pc, #32]	; (8014534 <RadioSetMaxPayloadLength+0x34>)
 8014512:	7019      	strb	r1, [r3, #0]
 8014514:	4806      	ldr	r0, [pc, #24]	; (8014530 <RadioSetMaxPayloadLength+0x30>)
 8014516:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014518:	300e      	adds	r0, #14
 801451a:	f001 f853 	bl	80155c4 <SUBGRF_SetPacketParams>
 801451e:	e7f6      	b.n	801450e <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8014520:	4b04      	ldr	r3, [pc, #16]	; (8014534 <RadioSetMaxPayloadLength+0x34>)
 8014522:	7019      	strb	r1, [r3, #0]
 8014524:	4802      	ldr	r0, [pc, #8]	; (8014530 <RadioSetMaxPayloadLength+0x30>)
 8014526:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014528:	300e      	adds	r0, #14
 801452a:	f001 f84b 	bl	80155c4 <SUBGRF_SetPacketParams>
}
 801452e:	e7ee      	b.n	801450e <RadioSetMaxPayloadLength+0xe>
 8014530:	20004530 	.word	0x20004530
 8014534:	20000178 	.word	0x20000178

08014538 <RadioReadRegisters>:
{
 8014538:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 801453a:	f000 fc5f 	bl	8014dfc <SUBGRF_ReadRegisters>
}
 801453e:	bd08      	pop	{r3, pc}

08014540 <RadioWriteRegisters>:
{
 8014540:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8014542:	f000 fc19 	bl	8014d78 <SUBGRF_WriteRegisters>
}
 8014546:	bd08      	pop	{r3, pc}

08014548 <RadioRssi>:
{
 8014548:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 801454a:	f001 f8cb 	bl	80156e4 <SUBGRF_GetRssiInst>
}
 801454e:	b200      	sxth	r0, r0
 8014550:	bd08      	pop	{r3, pc}
	...

08014554 <RadioSetTxContinuousWave>:
{
 8014554:	b538      	push	{r3, r4, r5, lr}
 8014556:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8014558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801455c:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 8014560:	f000 fed4 	bl	801530c <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8014564:	4628      	mov	r0, r5
 8014566:	f001 f957 	bl	8015818 <SUBGRF_SetRfTxPower>
 801456a:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801456c:	210e      	movs	r1, #14
 801456e:	f640 101f 	movw	r0, #2335	; 0x91f
 8014572:	f000 fbb5 	bl	8014ce0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8014576:	2101      	movs	r1, #1
 8014578:	4628      	mov	r0, r5
 801457a:	f001 f939 	bl	80157f0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801457e:	f000 fd7f 	bl	8015080 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8014582:	4d04      	ldr	r5, [pc, #16]	; (8014594 <RadioSetTxContinuousWave+0x40>)
 8014584:	4621      	mov	r1, r4
 8014586:	4628      	mov	r0, r5
 8014588:	f001 fefa 	bl	8016380 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801458c:	4628      	mov	r0, r5
 801458e:	f001 feb1 	bl	80162f4 <UTIL_TIMER_Start>
}
 8014592:	bd38      	pop	{r3, r4, r5, pc}
 8014594:	2000458c 	.word	0x2000458c

08014598 <RadioSetChannel>:
{
 8014598:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 801459a:	f000 feb7 	bl	801530c <SUBGRF_SetRfFrequency>
}
 801459e:	bd08      	pop	{r3, pc}

080145a0 <RadioStartCad>:
{
 80145a0:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80145a2:	2100      	movs	r1, #0
 80145a4:	4b07      	ldr	r3, [pc, #28]	; (80145c4 <RadioStartCad+0x24>)
 80145a6:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80145aa:	f001 f921 	bl	80157f0 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80145ae:	2300      	movs	r3, #0
 80145b0:	461a      	mov	r2, r3
 80145b2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80145b6:	4608      	mov	r0, r1
 80145b8:	f000 fe35 	bl	8015226 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 80145bc:	f000 fd54 	bl	8015068 <SUBGRF_SetCad>
}
 80145c0:	bd08      	pop	{r3, pc}
 80145c2:	bf00      	nop
 80145c4:	20004530 	.word	0x20004530

080145c8 <RadioRx>:
{
 80145c8:	b538      	push	{r3, r4, r5, lr}
 80145ca:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80145cc:	f001 f9ff 	bl	80159ce <RFW_Is_Init>
 80145d0:	2801      	cmp	r0, #1
 80145d2:	d019      	beq.n	8014608 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80145d4:	2300      	movs	r3, #0
 80145d6:	461a      	mov	r2, r3
 80145d8:	f240 2162 	movw	r1, #610	; 0x262
 80145dc:	4608      	mov	r0, r1
 80145de:	f000 fe22 	bl	8015226 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80145e2:	b9a4      	cbnz	r4, 801460e <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80145e4:	4c11      	ldr	r4, [pc, #68]	; (801462c <RadioRx+0x64>)
 80145e6:	2100      	movs	r1, #0
 80145e8:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80145ea:	4b11      	ldr	r3, [pc, #68]	; (8014630 <RadioRx+0x68>)
 80145ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80145f0:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80145f2:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80145f6:	f001 f8fb 	bl	80157f0 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80145fa:	7863      	ldrb	r3, [r4, #1]
 80145fc:	b183      	cbz	r3, 8014620 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80145fe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014602:	f000 fc9f 	bl	8014f44 <SUBGRF_SetRx>
}
 8014606:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8014608:	f001 f9e9 	bl	80159de <RFW_ReceiveInit>
 801460c:	e7e9      	b.n	80145e2 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801460e:	4d09      	ldr	r5, [pc, #36]	; (8014634 <RadioRx+0x6c>)
 8014610:	4621      	mov	r1, r4
 8014612:	4628      	mov	r0, r5
 8014614:	f001 feb4 	bl	8016380 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8014618:	4628      	mov	r0, r5
 801461a:	f001 fe6b 	bl	80162f4 <UTIL_TIMER_Start>
 801461e:	e7e1      	b.n	80145e4 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8014620:	4b02      	ldr	r3, [pc, #8]	; (801462c <RadioRx+0x64>)
 8014622:	6898      	ldr	r0, [r3, #8]
 8014624:	0180      	lsls	r0, r0, #6
 8014626:	f000 fc8d 	bl	8014f44 <SUBGRF_SetRx>
}
 801462a:	e7ec      	b.n	8014606 <RadioRx+0x3e>
 801462c:	20004530 	.word	0x20004530
 8014630:	48000400 	.word	0x48000400
 8014634:	20004518 	.word	0x20004518

08014638 <RadioSleep>:
{
 8014638:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 801463a:	f04f 0004 	mov.w	r0, #4
 801463e:	f000 fc25 	bl	8014e8c <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8014642:	2002      	movs	r0, #2
 8014644:	f7ed fcee 	bl	8002024 <HAL_Delay>
}
 8014648:	bd08      	pop	{r3, pc}
	...

0801464c <RadioSend>:
{
 801464c:	b570      	push	{r4, r5, r6, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	4605      	mov	r5, r0
 8014652:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8014654:	2300      	movs	r3, #0
 8014656:	461a      	mov	r2, r3
 8014658:	f240 2101 	movw	r1, #513	; 0x201
 801465c:	4608      	mov	r0, r1
 801465e:	f000 fde2 	bl	8015226 <SUBGRF_SetDioIrqParams>
 8014662:	4b3f      	ldr	r3, [pc, #252]	; (8014760 <RadioSend+0x114>)
 8014664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014668:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801466a:	4e3e      	ldr	r6, [pc, #248]	; (8014764 <RadioSend+0x118>)
 801466c:	2101      	movs	r1, #1
 801466e:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8014672:	f001 f8bd 	bl	80157f0 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8014676:	7833      	ldrb	r3, [r6, #0]
 8014678:	2b01      	cmp	r3, #1
 801467a:	d103      	bne.n	8014684 <RadioSend+0x38>
 801467c:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8014680:	2b06      	cmp	r3, #6
 8014682:	d012      	beq.n	80146aa <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8014684:	f640 0089 	movw	r0, #2185	; 0x889
 8014688:	f000 fb3a 	bl	8014d00 <SUBGRF_ReadRegister>
 801468c:	f040 0104 	orr.w	r1, r0, #4
 8014690:	b2c9      	uxtb	r1, r1
 8014692:	f640 0089 	movw	r0, #2185	; 0x889
 8014696:	f000 fb23 	bl	8014ce0 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 801469a:	4b32      	ldr	r3, [pc, #200]	; (8014764 <RadioSend+0x118>)
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	2b03      	cmp	r3, #3
 80146a0:	d818      	bhi.n	80146d4 <RadioSend+0x88>
 80146a2:	e8df f003 	tbb	[pc, r3]
 80146a6:	0d23      	.short	0x0d23
 80146a8:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80146aa:	f640 0089 	movw	r0, #2185	; 0x889
 80146ae:	f000 fb27 	bl	8014d00 <SUBGRF_ReadRegister>
 80146b2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80146b6:	f640 0089 	movw	r0, #2185	; 0x889
 80146ba:	f000 fb11 	bl	8014ce0 <SUBGRF_WriteRegister>
 80146be:	e7ec      	b.n	801469a <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80146c0:	4828      	ldr	r0, [pc, #160]	; (8014764 <RadioSend+0x118>)
 80146c2:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80146c4:	300e      	adds	r0, #14
 80146c6:	f000 ff7d 	bl	80155c4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80146ca:	2200      	movs	r2, #0
 80146cc:	4621      	mov	r1, r4
 80146ce:	4628      	mov	r0, r5
 80146d0:	f000 fc30 	bl	8014f34 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80146d4:	4c24      	ldr	r4, [pc, #144]	; (8014768 <RadioSend+0x11c>)
 80146d6:	4b23      	ldr	r3, [pc, #140]	; (8014764 <RadioSend+0x118>)
 80146d8:	6859      	ldr	r1, [r3, #4]
 80146da:	4620      	mov	r0, r4
 80146dc:	f001 fe50 	bl	8016380 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80146e0:	4620      	mov	r0, r4
 80146e2:	f001 fe07 	bl	80162f4 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 80146e6:	2000      	movs	r0, #0
}
 80146e8:	b002      	add	sp, #8
 80146ea:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80146ec:	f001 f96f 	bl	80159ce <RFW_Is_Init>
 80146f0:	2801      	cmp	r0, #1
 80146f2:	d00a      	beq.n	801470a <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80146f4:	481b      	ldr	r0, [pc, #108]	; (8014764 <RadioSend+0x118>)
 80146f6:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80146f8:	300e      	adds	r0, #14
 80146fa:	f000 ff63 	bl	80155c4 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80146fe:	2200      	movs	r2, #0
 8014700:	4621      	mov	r1, r4
 8014702:	4628      	mov	r0, r5
 8014704:	f000 fc16 	bl	8014f34 <SUBGRF_SendPayload>
 8014708:	e7e4      	b.n	80146d4 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801470a:	f10d 0207 	add.w	r2, sp, #7
 801470e:	4621      	mov	r1, r4
 8014710:	4628      	mov	r0, r5
 8014712:	f001 f961 	bl	80159d8 <RFW_TransmitInit>
 8014716:	b968      	cbnz	r0, 8014734 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8014718:	4812      	ldr	r0, [pc, #72]	; (8014764 <RadioSend+0x118>)
 801471a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801471e:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014720:	300e      	adds	r0, #14
 8014722:	f000 ff4f 	bl	80155c4 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8014726:	2200      	movs	r2, #0
 8014728:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801472c:	4628      	mov	r0, r5
 801472e:	f000 fc01 	bl	8014f34 <SUBGRF_SendPayload>
 8014732:	e7cf      	b.n	80146d4 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8014734:	4b0d      	ldr	r3, [pc, #52]	; (801476c <RadioSend+0x120>)
 8014736:	2201      	movs	r2, #1
 8014738:	2100      	movs	r1, #0
 801473a:	2002      	movs	r0, #2
 801473c:	f001 fa2e 	bl	8015b9c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8014740:	2003      	movs	r0, #3
 8014742:	e7d1      	b.n	80146e8 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8014744:	4807      	ldr	r0, [pc, #28]	; (8014764 <RadioSend+0x118>)
 8014746:	2302      	movs	r3, #2
 8014748:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801474a:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801474c:	300e      	adds	r0, #14
 801474e:	f000 ff39 	bl	80155c4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8014752:	2200      	movs	r2, #0
 8014754:	4621      	mov	r1, r4
 8014756:	4628      	mov	r0, r5
 8014758:	f000 fbec 	bl	8014f34 <SUBGRF_SendPayload>
            break;
 801475c:	e7ba      	b.n	80146d4 <RadioSend+0x88>
 801475e:	bf00      	nop
 8014760:	48000400 	.word	0x48000400
 8014764:	20004530 	.word	0x20004530
 8014768:	2000458c 	.word	0x2000458c
 801476c:	08018840 	.word	0x08018840

08014770 <RadioRandom>:
{
 8014770:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014772:	2300      	movs	r3, #0
 8014774:	461a      	mov	r2, r3
 8014776:	4619      	mov	r1, r3
 8014778:	4618      	mov	r0, r3
 801477a:	f000 fd54 	bl	8015226 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 801477e:	f000 fbfb 	bl	8014f78 <SUBGRF_GetRandom>
}
 8014782:	bd08      	pop	{r3, pc}

08014784 <RadioSetModem>:
{
 8014784:	b510      	push	{r4, lr}
 8014786:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8014788:	4b14      	ldr	r3, [pc, #80]	; (80147dc <RadioSetModem+0x58>)
 801478a:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 801478c:	f001 f92c 	bl	80159e8 <RFW_SetRadioModem>
    switch( modem )
 8014790:	2c01      	cmp	r4, #1
 8014792:	d010      	beq.n	80147b6 <RadioSetModem+0x32>
 8014794:	2c03      	cmp	r4, #3
 8014796:	d01a      	beq.n	80147ce <RadioSetModem+0x4a>
 8014798:	b134      	cbz	r4, 80147a8 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801479a:	2003      	movs	r0, #3
 801479c:	f000 fde2 	bl	8015364 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80147a0:	4b0e      	ldr	r3, [pc, #56]	; (80147dc <RadioSetModem+0x58>)
 80147a2:	2200      	movs	r2, #0
 80147a4:	735a      	strb	r2, [r3, #13]
}
 80147a6:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80147a8:	2000      	movs	r0, #0
 80147aa:	f000 fddb 	bl	8015364 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80147ae:	4b0b      	ldr	r3, [pc, #44]	; (80147dc <RadioSetModem+0x58>)
 80147b0:	2200      	movs	r2, #0
 80147b2:	735a      	strb	r2, [r3, #13]
        break;
 80147b4:	e7f7      	b.n	80147a6 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80147b6:	2001      	movs	r0, #1
 80147b8:	f000 fdd4 	bl	8015364 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80147bc:	4b07      	ldr	r3, [pc, #28]	; (80147dc <RadioSetModem+0x58>)
 80147be:	7b5a      	ldrb	r2, [r3, #13]
 80147c0:	7b18      	ldrb	r0, [r3, #12]
 80147c2:	4282      	cmp	r2, r0
 80147c4:	d0ef      	beq.n	80147a6 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80147c6:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80147c8:	f000 f80a 	bl	80147e0 <RadioSetPublicNetwork>
 80147cc:	e7eb      	b.n	80147a6 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80147ce:	2002      	movs	r0, #2
 80147d0:	f000 fdc8 	bl	8015364 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80147d4:	4b01      	ldr	r3, [pc, #4]	; (80147dc <RadioSetModem+0x58>)
 80147d6:	2200      	movs	r2, #0
 80147d8:	735a      	strb	r2, [r3, #13]
}
 80147da:	e7e4      	b.n	80147a6 <RadioSetModem+0x22>
 80147dc:	20004530 	.word	0x20004530

080147e0 <RadioSetPublicNetwork>:
{
 80147e0:	b510      	push	{r4, lr}
 80147e2:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80147e4:	4b0e      	ldr	r3, [pc, #56]	; (8014820 <RadioSetPublicNetwork+0x40>)
 80147e6:	7318      	strb	r0, [r3, #12]
 80147e8:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80147ea:	2001      	movs	r0, #1
 80147ec:	f7ff ffca 	bl	8014784 <RadioSetModem>
    if( enable == true )
 80147f0:	b154      	cbz	r4, 8014808 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80147f2:	2134      	movs	r1, #52	; 0x34
 80147f4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80147f8:	f000 fa72 	bl	8014ce0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80147fc:	2144      	movs	r1, #68	; 0x44
 80147fe:	f240 7041 	movw	r0, #1857	; 0x741
 8014802:	f000 fa6d 	bl	8014ce0 <SUBGRF_WriteRegister>
}
 8014806:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8014808:	2114      	movs	r1, #20
 801480a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801480e:	f000 fa67 	bl	8014ce0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8014812:	2124      	movs	r1, #36	; 0x24
 8014814:	f240 7041 	movw	r0, #1857	; 0x741
 8014818:	f000 fa62 	bl	8014ce0 <SUBGRF_WriteRegister>
}
 801481c:	e7f3      	b.n	8014806 <RadioSetPublicNetwork+0x26>
 801481e:	bf00      	nop
 8014820:	20004530 	.word	0x20004530

08014824 <RadioSetTxConfig>:
{
 8014824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014828:	b083      	sub	sp, #12
 801482a:	4604      	mov	r4, r0
 801482c:	460e      	mov	r6, r1
 801482e:	4617      	mov	r7, r2
 8014830:	461d      	mov	r5, r3
 8014832:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8014836:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 801483a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 801483e:	f001 f8c5 	bl	80159cc <RFW_DeInit>
    switch( modem )
 8014842:	b1ac      	cbz	r4, 8014870 <RadioSetTxConfig+0x4c>
 8014844:	2c01      	cmp	r4, #1
 8014846:	d05a      	beq.n	80148fe <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8014848:	4630      	mov	r0, r6
 801484a:	f000 ffe5 	bl	8015818 <SUBGRF_SetRfTxPower>
 801484e:	4c55      	ldr	r4, [pc, #340]	; (80149a4 <RadioSetTxConfig+0x180>)
 8014850:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8014854:	210e      	movs	r1, #14
 8014856:	f640 101f 	movw	r0, #2335	; 0x91f
 801485a:	f000 fa41 	bl	8014ce0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801485e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8014862:	f001 f8b8 	bl	80159d6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8014866:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014868:	6063      	str	r3, [r4, #4]
}
 801486a:	b003      	add	sp, #12
 801486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8014870:	4c4c      	ldr	r4, [pc, #304]	; (80149a4 <RadioSetTxConfig+0x180>)
 8014872:	f04f 0b00 	mov.w	fp, #0
 8014876:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801487a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801487c:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801487e:	230b      	movs	r3, #11
 8014880:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8014884:	4628      	mov	r0, r5
 8014886:	f001 f83f 	bl	8015908 <SUBGRF_GetFskBandwidthRegValue>
 801488a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801488e:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8014890:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8014894:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8014898:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801489c:	2304      	movs	r3, #4
 801489e:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80148a0:	2318      	movs	r3, #24
 80148a2:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80148a4:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80148a8:	f089 0901 	eor.w	r9, r9, #1
 80148ac:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 80148b0:	f1ba 0f00 	cmp.w	sl, #0
 80148b4:	d01f      	beq.n	80148f6 <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80148b6:	22f2      	movs	r2, #242	; 0xf2
 80148b8:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80148ba:	4c3a      	ldr	r4, [pc, #232]	; (80149a4 <RadioSetTxConfig+0x180>)
 80148bc:	2301      	movs	r3, #1
 80148be:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80148c0:	f7ff fc50 	bl	8014164 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80148c4:	2000      	movs	r0, #0
 80148c6:	f7ff ff5d 	bl	8014784 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80148ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80148ce:	f000 fdf1 	bl	80154b4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80148d2:	f104 000e 	add.w	r0, r4, #14
 80148d6:	f000 fe75 	bl	80155c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80148da:	4a33      	ldr	r2, [pc, #204]	; (80149a8 <RadioSetTxConfig+0x184>)
 80148dc:	466b      	mov	r3, sp
 80148de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80148e6:	4618      	mov	r0, r3
 80148e8:	f000 fa56 	bl	8014d98 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80148ec:	f240 10ff 	movw	r0, #511	; 0x1ff
 80148f0:	f000 fa29 	bl	8014d46 <SUBGRF_SetWhiteningSeed>
            break;
 80148f4:	e7a8      	b.n	8014848 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80148f6:	4b2b      	ldr	r3, [pc, #172]	; (80149a4 <RadioSetTxConfig+0x180>)
 80148f8:	2201      	movs	r2, #1
 80148fa:	75da      	strb	r2, [r3, #23]
 80148fc:	e7dd      	b.n	80148ba <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80148fe:	4a29      	ldr	r2, [pc, #164]	; (80149a4 <RadioSetTxConfig+0x180>)
 8014900:	2301      	movs	r3, #1
 8014902:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8014906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014908:	b2db      	uxtb	r3, r3
 801490a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801490e:	4927      	ldr	r1, [pc, #156]	; (80149ac <RadioSetTxConfig+0x188>)
 8014910:	5d49      	ldrb	r1, [r1, r5]
 8014912:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8014916:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 801491a:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801491e:	b91d      	cbnz	r5, 8014928 <RadioSetTxConfig+0x104>
 8014920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014922:	3a0b      	subs	r2, #11
 8014924:	2a01      	cmp	r2, #1
 8014926:	d92c      	bls.n	8014982 <RadioSetTxConfig+0x15e>
 8014928:	2d01      	cmp	r5, #1
 801492a:	d027      	beq.n	801497c <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801492c:	4a1d      	ldr	r2, [pc, #116]	; (80149a4 <RadioSetTxConfig+0x180>)
 801492e:	2100      	movs	r1, #0
 8014930:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8014934:	4a1b      	ldr	r2, [pc, #108]	; (80149a4 <RadioSetTxConfig+0x180>)
 8014936:	2101      	movs	r1, #1
 8014938:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801493a:	3b05      	subs	r3, #5
 801493c:	b2db      	uxtb	r3, r3
 801493e:	428b      	cmp	r3, r1
 8014940:	d924      	bls.n	801498c <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8014942:	4b18      	ldr	r3, [pc, #96]	; (80149a4 <RadioSetTxConfig+0x180>)
 8014944:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8014948:	4c16      	ldr	r4, [pc, #88]	; (80149a4 <RadioSetTxConfig+0x180>)
 801494a:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801494e:	4b18      	ldr	r3, [pc, #96]	; (80149b0 <RadioSetTxConfig+0x18c>)
 8014950:	781b      	ldrb	r3, [r3, #0]
 8014952:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8014954:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8014958:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801495c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8014960:	f7ff fc00 	bl	8014164 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8014964:	2001      	movs	r0, #1
 8014966:	f7ff ff0d 	bl	8014784 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801496a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801496e:	f000 fda1 	bl	80154b4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014972:	f104 000e 	add.w	r0, r4, #14
 8014976:	f000 fe25 	bl	80155c4 <SUBGRF_SetPacketParams>
            break;
 801497a:	e765      	b.n	8014848 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801497c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801497e:	2a0c      	cmp	r2, #12
 8014980:	d1d4      	bne.n	801492c <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8014982:	4a08      	ldr	r2, [pc, #32]	; (80149a4 <RadioSetTxConfig+0x180>)
 8014984:	2101      	movs	r1, #1
 8014986:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801498a:	e7d3      	b.n	8014934 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 801498c:	f1b8 0f0b 	cmp.w	r8, #11
 8014990:	d803      	bhi.n	801499a <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8014992:	4613      	mov	r3, r2
 8014994:	220c      	movs	r2, #12
 8014996:	839a      	strh	r2, [r3, #28]
 8014998:	e7d6      	b.n	8014948 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801499a:	4b02      	ldr	r3, [pc, #8]	; (80149a4 <RadioSetTxConfig+0x180>)
 801499c:	f8a3 801c 	strh.w	r8, [r3, #28]
 80149a0:	e7d2      	b.n	8014948 <RadioSetTxConfig+0x124>
 80149a2:	bf00      	nop
 80149a4:	20004530 	.word	0x20004530
 80149a8:	08017a18 	.word	0x08017a18
 80149ac:	08018858 	.word	0x08018858
 80149b0:	20000178 	.word	0x20000178

080149b4 <RadioSetRxConfig>:
{
 80149b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149b8:	b085      	sub	sp, #20
 80149ba:	4604      	mov	r4, r0
 80149bc:	460d      	mov	r5, r1
 80149be:	4616      	mov	r6, r2
 80149c0:	9301      	str	r3, [sp, #4]
 80149c2:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 80149c6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80149ca:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80149ce:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 80149d2:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 80149d6:	4b73      	ldr	r3, [pc, #460]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 80149d8:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 80149dc:	f000 fff6 	bl	80159cc <RFW_DeInit>
    if( rxContinuous == true )
 80149e0:	f1b8 0f00 	cmp.w	r8, #0
 80149e4:	d001      	beq.n	80149ea <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80149e6:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80149ea:	b14f      	cbz	r7, 8014a00 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 80149ec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80149f0:	4b6d      	ldr	r3, [pc, #436]	; (8014ba8 <RadioSetRxConfig+0x1f4>)
 80149f2:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80149f4:	b144      	cbz	r4, 8014a08 <RadioSetRxConfig+0x54>
 80149f6:	2c01      	cmp	r4, #1
 80149f8:	d057      	beq.n	8014aaa <RadioSetRxConfig+0xf6>
}
 80149fa:	b005      	add	sp, #20
 80149fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8014a00:	4b69      	ldr	r3, [pc, #420]	; (8014ba8 <RadioSetRxConfig+0x1f4>)
 8014a02:	22ff      	movs	r2, #255	; 0xff
 8014a04:	701a      	strb	r2, [r3, #0]
 8014a06:	e7f5      	b.n	80149f4 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8014a08:	2000      	movs	r0, #0
 8014a0a:	f000 fb47 	bl	801509c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8014a0e:	4c65      	ldr	r4, [pc, #404]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014a10:	f04f 0800 	mov.w	r8, #0
 8014a14:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8014a18:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8014a1a:	230b      	movs	r3, #11
 8014a1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8014a20:	4628      	mov	r0, r5
 8014a22:	f000 ff71 	bl	8015908 <SUBGRF_GetFskBandwidthRegValue>
 8014a26:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8014a2a:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8014a2e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8014a32:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8014a36:	2304      	movs	r3, #4
 8014a38:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8014a3a:	2318      	movs	r3, #24
 8014a3c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8014a3e:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8014a42:	f087 0701 	eor.w	r7, r7, #1
 8014a46:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8014a48:	4b57      	ldr	r3, [pc, #348]	; (8014ba8 <RadioSetRxConfig+0x1f4>)
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8014a4e:	f1bb 0f00 	cmp.w	fp, #0
 8014a52:	d026      	beq.n	8014aa2 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8014a54:	22f2      	movs	r2, #242	; 0xf2
 8014a56:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8014a58:	4c52      	ldr	r4, [pc, #328]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8014a5e:	f7ff fb81 	bl	8014164 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8014a62:	2000      	movs	r0, #0
 8014a64:	f7ff fe8e 	bl	8014784 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014a68:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014a6c:	f000 fd22 	bl	80154b4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014a70:	f104 000e 	add.w	r0, r4, #14
 8014a74:	f000 fda6 	bl	80155c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8014a78:	4a4c      	ldr	r2, [pc, #304]	; (8014bac <RadioSetRxConfig+0x1f8>)
 8014a7a:	ab02      	add	r3, sp, #8
 8014a7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a80:	e883 0003 	stmia.w	r3, {r0, r1}
 8014a84:	4618      	mov	r0, r3
 8014a86:	f000 f987 	bl	8014d98 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8014a8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014a8e:	f000 f95a 	bl	8014d46 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8014a92:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8014a96:	fb03 f30a 	mul.w	r3, r3, sl
 8014a9a:	fbb3 f3f6 	udiv	r3, r3, r6
 8014a9e:	60a3      	str	r3, [r4, #8]
            break;
 8014aa0:	e7ab      	b.n	80149fa <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8014aa2:	4b40      	ldr	r3, [pc, #256]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	75da      	strb	r2, [r3, #23]
 8014aa8:	e7d6      	b.n	8014a58 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8014aaa:	2000      	movs	r0, #0
 8014aac:	f000 faf6 	bl	801509c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8014ab0:	4a3c      	ldr	r2, [pc, #240]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8014ab8:	b2f3      	uxtb	r3, r6
 8014aba:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8014abe:	493c      	ldr	r1, [pc, #240]	; (8014bb0 <RadioSetRxConfig+0x1fc>)
 8014ac0:	5d49      	ldrb	r1, [r1, r5]
 8014ac2:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8014ac6:	9901      	ldr	r1, [sp, #4]
 8014ac8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8014acc:	b91d      	cbnz	r5, 8014ad6 <RadioSetRxConfig+0x122>
 8014ace:	f1a6 020b 	sub.w	r2, r6, #11
 8014ad2:	2a01      	cmp	r2, #1
 8014ad4:	d94b      	bls.n	8014b6e <RadioSetRxConfig+0x1ba>
 8014ad6:	2d01      	cmp	r5, #1
 8014ad8:	d047      	beq.n	8014b6a <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8014ada:	4a32      	ldr	r2, [pc, #200]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014adc:	2100      	movs	r1, #0
 8014ade:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8014ae2:	4a30      	ldr	r2, [pc, #192]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014ae4:	2101      	movs	r1, #1
 8014ae6:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8014ae8:	3b05      	subs	r3, #5
 8014aea:	b2db      	uxtb	r3, r3
 8014aec:	428b      	cmp	r3, r1
 8014aee:	d943      	bls.n	8014b78 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8014af0:	4b2c      	ldr	r3, [pc, #176]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014af2:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8014af6:	4c2b      	ldr	r4, [pc, #172]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014af8:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8014afa:	4b2b      	ldr	r3, [pc, #172]	; (8014ba8 <RadioSetRxConfig+0x1f4>)
 8014afc:	781b      	ldrb	r3, [r3, #0]
 8014afe:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8014b00:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8014b04:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014b08:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8014b0c:	f7ff fb2a 	bl	8014164 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8014b10:	2001      	movs	r0, #1
 8014b12:	f7ff fe37 	bl	8014784 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014b16:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014b1a:	f000 fccb 	bl	80154b4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014b1e:	f104 000e 	add.w	r0, r4, #14
 8014b22:	f000 fd4f 	bl	80155c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8014b26:	fa5f f08a 	uxtb.w	r0, sl
 8014b2a:	f000 fac4 	bl	80150b6 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8014b2e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8014b32:	f000 f8e5 	bl	8014d00 <SUBGRF_ReadRegister>
 8014b36:	f000 0101 	and.w	r1, r0, #1
 8014b3a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8014b3e:	f000 f8cf 	bl	8014ce0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8014b42:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8014b46:	2b01      	cmp	r3, #1
 8014b48:	d021      	beq.n	8014b8e <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8014b4a:	f240 7036 	movw	r0, #1846	; 0x736
 8014b4e:	f000 f8d7 	bl	8014d00 <SUBGRF_ReadRegister>
 8014b52:	f040 0104 	orr.w	r1, r0, #4
 8014b56:	b2c9      	uxtb	r1, r1
 8014b58:	f240 7036 	movw	r0, #1846	; 0x736
 8014b5c:	f000 f8c0 	bl	8014ce0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8014b60:	4b10      	ldr	r3, [pc, #64]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b66:	609a      	str	r2, [r3, #8]
}
 8014b68:	e747      	b.n	80149fa <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8014b6a:	2e0c      	cmp	r6, #12
 8014b6c:	d1b5      	bne.n	8014ada <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8014b6e:	4a0d      	ldr	r2, [pc, #52]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014b70:	2101      	movs	r1, #1
 8014b72:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8014b76:	e7b4      	b.n	8014ae2 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8014b78:	f1b9 0f0b 	cmp.w	r9, #11
 8014b7c:	d803      	bhi.n	8014b86 <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8014b7e:	4613      	mov	r3, r2
 8014b80:	220c      	movs	r2, #12
 8014b82:	839a      	strh	r2, [r3, #28]
 8014b84:	e7b7      	b.n	8014af6 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8014b86:	4b07      	ldr	r3, [pc, #28]	; (8014ba4 <RadioSetRxConfig+0x1f0>)
 8014b88:	f8a3 901c 	strh.w	r9, [r3, #28]
 8014b8c:	e7b3      	b.n	8014af6 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8014b8e:	f240 7036 	movw	r0, #1846	; 0x736
 8014b92:	f000 f8b5 	bl	8014d00 <SUBGRF_ReadRegister>
 8014b96:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8014b9a:	f240 7036 	movw	r0, #1846	; 0x736
 8014b9e:	f000 f89f 	bl	8014ce0 <SUBGRF_WriteRegister>
 8014ba2:	e7dd      	b.n	8014b60 <RadioSetRxConfig+0x1ac>
 8014ba4:	20004530 	.word	0x20004530
 8014ba8:	20000178 	.word	0x20000178
 8014bac:	08017a18 	.word	0x08017a18
 8014bb0:	08018858 	.word	0x08018858

08014bb4 <RadioIsChannelFree>:
{
 8014bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bb6:	b08b      	sub	sp, #44	; 0x2c
 8014bb8:	4604      	mov	r4, r0
 8014bba:	460f      	mov	r7, r1
 8014bbc:	4616      	mov	r6, r2
 8014bbe:	461d      	mov	r5, r3
    RadioStandby( );
 8014bc0:	f7ff fad0 	bl	8014164 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8014bc4:	2000      	movs	r0, #0
 8014bc6:	f7ff fddd 	bl	8014784 <RadioSetModem>
    RadioSetChannel( freq );
 8014bca:	4620      	mov	r0, r4
 8014bcc:	f7ff fce4 	bl	8014598 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8014bd4:	2400      	movs	r4, #0
 8014bd6:	9408      	str	r4, [sp, #32]
 8014bd8:	9407      	str	r4, [sp, #28]
 8014bda:	9406      	str	r4, [sp, #24]
 8014bdc:	9405      	str	r4, [sp, #20]
 8014bde:	9404      	str	r4, [sp, #16]
 8014be0:	9403      	str	r4, [sp, #12]
 8014be2:	9402      	str	r4, [sp, #8]
 8014be4:	2303      	movs	r3, #3
 8014be6:	9301      	str	r3, [sp, #4]
 8014be8:	9700      	str	r7, [sp, #0]
 8014bea:	4623      	mov	r3, r4
 8014bec:	f44f 7216 	mov.w	r2, #600	; 0x258
 8014bf0:	4639      	mov	r1, r7
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	f7ff fede 	bl	80149b4 <RadioSetRxConfig>
    RadioRx( 0 );
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f7ff fce5 	bl	80145c8 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8014bfe:	f7ff fc79 	bl	80144f4 <RadioGetWakeupTime>
 8014c02:	f7ed fa0f 	bl	8002024 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8014c06:	f001 fadb 	bl	80161c0 <UTIL_TIMER_GetCurrentTime>
 8014c0a:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	f001 fae1 	bl	80161d4 <UTIL_TIMER_GetElapsedTime>
 8014c12:	42a8      	cmp	r0, r5
 8014c14:	d206      	bcs.n	8014c24 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8014c16:	2000      	movs	r0, #0
 8014c18:	f7ff fc96 	bl	8014548 <RadioRssi>
        if( rssi > rssiThresh )
 8014c1c:	42b0      	cmp	r0, r6
 8014c1e:	ddf5      	ble.n	8014c0c <RadioIsChannelFree+0x58>
            status = false;
 8014c20:	2400      	movs	r4, #0
 8014c22:	e000      	b.n	8014c26 <RadioIsChannelFree+0x72>
    bool status = true;
 8014c24:	2401      	movs	r4, #1
    RadioStandby( );
 8014c26:	f7ff fa9d 	bl	8014164 <RadioStandby>
}
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	b00b      	add	sp, #44	; 0x2c
 8014c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014c30 <RadioInit>:
{
 8014c30:	b570      	push	{r4, r5, r6, lr}
 8014c32:	b082      	sub	sp, #8
    RadioEvents = events;
 8014c34:	4b1d      	ldr	r3, [pc, #116]	; (8014cac <RadioInit+0x7c>)
 8014c36:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8014c38:	4d1d      	ldr	r5, [pc, #116]	; (8014cb0 <RadioInit+0x80>)
 8014c3a:	2400      	movs	r4, #0
 8014c3c:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8014c3e:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8014c40:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8014c42:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8014c44:	481b      	ldr	r0, [pc, #108]	; (8014cb4 <RadioInit+0x84>)
 8014c46:	f000 fb27 	bl	8015298 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8014c4a:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8014c4c:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8014c4e:	f000 fa53 	bl	80150f8 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8014c52:	4621      	mov	r1, r4
 8014c54:	4620      	mov	r0, r4
 8014c56:	f000 fd27 	bl	80156a8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8014c5a:	2204      	movs	r2, #4
 8014c5c:	4621      	mov	r1, r4
 8014c5e:	2001      	movs	r0, #1
 8014c60:	f000 fb9a 	bl	8015398 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014c64:	4623      	mov	r3, r4
 8014c66:	4622      	mov	r2, r4
 8014c68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014c6c:	4608      	mov	r0, r1
 8014c6e:	f000 fada 	bl	8015226 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8014c72:	f7ff fce1 	bl	8014638 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8014c76:	4e10      	ldr	r6, [pc, #64]	; (8014cb8 <RadioInit+0x88>)
 8014c78:	9400      	str	r4, [sp, #0]
 8014c7a:	4b10      	ldr	r3, [pc, #64]	; (8014cbc <RadioInit+0x8c>)
 8014c7c:	4622      	mov	r2, r4
 8014c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8014c82:	4630      	mov	r0, r6
 8014c84:	f001 fa7e 	bl	8016184 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8014c88:	4d0d      	ldr	r5, [pc, #52]	; (8014cc0 <RadioInit+0x90>)
 8014c8a:	9400      	str	r4, [sp, #0]
 8014c8c:	4b0d      	ldr	r3, [pc, #52]	; (8014cc4 <RadioInit+0x94>)
 8014c8e:	4622      	mov	r2, r4
 8014c90:	f04f 31ff 	mov.w	r1, #4294967295
 8014c94:	4628      	mov	r0, r5
 8014c96:	f001 fa75 	bl	8016184 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8014c9a:	4630      	mov	r0, r6
 8014c9c:	f001 fad0 	bl	8016240 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8014ca0:	4628      	mov	r0, r5
 8014ca2:	f001 facd 	bl	8016240 <UTIL_TIMER_Stop>
}
 8014ca6:	b002      	add	sp, #8
 8014ca8:	bd70      	pop	{r4, r5, r6, pc}
 8014caa:	bf00      	nop
 8014cac:	20004514 	.word	0x20004514
 8014cb0:	20004530 	.word	0x20004530
 8014cb4:	080144e1 	.word	0x080144e1
 8014cb8:	2000458c 	.word	0x2000458c
 8014cbc:	08014029 	.word	0x08014029
 8014cc0:	20004518 	.word	0x20004518
 8014cc4:	08014051 	.word	0x08014051

08014cc8 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8014cc8:	4b01      	ldr	r3, [pc, #4]	; (8014cd0 <SUBGRF_GetOperatingMode+0x8>)
 8014cca:	7818      	ldrb	r0, [r3, #0]
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop
 8014cd0:	200045aa 	.word	0x200045aa

08014cd4 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8014cd4:	4b01      	ldr	r3, [pc, #4]	; (8014cdc <SUBGRF_GetPacketType+0x8>)
 8014cd6:	7818      	ldrb	r0, [r3, #0]
 8014cd8:	4770      	bx	lr
 8014cda:	bf00      	nop
 8014cdc:	200045ab 	.word	0x200045ab

08014ce0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8014ce0:	b500      	push	{lr}
 8014ce2:	b083      	sub	sp, #12
 8014ce4:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8014ce8:	2301      	movs	r3, #1
 8014cea:	f10d 0207 	add.w	r2, sp, #7
 8014cee:	4601      	mov	r1, r0
 8014cf0:	4802      	ldr	r0, [pc, #8]	; (8014cfc <SUBGRF_WriteRegister+0x1c>)
 8014cf2:	f7f4 ffd9 	bl	8009ca8 <HAL_SUBGHZ_WriteRegisters>
}
 8014cf6:	b003      	add	sp, #12
 8014cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8014cfc:	200002e8 	.word	0x200002e8

08014d00 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8014d00:	b500      	push	{lr}
 8014d02:	b083      	sub	sp, #12
 8014d04:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8014d06:	2301      	movs	r3, #1
 8014d08:	f10d 0207 	add.w	r2, sp, #7
 8014d0c:	4803      	ldr	r0, [pc, #12]	; (8014d1c <SUBGRF_ReadRegister+0x1c>)
 8014d0e:	f7f5 f81b 	bl	8009d48 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 8014d12:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014d16:	b003      	add	sp, #12
 8014d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d1c:	200002e8 	.word	0x200002e8

08014d20 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8014d20:	b510      	push	{r4, lr}
 8014d22:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8014d24:	f7ee fc38 	bl	8003598 <RBI_IsDCDC>
 8014d28:	2801      	cmp	r0, #1
 8014d2a:	d000      	beq.n	8014d2e <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8014d2c:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8014d2e:	f640 1023 	movw	r0, #2339	; 0x923
 8014d32:	f7ff ffe5 	bl	8014d00 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8014d36:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8014d3a:	4321      	orrs	r1, r4
 8014d3c:	f640 1023 	movw	r0, #2339	; 0x923
 8014d40:	f7ff ffce 	bl	8014ce0 <SUBGRF_WriteRegister>
}
 8014d44:	e7f2      	b.n	8014d2c <Radio_SMPS_Set+0xc>

08014d46 <SUBGRF_SetWhiteningSeed>:
{
 8014d46:	b510      	push	{r4, lr}
 8014d48:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8014d4a:	f7ff ffc3 	bl	8014cd4 <SUBGRF_GetPacketType>
 8014d4e:	b100      	cbz	r0, 8014d52 <SUBGRF_SetWhiteningSeed+0xc>
}
 8014d50:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8014d52:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8014d56:	f7ff ffd3 	bl	8014d00 <SUBGRF_ReadRegister>
 8014d5a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8014d5e:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8014d62:	4301      	orrs	r1, r0
 8014d64:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8014d68:	f7ff ffba 	bl	8014ce0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8014d6c:	b2e1      	uxtb	r1, r4
 8014d6e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8014d72:	f7ff ffb5 	bl	8014ce0 <SUBGRF_WriteRegister>
}
 8014d76:	e7eb      	b.n	8014d50 <SUBGRF_SetWhiteningSeed+0xa>

08014d78 <SUBGRF_WriteRegisters>:
{
 8014d78:	b510      	push	{r4, lr}
 8014d7a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d7c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014d80:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8014d82:	460a      	mov	r2, r1
 8014d84:	4601      	mov	r1, r0
 8014d86:	4803      	ldr	r0, [pc, #12]	; (8014d94 <SUBGRF_WriteRegisters+0x1c>)
 8014d88:	f7f4 ff8e 	bl	8009ca8 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d8c:	f384 8810 	msr	PRIMASK, r4
}
 8014d90:	bd10      	pop	{r4, pc}
 8014d92:	bf00      	nop
 8014d94:	200002e8 	.word	0x200002e8

08014d98 <SUBGRF_SetSyncWord>:
{
 8014d98:	b508      	push	{r3, lr}
 8014d9a:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8014d9c:	2208      	movs	r2, #8
 8014d9e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8014da2:	f7ff ffe9 	bl	8014d78 <SUBGRF_WriteRegisters>
}
 8014da6:	2000      	movs	r0, #0
 8014da8:	bd08      	pop	{r3, pc}

08014daa <SUBGRF_SetCrcSeed>:
{
 8014daa:	b500      	push	{lr}
 8014dac:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8014dae:	0a03      	lsrs	r3, r0, #8
 8014db0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8014db4:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8014db8:	f7ff ff8c 	bl	8014cd4 <SUBGRF_GetPacketType>
 8014dbc:	b110      	cbz	r0, 8014dc4 <SUBGRF_SetCrcSeed+0x1a>
}
 8014dbe:	b003      	add	sp, #12
 8014dc0:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8014dc4:	2202      	movs	r2, #2
 8014dc6:	a901      	add	r1, sp, #4
 8014dc8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8014dcc:	f7ff ffd4 	bl	8014d78 <SUBGRF_WriteRegisters>
}
 8014dd0:	e7f5      	b.n	8014dbe <SUBGRF_SetCrcSeed+0x14>

08014dd2 <SUBGRF_SetCrcPolynomial>:
{
 8014dd2:	b500      	push	{lr}
 8014dd4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8014dd6:	0a03      	lsrs	r3, r0, #8
 8014dd8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8014ddc:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8014de0:	f7ff ff78 	bl	8014cd4 <SUBGRF_GetPacketType>
 8014de4:	b110      	cbz	r0, 8014dec <SUBGRF_SetCrcPolynomial+0x1a>
}
 8014de6:	b003      	add	sp, #12
 8014de8:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8014dec:	2202      	movs	r2, #2
 8014dee:	a901      	add	r1, sp, #4
 8014df0:	f240 60be 	movw	r0, #1726	; 0x6be
 8014df4:	f7ff ffc0 	bl	8014d78 <SUBGRF_WriteRegisters>
}
 8014df8:	e7f5      	b.n	8014de6 <SUBGRF_SetCrcPolynomial+0x14>
	...

08014dfc <SUBGRF_ReadRegisters>:
{
 8014dfc:	b510      	push	{r4, lr}
 8014dfe:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e00:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014e04:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8014e06:	460a      	mov	r2, r1
 8014e08:	4601      	mov	r1, r0
 8014e0a:	4803      	ldr	r0, [pc, #12]	; (8014e18 <SUBGRF_ReadRegisters+0x1c>)
 8014e0c:	f7f4 ff9c 	bl	8009d48 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e10:	f384 8810 	msr	PRIMASK, r4
}
 8014e14:	bd10      	pop	{r4, pc}
 8014e16:	bf00      	nop
 8014e18:	200002e8 	.word	0x200002e8

08014e1c <SUBGRF_WriteBuffer>:
{
 8014e1c:	b510      	push	{r4, lr}
 8014e1e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e20:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014e24:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8014e26:	460a      	mov	r2, r1
 8014e28:	4601      	mov	r1, r0
 8014e2a:	4803      	ldr	r0, [pc, #12]	; (8014e38 <SUBGRF_WriteBuffer+0x1c>)
 8014e2c:	f7f5 f8ea 	bl	800a004 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e30:	f384 8810 	msr	PRIMASK, r4
}
 8014e34:	bd10      	pop	{r4, pc}
 8014e36:	bf00      	nop
 8014e38:	200002e8 	.word	0x200002e8

08014e3c <SUBGRF_SetPayload>:
{
 8014e3c:	b508      	push	{r3, lr}
 8014e3e:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8014e40:	4601      	mov	r1, r0
 8014e42:	2000      	movs	r0, #0
 8014e44:	f7ff ffea 	bl	8014e1c <SUBGRF_WriteBuffer>
}
 8014e48:	bd08      	pop	{r3, pc}
	...

08014e4c <SUBGRF_ReadBuffer>:
{
 8014e4c:	b510      	push	{r4, lr}
 8014e4e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e50:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014e54:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8014e56:	460a      	mov	r2, r1
 8014e58:	4601      	mov	r1, r0
 8014e5a:	4803      	ldr	r0, [pc, #12]	; (8014e68 <SUBGRF_ReadBuffer+0x1c>)
 8014e5c:	f7f5 f91c 	bl	800a098 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e60:	f384 8810 	msr	PRIMASK, r4
}
 8014e64:	bd10      	pop	{r4, pc}
 8014e66:	bf00      	nop
 8014e68:	200002e8 	.word	0x200002e8

08014e6c <SUBGRF_WriteCommand>:
{
 8014e6c:	b510      	push	{r4, lr}
 8014e6e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e70:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014e74:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8014e76:	460a      	mov	r2, r1
 8014e78:	4601      	mov	r1, r0
 8014e7a:	4803      	ldr	r0, [pc, #12]	; (8014e88 <SUBGRF_WriteCommand+0x1c>)
 8014e7c:	f7f4 ffb8 	bl	8009df0 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e80:	f384 8810 	msr	PRIMASK, r4
}
 8014e84:	bd10      	pop	{r4, pc}
 8014e86:	bf00      	nop
 8014e88:	200002e8 	.word	0x200002e8

08014e8c <SUBGRF_SetSleep>:
{
 8014e8c:	b510      	push	{r4, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8014e92:	2000      	movs	r0, #0
 8014e94:	f7ee fb76 	bl	8003584 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8014e98:	2002      	movs	r0, #2
 8014e9a:	f7ff ff41 	bl	8014d20 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8014e9e:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8014ea2:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8014ea6:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8014ea8:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8014eac:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8014eae:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	f10d 0107 	add.w	r1, sp, #7
 8014eb8:	2084      	movs	r0, #132	; 0x84
 8014eba:	f7ff ffd7 	bl	8014e6c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8014ebe:	4b02      	ldr	r3, [pc, #8]	; (8014ec8 <SUBGRF_SetSleep+0x3c>)
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	701a      	strb	r2, [r3, #0]
}
 8014ec4:	b002      	add	sp, #8
 8014ec6:	bd10      	pop	{r4, pc}
 8014ec8:	200045aa 	.word	0x200045aa

08014ecc <SUBGRF_SetStandby>:
{
 8014ecc:	b500      	push	{lr}
 8014ece:	b083      	sub	sp, #12
 8014ed0:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8014ed4:	2201      	movs	r2, #1
 8014ed6:	f10d 0107 	add.w	r1, sp, #7
 8014eda:	2080      	movs	r0, #128	; 0x80
 8014edc:	f7ff ffc6 	bl	8014e6c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8014ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014ee4:	b92b      	cbnz	r3, 8014ef2 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8014ee6:	4b05      	ldr	r3, [pc, #20]	; (8014efc <SUBGRF_SetStandby+0x30>)
 8014ee8:	2201      	movs	r2, #1
 8014eea:	701a      	strb	r2, [r3, #0]
}
 8014eec:	b003      	add	sp, #12
 8014eee:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8014ef2:	4b02      	ldr	r3, [pc, #8]	; (8014efc <SUBGRF_SetStandby+0x30>)
 8014ef4:	2202      	movs	r2, #2
 8014ef6:	701a      	strb	r2, [r3, #0]
}
 8014ef8:	e7f8      	b.n	8014eec <SUBGRF_SetStandby+0x20>
 8014efa:	bf00      	nop
 8014efc:	200045aa 	.word	0x200045aa

08014f00 <SUBGRF_SetTx>:
{
 8014f00:	b500      	push	{lr}
 8014f02:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8014f04:	4b0a      	ldr	r3, [pc, #40]	; (8014f30 <SUBGRF_SetTx+0x30>)
 8014f06:	2204      	movs	r2, #4
 8014f08:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014f0a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014f0e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014f12:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014f16:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8014f1a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8014f1e:	2203      	movs	r2, #3
 8014f20:	a901      	add	r1, sp, #4
 8014f22:	2083      	movs	r0, #131	; 0x83
 8014f24:	f7ff ffa2 	bl	8014e6c <SUBGRF_WriteCommand>
}
 8014f28:	b003      	add	sp, #12
 8014f2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f2e:	bf00      	nop
 8014f30:	200045aa 	.word	0x200045aa

08014f34 <SUBGRF_SendPayload>:
{
 8014f34:	b510      	push	{r4, lr}
 8014f36:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8014f38:	f7ff ff80 	bl	8014e3c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	f7ff ffdf 	bl	8014f00 <SUBGRF_SetTx>
}
 8014f42:	bd10      	pop	{r4, pc}

08014f44 <SUBGRF_SetRx>:
{
 8014f44:	b500      	push	{lr}
 8014f46:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8014f48:	4b0a      	ldr	r3, [pc, #40]	; (8014f74 <SUBGRF_SetRx+0x30>)
 8014f4a:	2205      	movs	r2, #5
 8014f4c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014f4e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014f52:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014f56:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014f5a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8014f5e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8014f62:	2203      	movs	r2, #3
 8014f64:	a901      	add	r1, sp, #4
 8014f66:	2082      	movs	r0, #130	; 0x82
 8014f68:	f7ff ff80 	bl	8014e6c <SUBGRF_WriteCommand>
}
 8014f6c:	b003      	add	sp, #12
 8014f6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f72:	bf00      	nop
 8014f74:	200045aa 	.word	0x200045aa

08014f78 <SUBGRF_GetRandom>:
{
 8014f78:	b570      	push	{r4, r5, r6, lr}
 8014f7a:	b082      	sub	sp, #8
    uint32_t number = 0;
 8014f7c:	2600      	movs	r6, #0
 8014f7e:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8014f80:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8014f84:	f7ff febc 	bl	8014d00 <SUBGRF_ReadRegister>
 8014f88:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8014f8a:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8014f8e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8014f92:	f7ff fea5 	bl	8014ce0 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8014f96:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014f9a:	f7ff feb1 	bl	8014d00 <SUBGRF_ReadRegister>
 8014f9e:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8014fa0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8014fa4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014fa8:	f7ff fe9a 	bl	8014ce0 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8014fac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014fb0:	f7ff ffc8 	bl	8014f44 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8014fb4:	2204      	movs	r2, #4
 8014fb6:	eb0d 0102 	add.w	r1, sp, r2
 8014fba:	f640 0019 	movw	r0, #2073	; 0x819
 8014fbe:	f7ff ff1d 	bl	8014dfc <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	f7ff ff82 	bl	8014ecc <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8014fc8:	4629      	mov	r1, r5
 8014fca:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8014fce:	f7ff fe87 	bl	8014ce0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8014fd2:	4621      	mov	r1, r4
 8014fd4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014fd8:	f7ff fe82 	bl	8014ce0 <SUBGRF_WriteRegister>
}
 8014fdc:	9801      	ldr	r0, [sp, #4]
 8014fde:	b002      	add	sp, #8
 8014fe0:	bd70      	pop	{r4, r5, r6, pc}
	...

08014fe4 <SUBGRF_SetRxBoosted>:
{
 8014fe4:	b510      	push	{r4, lr}
 8014fe6:	b082      	sub	sp, #8
 8014fe8:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8014fea:	4b0c      	ldr	r3, [pc, #48]	; (801501c <SUBGRF_SetRxBoosted+0x38>)
 8014fec:	2205      	movs	r2, #5
 8014fee:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8014ff0:	2197      	movs	r1, #151	; 0x97
 8014ff2:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8014ff6:	f7ff fe73 	bl	8014ce0 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014ffa:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8014ffe:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015002:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8015006:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801500a:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801500e:	2203      	movs	r2, #3
 8015010:	a901      	add	r1, sp, #4
 8015012:	2082      	movs	r0, #130	; 0x82
 8015014:	f7ff ff2a 	bl	8014e6c <SUBGRF_WriteCommand>
}
 8015018:	b002      	add	sp, #8
 801501a:	bd10      	pop	{r4, pc}
 801501c:	200045aa 	.word	0x200045aa

08015020 <SUBGRF_SetRxDutyCycle>:
{
 8015020:	b500      	push	{lr}
 8015022:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8015024:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015028:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801502c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015030:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8015034:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8015038:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801503c:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8015040:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8015044:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8015048:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801504c:	2206      	movs	r2, #6
 801504e:	4669      	mov	r1, sp
 8015050:	2094      	movs	r0, #148	; 0x94
 8015052:	f7ff ff0b 	bl	8014e6c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8015056:	4b03      	ldr	r3, [pc, #12]	; (8015064 <SUBGRF_SetRxDutyCycle+0x44>)
 8015058:	2206      	movs	r2, #6
 801505a:	701a      	strb	r2, [r3, #0]
}
 801505c:	b003      	add	sp, #12
 801505e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015062:	bf00      	nop
 8015064:	200045aa 	.word	0x200045aa

08015068 <SUBGRF_SetCad>:
{
 8015068:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801506a:	2200      	movs	r2, #0
 801506c:	4611      	mov	r1, r2
 801506e:	20c5      	movs	r0, #197	; 0xc5
 8015070:	f7ff fefc 	bl	8014e6c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8015074:	4b01      	ldr	r3, [pc, #4]	; (801507c <SUBGRF_SetCad+0x14>)
 8015076:	2207      	movs	r2, #7
 8015078:	701a      	strb	r2, [r3, #0]
}
 801507a:	bd08      	pop	{r3, pc}
 801507c:	200045aa 	.word	0x200045aa

08015080 <SUBGRF_SetTxContinuousWave>:
{
 8015080:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8015082:	2200      	movs	r2, #0
 8015084:	4611      	mov	r1, r2
 8015086:	20d1      	movs	r0, #209	; 0xd1
 8015088:	f7ff fef0 	bl	8014e6c <SUBGRF_WriteCommand>
}
 801508c:	bd08      	pop	{r3, pc}

0801508e <SUBGRF_SetTxInfinitePreamble>:
{
 801508e:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8015090:	2200      	movs	r2, #0
 8015092:	4611      	mov	r1, r2
 8015094:	20d2      	movs	r0, #210	; 0xd2
 8015096:	f7ff fee9 	bl	8014e6c <SUBGRF_WriteCommand>
}
 801509a:	bd08      	pop	{r3, pc}

0801509c <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 801509c:	b500      	push	{lr}
 801509e:	b083      	sub	sp, #12
 80150a0:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80150a4:	2201      	movs	r2, #1
 80150a6:	f10d 0107 	add.w	r1, sp, #7
 80150aa:	209f      	movs	r0, #159	; 0x9f
 80150ac:	f7ff fede 	bl	8014e6c <SUBGRF_WriteCommand>
}
 80150b0:	b003      	add	sp, #12
 80150b2:	f85d fb04 	ldr.w	pc, [sp], #4

080150b6 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80150b6:	b500      	push	{lr}
 80150b8:	b083      	sub	sp, #12
 80150ba:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80150be:	2201      	movs	r2, #1
 80150c0:	f10d 0107 	add.w	r1, sp, #7
 80150c4:	20a0      	movs	r0, #160	; 0xa0
 80150c6:	f7ff fed1 	bl	8014e6c <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80150ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80150ce:	2b3f      	cmp	r3, #63	; 0x3f
 80150d0:	d90f      	bls.n	80150f2 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80150d2:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80150d4:	2200      	movs	r2, #0
        while( mant > 31 )
 80150d6:	e002      	b.n	80150de <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 80150d8:	089b      	lsrs	r3, r3, #2
            exp++;
 80150da:	3201      	adds	r2, #1
 80150dc:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 80150de:	2b1f      	cmp	r3, #31
 80150e0:	d8fa      	bhi.n	80150d8 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80150e2:	00d9      	lsls	r1, r3, #3
 80150e4:	b2c9      	uxtb	r1, r1
 80150e6:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80150e8:	b2c9      	uxtb	r1, r1
 80150ea:	f240 7006 	movw	r0, #1798	; 0x706
 80150ee:	f7ff fdf7 	bl	8014ce0 <SUBGRF_WriteRegister>
}
 80150f2:	b003      	add	sp, #12
 80150f4:	f85d fb04 	ldr.w	pc, [sp], #4

080150f8 <SUBGRF_SetRegulatorMode>:
{
 80150f8:	b500      	push	{lr}
 80150fa:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80150fc:	f7ee fa4c 	bl	8003598 <RBI_IsDCDC>
 8015100:	2801      	cmp	r0, #1
 8015102:	d00b      	beq.n	801511c <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8015104:	2300      	movs	r3, #0
 8015106:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801510a:	2201      	movs	r2, #1
 801510c:	f10d 0107 	add.w	r1, sp, #7
 8015110:	2096      	movs	r0, #150	; 0x96
 8015112:	f7ff feab 	bl	8014e6c <SUBGRF_WriteCommand>
}
 8015116:	b003      	add	sp, #12
 8015118:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 801511c:	2301      	movs	r3, #1
 801511e:	f88d 3007 	strb.w	r3, [sp, #7]
 8015122:	e7f2      	b.n	801510a <SUBGRF_SetRegulatorMode+0x12>

08015124 <SUBGRF_Calibrate>:
{
 8015124:	b500      	push	{lr}
 8015126:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015128:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801512c:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015130:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8015132:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8015136:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8015138:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801513c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801513e:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8015142:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8015144:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8015148:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801514a:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801514e:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015150:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8015154:	2201      	movs	r2, #1
 8015156:	f10d 0107 	add.w	r1, sp, #7
 801515a:	2089      	movs	r0, #137	; 0x89
 801515c:	f7ff fe86 	bl	8014e6c <SUBGRF_WriteCommand>
}
 8015160:	b003      	add	sp, #12
 8015162:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015168 <SUBGRF_CalibrateImage>:
{
 8015168:	b500      	push	{lr}
 801516a:	b083      	sub	sp, #12
    if( freq > 900000000 )
 801516c:	4b1f      	ldr	r3, [pc, #124]	; (80151ec <SUBGRF_CalibrateImage+0x84>)
 801516e:	4298      	cmp	r0, r3
 8015170:	d90d      	bls.n	801518e <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8015172:	23e1      	movs	r3, #225	; 0xe1
 8015174:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8015178:	23e9      	movs	r3, #233	; 0xe9
 801517a:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801517e:	2202      	movs	r2, #2
 8015180:	a901      	add	r1, sp, #4
 8015182:	2098      	movs	r0, #152	; 0x98
 8015184:	f7ff fe72 	bl	8014e6c <SUBGRF_WriteCommand>
}
 8015188:	b003      	add	sp, #12
 801518a:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 801518e:	4b18      	ldr	r3, [pc, #96]	; (80151f0 <SUBGRF_CalibrateImage+0x88>)
 8015190:	4298      	cmp	r0, r3
 8015192:	d906      	bls.n	80151a2 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8015194:	23d7      	movs	r3, #215	; 0xd7
 8015196:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 801519a:	23db      	movs	r3, #219	; 0xdb
 801519c:	f88d 3005 	strb.w	r3, [sp, #5]
 80151a0:	e7ed      	b.n	801517e <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80151a2:	4b14      	ldr	r3, [pc, #80]	; (80151f4 <SUBGRF_CalibrateImage+0x8c>)
 80151a4:	4298      	cmp	r0, r3
 80151a6:	d906      	bls.n	80151b6 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80151a8:	23c1      	movs	r3, #193	; 0xc1
 80151aa:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80151ae:	23c5      	movs	r3, #197	; 0xc5
 80151b0:	f88d 3005 	strb.w	r3, [sp, #5]
 80151b4:	e7e3      	b.n	801517e <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80151b6:	4b10      	ldr	r3, [pc, #64]	; (80151f8 <SUBGRF_CalibrateImage+0x90>)
 80151b8:	4298      	cmp	r0, r3
 80151ba:	d906      	bls.n	80151ca <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80151bc:	2375      	movs	r3, #117	; 0x75
 80151be:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80151c2:	2381      	movs	r3, #129	; 0x81
 80151c4:	f88d 3005 	strb.w	r3, [sp, #5]
 80151c8:	e7d9      	b.n	801517e <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80151ca:	4b0c      	ldr	r3, [pc, #48]	; (80151fc <SUBGRF_CalibrateImage+0x94>)
 80151cc:	4298      	cmp	r0, r3
 80151ce:	d906      	bls.n	80151de <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 80151d0:	236b      	movs	r3, #107	; 0x6b
 80151d2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80151d6:	236f      	movs	r3, #111	; 0x6f
 80151d8:	f88d 3005 	strb.w	r3, [sp, #5]
 80151dc:	e7cf      	b.n	801517e <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 80151de:	2329      	movs	r3, #41	; 0x29
 80151e0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 80151e4:	232b      	movs	r3, #43	; 0x2b
 80151e6:	f88d 3005 	strb.w	r3, [sp, #5]
 80151ea:	e7c8      	b.n	801517e <SUBGRF_CalibrateImage+0x16>
 80151ec:	35a4e900 	.word	0x35a4e900
 80151f0:	32a9f880 	.word	0x32a9f880
 80151f4:	2de54480 	.word	0x2de54480
 80151f8:	1b6b0b00 	.word	0x1b6b0b00
 80151fc:	1954fc40 	.word	0x1954fc40

08015200 <SUBGRF_SetPaConfig>:
{
 8015200:	b500      	push	{lr}
 8015202:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8015204:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8015208:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 801520c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8015210:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8015214:	2204      	movs	r2, #4
 8015216:	eb0d 0102 	add.w	r1, sp, r2
 801521a:	2095      	movs	r0, #149	; 0x95
 801521c:	f7ff fe26 	bl	8014e6c <SUBGRF_WriteCommand>
}
 8015220:	b003      	add	sp, #12
 8015222:	f85d fb04 	ldr.w	pc, [sp], #4

08015226 <SUBGRF_SetDioIrqParams>:
{
 8015226:	b500      	push	{lr}
 8015228:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801522a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801522e:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8015232:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8015236:	0a08      	lsrs	r0, r1, #8
 8015238:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801523c:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8015240:	0a11      	lsrs	r1, r2, #8
 8015242:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8015246:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801524a:	0a1a      	lsrs	r2, r3, #8
 801524c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8015250:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8015254:	2208      	movs	r2, #8
 8015256:	4669      	mov	r1, sp
 8015258:	4610      	mov	r0, r2
 801525a:	f7ff fe07 	bl	8014e6c <SUBGRF_WriteCommand>
}
 801525e:	b003      	add	sp, #12
 8015260:	f85d fb04 	ldr.w	pc, [sp], #4

08015264 <SUBGRF_SetTcxoMode>:
{
 8015264:	b500      	push	{lr}
 8015266:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8015268:	f000 0007 	and.w	r0, r0, #7
 801526c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015270:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015274:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015278:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801527c:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8015280:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8015284:	2204      	movs	r2, #4
 8015286:	eb0d 0102 	add.w	r1, sp, r2
 801528a:	2097      	movs	r0, #151	; 0x97
 801528c:	f7ff fdee 	bl	8014e6c <SUBGRF_WriteCommand>
}
 8015290:	b003      	add	sp, #12
 8015292:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015298 <SUBGRF_Init>:
{
 8015298:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 801529a:	b108      	cbz	r0, 80152a0 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 801529c:	4a18      	ldr	r2, [pc, #96]	; (8015300 <SUBGRF_Init+0x68>)
 801529e:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80152a0:	f7ec fdb4 	bl	8001e0c <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80152a4:	2002      	movs	r0, #2
 80152a6:	f7ff fd3b 	bl	8014d20 <Radio_SMPS_Set>
    ImageCalibrated = false;
 80152aa:	2000      	movs	r0, #0
 80152ac:	4b15      	ldr	r3, [pc, #84]	; (8015304 <SUBGRF_Init+0x6c>)
 80152ae:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80152b0:	f7ff fe0c 	bl	8014ecc <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80152b4:	f7ee f96c 	bl	8003590 <RBI_IsTCXO>
 80152b8:	2801      	cmp	r0, #1
 80152ba:	d014      	beq.n	80152e6 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80152bc:	2120      	movs	r1, #32
 80152be:	f640 1011 	movw	r0, #2321	; 0x911
 80152c2:	f7ff fd0d 	bl	8014ce0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80152c6:	2120      	movs	r1, #32
 80152c8:	f640 1012 	movw	r0, #2322	; 0x912
 80152cc:	f7ff fd08 	bl	8014ce0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80152d0:	210e      	movs	r1, #14
 80152d2:	f640 101f 	movw	r0, #2335	; 0x91f
 80152d6:	f7ff fd03 	bl	8014ce0 <SUBGRF_WriteRegister>
    RBI_Init();
 80152da:	f7ee f94f 	bl	800357c <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80152de:	4b0a      	ldr	r3, [pc, #40]	; (8015308 <SUBGRF_Init+0x70>)
 80152e0:	2201      	movs	r2, #1
 80152e2:	701a      	strb	r2, [r3, #0]
}
 80152e4:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80152e6:	2140      	movs	r1, #64	; 0x40
 80152e8:	f7ff ffbc 	bl	8015264 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80152ec:	2100      	movs	r1, #0
 80152ee:	f640 1011 	movw	r0, #2321	; 0x911
 80152f2:	f7ff fcf5 	bl	8014ce0 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 80152f6:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80152fa:	f7ff ff13 	bl	8015124 <SUBGRF_Calibrate>
 80152fe:	e7e7      	b.n	80152d0 <SUBGRF_Init+0x38>
 8015300:	200045ac 	.word	0x200045ac
 8015304:	200045a8 	.word	0x200045a8
 8015308:	200045aa 	.word	0x200045aa

0801530c <SUBGRF_SetRfFrequency>:
{
 801530c:	b510      	push	{r4, lr}
 801530e:	b082      	sub	sp, #8
 8015310:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8015312:	4b12      	ldr	r3, [pc, #72]	; (801535c <SUBGRF_SetRfFrequency+0x50>)
 8015314:	781b      	ldrb	r3, [r3, #0]
 8015316:	b1d3      	cbz	r3, 801534e <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8015318:	4a11      	ldr	r2, [pc, #68]	; (8015360 <SUBGRF_SetRfFrequency+0x54>)
 801531a:	2300      	movs	r3, #0
 801531c:	0660      	lsls	r0, r4, #25
 801531e:	09e1      	lsrs	r1, r4, #7
 8015320:	f7eb ff46 	bl	80011b0 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8015324:	0e03      	lsrs	r3, r0, #24
 8015326:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801532a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801532e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8015332:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015336:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801533a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801533e:	2204      	movs	r2, #4
 8015340:	eb0d 0102 	add.w	r1, sp, r2
 8015344:	2086      	movs	r0, #134	; 0x86
 8015346:	f7ff fd91 	bl	8014e6c <SUBGRF_WriteCommand>
}
 801534a:	b002      	add	sp, #8
 801534c:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 801534e:	f7ff ff0b 	bl	8015168 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8015352:	4b02      	ldr	r3, [pc, #8]	; (801535c <SUBGRF_SetRfFrequency+0x50>)
 8015354:	2201      	movs	r2, #1
 8015356:	701a      	strb	r2, [r3, #0]
 8015358:	e7de      	b.n	8015318 <SUBGRF_SetRfFrequency+0xc>
 801535a:	bf00      	nop
 801535c:	200045a8 	.word	0x200045a8
 8015360:	01e84800 	.word	0x01e84800

08015364 <SUBGRF_SetPacketType>:
{
 8015364:	b500      	push	{lr}
 8015366:	b083      	sub	sp, #12
 8015368:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 801536c:	b2c3      	uxtb	r3, r0
 801536e:	4a09      	ldr	r2, [pc, #36]	; (8015394 <SUBGRF_SetPacketType+0x30>)
 8015370:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8015372:	b143      	cbz	r3, 8015386 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8015374:	2201      	movs	r2, #1
 8015376:	f10d 0107 	add.w	r1, sp, #7
 801537a:	208a      	movs	r0, #138	; 0x8a
 801537c:	f7ff fd76 	bl	8014e6c <SUBGRF_WriteCommand>
}
 8015380:	b003      	add	sp, #12
 8015382:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8015386:	2100      	movs	r1, #0
 8015388:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801538c:	f7ff fca8 	bl	8014ce0 <SUBGRF_WriteRegister>
 8015390:	e7f0      	b.n	8015374 <SUBGRF_SetPacketType+0x10>
 8015392:	bf00      	nop
 8015394:	200045ab 	.word	0x200045ab

08015398 <SUBGRF_SetTxParams>:
{
 8015398:	b570      	push	{r4, r5, r6, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	460c      	mov	r4, r1
 801539e:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80153a0:	2801      	cmp	r0, #1
 80153a2:	d035      	beq.n	8015410 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80153a4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80153a8:	f7ff fcaa 	bl	8014d00 <SUBGRF_ReadRegister>
 80153ac:	f040 011e 	orr.w	r1, r0, #30
 80153b0:	b2c9      	uxtb	r1, r1
 80153b2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80153b6:	f7ff fc93 	bl	8014ce0 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80153ba:	2001      	movs	r0, #1
 80153bc:	f7ee f8f0 	bl	80035a0 <RBI_GetRFOMaxPowerConfig>
 80153c0:	4605      	mov	r5, r0
        if (power > max_power)
 80153c2:	4284      	cmp	r4, r0
 80153c4:	dd00      	ble.n	80153c8 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 80153c6:	b244      	sxtb	r4, r0
        if (max_power == 20)
 80153c8:	2d14      	cmp	r5, #20
 80153ca:	d054      	beq.n	8015476 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 80153cc:	2d11      	cmp	r5, #17
 80153ce:	d05c      	beq.n	801548a <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 80153d0:	2d0e      	cmp	r5, #14
 80153d2:	d064      	beq.n	801549e <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80153d4:	2301      	movs	r3, #1
 80153d6:	2200      	movs	r2, #0
 80153d8:	2107      	movs	r1, #7
 80153da:	2004      	movs	r0, #4
 80153dc:	f7ff ff10 	bl	8015200 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80153e0:	1b64      	subs	r4, r4, r5
 80153e2:	3416      	adds	r4, #22
 80153e4:	b265      	sxtb	r5, r4
        if (power < -9)
 80153e6:	f115 0f09 	cmn.w	r5, #9
 80153ea:	da01      	bge.n	80153f0 <SUBGRF_SetTxParams+0x58>
            power = -9;
 80153ec:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80153f0:	2138      	movs	r1, #56	; 0x38
 80153f2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80153f6:	f7ff fc73 	bl	8014ce0 <SUBGRF_WriteRegister>
    buf[0] = power;
 80153fa:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 80153fe:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8015402:	2202      	movs	r2, #2
 8015404:	a901      	add	r1, sp, #4
 8015406:	208e      	movs	r0, #142	; 0x8e
 8015408:	f7ff fd30 	bl	8014e6c <SUBGRF_WriteCommand>
}
 801540c:	b002      	add	sp, #8
 801540e:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8015410:	2000      	movs	r0, #0
 8015412:	f7ee f8c5 	bl	80035a0 <RBI_GetRFOMaxPowerConfig>
 8015416:	4605      	mov	r5, r0
        if (power >  max_power)
 8015418:	4284      	cmp	r4, r0
 801541a:	dd00      	ble.n	801541e <SUBGRF_SetTxParams+0x86>
          power = max_power;
 801541c:	b244      	sxtb	r4, r0
        if (max_power == 14)
 801541e:	2d0e      	cmp	r5, #14
 8015420:	d015      	beq.n	801544e <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8015422:	2d0a      	cmp	r5, #10
 8015424:	d01d      	beq.n	8015462 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8015426:	2301      	movs	r3, #1
 8015428:	461a      	mov	r2, r3
 801542a:	2100      	movs	r1, #0
 801542c:	2007      	movs	r0, #7
 801542e:	f7ff fee7 	bl	8015200 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8015432:	1b65      	subs	r5, r4, r5
 8015434:	350e      	adds	r5, #14
 8015436:	b26d      	sxtb	r5, r5
        if (power < -17)
 8015438:	f115 0f11 	cmn.w	r5, #17
 801543c:	da01      	bge.n	8015442 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 801543e:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8015442:	2118      	movs	r1, #24
 8015444:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8015448:	f7ff fc4a 	bl	8014ce0 <SUBGRF_WriteRegister>
 801544c:	e7d5      	b.n	80153fa <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801544e:	2301      	movs	r3, #1
 8015450:	461a      	mov	r2, r3
 8015452:	2100      	movs	r1, #0
 8015454:	2004      	movs	r0, #4
 8015456:	f7ff fed3 	bl	8015200 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801545a:	1b65      	subs	r5, r4, r5
 801545c:	350e      	adds	r5, #14
 801545e:	b26d      	sxtb	r5, r5
 8015460:	e7ea      	b.n	8015438 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8015462:	2301      	movs	r3, #1
 8015464:	461a      	mov	r2, r3
 8015466:	2100      	movs	r1, #0
 8015468:	4618      	mov	r0, r3
 801546a:	f7ff fec9 	bl	8015200 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801546e:	1b65      	subs	r5, r4, r5
 8015470:	350d      	adds	r5, #13
 8015472:	b26d      	sxtb	r5, r5
 8015474:	e7e0      	b.n	8015438 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8015476:	2301      	movs	r3, #1
 8015478:	2200      	movs	r2, #0
 801547a:	2105      	movs	r1, #5
 801547c:	2003      	movs	r0, #3
 801547e:	f7ff febf 	bl	8015200 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8015482:	1b65      	subs	r5, r4, r5
 8015484:	3516      	adds	r5, #22
 8015486:	b26d      	sxtb	r5, r5
 8015488:	e7ad      	b.n	80153e6 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801548a:	2301      	movs	r3, #1
 801548c:	2200      	movs	r2, #0
 801548e:	2103      	movs	r1, #3
 8015490:	2002      	movs	r0, #2
 8015492:	f7ff feb5 	bl	8015200 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8015496:	1b65      	subs	r5, r4, r5
 8015498:	3516      	adds	r5, #22
 801549a:	b26d      	sxtb	r5, r5
 801549c:	e7a3      	b.n	80153e6 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801549e:	2301      	movs	r3, #1
 80154a0:	2200      	movs	r2, #0
 80154a2:	2102      	movs	r1, #2
 80154a4:	4608      	mov	r0, r1
 80154a6:	f7ff feab 	bl	8015200 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80154aa:	1b65      	subs	r5, r4, r5
 80154ac:	350e      	adds	r5, #14
 80154ae:	b26d      	sxtb	r5, r5
 80154b0:	e799      	b.n	80153e6 <SUBGRF_SetTxParams+0x4e>
	...

080154b4 <SUBGRF_SetModulationParams>:
{
 80154b4:	b510      	push	{r4, lr}
 80154b6:	b082      	sub	sp, #8
 80154b8:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80154ba:	4b3e      	ldr	r3, [pc, #248]	; (80155b4 <SUBGRF_SetModulationParams+0x100>)
 80154bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80154c0:	ab02      	add	r3, sp, #8
 80154c2:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 80154c6:	7820      	ldrb	r0, [r4, #0]
 80154c8:	4b3b      	ldr	r3, [pc, #236]	; (80155b8 <SUBGRF_SetModulationParams+0x104>)
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	4298      	cmp	r0, r3
 80154ce:	d106      	bne.n	80154de <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 80154d0:	7823      	ldrb	r3, [r4, #0]
 80154d2:	2b03      	cmp	r3, #3
 80154d4:	d82c      	bhi.n	8015530 <SUBGRF_SetModulationParams+0x7c>
 80154d6:	e8df f003 	tbb	[pc, r3]
 80154da:	4205      	.short	0x4205
 80154dc:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80154de:	f7ff ff41 	bl	8015364 <SUBGRF_SetPacketType>
 80154e2:	e7f5      	b.n	80154d0 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80154e4:	6862      	ldr	r2, [r4, #4]
 80154e6:	4b35      	ldr	r3, [pc, #212]	; (80155bc <SUBGRF_SetModulationParams+0x108>)
 80154e8:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80154ec:	0c1a      	lsrs	r2, r3, #16
 80154ee:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80154f2:	0a1a      	lsrs	r2, r3, #8
 80154f4:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80154f8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80154fc:	7b23      	ldrb	r3, [r4, #12]
 80154fe:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015502:	7b63      	ldrb	r3, [r4, #13]
 8015504:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8015508:	68a1      	ldr	r1, [r4, #8]
 801550a:	4a2d      	ldr	r2, [pc, #180]	; (80155c0 <SUBGRF_SetModulationParams+0x10c>)
 801550c:	2300      	movs	r3, #0
 801550e:	0648      	lsls	r0, r1, #25
 8015510:	09c9      	lsrs	r1, r1, #7
 8015512:	f7eb fe4d 	bl	80011b0 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8015516:	0c03      	lsrs	r3, r0, #16
 8015518:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801551c:	0a03      	lsrs	r3, r0, #8
 801551e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8015522:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015526:	2208      	movs	r2, #8
 8015528:	4669      	mov	r1, sp
 801552a:	208b      	movs	r0, #139	; 0x8b
 801552c:	f7ff fc9e 	bl	8014e6c <SUBGRF_WriteCommand>
}
 8015530:	b002      	add	sp, #8
 8015532:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8015534:	6922      	ldr	r2, [r4, #16]
 8015536:	4b21      	ldr	r3, [pc, #132]	; (80155bc <SUBGRF_SetModulationParams+0x108>)
 8015538:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801553c:	0c1a      	lsrs	r2, r3, #16
 801553e:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015542:	0a1a      	lsrs	r2, r3, #8
 8015544:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015548:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801554c:	7d23      	ldrb	r3, [r4, #20]
 801554e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015552:	2204      	movs	r2, #4
 8015554:	4669      	mov	r1, sp
 8015556:	208b      	movs	r0, #139	; 0x8b
 8015558:	f7ff fc88 	bl	8014e6c <SUBGRF_WriteCommand>
        break;
 801555c:	e7e8      	b.n	8015530 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801555e:	7e23      	ldrb	r3, [r4, #24]
 8015560:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8015564:	7e63      	ldrb	r3, [r4, #25]
 8015566:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801556a:	7ea3      	ldrb	r3, [r4, #26]
 801556c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8015570:	7ee3      	ldrb	r3, [r4, #27]
 8015572:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015576:	2204      	movs	r2, #4
 8015578:	4669      	mov	r1, sp
 801557a:	208b      	movs	r0, #139	; 0x8b
 801557c:	f7ff fc76 	bl	8014e6c <SUBGRF_WriteCommand>
        break;
 8015580:	e7d6      	b.n	8015530 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8015582:	6862      	ldr	r2, [r4, #4]
 8015584:	4b0d      	ldr	r3, [pc, #52]	; (80155bc <SUBGRF_SetModulationParams+0x108>)
 8015586:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801558a:	0c1a      	lsrs	r2, r3, #16
 801558c:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015590:	0a1a      	lsrs	r2, r3, #8
 8015592:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015596:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801559a:	7b23      	ldrb	r3, [r4, #12]
 801559c:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80155a0:	7b63      	ldrb	r3, [r4, #13]
 80155a2:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80155a6:	2205      	movs	r2, #5
 80155a8:	4669      	mov	r1, sp
 80155aa:	208b      	movs	r0, #139	; 0x8b
 80155ac:	f7ff fc5e 	bl	8014e6c <SUBGRF_WriteCommand>
}
 80155b0:	e7be      	b.n	8015530 <SUBGRF_SetModulationParams+0x7c>
 80155b2:	bf00      	nop
 80155b4:	08017a20 	.word	0x08017a20
 80155b8:	200045ab 	.word	0x200045ab
 80155bc:	3d090000 	.word	0x3d090000
 80155c0:	01e84800 	.word	0x01e84800

080155c4 <SUBGRF_SetPacketParams>:
{
 80155c4:	b510      	push	{r4, lr}
 80155c6:	b084      	sub	sp, #16
 80155c8:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80155ca:	ab01      	add	r3, sp, #4
 80155cc:	4a33      	ldr	r2, [pc, #204]	; (801569c <SUBGRF_SetPacketParams+0xd8>)
 80155ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80155d0:	c303      	stmia	r3!, {r0, r1}
 80155d2:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 80155d4:	7820      	ldrb	r0, [r4, #0]
 80155d6:	4b32      	ldr	r3, [pc, #200]	; (80156a0 <SUBGRF_SetPacketParams+0xdc>)
 80155d8:	781b      	ldrb	r3, [r3, #0]
 80155da:	4298      	cmp	r0, r3
 80155dc:	d106      	bne.n	80155ec <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80155de:	7823      	ldrb	r3, [r4, #0]
 80155e0:	2b03      	cmp	r3, #3
 80155e2:	d82a      	bhi.n	801563a <SUBGRF_SetPacketParams+0x76>
 80155e4:	e8df f003 	tbb	[pc, r3]
 80155e8:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80155ec:	f7ff feba 	bl	8015364 <SUBGRF_SetPacketType>
 80155f0:	e7f5      	b.n	80155de <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80155f2:	7a63      	ldrb	r3, [r4, #9]
 80155f4:	2bf1      	cmp	r3, #241	; 0xf1
 80155f6:	d022      	beq.n	801563e <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80155f8:	2bf2      	cmp	r3, #242	; 0xf2
 80155fa:	d02a      	beq.n	8015652 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80155fc:	8862      	ldrh	r2, [r4, #2]
 80155fe:	0a11      	lsrs	r1, r2, #8
 8015600:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8015604:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8015608:	7922      	ldrb	r2, [r4, #4]
 801560a:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801560e:	7962      	ldrb	r2, [r4, #5]
 8015610:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8015614:	79a2      	ldrb	r2, [r4, #6]
 8015616:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801561a:	79e2      	ldrb	r2, [r4, #7]
 801561c:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8015620:	7a22      	ldrb	r2, [r4, #8]
 8015622:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8015626:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801562a:	7aa3      	ldrb	r3, [r4, #10]
 801562c:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8015630:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8015632:	a901      	add	r1, sp, #4
 8015634:	208c      	movs	r0, #140	; 0x8c
 8015636:	f7ff fc19 	bl	8014e6c <SUBGRF_WriteCommand>
}
 801563a:	b004      	add	sp, #16
 801563c:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801563e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015642:	f7ff fbb2 	bl	8014daa <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8015646:	f248 0005 	movw	r0, #32773	; 0x8005
 801564a:	f7ff fbc2 	bl	8014dd2 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801564e:	2302      	movs	r3, #2
 8015650:	e7d4      	b.n	80155fc <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8015652:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8015656:	f7ff fba8 	bl	8014daa <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801565a:	f241 0021 	movw	r0, #4129	; 0x1021
 801565e:	f7ff fbb8 	bl	8014dd2 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8015662:	2306      	movs	r3, #6
 8015664:	e7ca      	b.n	80155fc <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8015666:	7b23      	ldrb	r3, [r4, #12]
 8015668:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 801566c:	2201      	movs	r2, #1
        break;
 801566e:	e7e0      	b.n	8015632 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8015670:	89e3      	ldrh	r3, [r4, #14]
 8015672:	0a1a      	lsrs	r2, r3, #8
 8015674:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8015678:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801567c:	7c23      	ldrb	r3, [r4, #16]
 801567e:	4a09      	ldr	r2, [pc, #36]	; (80156a4 <SUBGRF_SetPacketParams+0xe0>)
 8015680:	7013      	strb	r3, [r2, #0]
 8015682:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8015686:	7c63      	ldrb	r3, [r4, #17]
 8015688:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801568c:	7ca3      	ldrb	r3, [r4, #18]
 801568e:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8015692:	7ce3      	ldrb	r3, [r4, #19]
 8015694:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8015698:	2206      	movs	r2, #6
        break;
 801569a:	e7ca      	b.n	8015632 <SUBGRF_SetPacketParams+0x6e>
 801569c:	08017a28 	.word	0x08017a28
 80156a0:	200045ab 	.word	0x200045ab
 80156a4:	200045a9 	.word	0x200045a9

080156a8 <SUBGRF_SetBufferBaseAddress>:
{
 80156a8:	b500      	push	{lr}
 80156aa:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 80156ac:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 80156b0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80156b4:	2202      	movs	r2, #2
 80156b6:	a901      	add	r1, sp, #4
 80156b8:	208f      	movs	r0, #143	; 0x8f
 80156ba:	f7ff fbd7 	bl	8014e6c <SUBGRF_WriteCommand>
}
 80156be:	b003      	add	sp, #12
 80156c0:	f85d fb04 	ldr.w	pc, [sp], #4

080156c4 <SUBGRF_ReadCommand>:
{
 80156c4:	b510      	push	{r4, lr}
 80156c6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80156c8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80156cc:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80156ce:	460a      	mov	r2, r1
 80156d0:	4601      	mov	r1, r0
 80156d2:	4803      	ldr	r0, [pc, #12]	; (80156e0 <SUBGRF_ReadCommand+0x1c>)
 80156d4:	f7f4 fbe2 	bl	8009e9c <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156d8:	f384 8810 	msr	PRIMASK, r4
}
 80156dc:	bd10      	pop	{r4, pc}
 80156de:	bf00      	nop
 80156e0:	200002e8 	.word	0x200002e8

080156e4 <SUBGRF_GetRssiInst>:
{
 80156e4:	b500      	push	{lr}
 80156e6:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80156e8:	2201      	movs	r2, #1
 80156ea:	a901      	add	r1, sp, #4
 80156ec:	2015      	movs	r0, #21
 80156ee:	f7ff ffe9 	bl	80156c4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80156f2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80156f6:	4240      	negs	r0, r0
}
 80156f8:	1040      	asrs	r0, r0, #1
 80156fa:	b003      	add	sp, #12
 80156fc:	f85d fb04 	ldr.w	pc, [sp], #4

08015700 <SUBGRF_GetRxBufferStatus>:
{
 8015700:	b530      	push	{r4, r5, lr}
 8015702:	b083      	sub	sp, #12
 8015704:	4605      	mov	r5, r0
 8015706:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8015708:	2202      	movs	r2, #2
 801570a:	a901      	add	r1, sp, #4
 801570c:	2013      	movs	r0, #19
 801570e:	f7ff ffd9 	bl	80156c4 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8015712:	f7ff fadf 	bl	8014cd4 <SUBGRF_GetPacketType>
 8015716:	2801      	cmp	r0, #1
 8015718:	d007      	beq.n	801572a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 801571a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801571e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8015720:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8015724:	7023      	strb	r3, [r4, #0]
}
 8015726:	b003      	add	sp, #12
 8015728:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801572a:	4b05      	ldr	r3, [pc, #20]	; (8015740 <SUBGRF_GetRxBufferStatus+0x40>)
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	b2db      	uxtb	r3, r3
 8015730:	2b01      	cmp	r3, #1
 8015732:	d1f2      	bne.n	801571a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8015734:	f240 7002 	movw	r0, #1794	; 0x702
 8015738:	f7ff fae2 	bl	8014d00 <SUBGRF_ReadRegister>
 801573c:	7028      	strb	r0, [r5, #0]
 801573e:	e7ef      	b.n	8015720 <SUBGRF_GetRxBufferStatus+0x20>
 8015740:	200045a9 	.word	0x200045a9

08015744 <SUBGRF_GetPayload>:
{
 8015744:	b570      	push	{r4, r5, r6, lr}
 8015746:	b082      	sub	sp, #8
 8015748:	4606      	mov	r6, r0
 801574a:	460c      	mov	r4, r1
 801574c:	4615      	mov	r5, r2
    uint8_t offset = 0;
 801574e:	2300      	movs	r3, #0
 8015750:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8015754:	f10d 0107 	add.w	r1, sp, #7
 8015758:	4620      	mov	r0, r4
 801575a:	f7ff ffd1 	bl	8015700 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801575e:	7822      	ldrb	r2, [r4, #0]
 8015760:	42aa      	cmp	r2, r5
 8015762:	d902      	bls.n	801576a <SUBGRF_GetPayload+0x26>
        return 1;
 8015764:	2001      	movs	r0, #1
}
 8015766:	b002      	add	sp, #8
 8015768:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801576a:	4631      	mov	r1, r6
 801576c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015770:	f7ff fb6c 	bl	8014e4c <SUBGRF_ReadBuffer>
    return 0;
 8015774:	2000      	movs	r0, #0
 8015776:	e7f6      	b.n	8015766 <SUBGRF_GetPayload+0x22>

08015778 <SUBGRF_GetPacketStatus>:
{
 8015778:	b510      	push	{r4, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801577e:	2203      	movs	r2, #3
 8015780:	a901      	add	r1, sp, #4
 8015782:	2014      	movs	r0, #20
 8015784:	f7ff ff9e 	bl	80156c4 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8015788:	f7ff faa4 	bl	8014cd4 <SUBGRF_GetPacketType>
 801578c:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 801578e:	b148      	cbz	r0, 80157a4 <SUBGRF_GetPacketStatus+0x2c>
 8015790:	2801      	cmp	r0, #1
 8015792:	d018      	beq.n	80157c6 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8015794:	2214      	movs	r2, #20
 8015796:	2100      	movs	r1, #0
 8015798:	4620      	mov	r0, r4
 801579a:	f000 fb20 	bl	8015dde <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801579e:	230f      	movs	r3, #15
 80157a0:	7023      	strb	r3, [r4, #0]
}
 80157a2:	e00e      	b.n	80157c2 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80157a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80157a8:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80157aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80157ae:	425b      	negs	r3, r3
 80157b0:	105b      	asrs	r3, r3, #1
 80157b2:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80157b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80157b8:	425b      	negs	r3, r3
 80157ba:	105b      	asrs	r3, r3, #1
 80157bc:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80157be:	2300      	movs	r3, #0
 80157c0:	60a3      	str	r3, [r4, #8]
}
 80157c2:	b002      	add	sp, #8
 80157c4:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80157c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80157ca:	425b      	negs	r3, r3
 80157cc:	105b      	asrs	r3, r3, #1
 80157ce:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80157d0:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80157d4:	3302      	adds	r3, #2
 80157d6:	109b      	asrs	r3, r3, #2
 80157d8:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80157da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80157de:	425b      	negs	r3, r3
 80157e0:	105b      	asrs	r3, r3, #1
 80157e2:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80157e4:	4b01      	ldr	r3, [pc, #4]	; (80157ec <SUBGRF_GetPacketStatus+0x74>)
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	6123      	str	r3, [r4, #16]
            break;
 80157ea:	e7ea      	b.n	80157c2 <SUBGRF_GetPacketStatus+0x4a>
 80157ec:	200045a4 	.word	0x200045a4

080157f0 <SUBGRF_SetSwitch>:
{
 80157f0:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80157f2:	2901      	cmp	r1, #1
 80157f4:	d003      	beq.n	80157fe <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80157f6:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80157f8:	f7ed fec4 	bl	8003584 <RBI_ConfigRFSwitch>
}
 80157fc:	bd10      	pop	{r4, pc}
 80157fe:	4604      	mov	r4, r0
 8015800:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8015802:	2c01      	cmp	r4, #1
 8015804:	d003      	beq.n	801580e <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8015806:	2c02      	cmp	r4, #2
 8015808:	d1f6      	bne.n	80157f8 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 801580a:	2003      	movs	r0, #3
 801580c:	e7f4      	b.n	80157f8 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801580e:	2004      	movs	r0, #4
 8015810:	f7ff fa86 	bl	8014d20 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8015814:	2002      	movs	r0, #2
 8015816:	e7f6      	b.n	8015806 <SUBGRF_SetSwitch+0x16>

08015818 <SUBGRF_SetRfTxPower>:
{
 8015818:	b538      	push	{r3, r4, r5, lr}
 801581a:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 801581c:	f7ed feb6 	bl	800358c <RBI_GetTxConfig>
    switch (TxConfig)
 8015820:	b148      	cbz	r0, 8015836 <SUBGRF_SetRfTxPower+0x1e>
 8015822:	2802      	cmp	r0, #2
 8015824:	d10d      	bne.n	8015842 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8015826:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8015828:	2202      	movs	r2, #2
 801582a:	4621      	mov	r1, r4
 801582c:	4628      	mov	r0, r5
 801582e:	f7ff fdb3 	bl	8015398 <SUBGRF_SetTxParams>
}
 8015832:	4628      	mov	r0, r5
 8015834:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8015836:	2c0f      	cmp	r4, #15
 8015838:	dc01      	bgt.n	801583e <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 801583a:	2501      	movs	r5, #1
 801583c:	e7f4      	b.n	8015828 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 801583e:	2502      	movs	r5, #2
 8015840:	e7f2      	b.n	8015828 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8015842:	2501      	movs	r5, #1
 8015844:	e7f0      	b.n	8015828 <SUBGRF_SetRfTxPower+0x10>

08015846 <SUBGRF_GetRadioWakeUpTime>:
}
 8015846:	2001      	movs	r0, #1
 8015848:	4770      	bx	lr
	...

0801584c <HAL_SUBGHZ_TxCpltCallback>:
{
 801584c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801584e:	4b02      	ldr	r3, [pc, #8]	; (8015858 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	2001      	movs	r0, #1
 8015854:	4798      	blx	r3
}
 8015856:	bd08      	pop	{r3, pc}
 8015858:	200045ac 	.word	0x200045ac

0801585c <HAL_SUBGHZ_RxCpltCallback>:
{
 801585c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801585e:	4b02      	ldr	r3, [pc, #8]	; (8015868 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	2002      	movs	r0, #2
 8015864:	4798      	blx	r3
}
 8015866:	bd08      	pop	{r3, pc}
 8015868:	200045ac 	.word	0x200045ac

0801586c <HAL_SUBGHZ_CRCErrorCallback>:
{
 801586c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801586e:	4b02      	ldr	r3, [pc, #8]	; (8015878 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	2040      	movs	r0, #64	; 0x40
 8015874:	4798      	blx	r3
}
 8015876:	bd08      	pop	{r3, pc}
 8015878:	200045ac 	.word	0x200045ac

0801587c <HAL_SUBGHZ_CADStatusCallback>:
{
 801587c:	b508      	push	{r3, lr}
    switch (cadstatus)
 801587e:	b111      	cbz	r1, 8015886 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8015880:	2901      	cmp	r1, #1
 8015882:	d005      	beq.n	8015890 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8015884:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8015886:	4b05      	ldr	r3, [pc, #20]	; (801589c <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	2080      	movs	r0, #128	; 0x80
 801588c:	4798      	blx	r3
            break;
 801588e:	e7f9      	b.n	8015884 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8015890:	4b02      	ldr	r3, [pc, #8]	; (801589c <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015898:	4798      	blx	r3
}
 801589a:	e7f3      	b.n	8015884 <HAL_SUBGHZ_CADStatusCallback+0x8>
 801589c:	200045ac 	.word	0x200045ac

080158a0 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80158a0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80158a2:	4b03      	ldr	r3, [pc, #12]	; (80158b0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80158aa:	4798      	blx	r3
}
 80158ac:	bd08      	pop	{r3, pc}
 80158ae:	bf00      	nop
 80158b0:	200045ac 	.word	0x200045ac

080158b4 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80158b4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80158b6:	4b02      	ldr	r3, [pc, #8]	; (80158c0 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	2020      	movs	r0, #32
 80158bc:	4798      	blx	r3
}
 80158be:	bd08      	pop	{r3, pc}
 80158c0:	200045ac 	.word	0x200045ac

080158c4 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80158c4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80158c6:	4b02      	ldr	r3, [pc, #8]	; (80158d0 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	2004      	movs	r0, #4
 80158cc:	4798      	blx	r3
}
 80158ce:	bd08      	pop	{r3, pc}
 80158d0:	200045ac 	.word	0x200045ac

080158d4 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80158d4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80158d6:	4b02      	ldr	r3, [pc, #8]	; (80158e0 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	2008      	movs	r0, #8
 80158dc:	4798      	blx	r3
}
 80158de:	bd08      	pop	{r3, pc}
 80158e0:	200045ac 	.word	0x200045ac

080158e4 <HAL_SUBGHZ_HeaderValidCallback>:
{
 80158e4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80158e6:	4b02      	ldr	r3, [pc, #8]	; (80158f0 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	2010      	movs	r0, #16
 80158ec:	4798      	blx	r3
}
 80158ee:	bd08      	pop	{r3, pc}
 80158f0:	200045ac 	.word	0x200045ac

080158f4 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 80158f4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80158f6:	4b03      	ldr	r3, [pc, #12]	; (8015904 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80158fe:	4798      	blx	r3
}
 8015900:	bd08      	pop	{r3, pc}
 8015902:	bf00      	nop
 8015904:	200045ac 	.word	0x200045ac

08015908 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8015908:	4601      	mov	r1, r0
 801590a:	b188      	cbz	r0, 8015930 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801590c:	2300      	movs	r3, #0
 801590e:	2b15      	cmp	r3, #21
 8015910:	d80d      	bhi.n	801592e <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8015912:	4618      	mov	r0, r3
 8015914:	4a07      	ldr	r2, [pc, #28]	; (8015934 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8015916:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801591a:	428a      	cmp	r2, r1
 801591c:	d802      	bhi.n	8015924 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801591e:	3301      	adds	r3, #1
 8015920:	b2db      	uxtb	r3, r3
 8015922:	e7f4      	b.n	801590e <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8015924:	4b03      	ldr	r3, [pc, #12]	; (8015934 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8015926:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801592a:	7918      	ldrb	r0, [r3, #4]
 801592c:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 801592e:	e7fe      	b.n	801592e <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8015930:	201f      	movs	r0, #31
}
 8015932:	4770      	bx	lr
 8015934:	080188e8 	.word	0x080188e8

08015938 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8015938:	b570      	push	{r4, r5, r6, lr}
 801593a:	b082      	sub	sp, #8
 801593c:	4605      	mov	r5, r0
 801593e:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8015940:	4b1d      	ldr	r3, [pc, #116]	; (80159b8 <SUBGRF_GetCFO+0x80>)
 8015942:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8015944:	f640 0007 	movw	r0, #2055	; 0x807
 8015948:	f7ff f9da 	bl	8014d00 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801594c:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8015950:	3308      	adds	r3, #8
 8015952:	446b      	add	r3, sp
 8015954:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8015958:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801595c:	3301      	adds	r3, #1
 801595e:	fa02 f303 	lsl.w	r3, r2, r3
 8015962:	4a16      	ldr	r2, [pc, #88]	; (80159bc <SUBGRF_GetCFO+0x84>)
 8015964:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8015968:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801596c:	2807      	cmp	r0, #7
 801596e:	d921      	bls.n	80159b4 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8015970:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8015972:	fb03 f000 	mul.w	r0, r3, r0
 8015976:	2803      	cmp	r0, #3
 8015978:	d800      	bhi.n	801597c <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 801597a:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801597c:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8015980:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8015984:	f7ff f9bc 	bl	8014d00 <SUBGRF_ReadRegister>
 8015988:	0206      	lsls	r6, r0, #8
 801598a:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801598e:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8015992:	f7ff f9b5 	bl	8014d00 <SUBGRF_ReadRegister>
 8015996:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8015998:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801599c:	d003      	beq.n	80159a6 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 801599e:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80159a2:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80159a6:	096b      	lsrs	r3, r5, #5
 80159a8:	fb03 f000 	mul.w	r0, r3, r0
 80159ac:	11c0      	asrs	r0, r0, #7
 80159ae:	6020      	str	r0, [r4, #0]
}
 80159b0:	b002      	add	sp, #8
 80159b2:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80159b4:	2302      	movs	r3, #2
 80159b6:	e7dc      	b.n	8015972 <SUBGRF_GetCFO+0x3a>
 80159b8:	0c0a0804 	.word	0x0c0a0804
 80159bc:	01e84800 	.word	0x01e84800

080159c0 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80159c0:	f04f 30ff 	mov.w	r0, #4294967295
 80159c4:	4770      	bx	lr

080159c6 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80159c6:	f04f 30ff 	mov.w	r0, #4294967295
 80159ca:	4770      	bx	lr

080159cc <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80159cc:	4770      	bx	lr

080159ce <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80159ce:	2000      	movs	r0, #0
 80159d0:	4770      	bx	lr

080159d2 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80159d2:	2000      	movs	r0, #0
 80159d4:	4770      	bx	lr

080159d6 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 80159d6:	4770      	bx	lr

080159d8 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 80159d8:	f04f 30ff 	mov.w	r0, #4294967295
 80159dc:	4770      	bx	lr

080159de <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80159de:	f04f 30ff 	mov.w	r0, #4294967295
 80159e2:	4770      	bx	lr

080159e4 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80159e4:	4770      	bx	lr

080159e6 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80159e6:	4770      	bx	lr

080159e8 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80159e8:	4770      	bx	lr
	...

080159ec <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80159ec:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80159ee:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80159f2:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80159f4:	4b1e      	ldr	r3, [pc, #120]	; (8015a70 <TRACE_AllocateBufer+0x84>)
 80159f6:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 80159fa:	8a1a      	ldrh	r2, [r3, #16]
 80159fc:	4596      	cmp	lr, r2
 80159fe:	d011      	beq.n	8015a24 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8015a00:	4596      	cmp	lr, r2
 8015a02:	d921      	bls.n	8015a48 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8015a04:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8015a08:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8015a0a:	4283      	cmp	r3, r0
 8015a0c:	d81f      	bhi.n	8015a4e <TRACE_AllocateBufer+0x62>
 8015a0e:	4282      	cmp	r2, r0
 8015a10:	d91d      	bls.n	8015a4e <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8015a12:	4b17      	ldr	r3, [pc, #92]	; (8015a70 <TRACE_AllocateBufer+0x84>)
 8015a14:	2401      	movs	r4, #1
 8015a16:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8015a18:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8015a1c:	2400      	movs	r4, #0
 8015a1e:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8015a20:	4613      	mov	r3, r2
 8015a22:	e014      	b.n	8015a4e <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8015a24:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8015a28:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8015a2a:	4298      	cmp	r0, r3
 8015a2c:	d30f      	bcc.n	8015a4e <TRACE_AllocateBufer+0x62>
 8015a2e:	4282      	cmp	r2, r0
 8015a30:	d90d      	bls.n	8015a4e <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8015a32:	4b0f      	ldr	r3, [pc, #60]	; (8015a70 <TRACE_AllocateBufer+0x84>)
 8015a34:	2401      	movs	r4, #1
 8015a36:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8015a38:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8015a3c:	f04f 0e00 	mov.w	lr, #0
 8015a40:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8015a44:	4613      	mov	r3, r2
 8015a46:	e002      	b.n	8015a4e <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8015a48:	eba2 020e 	sub.w	r2, r2, lr
 8015a4c:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8015a4e:	4283      	cmp	r3, r0
 8015a50:	d90a      	bls.n	8015a68 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8015a52:	4a07      	ldr	r2, [pc, #28]	; (8015a70 <TRACE_AllocateBufer+0x84>)
 8015a54:	8a53      	ldrh	r3, [r2, #18]
 8015a56:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8015a58:	4403      	add	r3, r0
 8015a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015a5e:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8015a60:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015a62:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8015a66:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8015a68:	f04f 30ff 	mov.w	r0, #4294967295
 8015a6c:	e7f9      	b.n	8015a62 <TRACE_AllocateBufer+0x76>
 8015a6e:	bf00      	nop
 8015a70:	200049b0 	.word	0x200049b0

08015a74 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015a74:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015a78:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8015a7a:	4a03      	ldr	r2, [pc, #12]	; (8015a88 <TRACE_Lock+0x14>)
 8015a7c:	8ad3      	ldrh	r3, [r2, #22]
 8015a7e:	3301      	adds	r3, #1
 8015a80:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015a82:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8015a86:	4770      	bx	lr
 8015a88:	200049b0 	.word	0x200049b0

08015a8c <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015a8c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015a90:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8015a92:	4a03      	ldr	r2, [pc, #12]	; (8015aa0 <TRACE_UnLock+0x14>)
 8015a94:	8ad3      	ldrh	r3, [r2, #22]
 8015a96:	3b01      	subs	r3, #1
 8015a98:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015a9a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8015a9e:	4770      	bx	lr
 8015aa0:	200049b0 	.word	0x200049b0

08015aa4 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8015aa4:	4b02      	ldr	r3, [pc, #8]	; (8015ab0 <TRACE_IsLocked+0xc>)
 8015aa6:	8ad8      	ldrh	r0, [r3, #22]
}
 8015aa8:	3800      	subs	r0, #0
 8015aaa:	bf18      	it	ne
 8015aac:	2001      	movne	r0, #1
 8015aae:	4770      	bx	lr
 8015ab0:	200049b0 	.word	0x200049b0

08015ab4 <UTIL_ADV_TRACE_Init>:
{
 8015ab4:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8015ab6:	2218      	movs	r2, #24
 8015ab8:	2100      	movs	r1, #0
 8015aba:	4807      	ldr	r0, [pc, #28]	; (8015ad8 <UTIL_ADV_TRACE_Init+0x24>)
 8015abc:	f000 f98f 	bl	8015dde <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8015ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015ac4:	2100      	movs	r1, #0
 8015ac6:	4805      	ldr	r0, [pc, #20]	; (8015adc <UTIL_ADV_TRACE_Init+0x28>)
 8015ac8:	f000 f989 	bl	8015dde <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8015acc:	4b04      	ldr	r3, [pc, #16]	; (8015ae0 <UTIL_ADV_TRACE_Init+0x2c>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	4804      	ldr	r0, [pc, #16]	; (8015ae4 <UTIL_ADV_TRACE_Init+0x30>)
 8015ad2:	4798      	blx	r3
}
 8015ad4:	bd08      	pop	{r3, pc}
 8015ad6:	bf00      	nop
 8015ad8:	200049b0 	.word	0x200049b0
 8015adc:	200045b0 	.word	0x200045b0
 8015ae0:	08017a98 	.word	0x08017a98
 8015ae4:	08015c65 	.word	0x08015c65

08015ae8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8015ae8:	4b01      	ldr	r3, [pc, #4]	; (8015af0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8015aea:	6058      	str	r0, [r3, #4]
}
 8015aec:	4770      	bx	lr
 8015aee:	bf00      	nop
 8015af0:	200049b0 	.word	0x200049b0

08015af4 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8015af4:	4b01      	ldr	r3, [pc, #4]	; (8015afc <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8015af6:	7218      	strb	r0, [r3, #8]
}
 8015af8:	4770      	bx	lr
 8015afa:	bf00      	nop
 8015afc:	200049b0 	.word	0x200049b0

08015b00 <TRACE_Send>:
{
 8015b00:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015b02:	f3ef 8310 	mrs	r3, PRIMASK
 8015b06:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8015b08:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8015b0a:	f7ff ffcb 	bl	8015aa4 <TRACE_IsLocked>
 8015b0e:	b118      	cbz	r0, 8015b18 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015b10:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8015b14:	2000      	movs	r0, #0
}
 8015b16:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8015b18:	f7ff ffac 	bl	8015a74 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8015b1c:	4b1c      	ldr	r3, [pc, #112]	; (8015b90 <TRACE_Send+0x90>)
 8015b1e:	8a1a      	ldrh	r2, [r3, #16]
 8015b20:	8a5b      	ldrh	r3, [r3, #18]
 8015b22:	429a      	cmp	r2, r3
 8015b24:	d02e      	beq.n	8015b84 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8015b26:	491a      	ldr	r1, [pc, #104]	; (8015b90 <TRACE_Send+0x90>)
 8015b28:	7889      	ldrb	r1, [r1, #2]
 8015b2a:	2901      	cmp	r1, #1
 8015b2c:	d017      	beq.n	8015b5e <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8015b2e:	4a18      	ldr	r2, [pc, #96]	; (8015b90 <TRACE_Send+0x90>)
 8015b30:	7892      	ldrb	r2, [r2, #2]
 8015b32:	b932      	cbnz	r2, 8015b42 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8015b34:	4a16      	ldr	r2, [pc, #88]	; (8015b90 <TRACE_Send+0x90>)
 8015b36:	8a12      	ldrh	r2, [r2, #16]
 8015b38:	4293      	cmp	r3, r2
 8015b3a:	d91e      	bls.n	8015b7a <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8015b3c:	1a9b      	subs	r3, r3, r2
 8015b3e:	4a14      	ldr	r2, [pc, #80]	; (8015b90 <TRACE_Send+0x90>)
 8015b40:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8015b42:	4e13      	ldr	r6, [pc, #76]	; (8015b90 <TRACE_Send+0x90>)
 8015b44:	8a33      	ldrh	r3, [r6, #16]
 8015b46:	4d13      	ldr	r5, [pc, #76]	; (8015b94 <TRACE_Send+0x94>)
 8015b48:	441d      	add	r5, r3
 8015b4a:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8015b4e:	f7ec fa4f 	bl	8001ff0 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8015b52:	4b11      	ldr	r3, [pc, #68]	; (8015b98 <TRACE_Send+0x98>)
 8015b54:	68db      	ldr	r3, [r3, #12]
 8015b56:	8ab1      	ldrh	r1, [r6, #20]
 8015b58:	4628      	mov	r0, r5
 8015b5a:	4798      	blx	r3
 8015b5c:	e7db      	b.n	8015b16 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8015b5e:	480c      	ldr	r0, [pc, #48]	; (8015b90 <TRACE_Send+0x90>)
 8015b60:	8801      	ldrh	r1, [r0, #0]
 8015b62:	1a8a      	subs	r2, r1, r2
 8015b64:	b292      	uxth	r2, r2
 8015b66:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8015b68:	2102      	movs	r1, #2
 8015b6a:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8015b6c:	2100      	movs	r1, #0
 8015b6e:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8015b70:	2a00      	cmp	r2, #0
 8015b72:	d1dc      	bne.n	8015b2e <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8015b74:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8015b76:	8201      	strh	r1, [r0, #16]
 8015b78:	e7d9      	b.n	8015b2e <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8015b7a:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8015b7e:	4b04      	ldr	r3, [pc, #16]	; (8015b90 <TRACE_Send+0x90>)
 8015b80:	829a      	strh	r2, [r3, #20]
 8015b82:	e7de      	b.n	8015b42 <TRACE_Send+0x42>
      TRACE_UnLock();
 8015b84:	f7ff ff82 	bl	8015a8c <TRACE_UnLock>
 8015b88:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8015b8c:	2000      	movs	r0, #0
}
 8015b8e:	e7c2      	b.n	8015b16 <TRACE_Send+0x16>
 8015b90:	200049b0 	.word	0x200049b0
 8015b94:	200045b0 	.word	0x200045b0
 8015b98:	08017a98 	.word	0x08017a98

08015b9c <UTIL_ADV_TRACE_COND_FSend>:
{
 8015b9c:	b408      	push	{r3}
 8015b9e:	b530      	push	{r4, r5, lr}
 8015ba0:	b086      	sub	sp, #24
 8015ba2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8015baa:	4b2b      	ldr	r3, [pc, #172]	; (8015c58 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8015bac:	7a1b      	ldrb	r3, [r3, #8]
 8015bae:	4283      	cmp	r3, r0
 8015bb0:	d34c      	bcc.n	8015c4c <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8015bb2:	4b29      	ldr	r3, [pc, #164]	; (8015c58 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8015bb4:	68db      	ldr	r3, [r3, #12]
 8015bb6:	4399      	bics	r1, r3
 8015bb8:	d14b      	bne.n	8015c52 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8015bba:	4b27      	ldr	r3, [pc, #156]	; (8015c58 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	b123      	cbz	r3, 8015bca <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8015bc0:	b11a      	cbz	r2, 8015bca <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8015bc2:	f10d 0102 	add.w	r1, sp, #2
 8015bc6:	a801      	add	r0, sp, #4
 8015bc8:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8015bca:	ab0a      	add	r3, sp, #40	; 0x28
 8015bcc:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8015bce:	4622      	mov	r2, r4
 8015bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015bd4:	4821      	ldr	r0, [pc, #132]	; (8015c5c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8015bd6:	f000 fcd1 	bl	801657c <tiny_vsnprintf_like>
 8015bda:	b285      	uxth	r5, r0
  TRACE_Lock();
 8015bdc:	f7ff ff4a 	bl	8015a74 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8015be0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015be4:	18e8      	adds	r0, r5, r3
 8015be6:	4669      	mov	r1, sp
 8015be8:	b280      	uxth	r0, r0
 8015bea:	f7ff feff 	bl	80159ec <TRACE_AllocateBufer>
 8015bee:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015bf2:	d026      	beq.n	8015c42 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	e00d      	b.n	8015c14 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8015bf8:	f8bd 2000 	ldrh.w	r2, [sp]
 8015bfc:	f103 0118 	add.w	r1, r3, #24
 8015c00:	4469      	add	r1, sp
 8015c02:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8015c06:	4916      	ldr	r1, [pc, #88]	; (8015c60 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8015c08:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8015c0a:	3201      	adds	r2, #1
 8015c0c:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8015c10:	3301      	adds	r3, #1
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	d8ed      	bhi.n	8015bf8 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8015c1c:	f8bd 0000 	ldrh.w	r0, [sp]
 8015c20:	9b05      	ldr	r3, [sp, #20]
 8015c22:	4622      	mov	r2, r4
 8015c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015c28:	4c0d      	ldr	r4, [pc, #52]	; (8015c60 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8015c2a:	4420      	add	r0, r4
 8015c2c:	f000 fca6 	bl	801657c <tiny_vsnprintf_like>
    TRACE_UnLock();
 8015c30:	f7ff ff2c 	bl	8015a8c <TRACE_UnLock>
    return TRACE_Send();
 8015c34:	f7ff ff64 	bl	8015b00 <TRACE_Send>
}
 8015c38:	b006      	add	sp, #24
 8015c3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c3e:	b001      	add	sp, #4
 8015c40:	4770      	bx	lr
  TRACE_UnLock();
 8015c42:	f7ff ff23 	bl	8015a8c <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8015c46:	f06f 0002 	mvn.w	r0, #2
 8015c4a:	e7f5      	b.n	8015c38 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8015c4c:	f06f 0004 	mvn.w	r0, #4
 8015c50:	e7f2      	b.n	8015c38 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8015c52:	f06f 0005 	mvn.w	r0, #5
 8015c56:	e7ef      	b.n	8015c38 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8015c58:	200049b0 	.word	0x200049b0
 8015c5c:	200049c8 	.word	0x200049c8
 8015c60:	200045b0 	.word	0x200045b0

08015c64 <TRACE_TxCpltCallback>:
{
 8015c64:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c66:	f3ef 8310 	mrs	r3, PRIMASK
 8015c6a:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8015c6c:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8015c6e:	4b26      	ldr	r3, [pc, #152]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015c70:	789b      	ldrb	r3, [r3, #2]
 8015c72:	2b02      	cmp	r3, #2
 8015c74:	d016      	beq.n	8015ca4 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8015c76:	4a24      	ldr	r2, [pc, #144]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015c78:	8a13      	ldrh	r3, [r2, #16]
 8015c7a:	8a90      	ldrh	r0, [r2, #20]
 8015c7c:	4403      	add	r3, r0
 8015c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015c82:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8015c84:	4b20      	ldr	r3, [pc, #128]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015c86:	8a1a      	ldrh	r2, [r3, #16]
 8015c88:	8a5b      	ldrh	r3, [r3, #18]
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d003      	beq.n	8015c96 <TRACE_TxCpltCallback+0x32>
 8015c8e:	481e      	ldr	r0, [pc, #120]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015c90:	8ac0      	ldrh	r0, [r0, #22]
 8015c92:	2801      	cmp	r0, #1
 8015c94:	d00b      	beq.n	8015cae <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c96:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8015c9a:	f7ec f9af 	bl	8001ffc <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8015c9e:	f7ff fef5 	bl	8015a8c <TRACE_UnLock>
}
 8015ca2:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8015ca4:	4b18      	ldr	r3, [pc, #96]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8015caa:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8015cac:	e7ea      	b.n	8015c84 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8015cae:	4816      	ldr	r0, [pc, #88]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015cb0:	7880      	ldrb	r0, [r0, #2]
 8015cb2:	2801      	cmp	r0, #1
 8015cb4:	d014      	beq.n	8015ce0 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8015cb6:	4a14      	ldr	r2, [pc, #80]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015cb8:	7892      	ldrb	r2, [r2, #2]
 8015cba:	b932      	cbnz	r2, 8015cca <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8015cbc:	4a12      	ldr	r2, [pc, #72]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015cbe:	8a12      	ldrh	r2, [r2, #16]
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	d91b      	bls.n	8015cfc <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8015cc4:	1a9b      	subs	r3, r3, r2
 8015cc6:	4a10      	ldr	r2, [pc, #64]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015cc8:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8015cca:	4b0f      	ldr	r3, [pc, #60]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015ccc:	8a1a      	ldrh	r2, [r3, #16]
 8015cce:	480f      	ldr	r0, [pc, #60]	; (8015d0c <TRACE_TxCpltCallback+0xa8>)
 8015cd0:	4410      	add	r0, r2
 8015cd2:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8015cd6:	4a0e      	ldr	r2, [pc, #56]	; (8015d10 <TRACE_TxCpltCallback+0xac>)
 8015cd8:	68d2      	ldr	r2, [r2, #12]
 8015cda:	8a99      	ldrh	r1, [r3, #20]
 8015cdc:	4790      	blx	r2
 8015cde:	e7e0      	b.n	8015ca2 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8015ce0:	4c09      	ldr	r4, [pc, #36]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015ce2:	8820      	ldrh	r0, [r4, #0]
 8015ce4:	1a82      	subs	r2, r0, r2
 8015ce6:	b292      	uxth	r2, r2
 8015ce8:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8015cea:	2002      	movs	r0, #2
 8015cec:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8015cee:	2000      	movs	r0, #0
 8015cf0:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8015cf2:	2a00      	cmp	r2, #0
 8015cf4:	d1df      	bne.n	8015cb6 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8015cf6:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8015cf8:	8220      	strh	r0, [r4, #16]
 8015cfa:	e7dc      	b.n	8015cb6 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8015cfc:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8015d00:	4b01      	ldr	r3, [pc, #4]	; (8015d08 <TRACE_TxCpltCallback+0xa4>)
 8015d02:	829a      	strh	r2, [r3, #20]
 8015d04:	e7e1      	b.n	8015cca <TRACE_TxCpltCallback+0x66>
 8015d06:	bf00      	nop
 8015d08:	200049b0 	.word	0x200049b0
 8015d0c:	200045b0 	.word	0x200045b0
 8015d10:	08017a98 	.word	0x08017a98

08015d14 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8015d14:	2300      	movs	r3, #0
 8015d16:	4a02      	ldr	r2, [pc, #8]	; (8015d20 <UTIL_LPM_Init+0xc>)
 8015d18:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8015d1a:	4a02      	ldr	r2, [pc, #8]	; (8015d24 <UTIL_LPM_Init+0x10>)
 8015d1c:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015d1e:	4770      	bx	lr
 8015d20:	20004bcc 	.word	0x20004bcc
 8015d24:	20004bc8 	.word	0x20004bc8

08015d28 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d28:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015d2c:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8015d2e:	b141      	cbz	r1, 8015d42 <UTIL_LPM_SetStopMode+0x1a>
 8015d30:	2901      	cmp	r1, #1
 8015d32:	d103      	bne.n	8015d3c <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8015d34:	4906      	ldr	r1, [pc, #24]	; (8015d50 <UTIL_LPM_SetStopMode+0x28>)
 8015d36:	680a      	ldr	r2, [r1, #0]
 8015d38:	4302      	orrs	r2, r0
 8015d3a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d3c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015d40:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8015d42:	4903      	ldr	r1, [pc, #12]	; (8015d50 <UTIL_LPM_SetStopMode+0x28>)
 8015d44:	680a      	ldr	r2, [r1, #0]
 8015d46:	ea22 0200 	bic.w	r2, r2, r0
 8015d4a:	600a      	str	r2, [r1, #0]
      break;
 8015d4c:	e7f6      	b.n	8015d3c <UTIL_LPM_SetStopMode+0x14>
 8015d4e:	bf00      	nop
 8015d50:	20004bcc 	.word	0x20004bcc

08015d54 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d54:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015d58:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8015d5a:	b141      	cbz	r1, 8015d6e <UTIL_LPM_SetOffMode+0x1a>
 8015d5c:	2901      	cmp	r1, #1
 8015d5e:	d103      	bne.n	8015d68 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8015d60:	4906      	ldr	r1, [pc, #24]	; (8015d7c <UTIL_LPM_SetOffMode+0x28>)
 8015d62:	680a      	ldr	r2, [r1, #0]
 8015d64:	4302      	orrs	r2, r0
 8015d66:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d68:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015d6c:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8015d6e:	4903      	ldr	r1, [pc, #12]	; (8015d7c <UTIL_LPM_SetOffMode+0x28>)
 8015d70:	680a      	ldr	r2, [r1, #0]
 8015d72:	ea22 0200 	bic.w	r2, r2, r0
 8015d76:	600a      	str	r2, [r1, #0]
      break;
 8015d78:	e7f6      	b.n	8015d68 <UTIL_LPM_SetOffMode+0x14>
 8015d7a:	bf00      	nop
 8015d7c:	20004bc8 	.word	0x20004bc8

08015d80 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8015d80:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d82:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015d86:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8015d88:	4b0c      	ldr	r3, [pc, #48]	; (8015dbc <UTIL_LPM_EnterLowPower+0x3c>)
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	b13b      	cbz	r3, 8015d9e <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8015d8e:	4d0c      	ldr	r5, [pc, #48]	; (8015dc0 <UTIL_LPM_EnterLowPower+0x40>)
 8015d90:	682b      	ldr	r3, [r5, #0]
 8015d92:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8015d94:	686b      	ldr	r3, [r5, #4]
 8015d96:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d98:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8015d9c:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8015d9e:	4b09      	ldr	r3, [pc, #36]	; (8015dc4 <UTIL_LPM_EnterLowPower+0x44>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	b12b      	cbz	r3, 8015db0 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8015da4:	4d06      	ldr	r5, [pc, #24]	; (8015dc0 <UTIL_LPM_EnterLowPower+0x40>)
 8015da6:	68ab      	ldr	r3, [r5, #8]
 8015da8:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8015daa:	68eb      	ldr	r3, [r5, #12]
 8015dac:	4798      	blx	r3
 8015dae:	e7f3      	b.n	8015d98 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8015db0:	4d03      	ldr	r5, [pc, #12]	; (8015dc0 <UTIL_LPM_EnterLowPower+0x40>)
 8015db2:	692b      	ldr	r3, [r5, #16]
 8015db4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8015db6:	696b      	ldr	r3, [r5, #20]
 8015db8:	4798      	blx	r3
 8015dba:	e7ed      	b.n	8015d98 <UTIL_LPM_EnterLowPower+0x18>
 8015dbc:	20004bcc 	.word	0x20004bcc
 8015dc0:	08017a34 	.word	0x08017a34
 8015dc4:	20004bc8 	.word	0x20004bc8

08015dc8 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8015dc8:	e004      	b.n	8015dd4 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8015dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015dce:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8015dd2:	461a      	mov	r2, r3
 8015dd4:	1e53      	subs	r3, r2, #1
 8015dd6:	b29b      	uxth	r3, r3
 8015dd8:	2a00      	cmp	r2, #0
 8015dda:	d1f6      	bne.n	8015dca <UTIL_MEM_cpy_8+0x2>
    }
}
 8015ddc:	4770      	bx	lr

08015dde <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8015dde:	e002      	b.n	8015de6 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8015de0:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8015de4:	461a      	mov	r2, r3
 8015de6:	1e53      	subs	r3, r2, #1
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	2a00      	cmp	r2, #0
 8015dec:	d1f8      	bne.n	8015de0 <UTIL_MEM_set_8+0x2>
  }
}
 8015dee:	4770      	bx	lr

08015df0 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015df0:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015df4:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8015df6:	4a06      	ldr	r2, [pc, #24]	; (8015e10 <UTIL_SEQ_SetTask+0x20>)
 8015df8:	6813      	ldr	r3, [r2, #0]
 8015dfa:	4303      	orrs	r3, r0
 8015dfc:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8015dfe:	4a05      	ldr	r2, [pc, #20]	; (8015e14 <UTIL_SEQ_SetTask+0x24>)
 8015e00:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8015e04:	4303      	orrs	r3, r0
 8015e06:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e0a:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8015e0e:	4770      	bx	lr
 8015e10:	20004bf8 	.word	0x20004bf8
 8015e14:	20004bf0 	.word	0x20004bf0

08015e18 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8015e18:	4770      	bx	lr

08015e1a <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8015e1a:	4770      	bx	lr

08015e1c <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8015e1c:	0c03      	lsrs	r3, r0, #16
 8015e1e:	041b      	lsls	r3, r3, #16
 8015e20:	b9b3      	cbnz	r3, 8015e50 <SEQ_BitPosition+0x34>
 8015e22:	0400      	lsls	r0, r0, #16
 8015e24:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8015e26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015e2a:	d102      	bne.n	8015e32 <SEQ_BitPosition+0x16>
 8015e2c:	3308      	adds	r3, #8
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8015e32:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015e36:	d102      	bne.n	8015e3e <SEQ_BitPosition+0x22>
 8015e38:	3304      	adds	r3, #4
 8015e3a:	b2db      	uxtb	r3, r3
 8015e3c:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8015e3e:	0f00      	lsrs	r0, r0, #28
 8015e40:	4a04      	ldr	r2, [pc, #16]	; (8015e54 <SEQ_BitPosition+0x38>)
 8015e42:	5c10      	ldrb	r0, [r2, r0]
 8015e44:	4418      	add	r0, r3
 8015e46:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8015e48:	f1c0 001f 	rsb	r0, r0, #31
}
 8015e4c:	b2c0      	uxtb	r0, r0
 8015e4e:	4770      	bx	lr
uint8_t n = 0U;
 8015e50:	2300      	movs	r3, #0
 8015e52:	e7e8      	b.n	8015e26 <SEQ_BitPosition+0xa>
 8015e54:	08018998 	.word	0x08018998

08015e58 <UTIL_SEQ_Run>:
{
 8015e58:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8015e5a:	4b42      	ldr	r3, [pc, #264]	; (8015f64 <UTIL_SEQ_Run+0x10c>)
 8015e5c:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8015e5e:	4020      	ands	r0, r4
 8015e60:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8015e62:	4b41      	ldr	r3, [pc, #260]	; (8015f68 <UTIL_SEQ_Run+0x110>)
 8015e64:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8015e66:	4b41      	ldr	r3, [pc, #260]	; (8015f6c <UTIL_SEQ_Run+0x114>)
 8015e68:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8015e6a:	4941      	ldr	r1, [pc, #260]	; (8015f70 <UTIL_SEQ_Run+0x118>)
 8015e6c:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 8015e6e:	4941      	ldr	r1, [pc, #260]	; (8015f74 <UTIL_SEQ_Run+0x11c>)
 8015e70:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8015e72:	e02f      	b.n	8015ed4 <UTIL_SEQ_Run+0x7c>
      counter++;
 8015e74:	3301      	adds	r3, #1
 8015e76:	e034      	b.n	8015ee2 <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8015e78:	4d3f      	ldr	r5, [pc, #252]	; (8015f78 <UTIL_SEQ_Run+0x120>)
 8015e7a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8015e7e:	6868      	ldr	r0, [r5, #4]
 8015e80:	4010      	ands	r0, r2
 8015e82:	f7ff ffcb 	bl	8015e1c <SEQ_BitPosition>
 8015e86:	4e3d      	ldr	r6, [pc, #244]	; (8015f7c <UTIL_SEQ_Run+0x124>)
 8015e88:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8015e8a:	686a      	ldr	r2, [r5, #4]
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8015e92:	ea22 0200 	bic.w	r2, r2, r0
 8015e96:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e98:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015e9c:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8015e9e:	6832      	ldr	r2, [r6, #0]
 8015ea0:	fa03 f202 	lsl.w	r2, r3, r2
 8015ea4:	43d6      	mvns	r6, r2
 8015ea6:	4d30      	ldr	r5, [pc, #192]	; (8015f68 <UTIL_SEQ_Run+0x110>)
 8015ea8:	6828      	ldr	r0, [r5, #0]
 8015eaa:	ea20 0202 	bic.w	r2, r0, r2
 8015eae:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d12d      	bne.n	8015f10 <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015eb4:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8015eb8:	4b30      	ldr	r3, [pc, #192]	; (8015f7c <UTIL_SEQ_Run+0x124>)
 8015eba:	681a      	ldr	r2, [r3, #0]
 8015ebc:	4b30      	ldr	r3, [pc, #192]	; (8015f80 <UTIL_SEQ_Run+0x128>)
 8015ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ec2:	4798      	blx	r3
    local_taskset = TaskSet;
 8015ec4:	4b28      	ldr	r3, [pc, #160]	; (8015f68 <UTIL_SEQ_Run+0x110>)
 8015ec6:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 8015ec8:	4b28      	ldr	r3, [pc, #160]	; (8015f6c <UTIL_SEQ_Run+0x114>)
 8015eca:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8015ecc:	4928      	ldr	r1, [pc, #160]	; (8015f70 <UTIL_SEQ_Run+0x118>)
 8015ece:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 8015ed0:	4928      	ldr	r1, [pc, #160]	; (8015f74 <UTIL_SEQ_Run+0x11c>)
 8015ed2:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8015ed4:	4002      	ands	r2, r0
 8015ed6:	4d23      	ldr	r5, [pc, #140]	; (8015f64 <UTIL_SEQ_Run+0x10c>)
 8015ed8:	682d      	ldr	r5, [r5, #0]
 8015eda:	422a      	tst	r2, r5
 8015edc:	d020      	beq.n	8015f20 <UTIL_SEQ_Run+0xc8>
 8015ede:	400b      	ands	r3, r1
 8015ee0:	d11e      	bne.n	8015f20 <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8015ee2:	4a25      	ldr	r2, [pc, #148]	; (8015f78 <UTIL_SEQ_Run+0x120>)
 8015ee4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015ee8:	4002      	ands	r2, r0
 8015eea:	422a      	tst	r2, r5
 8015eec:	d0c2      	beq.n	8015e74 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8015eee:	4922      	ldr	r1, [pc, #136]	; (8015f78 <UTIL_SEQ_Run+0x120>)
 8015ef0:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8015ef4:	4002      	ands	r2, r0
 8015ef6:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8015ef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015efc:	6849      	ldr	r1, [r1, #4]
 8015efe:	4211      	tst	r1, r2
 8015f00:	d1ba      	bne.n	8015e78 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8015f02:	491d      	ldr	r1, [pc, #116]	; (8015f78 <UTIL_SEQ_Run+0x120>)
 8015f04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015f08:	f04f 30ff 	mov.w	r0, #4294967295
 8015f0c:	6048      	str	r0, [r1, #4]
 8015f0e:	e7b3      	b.n	8015e78 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8015f10:	3b01      	subs	r3, #1
 8015f12:	4819      	ldr	r0, [pc, #100]	; (8015f78 <UTIL_SEQ_Run+0x120>)
 8015f14:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8015f18:	4032      	ands	r2, r6
 8015f1a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015f1e:	e7c7      	b.n	8015eb0 <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8015f20:	4b16      	ldr	r3, [pc, #88]	; (8015f7c <UTIL_SEQ_Run+0x124>)
 8015f22:	f04f 32ff 	mov.w	r2, #4294967295
 8015f26:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8015f28:	f7ff ff76 	bl	8015e18 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f2c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015f30:	b672      	cpsid	i
  local_taskset = TaskSet;
 8015f32:	4b0d      	ldr	r3, [pc, #52]	; (8015f68 <UTIL_SEQ_Run+0x110>)
 8015f34:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8015f36:	4a0d      	ldr	r2, [pc, #52]	; (8015f6c <UTIL_SEQ_Run+0x114>)
 8015f38:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8015f3a:	4a0d      	ldr	r2, [pc, #52]	; (8015f70 <UTIL_SEQ_Run+0x118>)
 8015f3c:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8015f3e:	4013      	ands	r3, r2
 8015f40:	4a08      	ldr	r2, [pc, #32]	; (8015f64 <UTIL_SEQ_Run+0x10c>)
 8015f42:	6812      	ldr	r2, [r2, #0]
 8015f44:	4213      	tst	r3, r2
 8015f46:	d103      	bne.n	8015f50 <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8015f48:	4b0a      	ldr	r3, [pc, #40]	; (8015f74 <UTIL_SEQ_Run+0x11c>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	420b      	tst	r3, r1
 8015f4e:	d006      	beq.n	8015f5e <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f50:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8015f54:	f7ff ff61 	bl	8015e1a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8015f58:	4b02      	ldr	r3, [pc, #8]	; (8015f64 <UTIL_SEQ_Run+0x10c>)
 8015f5a:	601c      	str	r4, [r3, #0]
}
 8015f5c:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 8015f5e:	f7eb ffcd 	bl	8001efc <UTIL_SEQ_Idle>
 8015f62:	e7f5      	b.n	8015f50 <UTIL_SEQ_Run+0xf8>
 8015f64:	2000017c 	.word	0x2000017c
 8015f68:	20004bf8 	.word	0x20004bf8
 8015f6c:	20004bd4 	.word	0x20004bd4
 8015f70:	20000180 	.word	0x20000180
 8015f74:	20004bd8 	.word	0x20004bd8
 8015f78:	20004bf0 	.word	0x20004bf0
 8015f7c:	20004bd0 	.word	0x20004bd0
 8015f80:	20004bdc 	.word	0x20004bdc

08015f84 <UTIL_SEQ_RegTask>:
{
 8015f84:	b538      	push	{r3, r4, r5, lr}
 8015f86:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f88:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015f8c:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8015f8e:	f7ff ff45 	bl	8015e1c <SEQ_BitPosition>
 8015f92:	4b03      	ldr	r3, [pc, #12]	; (8015fa0 <UTIL_SEQ_RegTask+0x1c>)
 8015f94:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f98:	f385 8810 	msr	PRIMASK, r5
}
 8015f9c:	bd38      	pop	{r3, r4, r5, pc}
 8015f9e:	bf00      	nop
 8015fa0:	20004bdc 	.word	0x20004bdc

08015fa4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8015fa4:	b082      	sub	sp, #8
 8015fa6:	b082      	sub	sp, #8
 8015fa8:	f10d 0c08 	add.w	ip, sp, #8
 8015fac:	e90c 0006 	stmdb	ip, {r1, r2}
 8015fb0:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	6002      	str	r2, [r0, #0]
 8015fb6:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8015fb8:	440b      	add	r3, r1
 8015fba:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8015fbc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015fc0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015fc4:	440a      	add	r2, r1
 8015fc6:	b291      	uxth	r1, r2
 8015fc8:	b212      	sxth	r2, r2
 8015fca:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8015fcc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8015fd0:	db04      	blt.n	8015fdc <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8015fd6:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8015fda:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8015fdc:	b002      	add	sp, #8
 8015fde:	b002      	add	sp, #8
 8015fe0:	4770      	bx	lr

08015fe2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8015fe2:	b082      	sub	sp, #8
 8015fe4:	b082      	sub	sp, #8
 8015fe6:	f10d 0c08 	add.w	ip, sp, #8
 8015fea:	e90c 0006 	stmdb	ip, {r1, r2}
 8015fee:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	6002      	str	r2, [r0, #0]
 8015ff4:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8015ff6:	1acb      	subs	r3, r1, r3
 8015ff8:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8015ffa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015ffe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016002:	1a52      	subs	r2, r2, r1
 8016004:	b291      	uxth	r1, r2
 8016006:	b212      	sxth	r2, r2
 8016008:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 801600a:	2a00      	cmp	r2, #0
 801600c:	db02      	blt.n	8016014 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 801600e:	b002      	add	sp, #8
 8016010:	b002      	add	sp, #8
 8016012:	4770      	bx	lr
    c.Seconds--;
 8016014:	3b01      	subs	r3, #1
 8016016:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8016018:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 801601c:	8081      	strh	r1, [r0, #4]
  return c;
 801601e:	e7f6      	b.n	801600e <SysTimeSub+0x2c>

08016020 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8016020:	b530      	push	{r4, r5, lr}
 8016022:	b089      	sub	sp, #36	; 0x24
 8016024:	ac02      	add	r4, sp, #8
 8016026:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801602a:	2300      	movs	r3, #0
 801602c:	9304      	str	r3, [sp, #16]
 801602e:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016032:	4d0b      	ldr	r5, [pc, #44]	; (8016060 <SysTimeSet+0x40>)
 8016034:	692b      	ldr	r3, [r5, #16]
 8016036:	a805      	add	r0, sp, #20
 8016038:	4798      	blx	r3
 801603a:	4603      	mov	r3, r0
 801603c:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801603e:	9a05      	ldr	r2, [sp, #20]
 8016040:	9200      	str	r2, [sp, #0]
 8016042:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016046:	a806      	add	r0, sp, #24
 8016048:	f7ff ffcb 	bl	8015fe2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801604c:	682b      	ldr	r3, [r5, #0]
 801604e:	9806      	ldr	r0, [sp, #24]
 8016050:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8016052:	68ab      	ldr	r3, [r5, #8]
 8016054:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016058:	4798      	blx	r3
}
 801605a:	b009      	add	sp, #36	; 0x24
 801605c:	bd30      	pop	{r4, r5, pc}
 801605e:	bf00      	nop
 8016060:	08017a58 	.word	0x08017a58

08016064 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8016064:	b530      	push	{r4, r5, lr}
 8016066:	b087      	sub	sp, #28
 8016068:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801606a:	2300      	movs	r3, #0
 801606c:	9304      	str	r3, [sp, #16]
 801606e:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8016072:	6003      	str	r3, [r0, #0]
 8016074:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016076:	4d0b      	ldr	r5, [pc, #44]	; (80160a4 <SysTimeGet+0x40>)
 8016078:	692b      	ldr	r3, [r5, #16]
 801607a:	a805      	add	r0, sp, #20
 801607c:	4798      	blx	r3
 801607e:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016080:	68eb      	ldr	r3, [r5, #12]
 8016082:	4798      	blx	r3
 8016084:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016088:	686b      	ldr	r3, [r5, #4]
 801608a:	4798      	blx	r3
 801608c:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801608e:	9b05      	ldr	r3, [sp, #20]
 8016090:	9300      	str	r3, [sp, #0]
 8016092:	9b04      	ldr	r3, [sp, #16]
 8016094:	aa02      	add	r2, sp, #8
 8016096:	ca06      	ldmia	r2, {r1, r2}
 8016098:	4620      	mov	r0, r4
 801609a:	f7ff ff83 	bl	8015fa4 <SysTimeAdd>

  return sysTime;
}
 801609e:	4620      	mov	r0, r4
 80160a0:	b007      	add	sp, #28
 80160a2:	bd30      	pop	{r4, r5, pc}
 80160a4:	08017a58 	.word	0x08017a58

080160a8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80160a8:	b530      	push	{r4, r5, lr}
 80160aa:	b083      	sub	sp, #12
 80160ac:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80160ae:	2300      	movs	r3, #0
 80160b0:	9300      	str	r3, [sp, #0]
 80160b2:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80160b6:	4b06      	ldr	r3, [pc, #24]	; (80160d0 <SysTimeGetMcuTime+0x28>)
 80160b8:	691b      	ldr	r3, [r3, #16]
 80160ba:	466d      	mov	r5, sp
 80160bc:	a801      	add	r0, sp, #4
 80160be:	4798      	blx	r3
 80160c0:	9000      	str	r0, [sp, #0]

  return calendarTime;
 80160c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80160c6:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80160ca:	4620      	mov	r0, r4
 80160cc:	b003      	add	sp, #12
 80160ce:	bd30      	pop	{r4, r5, pc}
 80160d0:	08017a58 	.word	0x08017a58

080160d4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80160d4:	b530      	push	{r4, r5, lr}
 80160d6:	b089      	sub	sp, #36	; 0x24
 80160d8:	ac02      	add	r4, sp, #8
 80160da:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80160de:	4d0c      	ldr	r5, [pc, #48]	; (8016110 <SysTimeToMs+0x3c>)
 80160e0:	68eb      	ldr	r3, [r5, #12]
 80160e2:	4798      	blx	r3
 80160e4:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80160e8:	686b      	ldr	r3, [r5, #4]
 80160ea:	4798      	blx	r3
 80160ec:	4603      	mov	r3, r0
 80160ee:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80160f0:	9a07      	ldr	r2, [sp, #28]
 80160f2:	9200      	str	r2, [sp, #0]
 80160f4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80160f8:	a804      	add	r0, sp, #16
 80160fa:	f7ff ff72 	bl	8015fe2 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80160fe:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8016102:	9a04      	ldr	r2, [sp, #16]
 8016104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016108:	fb00 3002 	mla	r0, r0, r2, r3
 801610c:	b009      	add	sp, #36	; 0x24
 801610e:	bd30      	pop	{r4, r5, pc}
 8016110:	08017a58 	.word	0x08017a58

08016114 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8016114:	b530      	push	{r4, r5, lr}
 8016116:	b087      	sub	sp, #28
 8016118:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 801611a:	4b12      	ldr	r3, [pc, #72]	; (8016164 <SysTimeFromMs+0x50>)
 801611c:	fba3 2301 	umull	r2, r3, r3, r1
 8016120:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8016122:	9304      	str	r3, [sp, #16]
 8016124:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8016128:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801612c:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8016130:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8016134:	2300      	movs	r3, #0
 8016136:	9302      	str	r3, [sp, #8]
 8016138:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801613a:	4d0b      	ldr	r5, [pc, #44]	; (8016168 <SysTimeFromMs+0x54>)
 801613c:	68eb      	ldr	r3, [r5, #12]
 801613e:	4798      	blx	r3
 8016140:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016144:	686b      	ldr	r3, [r5, #4]
 8016146:	4798      	blx	r3
 8016148:	4603      	mov	r3, r0
 801614a:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 801614c:	9a03      	ldr	r2, [sp, #12]
 801614e:	9200      	str	r2, [sp, #0]
 8016150:	aa06      	add	r2, sp, #24
 8016152:	e912 0006 	ldmdb	r2, {r1, r2}
 8016156:	4620      	mov	r0, r4
 8016158:	f7ff ff24 	bl	8015fa4 <SysTimeAdd>
}
 801615c:	4620      	mov	r0, r4
 801615e:	b007      	add	sp, #28
 8016160:	bd30      	pop	{r4, r5, pc}
 8016162:	bf00      	nop
 8016164:	10624dd3 	.word	0x10624dd3
 8016168:	08017a58 	.word	0x08017a58

0801616c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801616c:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801616e:	4b03      	ldr	r3, [pc, #12]	; (801617c <UTIL_TIMER_Init+0x10>)
 8016170:	2200      	movs	r2, #0
 8016172:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8016174:	4b02      	ldr	r3, [pc, #8]	; (8016180 <UTIL_TIMER_Init+0x14>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	4798      	blx	r3
}
 801617a:	bd08      	pop	{r3, pc}
 801617c:	20004bfc 	.word	0x20004bfc
 8016180:	08017a6c 	.word	0x08017a6c

08016184 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8016184:	b1a8      	cbz	r0, 80161b2 <UTIL_TIMER_Create+0x2e>
{
 8016186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016188:	4617      	mov	r7, r2
 801618a:	461e      	mov	r6, r3
 801618c:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 801618e:	b193      	cbz	r3, 80161b6 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8016190:	2500      	movs	r5, #0
 8016192:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8016194:	4b09      	ldr	r3, [pc, #36]	; (80161bc <UTIL_TIMER_Create+0x38>)
 8016196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016198:	4608      	mov	r0, r1
 801619a:	4798      	blx	r3
 801619c:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 801619e:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80161a0:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80161a2:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80161a4:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80161a6:	9b06      	ldr	r3, [sp, #24]
 80161a8:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80161aa:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80161ac:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80161ae:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80161b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80161b2:	2001      	movs	r0, #1
}
 80161b4:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80161b6:	2001      	movs	r0, #1
 80161b8:	e7fa      	b.n	80161b0 <UTIL_TIMER_Create+0x2c>
 80161ba:	bf00      	nop
 80161bc:	08017a6c 	.word	0x08017a6c

080161c0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80161c0:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80161c2:	4c03      	ldr	r4, [pc, #12]	; (80161d0 <UTIL_TIMER_GetCurrentTime+0x10>)
 80161c4:	69e3      	ldr	r3, [r4, #28]
 80161c6:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 80161c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80161ca:	4798      	blx	r3
}
 80161cc:	bd10      	pop	{r4, pc}
 80161ce:	bf00      	nop
 80161d0:	08017a6c 	.word	0x08017a6c

080161d4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80161d4:	b570      	push	{r4, r5, r6, lr}
 80161d6:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80161d8:	4d05      	ldr	r5, [pc, #20]	; (80161f0 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80161da:	69eb      	ldr	r3, [r5, #28]
 80161dc:	4798      	blx	r3
 80161de:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80161e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80161e2:	4630      	mov	r0, r6
 80161e4:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80161e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80161e8:	1a20      	subs	r0, r4, r0
 80161ea:	4798      	blx	r3
}
 80161ec:	bd70      	pop	{r4, r5, r6, pc}
 80161ee:	bf00      	nop
 80161f0:	08017a6c 	.word	0x08017a6c

080161f4 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80161f4:	4b05      	ldr	r3, [pc, #20]	; (801620c <TimerExists+0x18>)
 80161f6:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80161f8:	e000      	b.n	80161fc <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80161fa:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80161fc:	b11b      	cbz	r3, 8016206 <TimerExists+0x12>
    if( cur == TimerObject )
 80161fe:	4283      	cmp	r3, r0
 8016200:	d1fb      	bne.n	80161fa <TimerExists+0x6>
      return true;
 8016202:	2001      	movs	r0, #1
  }
  return false;
}
 8016204:	4770      	bx	lr
  return false;
 8016206:	2000      	movs	r0, #0
 8016208:	4770      	bx	lr
 801620a:	bf00      	nop
 801620c:	20004bfc 	.word	0x20004bfc

08016210 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8016210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016212:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8016214:	4e09      	ldr	r6, [pc, #36]	; (801623c <TimerSetTimeout+0x2c>)
 8016216:	6a33      	ldr	r3, [r6, #32]
 8016218:	4798      	blx	r3
 801621a:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 801621c:	2301      	movs	r3, #1
 801621e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8016220:	6827      	ldr	r7, [r4, #0]
 8016222:	69b6      	ldr	r6, [r6, #24]
 8016224:	47b0      	blx	r6
 8016226:	4428      	add	r0, r5
 8016228:	4287      	cmp	r7, r0
 801622a:	d202      	bcs.n	8016232 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801622c:	47b0      	blx	r6
 801622e:	4428      	add	r0, r5
 8016230:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8016232:	4b02      	ldr	r3, [pc, #8]	; (801623c <TimerSetTimeout+0x2c>)
 8016234:	689b      	ldr	r3, [r3, #8]
 8016236:	6820      	ldr	r0, [r4, #0]
 8016238:	4798      	blx	r3
}
 801623a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801623c:	08017a6c 	.word	0x08017a6c

08016240 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8016240:	b368      	cbz	r0, 801629e <UTIL_TIMER_Stop+0x5e>
{
 8016242:	b510      	push	{r4, lr}
 8016244:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016246:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801624a:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801624c:	4b15      	ldr	r3, [pc, #84]	; (80162a4 <UTIL_TIMER_Stop+0x64>)
 801624e:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8016250:	2301      	movs	r3, #1
 8016252:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8016254:	b1e1      	cbz	r1, 8016290 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8016256:	2300      	movs	r3, #0
 8016258:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801625a:	4288      	cmp	r0, r1
 801625c:	d006      	beq.n	801626c <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801625e:	460b      	mov	r3, r1
        while( cur != NULL )
 8016260:	b1b3      	cbz	r3, 8016290 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8016262:	4293      	cmp	r3, r2
 8016264:	d011      	beq.n	801628a <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8016266:	4619      	mov	r1, r3
            cur = cur->Next;
 8016268:	695b      	ldr	r3, [r3, #20]
 801626a:	e7f9      	b.n	8016260 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 801626c:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 801626e:	6948      	ldr	r0, [r1, #20]
 8016270:	b120      	cbz	r0, 801627c <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8016272:	4b0c      	ldr	r3, [pc, #48]	; (80162a4 <UTIL_TIMER_Stop+0x64>)
 8016274:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8016276:	f7ff ffcb 	bl	8016210 <TimerSetTimeout>
 801627a:	e009      	b.n	8016290 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 801627c:	4b0a      	ldr	r3, [pc, #40]	; (80162a8 <UTIL_TIMER_Stop+0x68>)
 801627e:	68db      	ldr	r3, [r3, #12]
 8016280:	4798      	blx	r3
            TimerListHead = NULL;
 8016282:	4b08      	ldr	r3, [pc, #32]	; (80162a4 <UTIL_TIMER_Stop+0x64>)
 8016284:	2200      	movs	r2, #0
 8016286:	601a      	str	r2, [r3, #0]
 8016288:	e002      	b.n	8016290 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 801628a:	695b      	ldr	r3, [r3, #20]
 801628c:	b123      	cbz	r3, 8016298 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 801628e:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016290:	f384 8810 	msr	PRIMASK, r4
}
 8016294:	2000      	movs	r0, #0
}
 8016296:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8016298:	2300      	movs	r3, #0
 801629a:	614b      	str	r3, [r1, #20]
 801629c:	e7f8      	b.n	8016290 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 801629e:	2001      	movs	r0, #1
}
 80162a0:	4770      	bx	lr
 80162a2:	bf00      	nop
 80162a4:	20004bfc 	.word	0x20004bfc
 80162a8:	08017a6c 	.word	0x08017a6c

080162ac <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80162ac:	4b09      	ldr	r3, [pc, #36]	; (80162d4 <TimerInsertTimer+0x28>)
 80162ae:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80162b0:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80162b2:	e001      	b.n	80162b8 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 80162b4:	461a      	mov	r2, r3
        next = next->Next;
 80162b6:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 80162b8:	6951      	ldr	r1, [r2, #20]
 80162ba:	b139      	cbz	r1, 80162cc <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 80162bc:	6819      	ldr	r1, [r3, #0]
 80162be:	f8d0 c000 	ldr.w	ip, [r0]
 80162c2:	458c      	cmp	ip, r1
 80162c4:	d8f6      	bhi.n	80162b4 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 80162c6:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 80162c8:	6143      	str	r3, [r0, #20]
        return;
 80162ca:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 80162cc:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80162ce:	2300      	movs	r3, #0
 80162d0:	6143      	str	r3, [r0, #20]
}
 80162d2:	4770      	bx	lr
 80162d4:	20004bfc 	.word	0x20004bfc

080162d8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80162d8:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80162da:	4b05      	ldr	r3, [pc, #20]	; (80162f0 <TimerInsertNewHeadTimer+0x18>)
 80162dc:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80162de:	b10b      	cbz	r3, 80162e4 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 80162e0:	2200      	movs	r2, #0
 80162e2:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80162e4:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80162e6:	4b02      	ldr	r3, [pc, #8]	; (80162f0 <TimerInsertNewHeadTimer+0x18>)
 80162e8:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80162ea:	f7ff ff91 	bl	8016210 <TimerSetTimeout>
}
 80162ee:	bd08      	pop	{r3, pc}
 80162f0:	20004bfc 	.word	0x20004bfc

080162f4 <UTIL_TIMER_Start>:
{
 80162f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80162f6:	2800      	cmp	r0, #0
 80162f8:	d036      	beq.n	8016368 <UTIL_TIMER_Start+0x74>
 80162fa:	4604      	mov	r4, r0
 80162fc:	f7ff ff7a 	bl	80161f4 <TimerExists>
 8016300:	2800      	cmp	r0, #0
 8016302:	d134      	bne.n	801636e <UTIL_TIMER_Start+0x7a>
 8016304:	7a65      	ldrb	r5, [r4, #9]
 8016306:	2d00      	cmp	r5, #0
 8016308:	d133      	bne.n	8016372 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801630a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801630e:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8016310:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8016312:	4b19      	ldr	r3, [pc, #100]	; (8016378 <UTIL_TIMER_Start+0x84>)
 8016314:	6a1b      	ldr	r3, [r3, #32]
 8016316:	4798      	blx	r3
    if( ticks < minValue )
 8016318:	4287      	cmp	r7, r0
 801631a:	d300      	bcc.n	801631e <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 801631c:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 801631e:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8016320:	2300      	movs	r3, #0
 8016322:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8016324:	2201      	movs	r2, #1
 8016326:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8016328:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801632a:	4b14      	ldr	r3, [pc, #80]	; (801637c <UTIL_TIMER_Start+0x88>)
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	b183      	cbz	r3, 8016352 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8016330:	4b11      	ldr	r3, [pc, #68]	; (8016378 <UTIL_TIMER_Start+0x84>)
 8016332:	699b      	ldr	r3, [r3, #24]
 8016334:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8016336:	6823      	ldr	r3, [r4, #0]
 8016338:	4418      	add	r0, r3
 801633a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801633c:	4b0f      	ldr	r3, [pc, #60]	; (801637c <UTIL_TIMER_Start+0x88>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	4298      	cmp	r0, r3
 8016344:	d20c      	bcs.n	8016360 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8016346:	4620      	mov	r0, r4
 8016348:	f7ff ffc6 	bl	80162d8 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801634c:	f386 8810 	msr	PRIMASK, r6
}
 8016350:	e00b      	b.n	801636a <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8016352:	4b09      	ldr	r3, [pc, #36]	; (8016378 <UTIL_TIMER_Start+0x84>)
 8016354:	691b      	ldr	r3, [r3, #16]
 8016356:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8016358:	4620      	mov	r0, r4
 801635a:	f7ff ffbd 	bl	80162d8 <TimerInsertNewHeadTimer>
 801635e:	e7f5      	b.n	801634c <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8016360:	4620      	mov	r0, r4
 8016362:	f7ff ffa3 	bl	80162ac <TimerInsertTimer>
 8016366:	e7f1      	b.n	801634c <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8016368:	2501      	movs	r5, #1
}
 801636a:	4628      	mov	r0, r5
 801636c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 801636e:	2501      	movs	r5, #1
 8016370:	e7fb      	b.n	801636a <UTIL_TIMER_Start+0x76>
 8016372:	2501      	movs	r5, #1
 8016374:	e7f9      	b.n	801636a <UTIL_TIMER_Start+0x76>
 8016376:	bf00      	nop
 8016378:	08017a6c 	.word	0x08017a6c
 801637c:	20004bfc 	.word	0x20004bfc

08016380 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8016380:	b198      	cbz	r0, 80163aa <UTIL_TIMER_SetPeriod+0x2a>
{
 8016382:	b510      	push	{r4, lr}
 8016384:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8016386:	4b0a      	ldr	r3, [pc, #40]	; (80163b0 <UTIL_TIMER_SetPeriod+0x30>)
 8016388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801638a:	4608      	mov	r0, r1
 801638c:	4798      	blx	r3
 801638e:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8016390:	4620      	mov	r0, r4
 8016392:	f7ff ff2f 	bl	80161f4 <TimerExists>
 8016396:	b908      	cbnz	r0, 801639c <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8016398:	2000      	movs	r0, #0
}
 801639a:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 801639c:	4620      	mov	r0, r4
 801639e:	f7ff ff4f 	bl	8016240 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80163a2:	4620      	mov	r0, r4
 80163a4:	f7ff ffa6 	bl	80162f4 <UTIL_TIMER_Start>
 80163a8:	e7f7      	b.n	801639a <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80163aa:	2001      	movs	r0, #1
}
 80163ac:	4770      	bx	lr
 80163ae:	bf00      	nop
 80163b0:	08017a6c 	.word	0x08017a6c

080163b4 <UTIL_TIMER_IRQ_Handler>:
{
 80163b4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80163b6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80163ba:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 80163bc:	4c1e      	ldr	r4, [pc, #120]	; (8016438 <UTIL_TIMER_IRQ_Handler+0x84>)
 80163be:	6963      	ldr	r3, [r4, #20]
 80163c0:	4798      	blx	r3
 80163c2:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 80163c4:	6923      	ldr	r3, [r4, #16]
 80163c6:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 80163c8:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 80163ca:	4b1c      	ldr	r3, [pc, #112]	; (801643c <UTIL_TIMER_IRQ_Handler+0x88>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	b923      	cbnz	r3, 80163da <UTIL_TIMER_IRQ_Handler+0x26>
 80163d0:	e018      	b.n	8016404 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 80163d2:	2200      	movs	r2, #0
 80163d4:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 80163d6:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 80163d8:	b1a3      	cbz	r3, 8016404 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 80163da:	681a      	ldr	r2, [r3, #0]
 80163dc:	42a2      	cmp	r2, r4
 80163de:	d9f8      	bls.n	80163d2 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 80163e0:	1a31      	subs	r1, r6, r0
 80163e2:	440a      	add	r2, r1
 80163e4:	601a      	str	r2, [r3, #0]
 80163e6:	e7f6      	b.n	80163d6 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 80163e8:	4b14      	ldr	r3, [pc, #80]	; (801643c <UTIL_TIMER_IRQ_Handler+0x88>)
 80163ea:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80163ec:	6962      	ldr	r2, [r4, #20]
 80163ee:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80163f0:	2300      	movs	r3, #0
 80163f2:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80163f4:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80163f6:	68e3      	ldr	r3, [r4, #12]
 80163f8:	6920      	ldr	r0, [r4, #16]
 80163fa:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80163fc:	8963      	ldrh	r3, [r4, #10]
 80163fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016402:	d012      	beq.n	801642a <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8016404:	4b0d      	ldr	r3, [pc, #52]	; (801643c <UTIL_TIMER_IRQ_Handler+0x88>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	b13b      	cbz	r3, 801641a <UTIL_TIMER_IRQ_Handler+0x66>
 801640a:	681c      	ldr	r4, [r3, #0]
 801640c:	2c00      	cmp	r4, #0
 801640e:	d0eb      	beq.n	80163e8 <UTIL_TIMER_IRQ_Handler+0x34>
 8016410:	4b09      	ldr	r3, [pc, #36]	; (8016438 <UTIL_TIMER_IRQ_Handler+0x84>)
 8016412:	699b      	ldr	r3, [r3, #24]
 8016414:	4798      	blx	r3
 8016416:	4284      	cmp	r4, r0
 8016418:	d3e6      	bcc.n	80163e8 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801641a:	4b08      	ldr	r3, [pc, #32]	; (801643c <UTIL_TIMER_IRQ_Handler+0x88>)
 801641c:	6818      	ldr	r0, [r3, #0]
 801641e:	b108      	cbz	r0, 8016424 <UTIL_TIMER_IRQ_Handler+0x70>
 8016420:	7a03      	ldrb	r3, [r0, #8]
 8016422:	b133      	cbz	r3, 8016432 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016424:	f385 8810 	msr	PRIMASK, r5
}
 8016428:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801642a:	4620      	mov	r0, r4
 801642c:	f7ff ff62 	bl	80162f4 <UTIL_TIMER_Start>
 8016430:	e7e8      	b.n	8016404 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8016432:	f7ff feed 	bl	8016210 <TimerSetTimeout>
 8016436:	e7f5      	b.n	8016424 <UTIL_TIMER_IRQ_Handler+0x70>
 8016438:	08017a6c 	.word	0x08017a6c
 801643c:	20004bfc 	.word	0x20004bfc

08016440 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8016440:	4601      	mov	r1, r0
  int i = 0;
 8016442:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8016444:	e008      	b.n	8016458 <ee_skip_atoi+0x18>
 8016446:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801644a:	1c53      	adds	r3, r2, #1
 801644c:	600b      	str	r3, [r1, #0]
 801644e:	7813      	ldrb	r3, [r2, #0]
 8016450:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8016454:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8016458:	680a      	ldr	r2, [r1, #0]
 801645a:	7813      	ldrb	r3, [r2, #0]
 801645c:	3b30      	subs	r3, #48	; 0x30
 801645e:	b2db      	uxtb	r3, r3
 8016460:	2b09      	cmp	r3, #9
 8016462:	d9f0      	bls.n	8016446 <ee_skip_atoi+0x6>
  return i;
}
 8016464:	4770      	bx	lr
	...

08016468 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8016468:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 801646c:	b093      	sub	sp, #76	; 0x4c
 801646e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016470:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8016472:	f016 0f40 	tst.w	r6, #64	; 0x40
 8016476:	d110      	bne.n	801649a <ee_number+0x32>
  char *dig = lower_digits;
 8016478:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8016574 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801647c:	1e9f      	subs	r7, r3, #2
 801647e:	2f22      	cmp	r7, #34	; 0x22
 8016480:	d875      	bhi.n	801656e <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8016482:	f016 0401 	ands.w	r4, r6, #1
 8016486:	d00b      	beq.n	80164a0 <ee_number+0x38>
 8016488:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 801648c:	f016 0f02 	tst.w	r6, #2
 8016490:	d00f      	beq.n	80164b2 <ee_number+0x4a>
  {
    if (num < 0)
 8016492:	2a00      	cmp	r2, #0
 8016494:	db07      	blt.n	80164a6 <ee_number+0x3e>
  sign = 0;
 8016496:	2700      	movs	r7, #0
 8016498:	e00c      	b.n	80164b4 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 801649a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8016578 <ee_number+0x110>
 801649e:	e7ed      	b.n	801647c <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80164a0:	f04f 0e20 	mov.w	lr, #32
 80164a4:	e7f2      	b.n	801648c <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80164a6:	4252      	negs	r2, r2
      size--;
 80164a8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80164aa:	3e01      	subs	r6, #1
 80164ac:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 80164ae:	272d      	movs	r7, #45	; 0x2d
 80164b0:	e000      	b.n	80164b4 <ee_number+0x4c>
  sign = 0;
 80164b2:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 80164b4:	bb5a      	cbnz	r2, 801650e <ee_number+0xa6>
    tmp[i++] = '0';
 80164b6:	2330      	movs	r3, #48	; 0x30
 80164b8:	f88d 3004 	strb.w	r3, [sp, #4]
 80164bc:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 80164c0:	45ac      	cmp	ip, r5
 80164c2:	dd00      	ble.n	80164c6 <ee_number+0x5e>
 80164c4:	4665      	mov	r5, ip
  size -= precision;
 80164c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80164c8:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80164ca:	b31c      	cbz	r4, 8016514 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 80164cc:	b11f      	cbz	r7, 80164d6 <ee_number+0x6e>
 80164ce:	f800 7b01 	strb.w	r7, [r0], #1
 80164d2:	3901      	subs	r1, #1
 80164d4:	d007      	beq.n	80164e6 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80164dc:	dd24      	ble.n	8016528 <ee_number+0xc0>
 80164de:	f800 eb01 	strb.w	lr, [r0], #1
 80164e2:	3901      	subs	r1, #1
 80164e4:	d1f7      	bne.n	80164d6 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 80164e6:	b013      	add	sp, #76	; 0x4c
 80164e8:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80164ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80164f0:	fb03 2216 	mls	r2, r3, r6, r2
 80164f4:	f81a 8002 	ldrb.w	r8, [sl, r2]
 80164f8:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80164fc:	446a      	add	r2, sp
 80164fe:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8016502:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8016504:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8016508:	2a00      	cmp	r2, #0
 801650a:	d1ef      	bne.n	80164ec <ee_number+0x84>
 801650c:	e7d8      	b.n	80164c0 <ee_number+0x58>
  i = 0;
 801650e:	f04f 0c00 	mov.w	ip, #0
 8016512:	e7f9      	b.n	8016508 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8016514:	2b00      	cmp	r3, #0
 8016516:	f103 33ff 	add.w	r3, r3, #4294967295
 801651a:	ddd7      	ble.n	80164cc <ee_number+0x64>
 801651c:	2220      	movs	r2, #32
 801651e:	f800 2b01 	strb.w	r2, [r0], #1
 8016522:	3901      	subs	r1, #1
 8016524:	d1f6      	bne.n	8016514 <ee_number+0xac>
 8016526:	e7de      	b.n	80164e6 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8016528:	4565      	cmp	r5, ip
 801652a:	f105 35ff 	add.w	r5, r5, #4294967295
 801652e:	dd05      	ble.n	801653c <ee_number+0xd4>
 8016530:	2230      	movs	r2, #48	; 0x30
 8016532:	f800 2b01 	strb.w	r2, [r0], #1
 8016536:	3901      	subs	r1, #1
 8016538:	d1f6      	bne.n	8016528 <ee_number+0xc0>
 801653a:	e7d4      	b.n	80164e6 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801653c:	4662      	mov	r2, ip
 801653e:	2a00      	cmp	r2, #0
 8016540:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016544:	dd09      	ble.n	801655a <ee_number+0xf2>
 8016546:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 801654a:	446a      	add	r2, sp
 801654c:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8016550:	f800 2b01 	strb.w	r2, [r0], #1
 8016554:	3901      	subs	r1, #1
 8016556:	d1f1      	bne.n	801653c <ee_number+0xd4>
 8016558:	e7c5      	b.n	80164e6 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 801655a:	2b00      	cmp	r3, #0
 801655c:	f103 33ff 	add.w	r3, r3, #4294967295
 8016560:	ddc1      	ble.n	80164e6 <ee_number+0x7e>
 8016562:	2220      	movs	r2, #32
 8016564:	f800 2b01 	strb.w	r2, [r0], #1
 8016568:	3901      	subs	r1, #1
 801656a:	d1f6      	bne.n	801655a <ee_number+0xf2>
 801656c:	e7bb      	b.n	80164e6 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 801656e:	2000      	movs	r0, #0
 8016570:	e7b9      	b.n	80164e6 <ee_number+0x7e>
 8016572:	bf00      	nop
 8016574:	080189a8 	.word	0x080189a8
 8016578:	080189d0 	.word	0x080189d0

0801657c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801657c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016580:	b087      	sub	sp, #28
 8016582:	9205      	str	r2, [sp, #20]
 8016584:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8016586:	1e0f      	subs	r7, r1, #0
 8016588:	f340 80b8 	ble.w	80166fc <tiny_vsnprintf_like+0x180>
 801658c:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801658e:	4604      	mov	r4, r0
 8016590:	e004      	b.n	801659c <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8016592:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8016596:	9b05      	ldr	r3, [sp, #20]
 8016598:	3301      	adds	r3, #1
 801659a:	9305      	str	r3, [sp, #20]
 801659c:	9905      	ldr	r1, [sp, #20]
 801659e:	780a      	ldrb	r2, [r1, #0]
 80165a0:	b922      	cbnz	r2, 80165ac <tiny_vsnprintf_like+0x30>
 80165a2:	1ba3      	subs	r3, r4, r6
 80165a4:	1e78      	subs	r0, r7, #1
 80165a6:	4283      	cmp	r3, r0
 80165a8:	f2c0 80a2 	blt.w	80166f0 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80165ac:	1ba3      	subs	r3, r4, r6
 80165ae:	f107 38ff 	add.w	r8, r7, #4294967295
 80165b2:	4543      	cmp	r3, r8
 80165b4:	f280 809c 	bge.w	80166f0 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 80165b8:	2a25      	cmp	r2, #37	; 0x25
 80165ba:	d1ea      	bne.n	8016592 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80165bc:	1c4b      	adds	r3, r1, #1
 80165be:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 80165c0:	784b      	ldrb	r3, [r1, #1]
 80165c2:	2b30      	cmp	r3, #48	; 0x30
 80165c4:	d020      	beq.n	8016608 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 80165c6:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 80165ca:	3b30      	subs	r3, #48	; 0x30
 80165cc:	b2db      	uxtb	r3, r3
 80165ce:	2b09      	cmp	r3, #9
 80165d0:	d91d      	bls.n	801660e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 80165d2:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 80165d6:	9b05      	ldr	r3, [sp, #20]
 80165d8:	781a      	ldrb	r2, [r3, #0]
 80165da:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 80165de:	2b20      	cmp	r3, #32
 80165e0:	d867      	bhi.n	80166b2 <tiny_vsnprintf_like+0x136>
 80165e2:	e8df f003 	tbb	[pc, r3]
 80165e6:	664a      	.short	0x664a
 80165e8:	66666666 	.word	0x66666666
 80165ec:	66666666 	.word	0x66666666
 80165f0:	66621e66 	.word	0x66621e66
 80165f4:	62666666 	.word	0x62666666
 80165f8:	66666666 	.word	0x66666666
 80165fc:	66666666 	.word	0x66666666
 8016600:	19662866 	.word	0x19662866
 8016604:	6666      	.short	0x6666
 8016606:	7c          	.byte	0x7c
 8016607:	00          	.byte	0x00
      flags |= ZEROPAD;
 8016608:	f04f 0901 	mov.w	r9, #1
 801660c:	e7dd      	b.n	80165ca <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 801660e:	a805      	add	r0, sp, #20
 8016610:	f7ff ff16 	bl	8016440 <ee_skip_atoi>
 8016614:	4605      	mov	r5, r0
 8016616:	e7de      	b.n	80165d6 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8016618:	230a      	movs	r3, #10
 801661a:	e031      	b.n	8016680 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801661c:	2320      	movs	r3, #32
 801661e:	f804 3b01 	strb.w	r3, [r4], #1
 8016622:	3d01      	subs	r5, #1
 8016624:	2d00      	cmp	r5, #0
 8016626:	dcf9      	bgt.n	801661c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8016628:	9b04      	ldr	r3, [sp, #16]
 801662a:	1d1a      	adds	r2, r3, #4
 801662c:	9204      	str	r2, [sp, #16]
 801662e:	781b      	ldrb	r3, [r3, #0]
 8016630:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8016634:	e7af      	b.n	8016596 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8016636:	9b04      	ldr	r3, [sp, #16]
 8016638:	1d1a      	adds	r2, r3, #4
 801663a:	9204      	str	r2, [sp, #16]
 801663c:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8016640:	f1b8 0f00 	cmp.w	r8, #0
 8016644:	d003      	beq.n	801664e <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8016646:	4640      	mov	r0, r8
 8016648:	f7e9 fd96 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801664c:	e006      	b.n	801665c <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 801664e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8016700 <tiny_vsnprintf_like+0x184>
 8016652:	e7f8      	b.n	8016646 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8016654:	2220      	movs	r2, #32
 8016656:	f804 2b01 	strb.w	r2, [r4], #1
 801665a:	461d      	mov	r5, r3
 801665c:	1e6b      	subs	r3, r5, #1
 801665e:	4285      	cmp	r5, r0
 8016660:	dcf8      	bgt.n	8016654 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8016662:	2200      	movs	r2, #0
 8016664:	e006      	b.n	8016674 <tiny_vsnprintf_like+0xf8>
 8016666:	4643      	mov	r3, r8
 8016668:	f813 1b01 	ldrb.w	r1, [r3], #1
 801666c:	f804 1b01 	strb.w	r1, [r4], #1
 8016670:	3201      	adds	r2, #1
 8016672:	4698      	mov	r8, r3
 8016674:	4282      	cmp	r2, r0
 8016676:	dbf6      	blt.n	8016666 <tiny_vsnprintf_like+0xea>
 8016678:	e78d      	b.n	8016596 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801667a:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 801667e:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8016680:	f019 0f02 	tst.w	r9, #2
 8016684:	d02f      	beq.n	80166e6 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8016686:	9a04      	ldr	r2, [sp, #16]
 8016688:	1d11      	adds	r1, r2, #4
 801668a:	9104      	str	r1, [sp, #16]
 801668c:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801668e:	1ba1      	subs	r1, r4, r6
 8016690:	f8cd 9008 	str.w	r9, [sp, #8]
 8016694:	f04f 30ff 	mov.w	r0, #4294967295
 8016698:	9001      	str	r0, [sp, #4]
 801669a:	9500      	str	r5, [sp, #0]
 801669c:	eba8 0101 	sub.w	r1, r8, r1
 80166a0:	4620      	mov	r0, r4
 80166a2:	f7ff fee1 	bl	8016468 <ee_number>
 80166a6:	4604      	mov	r4, r0
 80166a8:	e775      	b.n	8016596 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80166aa:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80166ae:	230a      	movs	r3, #10
 80166b0:	e7e6      	b.n	8016680 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80166b2:	2a25      	cmp	r2, #37	; 0x25
 80166b4:	d002      	beq.n	80166bc <tiny_vsnprintf_like+0x140>
 80166b6:	2325      	movs	r3, #37	; 0x25
 80166b8:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80166bc:	1ba3      	subs	r3, r4, r6
 80166be:	4598      	cmp	r8, r3
 80166c0:	dd0f      	ble.n	80166e2 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 80166c2:	9b05      	ldr	r3, [sp, #20]
 80166c4:	781a      	ldrb	r2, [r3, #0]
 80166c6:	b13a      	cbz	r2, 80166d8 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 80166c8:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80166cc:	1ba3      	subs	r3, r4, r6
 80166ce:	4598      	cmp	r8, r3
 80166d0:	f73f af61 	bgt.w	8016596 <tiny_vsnprintf_like+0x1a>
    base = 10;
 80166d4:	230a      	movs	r3, #10
 80166d6:	e7d3      	b.n	8016680 <tiny_vsnprintf_like+0x104>
          --fmt;
 80166d8:	3b01      	subs	r3, #1
 80166da:	9305      	str	r3, [sp, #20]
 80166dc:	e7f6      	b.n	80166cc <tiny_vsnprintf_like+0x150>
        base = 16;
 80166de:	2310      	movs	r3, #16
 80166e0:	e7ce      	b.n	8016680 <tiny_vsnprintf_like+0x104>
    base = 10;
 80166e2:	230a      	movs	r3, #10
 80166e4:	e7cc      	b.n	8016680 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 80166e6:	9a04      	ldr	r2, [sp, #16]
 80166e8:	1d11      	adds	r1, r2, #4
 80166ea:	9104      	str	r1, [sp, #16]
 80166ec:	6812      	ldr	r2, [r2, #0]
 80166ee:	e7ce      	b.n	801668e <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 80166f0:	2300      	movs	r3, #0
 80166f2:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80166f4:	1ba0      	subs	r0, r4, r6
}
 80166f6:	b007      	add	sp, #28
 80166f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80166fc:	2000      	movs	r0, #0
 80166fe:	e7fa      	b.n	80166f6 <tiny_vsnprintf_like+0x17a>
 8016700:	080189f8 	.word	0x080189f8

08016704 <arm_max_f32>:
 8016704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016708:	4681      	mov	r9, r0
 801670a:	b085      	sub	sp, #20
 801670c:	f101 3aff 	add.w	sl, r1, #4294967295
 8016710:	e9cd 2300 	strd	r2, r3, [sp]
 8016714:	ea5f 039a 	movs.w	r3, sl, lsr #2
 8016718:	9103      	str	r1, [sp, #12]
 801671a:	f859 4b04 	ldr.w	r4, [r9], #4
 801671e:	9302      	str	r3, [sp, #8]
 8016720:	d05c      	beq.n	80167dc <arm_max_f32+0xd8>
 8016722:	2600      	movs	r6, #0
 8016724:	f100 0514 	add.w	r5, r0, #20
 8016728:	4637      	mov	r7, r6
 801672a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801672e:	f855 bc10 	ldr.w	fp, [r5, #-16]
 8016732:	4620      	mov	r0, r4
 8016734:	4659      	mov	r1, fp
 8016736:	f7ea fcb7 	bl	80010a8 <__aeabi_fcmplt>
 801673a:	b108      	cbz	r0, 8016740 <arm_max_f32+0x3c>
 801673c:	465c      	mov	r4, fp
 801673e:	1c77      	adds	r7, r6, #1
 8016740:	f855 bc0c 	ldr.w	fp, [r5, #-12]
 8016744:	4620      	mov	r0, r4
 8016746:	4659      	mov	r1, fp
 8016748:	f7ea fcae 	bl	80010a8 <__aeabi_fcmplt>
 801674c:	b108      	cbz	r0, 8016752 <arm_max_f32+0x4e>
 801674e:	465c      	mov	r4, fp
 8016750:	1cb7      	adds	r7, r6, #2
 8016752:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8016756:	4620      	mov	r0, r4
 8016758:	4659      	mov	r1, fp
 801675a:	f7ea fca5 	bl	80010a8 <__aeabi_fcmplt>
 801675e:	b108      	cbz	r0, 8016764 <arm_max_f32+0x60>
 8016760:	465c      	mov	r4, fp
 8016762:	1cf7      	adds	r7, r6, #3
 8016764:	f855 bc04 	ldr.w	fp, [r5, #-4]
 8016768:	4620      	mov	r0, r4
 801676a:	4659      	mov	r1, fp
 801676c:	f7ea fc9c 	bl	80010a8 <__aeabi_fcmplt>
 8016770:	3604      	adds	r6, #4
 8016772:	3510      	adds	r5, #16
 8016774:	b108      	cbz	r0, 801677a <arm_max_f32+0x76>
 8016776:	465c      	mov	r4, fp
 8016778:	4637      	mov	r7, r6
 801677a:	45b0      	cmp	r8, r6
 801677c:	d1d7      	bne.n	801672e <arm_max_f32+0x2a>
 801677e:	9b02      	ldr	r3, [sp, #8]
 8016780:	eb09 1903 	add.w	r9, r9, r3, lsl #4
 8016784:	f01a 0503 	ands.w	r5, sl, #3
 8016788:	d01d      	beq.n	80167c6 <arm_max_f32+0xc2>
 801678a:	f8d9 6000 	ldr.w	r6, [r9]
 801678e:	4621      	mov	r1, r4
 8016790:	4630      	mov	r0, r6
 8016792:	f7ea fca7 	bl	80010e4 <__aeabi_fcmpgt>
 8016796:	b9e8      	cbnz	r0, 80167d4 <arm_max_f32+0xd0>
 8016798:	3d01      	subs	r5, #1
 801679a:	d014      	beq.n	80167c6 <arm_max_f32+0xc2>
 801679c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80167a0:	4620      	mov	r0, r4
 80167a2:	4631      	mov	r1, r6
 80167a4:	f7ea fc80 	bl	80010a8 <__aeabi_fcmplt>
 80167a8:	b110      	cbz	r0, 80167b0 <arm_max_f32+0xac>
 80167aa:	9b03      	ldr	r3, [sp, #12]
 80167ac:	4634      	mov	r4, r6
 80167ae:	1b5f      	subs	r7, r3, r5
 80167b0:	2d01      	cmp	r5, #1
 80167b2:	d008      	beq.n	80167c6 <arm_max_f32+0xc2>
 80167b4:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80167b8:	4621      	mov	r1, r4
 80167ba:	4628      	mov	r0, r5
 80167bc:	f7ea fc92 	bl	80010e4 <__aeabi_fcmpgt>
 80167c0:	b108      	cbz	r0, 80167c6 <arm_max_f32+0xc2>
 80167c2:	4657      	mov	r7, sl
 80167c4:	462c      	mov	r4, r5
 80167c6:	9b00      	ldr	r3, [sp, #0]
 80167c8:	601c      	str	r4, [r3, #0]
 80167ca:	9b01      	ldr	r3, [sp, #4]
 80167cc:	601f      	str	r7, [r3, #0]
 80167ce:	b005      	add	sp, #20
 80167d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d4:	9b03      	ldr	r3, [sp, #12]
 80167d6:	4634      	mov	r4, r6
 80167d8:	1b5f      	subs	r7, r3, r5
 80167da:	e7dd      	b.n	8016798 <arm_max_f32+0x94>
 80167dc:	461f      	mov	r7, r3
 80167de:	e7d1      	b.n	8016784 <arm_max_f32+0x80>

080167e0 <arm_cfft_radix4_init_f32>:
 80167e0:	b410      	push	{r4}
 80167e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80167e6:	4c25      	ldr	r4, [pc, #148]	; (801687c <arm_cfft_radix4_init_f32+0x9c>)
 80167e8:	7082      	strb	r2, [r0, #2]
 80167ea:	70c3      	strb	r3, [r0, #3]
 80167ec:	8001      	strh	r1, [r0, #0]
 80167ee:	6044      	str	r4, [r0, #4]
 80167f0:	d024      	beq.n	801683c <arm_cfft_radix4_init_f32+0x5c>
 80167f2:	d910      	bls.n	8016816 <arm_cfft_radix4_init_f32+0x36>
 80167f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80167f8:	d02b      	beq.n	8016852 <arm_cfft_radix4_init_f32+0x72>
 80167fa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80167fe:	d119      	bne.n	8016834 <arm_cfft_radix4_init_f32+0x54>
 8016800:	4a1f      	ldr	r2, [pc, #124]	; (8016880 <arm_cfft_radix4_init_f32+0xa0>)
 8016802:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8016806:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 801680a:	e9c0 2102 	strd	r2, r1, [r0, #8]
 801680e:	6103      	str	r3, [r0, #16]
 8016810:	2000      	movs	r0, #0
 8016812:	bc10      	pop	{r4}
 8016814:	4770      	bx	lr
 8016816:	2910      	cmp	r1, #16
 8016818:	d025      	beq.n	8016866 <arm_cfft_radix4_init_f32+0x86>
 801681a:	2940      	cmp	r1, #64	; 0x40
 801681c:	d10a      	bne.n	8016834 <arm_cfft_radix4_init_f32+0x54>
 801681e:	4a19      	ldr	r2, [pc, #100]	; (8016884 <arm_cfft_radix4_init_f32+0xa4>)
 8016820:	f04f 1140 	mov.w	r1, #4194368	; 0x400040
 8016824:	e9c0 2102 	strd	r2, r1, [r0, #8]
 8016828:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000
 801682c:	6103      	str	r3, [r0, #16]
 801682e:	bc10      	pop	{r4}
 8016830:	2000      	movs	r0, #0
 8016832:	4770      	bx	lr
 8016834:	f04f 30ff 	mov.w	r0, #4294967295
 8016838:	bc10      	pop	{r4}
 801683a:	4770      	bx	lr
 801683c:	4a12      	ldr	r2, [pc, #72]	; (8016888 <arm_cfft_radix4_init_f32+0xa8>)
 801683e:	f04f 1110 	mov.w	r1, #1048592	; 0x100010
 8016842:	e9c0 2102 	strd	r2, r1, [r0, #8]
 8016846:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 801684a:	6103      	str	r3, [r0, #16]
 801684c:	bc10      	pop	{r4}
 801684e:	2000      	movs	r0, #0
 8016850:	4770      	bx	lr
 8016852:	4a0e      	ldr	r2, [pc, #56]	; (801688c <arm_cfft_radix4_init_f32+0xac>)
 8016854:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 8016858:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 801685c:	e9c0 2102 	strd	r2, r1, [r0, #8]
 8016860:	6103      	str	r3, [r0, #16]
 8016862:	2000      	movs	r0, #0
 8016864:	e7d5      	b.n	8016812 <arm_cfft_radix4_init_f32+0x32>
 8016866:	4a0a      	ldr	r2, [pc, #40]	; (8016890 <arm_cfft_radix4_init_f32+0xb0>)
 8016868:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
 801686c:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8016870:	e9c0 2102 	strd	r2, r1, [r0, #8]
 8016874:	6103      	str	r3, [r0, #16]
 8016876:	2000      	movs	r0, #0
 8016878:	e7cb      	b.n	8016812 <arm_cfft_radix4_init_f32+0x32>
 801687a:	bf00      	nop
 801687c:	08019200 	.word	0x08019200
 8016880:	08018a00 	.word	0x08018a00
 8016884:	08018a7e 	.word	0x08018a7e
 8016888:	08018a1e 	.word	0x08018a1e
 801688c:	08018a06 	.word	0x08018a06
 8016890:	08018bfe 	.word	0x08018bfe

08016894 <arm_radix4_butterfly_f32>:
 8016894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016898:	b0a1      	sub	sp, #132	; 0x84
 801689a:	088c      	lsrs	r4, r1, #2
 801689c:	4605      	mov	r5, r0
 801689e:	9113      	str	r1, [sp, #76]	; 0x4c
 80168a0:	00e1      	lsls	r1, r4, #3
 80168a2:	186e      	adds	r6, r5, r1
 80168a4:	4608      	mov	r0, r1
 80168a6:	9112      	str	r1, [sp, #72]	; 0x48
 80168a8:	ebc4 7144 	rsb	r1, r4, r4, lsl #29
 80168ac:	9500      	str	r5, [sp, #0]
 80168ae:	00c9      	lsls	r1, r1, #3
 80168b0:	4605      	mov	r5, r0
 80168b2:	1830      	adds	r0, r6, r0
 80168b4:	1847      	adds	r7, r0, r1
 80168b6:	469c      	mov	ip, r3
 80168b8:	931f      	str	r3, [sp, #124]	; 0x7c
 80168ba:	197b      	adds	r3, r7, r5
 80168bc:	1859      	adds	r1, r3, r1
 80168be:	9110      	str	r1, [sp, #64]	; 0x40
 80168c0:	3004      	adds	r0, #4
 80168c2:	9016      	str	r0, [sp, #88]	; 0x58
 80168c4:	1d18      	adds	r0, r3, #4
 80168c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80168c8:	921a      	str	r2, [sp, #104]	; 0x68
 80168ca:	3304      	adds	r3, #4
 80168cc:	9315      	str	r3, [sp, #84]	; 0x54
 80168ce:	1d3b      	adds	r3, r7, #4
 80168d0:	1d11      	adds	r1, r2, #4
 80168d2:	9309      	str	r3, [sp, #36]	; 0x24
 80168d4:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80168d8:	1d33      	adds	r3, r6, #4
 80168da:	4665      	mov	r5, ip
 80168dc:	9318      	str	r3, [sp, #96]	; 0x60
 80168de:	00d3      	lsls	r3, r2, #3
 80168e0:	931e      	str	r3, [sp, #120]	; 0x78
 80168e2:	012b      	lsls	r3, r5, #4
 80168e4:	931d      	str	r3, [sp, #116]	; 0x74
 80168e6:	00eb      	lsls	r3, r5, #3
 80168e8:	9d00      	ldr	r5, [sp, #0]
 80168ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80168ec:	e9cd 1101 	strd	r1, r1, [sp, #4]
 80168f0:	0126      	lsls	r6, r4, #4
 80168f2:	931c      	str	r3, [sp, #112]	; 0x70
 80168f4:	1d2b      	adds	r3, r5, #4
 80168f6:	2500      	movs	r5, #0
 80168f8:	9308      	str	r3, [sp, #32]
 80168fa:	9414      	str	r4, [sp, #80]	; 0x50
 80168fc:	4633      	mov	r3, r6
 80168fe:	970a      	str	r7, [sp, #40]	; 0x28
 8016900:	9119      	str	r1, [sp, #100]	; 0x64
 8016902:	9017      	str	r0, [sp, #92]	; 0x5c
 8016904:	9411      	str	r4, [sp, #68]	; 0x44
 8016906:	9103      	str	r1, [sp, #12]
 8016908:	462e      	mov	r6, r5
 801690a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801690c:	9a00      	ldr	r2, [sp, #0]
 801690e:	f851 a036 	ldr.w	sl, [r1, r6, lsl #3]
 8016912:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016914:	9f08      	ldr	r7, [sp, #32]
 8016916:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016918:	f852 4036 	ldr.w	r4, [r2, r6, lsl #3]
 801691c:	f850 b036 	ldr.w	fp, [r0, r6, lsl #3]
 8016920:	58d2      	ldr	r2, [r2, r3]
 8016922:	f857 9036 	ldr.w	r9, [r7, r6, lsl #3]
 8016926:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016928:	f851 7036 	ldr.w	r7, [r1, r6, lsl #3]
 801692c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801692e:	58c5      	ldr	r5, [r0, r3]
 8016930:	f851 8003 	ldr.w	r8, [r1, r3]
 8016934:	930f      	str	r3, [sp, #60]	; 0x3c
 8016936:	4611      	mov	r1, r2
 8016938:	4620      	mov	r0, r4
 801693a:	920b      	str	r2, [sp, #44]	; 0x2c
 801693c:	f7ea f90e 	bl	8000b5c <__addsf3>
 8016940:	4629      	mov	r1, r5
 8016942:	9004      	str	r0, [sp, #16]
 8016944:	4658      	mov	r0, fp
 8016946:	f7ea f909 	bl	8000b5c <__addsf3>
 801694a:	4651      	mov	r1, sl
 801694c:	9005      	str	r0, [sp, #20]
 801694e:	4648      	mov	r0, r9
 8016950:	f7ea f904 	bl	8000b5c <__addsf3>
 8016954:	4641      	mov	r1, r8
 8016956:	9007      	str	r0, [sp, #28]
 8016958:	4638      	mov	r0, r7
 801695a:	f7ea f8ff 	bl	8000b5c <__addsf3>
 801695e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016960:	9006      	str	r0, [sp, #24]
 8016962:	4611      	mov	r1, r2
 8016964:	4620      	mov	r0, r4
 8016966:	f7ea f8f7 	bl	8000b58 <__aeabi_fsub>
 801696a:	4629      	mov	r1, r5
 801696c:	4604      	mov	r4, r0
 801696e:	4658      	mov	r0, fp
 8016970:	f7ea f8f2 	bl	8000b58 <__aeabi_fsub>
 8016974:	4651      	mov	r1, sl
 8016976:	4605      	mov	r5, r0
 8016978:	4648      	mov	r0, r9
 801697a:	f7ea f8ed 	bl	8000b58 <__aeabi_fsub>
 801697e:	4641      	mov	r1, r8
 8016980:	4681      	mov	r9, r0
 8016982:	4638      	mov	r0, r7
 8016984:	f7ea f8e8 	bl	8000b58 <__aeabi_fsub>
 8016988:	9905      	ldr	r1, [sp, #20]
 801698a:	4607      	mov	r7, r0
 801698c:	9804      	ldr	r0, [sp, #16]
 801698e:	f7ea f8e5 	bl	8000b5c <__addsf3>
 8016992:	9b03      	ldr	r3, [sp, #12]
 8016994:	f853 bc04 	ldr.w	fp, [r3, #-4]
 8016998:	f8d3 a000 	ldr.w	sl, [r3]
 801699c:	9b00      	ldr	r3, [sp, #0]
 801699e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80169a2:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
 80169a6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80169aa:	9906      	ldr	r1, [sp, #24]
 80169ac:	4650      	mov	r0, sl
 80169ae:	f7ea f8d5 	bl	8000b5c <__addsf3>
 80169b2:	9a08      	ldr	r2, [sp, #32]
 80169b4:	4639      	mov	r1, r7
 80169b6:	f842 0036 	str.w	r0, [r2, r6, lsl #3]
 80169ba:	4620      	mov	r0, r4
 80169bc:	f7ea f8ce 	bl	8000b5c <__addsf3>
 80169c0:	4629      	mov	r1, r5
 80169c2:	9007      	str	r0, [sp, #28]
 80169c4:	4648      	mov	r0, r9
 80169c6:	f7ea f8c7 	bl	8000b58 <__aeabi_fsub>
 80169ca:	9905      	ldr	r1, [sp, #20]
 80169cc:	4680      	mov	r8, r0
 80169ce:	9804      	ldr	r0, [sp, #16]
 80169d0:	f7ea f8c2 	bl	8000b58 <__aeabi_fsub>
 80169d4:	9906      	ldr	r1, [sp, #24]
 80169d6:	9004      	str	r0, [sp, #16]
 80169d8:	4650      	mov	r0, sl
 80169da:	f7ea f8bd 	bl	8000b58 <__aeabi_fsub>
 80169de:	4639      	mov	r1, r7
 80169e0:	4682      	mov	sl, r0
 80169e2:	4620      	mov	r0, r4
 80169e4:	f7ea f8b8 	bl	8000b58 <__aeabi_fsub>
 80169e8:	4649      	mov	r1, r9
 80169ea:	9005      	str	r0, [sp, #20]
 80169ec:	4628      	mov	r0, r5
 80169ee:	f7ea f8b5 	bl	8000b5c <__addsf3>
 80169f2:	9902      	ldr	r1, [sp, #8]
 80169f4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80169f8:	680d      	ldr	r5, [r1, #0]
 80169fa:	9901      	ldr	r1, [sp, #4]
 80169fc:	920c      	str	r2, [sp, #48]	; 0x30
 80169fe:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8016a02:	f8d1 9000 	ldr.w	r9, [r1]
 8016a06:	4604      	mov	r4, r0
 8016a08:	4611      	mov	r1, r2
 8016a0a:	9807      	ldr	r0, [sp, #28]
 8016a0c:	f7ea f9ae 	bl	8000d6c <__aeabi_fmul>
 8016a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a12:	9006      	str	r0, [sp, #24]
 8016a14:	4611      	mov	r1, r2
 8016a16:	4640      	mov	r0, r8
 8016a18:	f7ea f9a8 	bl	8000d6c <__aeabi_fmul>
 8016a1c:	9904      	ldr	r1, [sp, #16]
 8016a1e:	900c      	str	r0, [sp, #48]	; 0x30
 8016a20:	4658      	mov	r0, fp
 8016a22:	f7ea f9a3 	bl	8000d6c <__aeabi_fmul>
 8016a26:	4651      	mov	r1, sl
 8016a28:	900e      	str	r0, [sp, #56]	; 0x38
 8016a2a:	4658      	mov	r0, fp
 8016a2c:	f7ea f99e 	bl	8000d6c <__aeabi_fmul>
 8016a30:	4639      	mov	r1, r7
 8016a32:	4683      	mov	fp, r0
 8016a34:	9805      	ldr	r0, [sp, #20]
 8016a36:	f7ea f999 	bl	8000d6c <__aeabi_fmul>
 8016a3a:	4639      	mov	r1, r7
 8016a3c:	900d      	str	r0, [sp, #52]	; 0x34
 8016a3e:	4620      	mov	r0, r4
 8016a40:	f7ea f994 	bl	8000d6c <__aeabi_fmul>
 8016a44:	4651      	mov	r1, sl
 8016a46:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8016a4a:	4607      	mov	r7, r0
 8016a4c:	4650      	mov	r0, sl
 8016a4e:	f7ea f98d 	bl	8000d6c <__aeabi_fmul>
 8016a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a54:	4611      	mov	r1, r2
 8016a56:	f7ea f881 	bl	8000b5c <__addsf3>
 8016a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a5c:	9904      	ldr	r1, [sp, #16]
 8016a5e:	f842 0036 	str.w	r0, [r2, r6, lsl #3]
 8016a62:	4650      	mov	r0, sl
 8016a64:	f7ea f982 	bl	8000d6c <__aeabi_fmul>
 8016a68:	4601      	mov	r1, r0
 8016a6a:	4658      	mov	r0, fp
 8016a6c:	f7ea f874 	bl	8000b58 <__aeabi_fsub>
 8016a70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a72:	4629      	mov	r1, r5
 8016a74:	f842 0036 	str.w	r0, [r2, r6, lsl #3]
 8016a78:	4640      	mov	r0, r8
 8016a7a:	f7ea f977 	bl	8000d6c <__aeabi_fmul>
 8016a7e:	9906      	ldr	r1, [sp, #24]
 8016a80:	f7ea f86c 	bl	8000b5c <__addsf3>
 8016a84:	9b00      	ldr	r3, [sp, #0]
 8016a86:	461a      	mov	r2, r3
 8016a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a8a:	9304      	str	r3, [sp, #16]
 8016a8c:	50d0      	str	r0, [r2, r3]
 8016a8e:	4629      	mov	r1, r5
 8016a90:	9807      	ldr	r0, [sp, #28]
 8016a92:	f7ea f96b 	bl	8000d6c <__aeabi_fmul>
 8016a96:	4601      	mov	r1, r0
 8016a98:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016a9a:	f7ea f85d 	bl	8000b58 <__aeabi_fsub>
 8016a9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016aa0:	4649      	mov	r1, r9
 8016aa2:	f842 0036 	str.w	r0, [r2, r6, lsl #3]
 8016aa6:	4620      	mov	r0, r4
 8016aa8:	f7ea f960 	bl	8000d6c <__aeabi_fmul>
 8016aac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016aae:	f7ea f855 	bl	8000b5c <__addsf3>
 8016ab2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016ab4:	9b04      	ldr	r3, [sp, #16]
 8016ab6:	4649      	mov	r1, r9
 8016ab8:	50d0      	str	r0, [r2, r3]
 8016aba:	9805      	ldr	r0, [sp, #20]
 8016abc:	f7ea f956 	bl	8000d6c <__aeabi_fmul>
 8016ac0:	4601      	mov	r1, r0
 8016ac2:	4638      	mov	r0, r7
 8016ac4:	f7ea f848 	bl	8000b58 <__aeabi_fsub>
 8016ac8:	9b03      	ldr	r3, [sp, #12]
 8016aca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016acc:	9902      	ldr	r1, [sp, #8]
 8016ace:	4413      	add	r3, r2
 8016ad0:	9303      	str	r3, [sp, #12]
 8016ad2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016ad4:	18cb      	adds	r3, r1, r3
 8016ad6:	9302      	str	r3, [sp, #8]
 8016ad8:	9901      	ldr	r1, [sp, #4]
 8016ada:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016adc:	18cb      	adds	r3, r1, r3
 8016ade:	9301      	str	r3, [sp, #4]
 8016ae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ae2:	461a      	mov	r2, r3
 8016ae4:	9b04      	ldr	r3, [sp, #16]
 8016ae6:	50d0      	str	r0, [r2, r3]
 8016ae8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016aea:	3601      	adds	r6, #1
 8016aec:	42b2      	cmp	r2, r6
 8016aee:	f103 0308 	add.w	r3, r3, #8
 8016af2:	f47f af0a 	bne.w	801690a <arm_radix4_butterfly_f32+0x76>
 8016af6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016af8:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8016afc:	921b      	str	r2, [sp, #108]	; 0x6c
 8016afe:	009b      	lsls	r3, r3, #2
 8016b00:	b29b      	uxth	r3, r3
 8016b02:	2a04      	cmp	r2, #4
 8016b04:	9317      	str	r3, [sp, #92]	; 0x5c
 8016b06:	f240 8121 	bls.w	8016d4c <arm_radix4_butterfly_f32+0x4b8>
 8016b0a:	921c      	str	r2, [sp, #112]	; 0x70
 8016b0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b0e:	089b      	lsrs	r3, r3, #2
 8016b10:	00da      	lsls	r2, r3, #3
 8016b12:	9318      	str	r3, [sp, #96]	; 0x60
 8016b14:	9b00      	ldr	r3, [sp, #0]
 8016b16:	9215      	str	r2, [sp, #84]	; 0x54
 8016b18:	4413      	add	r3, r2
 8016b1a:	189a      	adds	r2, r3, r2
 8016b1c:	3304      	adds	r3, #4
 8016b1e:	2100      	movs	r1, #0
 8016b20:	9309      	str	r3, [sp, #36]	; 0x24
 8016b22:	1d13      	adds	r3, r2, #4
 8016b24:	9202      	str	r2, [sp, #8]
 8016b26:	9114      	str	r1, [sp, #80]	; 0x50
 8016b28:	9301      	str	r3, [sp, #4]
 8016b2a:	9116      	str	r1, [sp, #88]	; 0x58
 8016b2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016b2e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016b30:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016b32:	010a      	lsls	r2, r1, #4
 8016b34:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8016b38:	5884      	ldr	r4, [r0, r2]
 8016b3a:	940d      	str	r4, [sp, #52]	; 0x34
 8016b3c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8016b3e:	58a2      	ldr	r2, [r4, r2]
 8016b40:	920e      	str	r2, [sp, #56]	; 0x38
 8016b42:	4602      	mov	r2, r0
 8016b44:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8016b48:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
 8016b4c:	9310      	str	r3, [sp, #64]	; 0x40
 8016b4e:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8016b52:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b54:	f854 3031 	ldr.w	r3, [r4, r1, lsl #3]
 8016b58:	930c      	str	r3, [sp, #48]	; 0x30
 8016b5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016b5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8016b60:	18cb      	adds	r3, r1, r3
 8016b62:	9316      	str	r3, [sp, #88]	; 0x58
 8016b64:	46ab      	mov	fp, r5
 8016b66:	4613      	mov	r3, r2
 8016b68:	9900      	ldr	r1, [sp, #0]
 8016b6a:	9d02      	ldr	r5, [sp, #8]
 8016b6c:	58ce      	ldr	r6, [r1, r3]
 8016b6e:	9603      	str	r6, [sp, #12]
 8016b70:	9e08      	ldr	r6, [sp, #32]
 8016b72:	f855 203b 	ldr.w	r2, [r5, fp, lsl #3]
 8016b76:	f851 403b 	ldr.w	r4, [r1, fp, lsl #3]
 8016b7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016b7c:	f856 903b 	ldr.w	r9, [r6, fp, lsl #3]
 8016b80:	9e01      	ldr	r6, [sp, #4]
 8016b82:	f851 703b 	ldr.w	r7, [r1, fp, lsl #3]
 8016b86:	f856 8003 	ldr.w	r8, [r6, r3]
 8016b8a:	58ed      	ldr	r5, [r5, r3]
 8016b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8016b8e:	4611      	mov	r1, r2
 8016b90:	4620      	mov	r0, r4
 8016b92:	9207      	str	r2, [sp, #28]
 8016b94:	f7e9 ffe0 	bl	8000b58 <__aeabi_fsub>
 8016b98:	4629      	mov	r1, r5
 8016b9a:	9004      	str	r0, [sp, #16]
 8016b9c:	9803      	ldr	r0, [sp, #12]
 8016b9e:	f856 a03b 	ldr.w	sl, [r6, fp, lsl #3]
 8016ba2:	f7e9 ffd9 	bl	8000b58 <__aeabi_fsub>
 8016ba6:	4651      	mov	r1, sl
 8016ba8:	9005      	str	r0, [sp, #20]
 8016baa:	4648      	mov	r0, r9
 8016bac:	f7e9 ffd4 	bl	8000b58 <__aeabi_fsub>
 8016bb0:	4641      	mov	r1, r8
 8016bb2:	9006      	str	r0, [sp, #24]
 8016bb4:	4638      	mov	r0, r7
 8016bb6:	f7e9 ffcf 	bl	8000b58 <__aeabi_fsub>
 8016bba:	9a07      	ldr	r2, [sp, #28]
 8016bbc:	4606      	mov	r6, r0
 8016bbe:	4611      	mov	r1, r2
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	f7e9 ffcb 	bl	8000b5c <__addsf3>
 8016bc6:	4629      	mov	r1, r5
 8016bc8:	4604      	mov	r4, r0
 8016bca:	9803      	ldr	r0, [sp, #12]
 8016bcc:	f7e9 ffc6 	bl	8000b5c <__addsf3>
 8016bd0:	4651      	mov	r1, sl
 8016bd2:	4605      	mov	r5, r0
 8016bd4:	4648      	mov	r0, r9
 8016bd6:	f7e9 ffc1 	bl	8000b5c <__addsf3>
 8016bda:	4641      	mov	r1, r8
 8016bdc:	4681      	mov	r9, r0
 8016bde:	4638      	mov	r0, r7
 8016be0:	f7e9 ffbc 	bl	8000b5c <__addsf3>
 8016be4:	4631      	mov	r1, r6
 8016be6:	4680      	mov	r8, r0
 8016be8:	9804      	ldr	r0, [sp, #16]
 8016bea:	f7e9 ffb7 	bl	8000b5c <__addsf3>
 8016bee:	9905      	ldr	r1, [sp, #20]
 8016bf0:	9003      	str	r0, [sp, #12]
 8016bf2:	9806      	ldr	r0, [sp, #24]
 8016bf4:	f7e9 ffb0 	bl	8000b58 <__aeabi_fsub>
 8016bf8:	4629      	mov	r1, r5
 8016bfa:	9007      	str	r0, [sp, #28]
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	f7e9 ffab 	bl	8000b58 <__aeabi_fsub>
 8016c02:	4641      	mov	r1, r8
 8016c04:	4682      	mov	sl, r0
 8016c06:	4648      	mov	r0, r9
 8016c08:	f7e9 ffa6 	bl	8000b58 <__aeabi_fsub>
 8016c0c:	4631      	mov	r1, r6
 8016c0e:	4607      	mov	r7, r0
 8016c10:	9804      	ldr	r0, [sp, #16]
 8016c12:	f7e9 ffa1 	bl	8000b58 <__aeabi_fsub>
 8016c16:	9906      	ldr	r1, [sp, #24]
 8016c18:	9004      	str	r0, [sp, #16]
 8016c1a:	9805      	ldr	r0, [sp, #20]
 8016c1c:	f7e9 ff9e 	bl	8000b5c <__addsf3>
 8016c20:	4629      	mov	r1, r5
 8016c22:	4606      	mov	r6, r0
 8016c24:	4620      	mov	r0, r4
 8016c26:	f7e9 ff99 	bl	8000b5c <__addsf3>
 8016c2a:	9b00      	ldr	r3, [sp, #0]
 8016c2c:	4641      	mov	r1, r8
 8016c2e:	f843 003b 	str.w	r0, [r3, fp, lsl #3]
 8016c32:	4648      	mov	r0, r9
 8016c34:	f7e9 ff92 	bl	8000b5c <__addsf3>
 8016c38:	9a08      	ldr	r2, [sp, #32]
 8016c3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016c3c:	f842 003b 	str.w	r0, [r2, fp, lsl #3]
 8016c40:	9903      	ldr	r1, [sp, #12]
 8016c42:	4620      	mov	r0, r4
 8016c44:	f7ea f892 	bl	8000d6c <__aeabi_fmul>
 8016c48:	9907      	ldr	r1, [sp, #28]
 8016c4a:	4681      	mov	r9, r0
 8016c4c:	4620      	mov	r0, r4
 8016c4e:	f7ea f88d 	bl	8000d6c <__aeabi_fmul>
 8016c52:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016c54:	4680      	mov	r8, r0
 8016c56:	4651      	mov	r1, sl
 8016c58:	4620      	mov	r0, r4
 8016c5a:	f7ea f887 	bl	8000d6c <__aeabi_fmul>
 8016c5e:	4639      	mov	r1, r7
 8016c60:	9006      	str	r0, [sp, #24]
 8016c62:	4620      	mov	r0, r4
 8016c64:	f7ea f882 	bl	8000d6c <__aeabi_fmul>
 8016c68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016c6a:	9904      	ldr	r1, [sp, #16]
 8016c6c:	9005      	str	r0, [sp, #20]
 8016c6e:	4620      	mov	r0, r4
 8016c70:	f7ea f87c 	bl	8000d6c <__aeabi_fmul>
 8016c74:	4631      	mov	r1, r6
 8016c76:	4605      	mov	r5, r0
 8016c78:	4620      	mov	r0, r4
 8016c7a:	f7ea f877 	bl	8000d6c <__aeabi_fmul>
 8016c7e:	4639      	mov	r1, r7
 8016c80:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8016c82:	4604      	mov	r4, r0
 8016c84:	4638      	mov	r0, r7
 8016c86:	f7ea f871 	bl	8000d6c <__aeabi_fmul>
 8016c8a:	9a06      	ldr	r2, [sp, #24]
 8016c8c:	4611      	mov	r1, r2
 8016c8e:	f7e9 ff65 	bl	8000b5c <__addsf3>
 8016c92:	9b00      	ldr	r3, [sp, #0]
 8016c94:	461a      	mov	r2, r3
 8016c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c98:	9306      	str	r3, [sp, #24]
 8016c9a:	50d0      	str	r0, [r2, r3]
 8016c9c:	4651      	mov	r1, sl
 8016c9e:	4638      	mov	r0, r7
 8016ca0:	f7ea f864 	bl	8000d6c <__aeabi_fmul>
 8016ca4:	4601      	mov	r1, r0
 8016ca6:	9805      	ldr	r0, [sp, #20]
 8016ca8:	f7e9 ff56 	bl	8000b58 <__aeabi_fsub>
 8016cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cae:	9907      	ldr	r1, [sp, #28]
 8016cb0:	f843 003b 	str.w	r0, [r3, fp, lsl #3]
 8016cb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016cb8:	4650      	mov	r0, sl
 8016cba:	f7ea f857 	bl	8000d6c <__aeabi_fmul>
 8016cbe:	4649      	mov	r1, r9
 8016cc0:	f7e9 ff4c 	bl	8000b5c <__addsf3>
 8016cc4:	9f02      	ldr	r7, [sp, #8]
 8016cc6:	9903      	ldr	r1, [sp, #12]
 8016cc8:	f847 003b 	str.w	r0, [r7, fp, lsl #3]
 8016ccc:	4650      	mov	r0, sl
 8016cce:	f7ea f84d 	bl	8000d6c <__aeabi_fmul>
 8016cd2:	4601      	mov	r1, r0
 8016cd4:	4640      	mov	r0, r8
 8016cd6:	f7e9 ff3f 	bl	8000b58 <__aeabi_fsub>
 8016cda:	4631      	mov	r1, r6
 8016cdc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8016ce0:	9e01      	ldr	r6, [sp, #4]
 8016ce2:	f846 003b 	str.w	r0, [r6, fp, lsl #3]
 8016ce6:	4640      	mov	r0, r8
 8016ce8:	f7ea f840 	bl	8000d6c <__aeabi_fmul>
 8016cec:	4629      	mov	r1, r5
 8016cee:	f7e9 ff35 	bl	8000b5c <__addsf3>
 8016cf2:	9b06      	ldr	r3, [sp, #24]
 8016cf4:	9904      	ldr	r1, [sp, #16]
 8016cf6:	50f8      	str	r0, [r7, r3]
 8016cf8:	4640      	mov	r0, r8
 8016cfa:	9303      	str	r3, [sp, #12]
 8016cfc:	f7ea f836 	bl	8000d6c <__aeabi_fmul>
 8016d00:	4601      	mov	r1, r0
 8016d02:	4620      	mov	r0, r4
 8016d04:	f7e9 ff28 	bl	8000b58 <__aeabi_fsub>
 8016d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d0c:	449b      	add	fp, r3
 8016d0e:	9b03      	ldr	r3, [sp, #12]
 8016d10:	50f0      	str	r0, [r6, r3]
 8016d12:	4413      	add	r3, r2
 8016d14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016d16:	455a      	cmp	r2, fp
 8016d18:	f63f af26 	bhi.w	8016b68 <arm_radix4_butterfly_f32+0x2d4>
 8016d1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016d1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d20:	3208      	adds	r2, #8
 8016d22:	9215      	str	r2, [sp, #84]	; 0x54
 8016d24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016d26:	3301      	adds	r3, #1
 8016d28:	429a      	cmp	r2, r3
 8016d2a:	9314      	str	r3, [sp, #80]	; 0x50
 8016d2c:	f47f aefe 	bne.w	8016b2c <arm_radix4_butterfly_f32+0x298>
 8016d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016d34:	009b      	lsls	r3, r3, #2
 8016d36:	0892      	lsrs	r2, r2, #2
 8016d38:	b29b      	uxth	r3, r3
 8016d3a:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d3c:	2a04      	cmp	r2, #4
 8016d3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016d40:	921c      	str	r2, [sp, #112]	; 0x70
 8016d42:	9311      	str	r3, [sp, #68]	; 0x44
 8016d44:	d902      	bls.n	8016d4c <arm_radix4_butterfly_f32+0x4b8>
 8016d46:	00db      	lsls	r3, r3, #3
 8016d48:	9312      	str	r3, [sp, #72]	; 0x48
 8016d4a:	e6df      	b.n	8016b0c <arm_radix4_butterfly_f32+0x278>
 8016d4c:	9e00      	ldr	r6, [sp, #0]
 8016d4e:	3620      	adds	r6, #32
 8016d50:	f856 5c20 	ldr.w	r5, [r6, #-32]
 8016d54:	f856 7c10 	ldr.w	r7, [r6, #-16]
 8016d58:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8016d5c:	f856 2c14 	ldr.w	r2, [r6, #-20]
 8016d60:	9301      	str	r3, [sp, #4]
 8016d62:	4639      	mov	r1, r7
 8016d64:	4628      	mov	r0, r5
 8016d66:	9200      	str	r2, [sp, #0]
 8016d68:	f7e9 fef8 	bl	8000b5c <__addsf3>
 8016d6c:	4639      	mov	r1, r7
 8016d6e:	4681      	mov	r9, r0
 8016d70:	4628      	mov	r0, r5
 8016d72:	f7e9 fef1 	bl	8000b58 <__aeabi_fsub>
 8016d76:	f856 4c1c 	ldr.w	r4, [r6, #-28]
 8016d7a:	f856 8c0c 	ldr.w	r8, [r6, #-12]
 8016d7e:	f856 bc18 	ldr.w	fp, [r6, #-24]
 8016d82:	f856 ac04 	ldr.w	sl, [r6, #-4]
 8016d86:	4605      	mov	r5, r0
 8016d88:	4641      	mov	r1, r8
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f7e9 fee6 	bl	8000b5c <__addsf3>
 8016d90:	4641      	mov	r1, r8
 8016d92:	4607      	mov	r7, r0
 8016d94:	4620      	mov	r0, r4
 8016d96:	f7e9 fedf 	bl	8000b58 <__aeabi_fsub>
 8016d9a:	9901      	ldr	r1, [sp, #4]
 8016d9c:	4604      	mov	r4, r0
 8016d9e:	4658      	mov	r0, fp
 8016da0:	f7e9 fedc 	bl	8000b5c <__addsf3>
 8016da4:	4651      	mov	r1, sl
 8016da6:	9002      	str	r0, [sp, #8]
 8016da8:	9800      	ldr	r0, [sp, #0]
 8016daa:	f7e9 fed7 	bl	8000b5c <__addsf3>
 8016dae:	9901      	ldr	r1, [sp, #4]
 8016db0:	4680      	mov	r8, r0
 8016db2:	4658      	mov	r0, fp
 8016db4:	f7e9 fed0 	bl	8000b58 <__aeabi_fsub>
 8016db8:	4651      	mov	r1, sl
 8016dba:	4683      	mov	fp, r0
 8016dbc:	9800      	ldr	r0, [sp, #0]
 8016dbe:	f7e9 fecb 	bl	8000b58 <__aeabi_fsub>
 8016dc2:	9902      	ldr	r1, [sp, #8]
 8016dc4:	4682      	mov	sl, r0
 8016dc6:	4648      	mov	r0, r9
 8016dc8:	f7e9 fec8 	bl	8000b5c <__addsf3>
 8016dcc:	4641      	mov	r1, r8
 8016dce:	f846 0c20 	str.w	r0, [r6, #-32]
 8016dd2:	4638      	mov	r0, r7
 8016dd4:	f7e9 fec2 	bl	8000b5c <__addsf3>
 8016dd8:	9902      	ldr	r1, [sp, #8]
 8016dda:	f846 0c1c 	str.w	r0, [r6, #-28]
 8016dde:	4648      	mov	r0, r9
 8016de0:	f7e9 feba 	bl	8000b58 <__aeabi_fsub>
 8016de4:	4641      	mov	r1, r8
 8016de6:	f846 0c18 	str.w	r0, [r6, #-24]
 8016dea:	4638      	mov	r0, r7
 8016dec:	f7e9 feb4 	bl	8000b58 <__aeabi_fsub>
 8016df0:	4651      	mov	r1, sl
 8016df2:	f846 0c14 	str.w	r0, [r6, #-20]
 8016df6:	4628      	mov	r0, r5
 8016df8:	f7e9 feb0 	bl	8000b5c <__addsf3>
 8016dfc:	4659      	mov	r1, fp
 8016dfe:	f846 0c10 	str.w	r0, [r6, #-16]
 8016e02:	4620      	mov	r0, r4
 8016e04:	f7e9 fea8 	bl	8000b58 <__aeabi_fsub>
 8016e08:	4651      	mov	r1, sl
 8016e0a:	f846 0c0c 	str.w	r0, [r6, #-12]
 8016e0e:	4628      	mov	r0, r5
 8016e10:	f7e9 fea2 	bl	8000b58 <__aeabi_fsub>
 8016e14:	4659      	mov	r1, fp
 8016e16:	f846 0c08 	str.w	r0, [r6, #-8]
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	f7e9 fe9e 	bl	8000b5c <__addsf3>
 8016e20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e22:	f846 0c04 	str.w	r0, [r6, #-4]
 8016e26:	3b01      	subs	r3, #1
 8016e28:	f106 0620 	add.w	r6, r6, #32
 8016e2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8016e2e:	d18f      	bne.n	8016d50 <arm_radix4_butterfly_f32+0x4bc>
 8016e30:	b021      	add	sp, #132	; 0x84
 8016e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e36:	bf00      	nop

08016e38 <arm_radix4_butterfly_inverse_f32>:
 8016e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e3c:	b0a1      	sub	sp, #132	; 0x84
 8016e3e:	088c      	lsrs	r4, r1, #2
 8016e40:	9113      	str	r1, [sp, #76]	; 0x4c
 8016e42:	ebc4 7144 	rsb	r1, r4, r4, lsl #29
 8016e46:	eb00 1504 	add.w	r5, r0, r4, lsl #4
 8016e4a:	00c9      	lsls	r1, r1, #3
 8016e4c:	00e6      	lsls	r6, r4, #3
 8016e4e:	9000      	str	r0, [sp, #0]
 8016e50:	1868      	adds	r0, r5, r1
 8016e52:	1987      	adds	r7, r0, r6
 8016e54:	4439      	add	r1, r7
 8016e56:	4696      	mov	lr, r2
 8016e58:	921a      	str	r2, [sp, #104]	; 0x68
 8016e5a:	198a      	adds	r2, r1, r6
 8016e5c:	920f      	str	r2, [sp, #60]	; 0x3c
 8016e5e:	3104      	adds	r1, #4
 8016e60:	469c      	mov	ip, r3
 8016e62:	4672      	mov	r2, lr
 8016e64:	9116      	str	r1, [sp, #88]	; 0x58
 8016e66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016e68:	951b      	str	r5, [sp, #108]	; 0x6c
 8016e6a:	3204      	adds	r2, #4
 8016e6c:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8016e70:	3004      	adds	r0, #4
 8016e72:	3104      	adds	r1, #4
 8016e74:	9219      	str	r2, [sp, #100]	; 0x64
 8016e76:	9015      	str	r0, [sp, #84]	; 0x54
 8016e78:	9203      	str	r2, [sp, #12]
 8016e7a:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016e7e:	9800      	ldr	r0, [sp, #0]
 8016e80:	910a      	str	r1, [sp, #40]	; 0x28
 8016e82:	00da      	lsls	r2, r3, #3
 8016e84:	4663      	mov	r3, ip
 8016e86:	1d39      	adds	r1, r7, #4
 8016e88:	921e      	str	r2, [sp, #120]	; 0x78
 8016e8a:	011a      	lsls	r2, r3, #4
 8016e8c:	00db      	lsls	r3, r3, #3
 8016e8e:	9114      	str	r1, [sp, #80]	; 0x50
 8016e90:	931c      	str	r3, [sp, #112]	; 0x70
 8016e92:	1d29      	adds	r1, r5, #4
 8016e94:	1d03      	adds	r3, r0, #4
 8016e96:	2500      	movs	r5, #0
 8016e98:	9612      	str	r6, [sp, #72]	; 0x48
 8016e9a:	9308      	str	r3, [sp, #32]
 8016e9c:	9410      	str	r4, [sp, #64]	; 0x40
 8016e9e:	4633      	mov	r3, r6
 8016ea0:	9718      	str	r7, [sp, #96]	; 0x60
 8016ea2:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 8016ea6:	9117      	str	r1, [sp, #92]	; 0x5c
 8016ea8:	9411      	str	r4, [sp, #68]	; 0x44
 8016eaa:	921d      	str	r2, [sp, #116]	; 0x74
 8016eac:	462e      	mov	r6, r5
 8016eae:	9900      	ldr	r1, [sp, #0]
 8016eb0:	9f08      	ldr	r7, [sp, #32]
 8016eb2:	f851 b003 	ldr.w	fp, [r1, r3]
 8016eb6:	f851 4036 	ldr.w	r4, [r1, r6, lsl #3]
 8016eba:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016ebc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016ebe:	f851 a036 	ldr.w	sl, [r1, r6, lsl #3]
 8016ec2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016ec4:	f852 2036 	ldr.w	r2, [r2, r6, lsl #3]
 8016ec8:	f857 9036 	ldr.w	r9, [r7, r6, lsl #3]
 8016ecc:	f851 7036 	ldr.w	r7, [r1, r6, lsl #3]
 8016ed0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016ed2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8016ed4:	f851 8003 	ldr.w	r8, [r1, r3]
 8016ed8:	58ed      	ldr	r5, [r5, r3]
 8016eda:	930e      	str	r3, [sp, #56]	; 0x38
 8016edc:	4611      	mov	r1, r2
 8016ede:	4620      	mov	r0, r4
 8016ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8016ee2:	f7e9 fe3b 	bl	8000b5c <__addsf3>
 8016ee6:	4629      	mov	r1, r5
 8016ee8:	9004      	str	r0, [sp, #16]
 8016eea:	4658      	mov	r0, fp
 8016eec:	f7e9 fe36 	bl	8000b5c <__addsf3>
 8016ef0:	4651      	mov	r1, sl
 8016ef2:	9005      	str	r0, [sp, #20]
 8016ef4:	4648      	mov	r0, r9
 8016ef6:	f7e9 fe31 	bl	8000b5c <__addsf3>
 8016efa:	4641      	mov	r1, r8
 8016efc:	9006      	str	r0, [sp, #24]
 8016efe:	4638      	mov	r0, r7
 8016f00:	f7e9 fe2c 	bl	8000b5c <__addsf3>
 8016f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f06:	9007      	str	r0, [sp, #28]
 8016f08:	4611      	mov	r1, r2
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	f7e9 fe24 	bl	8000b58 <__aeabi_fsub>
 8016f10:	4629      	mov	r1, r5
 8016f12:	4604      	mov	r4, r0
 8016f14:	4658      	mov	r0, fp
 8016f16:	f7e9 fe1f 	bl	8000b58 <__aeabi_fsub>
 8016f1a:	4651      	mov	r1, sl
 8016f1c:	4683      	mov	fp, r0
 8016f1e:	4648      	mov	r0, r9
 8016f20:	f7e9 fe1a 	bl	8000b58 <__aeabi_fsub>
 8016f24:	4641      	mov	r1, r8
 8016f26:	4605      	mov	r5, r0
 8016f28:	4638      	mov	r0, r7
 8016f2a:	f7e9 fe15 	bl	8000b58 <__aeabi_fsub>
 8016f2e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016f32:	9905      	ldr	r1, [sp, #20]
 8016f34:	4607      	mov	r7, r0
 8016f36:	4650      	mov	r0, sl
 8016f38:	f7e9 fe10 	bl	8000b5c <__addsf3>
 8016f3c:	9b03      	ldr	r3, [sp, #12]
 8016f3e:	f8d3 c000 	ldr.w	ip, [r3]
 8016f42:	f853 9c04 	ldr.w	r9, [r3, #-4]
 8016f46:	9b00      	ldr	r3, [sp, #0]
 8016f48:	f8cd c010 	str.w	ip, [sp, #16]
 8016f4c:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
 8016f50:	9907      	ldr	r1, [sp, #28]
 8016f52:	9806      	ldr	r0, [sp, #24]
 8016f54:	f7e9 fe02 	bl	8000b5c <__addsf3>
 8016f58:	9a08      	ldr	r2, [sp, #32]
 8016f5a:	4639      	mov	r1, r7
 8016f5c:	f842 0036 	str.w	r0, [r2, r6, lsl #3]
 8016f60:	4620      	mov	r0, r4
 8016f62:	f7e9 fdf9 	bl	8000b58 <__aeabi_fsub>
 8016f66:	4629      	mov	r1, r5
 8016f68:	9009      	str	r0, [sp, #36]	; 0x24
 8016f6a:	4658      	mov	r0, fp
 8016f6c:	f7e9 fdf6 	bl	8000b5c <__addsf3>
 8016f70:	9905      	ldr	r1, [sp, #20]
 8016f72:	4680      	mov	r8, r0
 8016f74:	4650      	mov	r0, sl
 8016f76:	f7e9 fdef 	bl	8000b58 <__aeabi_fsub>
 8016f7a:	9907      	ldr	r1, [sp, #28]
 8016f7c:	4682      	mov	sl, r0
 8016f7e:	9806      	ldr	r0, [sp, #24]
 8016f80:	f7e9 fdea 	bl	8000b58 <__aeabi_fsub>
 8016f84:	4639      	mov	r1, r7
 8016f86:	9005      	str	r0, [sp, #20]
 8016f88:	4620      	mov	r0, r4
 8016f8a:	f7e9 fde7 	bl	8000b5c <__addsf3>
 8016f8e:	4659      	mov	r1, fp
 8016f90:	9006      	str	r0, [sp, #24]
 8016f92:	4628      	mov	r0, r5
 8016f94:	f7e9 fde0 	bl	8000b58 <__aeabi_fsub>
 8016f98:	9d02      	ldr	r5, [sp, #8]
 8016f9a:	9901      	ldr	r1, [sp, #4]
 8016f9c:	f855 bc04 	ldr.w	fp, [r5, #-4]
 8016fa0:	f8d1 e000 	ldr.w	lr, [r1]
 8016fa4:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8016fa8:	f8cd e01c 	str.w	lr, [sp, #28]
 8016fac:	4604      	mov	r4, r0
 8016fae:	4659      	mov	r1, fp
 8016fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016fb2:	682d      	ldr	r5, [r5, #0]
 8016fb4:	f7e9 feda 	bl	8000d6c <__aeabi_fmul>
 8016fb8:	4659      	mov	r1, fp
 8016fba:	900b      	str	r0, [sp, #44]	; 0x2c
 8016fbc:	4640      	mov	r0, r8
 8016fbe:	f7e9 fed5 	bl	8000d6c <__aeabi_fmul>
 8016fc2:	4651      	mov	r1, sl
 8016fc4:	900c      	str	r0, [sp, #48]	; 0x30
 8016fc6:	4648      	mov	r0, r9
 8016fc8:	f7e9 fed0 	bl	8000d6c <__aeabi_fmul>
 8016fcc:	9905      	ldr	r1, [sp, #20]
 8016fce:	4683      	mov	fp, r0
 8016fd0:	4648      	mov	r0, r9
 8016fd2:	f7e9 fecb 	bl	8000d6c <__aeabi_fmul>
 8016fd6:	4639      	mov	r1, r7
 8016fd8:	900d      	str	r0, [sp, #52]	; 0x34
 8016fda:	9806      	ldr	r0, [sp, #24]
 8016fdc:	f7e9 fec6 	bl	8000d6c <__aeabi_fmul>
 8016fe0:	4639      	mov	r1, r7
 8016fe2:	4681      	mov	r9, r0
 8016fe4:	4620      	mov	r0, r4
 8016fe6:	f7e9 fec1 	bl	8000d6c <__aeabi_fmul>
 8016fea:	9905      	ldr	r1, [sp, #20]
 8016fec:	4607      	mov	r7, r0
 8016fee:	9804      	ldr	r0, [sp, #16]
 8016ff0:	f7e9 febc 	bl	8000d6c <__aeabi_fmul>
 8016ff4:	4601      	mov	r1, r0
 8016ff6:	4658      	mov	r0, fp
 8016ff8:	f7e9 fdae 	bl	8000b58 <__aeabi_fsub>
 8016ffc:	9b00      	ldr	r3, [sp, #0]
 8016ffe:	4651      	mov	r1, sl
 8017000:	469a      	mov	sl, r3
 8017002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017004:	9305      	str	r3, [sp, #20]
 8017006:	f84a 0003 	str.w	r0, [sl, r3]
 801700a:	9804      	ldr	r0, [sp, #16]
 801700c:	f7e9 feae 	bl	8000d6c <__aeabi_fmul>
 8017010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017012:	4611      	mov	r1, r2
 8017014:	f7e9 fda2 	bl	8000b5c <__addsf3>
 8017018:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801701a:	4629      	mov	r1, r5
 801701c:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
 8017020:	4640      	mov	r0, r8
 8017022:	f7e9 fea3 	bl	8000d6c <__aeabi_fmul>
 8017026:	4601      	mov	r1, r0
 8017028:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801702a:	f7e9 fd95 	bl	8000b58 <__aeabi_fsub>
 801702e:	4629      	mov	r1, r5
 8017030:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017032:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
 8017036:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017038:	f7e9 fe98 	bl	8000d6c <__aeabi_fmul>
 801703c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801703e:	f7e9 fd8d 	bl	8000b5c <__addsf3>
 8017042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017044:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017048:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
 801704c:	4641      	mov	r1, r8
 801704e:	4620      	mov	r0, r4
 8017050:	f7e9 fe8c 	bl	8000d6c <__aeabi_fmul>
 8017054:	4601      	mov	r1, r0
 8017056:	4648      	mov	r0, r9
 8017058:	f7e9 fd7e 	bl	8000b58 <__aeabi_fsub>
 801705c:	9b05      	ldr	r3, [sp, #20]
 801705e:	9304      	str	r3, [sp, #16]
 8017060:	50e8      	str	r0, [r5, r3]
 8017062:	4641      	mov	r1, r8
 8017064:	9806      	ldr	r0, [sp, #24]
 8017066:	f7e9 fe81 	bl	8000d6c <__aeabi_fmul>
 801706a:	4639      	mov	r1, r7
 801706c:	f7e9 fd76 	bl	8000b5c <__addsf3>
 8017070:	9b03      	ldr	r3, [sp, #12]
 8017072:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8017074:	9d02      	ldr	r5, [sp, #8]
 8017076:	9a01      	ldr	r2, [sp, #4]
 8017078:	991e      	ldr	r1, [sp, #120]	; 0x78
 801707a:	191c      	adds	r4, r3, r4
 801707c:	9403      	str	r4, [sp, #12]
 801707e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017080:	440a      	add	r2, r1
 8017082:	192c      	adds	r4, r5, r4
 8017084:	9201      	str	r2, [sp, #4]
 8017086:	9402      	str	r4, [sp, #8]
 8017088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801708a:	461a      	mov	r2, r3
 801708c:	9b04      	ldr	r3, [sp, #16]
 801708e:	50d0      	str	r0, [r2, r3]
 8017090:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017092:	3601      	adds	r6, #1
 8017094:	42b2      	cmp	r2, r6
 8017096:	f103 0308 	add.w	r3, r3, #8
 801709a:	f47f af08 	bne.w	8016eae <arm_radix4_butterfly_inverse_f32+0x76>
 801709e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80170a0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80170a4:	921b      	str	r2, [sp, #108]	; 0x6c
 80170a6:	009b      	lsls	r3, r3, #2
 80170a8:	b29b      	uxth	r3, r3
 80170aa:	2a04      	cmp	r2, #4
 80170ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80170ae:	f240 8121 	bls.w	80172f4 <arm_radix4_butterfly_inverse_f32+0x4bc>
 80170b2:	921c      	str	r2, [sp, #112]	; 0x70
 80170b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80170b6:	089b      	lsrs	r3, r3, #2
 80170b8:	00da      	lsls	r2, r3, #3
 80170ba:	9318      	str	r3, [sp, #96]	; 0x60
 80170bc:	9b00      	ldr	r3, [sp, #0]
 80170be:	9215      	str	r2, [sp, #84]	; 0x54
 80170c0:	4413      	add	r3, r2
 80170c2:	189a      	adds	r2, r3, r2
 80170c4:	3304      	adds	r3, #4
 80170c6:	2100      	movs	r1, #0
 80170c8:	9309      	str	r3, [sp, #36]	; 0x24
 80170ca:	1d13      	adds	r3, r2, #4
 80170cc:	9202      	str	r2, [sp, #8]
 80170ce:	9114      	str	r1, [sp, #80]	; 0x50
 80170d0:	9301      	str	r3, [sp, #4]
 80170d2:	9116      	str	r1, [sp, #88]	; 0x58
 80170d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80170d6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80170d8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80170da:	010a      	lsls	r2, r1, #4
 80170dc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80170e0:	5884      	ldr	r4, [r0, r2]
 80170e2:	940d      	str	r4, [sp, #52]	; 0x34
 80170e4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80170e6:	58a2      	ldr	r2, [r4, r2]
 80170e8:	920e      	str	r2, [sp, #56]	; 0x38
 80170ea:	4602      	mov	r2, r0
 80170ec:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 80170f0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
 80170f4:	9310      	str	r3, [sp, #64]	; 0x40
 80170f6:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80170fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80170fc:	f854 3031 	ldr.w	r3, [r4, r1, lsl #3]
 8017100:	930c      	str	r3, [sp, #48]	; 0x30
 8017102:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017104:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017106:	900f      	str	r0, [sp, #60]	; 0x3c
 8017108:	18cb      	adds	r3, r1, r3
 801710a:	9316      	str	r3, [sp, #88]	; 0x58
 801710c:	46ab      	mov	fp, r5
 801710e:	4613      	mov	r3, r2
 8017110:	9900      	ldr	r1, [sp, #0]
 8017112:	9d02      	ldr	r5, [sp, #8]
 8017114:	58ce      	ldr	r6, [r1, r3]
 8017116:	9603      	str	r6, [sp, #12]
 8017118:	9e08      	ldr	r6, [sp, #32]
 801711a:	f855 203b 	ldr.w	r2, [r5, fp, lsl #3]
 801711e:	f851 403b 	ldr.w	r4, [r1, fp, lsl #3]
 8017122:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017124:	f856 903b 	ldr.w	r9, [r6, fp, lsl #3]
 8017128:	9e01      	ldr	r6, [sp, #4]
 801712a:	f851 703b 	ldr.w	r7, [r1, fp, lsl #3]
 801712e:	f856 8003 	ldr.w	r8, [r6, r3]
 8017132:	58ed      	ldr	r5, [r5, r3]
 8017134:	930a      	str	r3, [sp, #40]	; 0x28
 8017136:	4611      	mov	r1, r2
 8017138:	4620      	mov	r0, r4
 801713a:	9207      	str	r2, [sp, #28]
 801713c:	f7e9 fd0c 	bl	8000b58 <__aeabi_fsub>
 8017140:	4629      	mov	r1, r5
 8017142:	9004      	str	r0, [sp, #16]
 8017144:	9803      	ldr	r0, [sp, #12]
 8017146:	f856 a03b 	ldr.w	sl, [r6, fp, lsl #3]
 801714a:	f7e9 fd05 	bl	8000b58 <__aeabi_fsub>
 801714e:	4651      	mov	r1, sl
 8017150:	9005      	str	r0, [sp, #20]
 8017152:	4648      	mov	r0, r9
 8017154:	f7e9 fd00 	bl	8000b58 <__aeabi_fsub>
 8017158:	4641      	mov	r1, r8
 801715a:	9006      	str	r0, [sp, #24]
 801715c:	4638      	mov	r0, r7
 801715e:	f7e9 fcfb 	bl	8000b58 <__aeabi_fsub>
 8017162:	9a07      	ldr	r2, [sp, #28]
 8017164:	4606      	mov	r6, r0
 8017166:	4611      	mov	r1, r2
 8017168:	4620      	mov	r0, r4
 801716a:	f7e9 fcf7 	bl	8000b5c <__addsf3>
 801716e:	4629      	mov	r1, r5
 8017170:	4604      	mov	r4, r0
 8017172:	9803      	ldr	r0, [sp, #12]
 8017174:	f7e9 fcf2 	bl	8000b5c <__addsf3>
 8017178:	4651      	mov	r1, sl
 801717a:	4605      	mov	r5, r0
 801717c:	4648      	mov	r0, r9
 801717e:	f7e9 fced 	bl	8000b5c <__addsf3>
 8017182:	4641      	mov	r1, r8
 8017184:	4681      	mov	r9, r0
 8017186:	4638      	mov	r0, r7
 8017188:	f7e9 fce8 	bl	8000b5c <__addsf3>
 801718c:	4631      	mov	r1, r6
 801718e:	4680      	mov	r8, r0
 8017190:	9804      	ldr	r0, [sp, #16]
 8017192:	f7e9 fce1 	bl	8000b58 <__aeabi_fsub>
 8017196:	9906      	ldr	r1, [sp, #24]
 8017198:	9003      	str	r0, [sp, #12]
 801719a:	9805      	ldr	r0, [sp, #20]
 801719c:	f7e9 fcde 	bl	8000b5c <__addsf3>
 80171a0:	4629      	mov	r1, r5
 80171a2:	9007      	str	r0, [sp, #28]
 80171a4:	4620      	mov	r0, r4
 80171a6:	f7e9 fcd7 	bl	8000b58 <__aeabi_fsub>
 80171aa:	4641      	mov	r1, r8
 80171ac:	4682      	mov	sl, r0
 80171ae:	4648      	mov	r0, r9
 80171b0:	f7e9 fcd2 	bl	8000b58 <__aeabi_fsub>
 80171b4:	4631      	mov	r1, r6
 80171b6:	4607      	mov	r7, r0
 80171b8:	9804      	ldr	r0, [sp, #16]
 80171ba:	f7e9 fccf 	bl	8000b5c <__addsf3>
 80171be:	9905      	ldr	r1, [sp, #20]
 80171c0:	9004      	str	r0, [sp, #16]
 80171c2:	9806      	ldr	r0, [sp, #24]
 80171c4:	f7e9 fcc8 	bl	8000b58 <__aeabi_fsub>
 80171c8:	4629      	mov	r1, r5
 80171ca:	4606      	mov	r6, r0
 80171cc:	4620      	mov	r0, r4
 80171ce:	f7e9 fcc5 	bl	8000b5c <__addsf3>
 80171d2:	9b00      	ldr	r3, [sp, #0]
 80171d4:	4641      	mov	r1, r8
 80171d6:	f843 003b 	str.w	r0, [r3, fp, lsl #3]
 80171da:	4648      	mov	r0, r9
 80171dc:	f7e9 fcbe 	bl	8000b5c <__addsf3>
 80171e0:	9a08      	ldr	r2, [sp, #32]
 80171e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80171e4:	f842 003b 	str.w	r0, [r2, fp, lsl #3]
 80171e8:	9903      	ldr	r1, [sp, #12]
 80171ea:	4620      	mov	r0, r4
 80171ec:	f7e9 fdbe 	bl	8000d6c <__aeabi_fmul>
 80171f0:	9907      	ldr	r1, [sp, #28]
 80171f2:	4681      	mov	r9, r0
 80171f4:	4620      	mov	r0, r4
 80171f6:	f7e9 fdb9 	bl	8000d6c <__aeabi_fmul>
 80171fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80171fc:	4680      	mov	r8, r0
 80171fe:	4651      	mov	r1, sl
 8017200:	4620      	mov	r0, r4
 8017202:	f7e9 fdb3 	bl	8000d6c <__aeabi_fmul>
 8017206:	4639      	mov	r1, r7
 8017208:	9006      	str	r0, [sp, #24]
 801720a:	4620      	mov	r0, r4
 801720c:	f7e9 fdae 	bl	8000d6c <__aeabi_fmul>
 8017210:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017212:	9904      	ldr	r1, [sp, #16]
 8017214:	9005      	str	r0, [sp, #20]
 8017216:	4620      	mov	r0, r4
 8017218:	f7e9 fda8 	bl	8000d6c <__aeabi_fmul>
 801721c:	4631      	mov	r1, r6
 801721e:	4605      	mov	r5, r0
 8017220:	4620      	mov	r0, r4
 8017222:	f7e9 fda3 	bl	8000d6c <__aeabi_fmul>
 8017226:	4639      	mov	r1, r7
 8017228:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801722a:	4604      	mov	r4, r0
 801722c:	4638      	mov	r0, r7
 801722e:	f7e9 fd9d 	bl	8000d6c <__aeabi_fmul>
 8017232:	9a06      	ldr	r2, [sp, #24]
 8017234:	4601      	mov	r1, r0
 8017236:	4610      	mov	r0, r2
 8017238:	f7e9 fc8e 	bl	8000b58 <__aeabi_fsub>
 801723c:	9b00      	ldr	r3, [sp, #0]
 801723e:	461a      	mov	r2, r3
 8017240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017242:	9306      	str	r3, [sp, #24]
 8017244:	50d0      	str	r0, [r2, r3]
 8017246:	4651      	mov	r1, sl
 8017248:	4638      	mov	r0, r7
 801724a:	f7e9 fd8f 	bl	8000d6c <__aeabi_fmul>
 801724e:	9905      	ldr	r1, [sp, #20]
 8017250:	f7e9 fc84 	bl	8000b5c <__addsf3>
 8017254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017256:	9907      	ldr	r1, [sp, #28]
 8017258:	f843 003b 	str.w	r0, [r3, fp, lsl #3]
 801725c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017260:	4650      	mov	r0, sl
 8017262:	f7e9 fd83 	bl	8000d6c <__aeabi_fmul>
 8017266:	4601      	mov	r1, r0
 8017268:	4648      	mov	r0, r9
 801726a:	f7e9 fc75 	bl	8000b58 <__aeabi_fsub>
 801726e:	9f02      	ldr	r7, [sp, #8]
 8017270:	9903      	ldr	r1, [sp, #12]
 8017272:	f847 003b 	str.w	r0, [r7, fp, lsl #3]
 8017276:	4650      	mov	r0, sl
 8017278:	f7e9 fd78 	bl	8000d6c <__aeabi_fmul>
 801727c:	4641      	mov	r1, r8
 801727e:	f7e9 fc6d 	bl	8000b5c <__addsf3>
 8017282:	4631      	mov	r1, r6
 8017284:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017288:	9e01      	ldr	r6, [sp, #4]
 801728a:	f846 003b 	str.w	r0, [r6, fp, lsl #3]
 801728e:	4640      	mov	r0, r8
 8017290:	f7e9 fd6c 	bl	8000d6c <__aeabi_fmul>
 8017294:	4601      	mov	r1, r0
 8017296:	4628      	mov	r0, r5
 8017298:	f7e9 fc5e 	bl	8000b58 <__aeabi_fsub>
 801729c:	9b06      	ldr	r3, [sp, #24]
 801729e:	9904      	ldr	r1, [sp, #16]
 80172a0:	50f8      	str	r0, [r7, r3]
 80172a2:	4640      	mov	r0, r8
 80172a4:	9303      	str	r3, [sp, #12]
 80172a6:	f7e9 fd61 	bl	8000d6c <__aeabi_fmul>
 80172aa:	4621      	mov	r1, r4
 80172ac:	f7e9 fc56 	bl	8000b5c <__addsf3>
 80172b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80172b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80172b4:	449b      	add	fp, r3
 80172b6:	9b03      	ldr	r3, [sp, #12]
 80172b8:	50f0      	str	r0, [r6, r3]
 80172ba:	4413      	add	r3, r2
 80172bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80172be:	455a      	cmp	r2, fp
 80172c0:	f63f af26 	bhi.w	8017110 <arm_radix4_butterfly_inverse_f32+0x2d8>
 80172c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80172c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80172c8:	3208      	adds	r2, #8
 80172ca:	9215      	str	r2, [sp, #84]	; 0x54
 80172cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80172ce:	3301      	adds	r3, #1
 80172d0:	429a      	cmp	r2, r3
 80172d2:	9314      	str	r3, [sp, #80]	; 0x50
 80172d4:	f47f aefe 	bne.w	80170d4 <arm_radix4_butterfly_inverse_f32+0x29c>
 80172d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80172da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80172dc:	009b      	lsls	r3, r3, #2
 80172de:	0892      	lsrs	r2, r2, #2
 80172e0:	b29b      	uxth	r3, r3
 80172e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80172e4:	2a04      	cmp	r2, #4
 80172e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80172e8:	921c      	str	r2, [sp, #112]	; 0x70
 80172ea:	9311      	str	r3, [sp, #68]	; 0x44
 80172ec:	d902      	bls.n	80172f4 <arm_radix4_butterfly_inverse_f32+0x4bc>
 80172ee:	00db      	lsls	r3, r3, #3
 80172f0:	9312      	str	r3, [sp, #72]	; 0x48
 80172f2:	e6df      	b.n	80170b4 <arm_radix4_butterfly_inverse_f32+0x27c>
 80172f4:	9e00      	ldr	r6, [sp, #0]
 80172f6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80172f8:	3620      	adds	r6, #32
 80172fa:	46b1      	mov	r9, r6
 80172fc:	f859 2c10 	ldr.w	r2, [r9, #-16]
 8017300:	f859 5c20 	ldr.w	r5, [r9, #-32]
 8017304:	f859 3c14 	ldr.w	r3, [r9, #-20]
 8017308:	9300      	str	r3, [sp, #0]
 801730a:	4611      	mov	r1, r2
 801730c:	4628      	mov	r0, r5
 801730e:	9202      	str	r2, [sp, #8]
 8017310:	f7e9 fc24 	bl	8000b5c <__addsf3>
 8017314:	9a02      	ldr	r2, [sp, #8]
 8017316:	9001      	str	r0, [sp, #4]
 8017318:	4611      	mov	r1, r2
 801731a:	4628      	mov	r0, r5
 801731c:	f7e9 fc1c 	bl	8000b58 <__aeabi_fsub>
 8017320:	f859 7c1c 	ldr.w	r7, [r9, #-28]
 8017324:	f859 8c0c 	ldr.w	r8, [r9, #-12]
 8017328:	9002      	str	r0, [sp, #8]
 801732a:	4641      	mov	r1, r8
 801732c:	4638      	mov	r0, r7
 801732e:	f7e9 fc15 	bl	8000b5c <__addsf3>
 8017332:	4641      	mov	r1, r8
 8017334:	4605      	mov	r5, r0
 8017336:	4638      	mov	r0, r7
 8017338:	f7e9 fc0e 	bl	8000b58 <__aeabi_fsub>
 801733c:	f859 bc18 	ldr.w	fp, [r9, #-24]
 8017340:	f859 6c08 	ldr.w	r6, [r9, #-8]
 8017344:	9003      	str	r0, [sp, #12]
 8017346:	4631      	mov	r1, r6
 8017348:	4658      	mov	r0, fp
 801734a:	f7e9 fc07 	bl	8000b5c <__addsf3>
 801734e:	f859 ac04 	ldr.w	sl, [r9, #-4]
 8017352:	4680      	mov	r8, r0
 8017354:	4651      	mov	r1, sl
 8017356:	9800      	ldr	r0, [sp, #0]
 8017358:	f7e9 fc00 	bl	8000b5c <__addsf3>
 801735c:	4631      	mov	r1, r6
 801735e:	4607      	mov	r7, r0
 8017360:	4658      	mov	r0, fp
 8017362:	f7e9 fbf9 	bl	8000b58 <__aeabi_fsub>
 8017366:	4651      	mov	r1, sl
 8017368:	4683      	mov	fp, r0
 801736a:	9800      	ldr	r0, [sp, #0]
 801736c:	f7e9 fbf4 	bl	8000b58 <__aeabi_fsub>
 8017370:	f8dd a004 	ldr.w	sl, [sp, #4]
 8017374:	4606      	mov	r6, r0
 8017376:	4641      	mov	r1, r8
 8017378:	4650      	mov	r0, sl
 801737a:	f7e9 fbef 	bl	8000b5c <__addsf3>
 801737e:	4621      	mov	r1, r4
 8017380:	f7e9 fcf4 	bl	8000d6c <__aeabi_fmul>
 8017384:	4639      	mov	r1, r7
 8017386:	f849 0c20 	str.w	r0, [r9, #-32]
 801738a:	4628      	mov	r0, r5
 801738c:	f7e9 fbe6 	bl	8000b5c <__addsf3>
 8017390:	4621      	mov	r1, r4
 8017392:	f7e9 fceb 	bl	8000d6c <__aeabi_fmul>
 8017396:	4641      	mov	r1, r8
 8017398:	f849 0c1c 	str.w	r0, [r9, #-28]
 801739c:	4650      	mov	r0, sl
 801739e:	f7e9 fbdb 	bl	8000b58 <__aeabi_fsub>
 80173a2:	4621      	mov	r1, r4
 80173a4:	f7e9 fce2 	bl	8000d6c <__aeabi_fmul>
 80173a8:	4639      	mov	r1, r7
 80173aa:	f849 0c18 	str.w	r0, [r9, #-24]
 80173ae:	4628      	mov	r0, r5
 80173b0:	f7e9 fbd2 	bl	8000b58 <__aeabi_fsub>
 80173b4:	4621      	mov	r1, r4
 80173b6:	f7e9 fcd9 	bl	8000d6c <__aeabi_fmul>
 80173ba:	9f02      	ldr	r7, [sp, #8]
 80173bc:	f849 0c14 	str.w	r0, [r9, #-20]
 80173c0:	4631      	mov	r1, r6
 80173c2:	4638      	mov	r0, r7
 80173c4:	f7e9 fbc8 	bl	8000b58 <__aeabi_fsub>
 80173c8:	4621      	mov	r1, r4
 80173ca:	f7e9 fccf 	bl	8000d6c <__aeabi_fmul>
 80173ce:	f849 0c10 	str.w	r0, [r9, #-16]
 80173d2:	9d03      	ldr	r5, [sp, #12]
 80173d4:	4659      	mov	r1, fp
 80173d6:	4628      	mov	r0, r5
 80173d8:	f7e9 fbc0 	bl	8000b5c <__addsf3>
 80173dc:	4621      	mov	r1, r4
 80173de:	f7e9 fcc5 	bl	8000d6c <__aeabi_fmul>
 80173e2:	4631      	mov	r1, r6
 80173e4:	f849 0c0c 	str.w	r0, [r9, #-12]
 80173e8:	4638      	mov	r0, r7
 80173ea:	f7e9 fbb7 	bl	8000b5c <__addsf3>
 80173ee:	4621      	mov	r1, r4
 80173f0:	f7e9 fcbc 	bl	8000d6c <__aeabi_fmul>
 80173f4:	4659      	mov	r1, fp
 80173f6:	f849 0c08 	str.w	r0, [r9, #-8]
 80173fa:	4628      	mov	r0, r5
 80173fc:	f7e9 fbac 	bl	8000b58 <__aeabi_fsub>
 8017400:	4621      	mov	r1, r4
 8017402:	f7e9 fcb3 	bl	8000d6c <__aeabi_fmul>
 8017406:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017408:	f849 0c04 	str.w	r0, [r9, #-4]
 801740c:	3b01      	subs	r3, #1
 801740e:	f109 0920 	add.w	r9, r9, #32
 8017412:	931b      	str	r3, [sp, #108]	; 0x6c
 8017414:	f47f af72 	bne.w	80172fc <arm_radix4_butterfly_inverse_f32+0x4c4>
 8017418:	b021      	add	sp, #132	; 0x84
 801741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801741e:	bf00      	nop

08017420 <arm_cfft_radix4_f32>:
 8017420:	b530      	push	{r4, r5, lr}
 8017422:	4604      	mov	r4, r0
 8017424:	7880      	ldrb	r0, [r0, #2]
 8017426:	6862      	ldr	r2, [r4, #4]
 8017428:	89a3      	ldrh	r3, [r4, #12]
 801742a:	2801      	cmp	r0, #1
 801742c:	460d      	mov	r5, r1
 801742e:	b083      	sub	sp, #12
 8017430:	8821      	ldrh	r1, [r4, #0]
 8017432:	d007      	beq.n	8017444 <arm_cfft_radix4_f32+0x24>
 8017434:	4628      	mov	r0, r5
 8017436:	f7ff fa2d 	bl	8016894 <arm_radix4_butterfly_f32>
 801743a:	78e3      	ldrb	r3, [r4, #3]
 801743c:	2b01      	cmp	r3, #1
 801743e:	d009      	beq.n	8017454 <arm_cfft_radix4_f32+0x34>
 8017440:	b003      	add	sp, #12
 8017442:	bd30      	pop	{r4, r5, pc}
 8017444:	6920      	ldr	r0, [r4, #16]
 8017446:	9000      	str	r0, [sp, #0]
 8017448:	4628      	mov	r0, r5
 801744a:	f7ff fcf5 	bl	8016e38 <arm_radix4_butterfly_inverse_f32>
 801744e:	78e3      	ldrb	r3, [r4, #3]
 8017450:	2b01      	cmp	r3, #1
 8017452:	d1f5      	bne.n	8017440 <arm_cfft_radix4_f32+0x20>
 8017454:	68a3      	ldr	r3, [r4, #8]
 8017456:	89e2      	ldrh	r2, [r4, #14]
 8017458:	8821      	ldrh	r1, [r4, #0]
 801745a:	4628      	mov	r0, r5
 801745c:	b003      	add	sp, #12
 801745e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017462:	f000 b801 	b.w	8017468 <arm_bitreversal_f32>
 8017466:	bf00      	nop

08017468 <arm_bitreversal_f32>:
 8017468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801746c:	b085      	sub	sp, #20
 801746e:	0849      	lsrs	r1, r1, #1
 8017470:	0052      	lsls	r2, r2, #1
 8017472:	2400      	movs	r4, #0
 8017474:	9201      	str	r2, [sp, #4]
 8017476:	1e8a      	subs	r2, r1, #2
 8017478:	9202      	str	r2, [sp, #8]
 801747a:	f101 0a01 	add.w	sl, r1, #1
 801747e:	4625      	mov	r5, r4
 8017480:	4622      	mov	r2, r4
 8017482:	9103      	str	r1, [sp, #12]
 8017484:	9903      	ldr	r1, [sp, #12]
 8017486:	1856      	adds	r6, r2, r1
 8017488:	3401      	adds	r4, #1
 801748a:	f850 2036 	ldr.w	r2, [r0, r6, lsl #3]
 801748e:	f850 7034 	ldr.w	r7, [r0, r4, lsl #3]
 8017492:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
 8017496:	00f2      	lsls	r2, r6, #3
 8017498:	00e4      	lsls	r4, r4, #3
 801749a:	f840 7036 	str.w	r7, [r0, r6, lsl #3]
 801749e:	3404      	adds	r4, #4
 80174a0:	3204      	adds	r2, #4
 80174a2:	5906      	ldr	r6, [r0, r4]
 80174a4:	5887      	ldr	r7, [r0, r2]
 80174a6:	5107      	str	r7, [r0, r4]
 80174a8:	5086      	str	r6, [r0, r2]
 80174aa:	3502      	adds	r5, #2
 80174ac:	881a      	ldrh	r2, [r3, #0]
 80174ae:	9902      	ldr	r1, [sp, #8]
 80174b0:	9c01      	ldr	r4, [sp, #4]
 80174b2:	b2ad      	uxth	r5, r5
 80174b4:	eb05 090a 	add.w	r9, r5, sl
 80174b8:	eb02 080a 	add.w	r8, r2, sl
 80174bc:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 80174c0:	ea4f 0cc9 	mov.w	ip, r9, lsl #3
 80174c4:	00d7      	lsls	r7, r2, #3
 80174c6:	ea4f 06c8 	mov.w	r6, r8, lsl #3
 80174ca:	428d      	cmp	r5, r1
 80174cc:	4423      	add	r3, r4
 80174ce:	f10e 0e04 	add.w	lr, lr, #4
 80174d2:	f10c 0c04 	add.w	ip, ip, #4
 80174d6:	f107 0704 	add.w	r7, r7, #4
 80174da:	f106 0604 	add.w	r6, r6, #4
 80174de:	462c      	mov	r4, r5
 80174e0:	d820      	bhi.n	8017524 <arm_bitreversal_f32+0xbc>
 80174e2:	42aa      	cmp	r2, r5
 80174e4:	d9ce      	bls.n	8017484 <arm_bitreversal_f32+0x1c>
 80174e6:	f850 b035 	ldr.w	fp, [r0, r5, lsl #3]
 80174ea:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
 80174ee:	f840 1035 	str.w	r1, [r0, r5, lsl #3]
 80174f2:	f840 b032 	str.w	fp, [r0, r2, lsl #3]
 80174f6:	59c1      	ldr	r1, [r0, r7]
 80174f8:	f850 b00e 	ldr.w	fp, [r0, lr]
 80174fc:	f840 100e 	str.w	r1, [r0, lr]
 8017500:	f840 b007 	str.w	fp, [r0, r7]
 8017504:	f850 7039 	ldr.w	r7, [r0, r9, lsl #3]
 8017508:	f850 e038 	ldr.w	lr, [r0, r8, lsl #3]
 801750c:	f840 e039 	str.w	lr, [r0, r9, lsl #3]
 8017510:	f840 7038 	str.w	r7, [r0, r8, lsl #3]
 8017514:	f850 700c 	ldr.w	r7, [r0, ip]
 8017518:	f850 e006 	ldr.w	lr, [r0, r6]
 801751c:	f840 e00c 	str.w	lr, [r0, ip]
 8017520:	5187      	str	r7, [r0, r6]
 8017522:	e7af      	b.n	8017484 <arm_bitreversal_f32+0x1c>
 8017524:	b005      	add	sp, #20
 8017526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801752a:	bf00      	nop

0801752c <memset>:
 801752c:	4402      	add	r2, r0
 801752e:	4603      	mov	r3, r0
 8017530:	4293      	cmp	r3, r2
 8017532:	d100      	bne.n	8017536 <memset+0xa>
 8017534:	4770      	bx	lr
 8017536:	f803 1b01 	strb.w	r1, [r3], #1
 801753a:	e7f9      	b.n	8017530 <memset+0x4>

0801753c <__errno>:
 801753c:	4b01      	ldr	r3, [pc, #4]	; (8017544 <__errno+0x8>)
 801753e:	6818      	ldr	r0, [r3, #0]
 8017540:	4770      	bx	lr
 8017542:	bf00      	nop
 8017544:	200001d0 	.word	0x200001d0

08017548 <__libc_init_array>:
 8017548:	b570      	push	{r4, r5, r6, lr}
 801754a:	4d0d      	ldr	r5, [pc, #52]	; (8017580 <__libc_init_array+0x38>)
 801754c:	4c0d      	ldr	r4, [pc, #52]	; (8017584 <__libc_init_array+0x3c>)
 801754e:	1b64      	subs	r4, r4, r5
 8017550:	10a4      	asrs	r4, r4, #2
 8017552:	2600      	movs	r6, #0
 8017554:	42a6      	cmp	r6, r4
 8017556:	d109      	bne.n	801756c <__libc_init_array+0x24>
 8017558:	4d0b      	ldr	r5, [pc, #44]	; (8017588 <__libc_init_array+0x40>)
 801755a:	4c0c      	ldr	r4, [pc, #48]	; (801758c <__libc_init_array+0x44>)
 801755c:	f000 fa20 	bl	80179a0 <_init>
 8017560:	1b64      	subs	r4, r4, r5
 8017562:	10a4      	asrs	r4, r4, #2
 8017564:	2600      	movs	r6, #0
 8017566:	42a6      	cmp	r6, r4
 8017568:	d105      	bne.n	8017576 <__libc_init_array+0x2e>
 801756a:	bd70      	pop	{r4, r5, r6, pc}
 801756c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017570:	4798      	blx	r3
 8017572:	3601      	adds	r6, #1
 8017574:	e7ee      	b.n	8017554 <__libc_init_array+0xc>
 8017576:	f855 3b04 	ldr.w	r3, [r5], #4
 801757a:	4798      	blx	r3
 801757c:	3601      	adds	r6, #1
 801757e:	e7f2      	b.n	8017566 <__libc_init_array+0x1e>
 8017580:	08021208 	.word	0x08021208
 8017584:	08021208 	.word	0x08021208
 8017588:	08021208 	.word	0x08021208
 801758c:	0802120c 	.word	0x0802120c

08017590 <sqrt>:
 8017590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017592:	4606      	mov	r6, r0
 8017594:	460f      	mov	r7, r1
 8017596:	f000 f839 	bl	801760c <__ieee754_sqrt>
 801759a:	4632      	mov	r2, r6
 801759c:	4604      	mov	r4, r0
 801759e:	460d      	mov	r5, r1
 80175a0:	463b      	mov	r3, r7
 80175a2:	4630      	mov	r0, r6
 80175a4:	4639      	mov	r1, r7
 80175a6:	f7e9 fa45 	bl	8000a34 <__aeabi_dcmpun>
 80175aa:	b990      	cbnz	r0, 80175d2 <sqrt+0x42>
 80175ac:	2200      	movs	r2, #0
 80175ae:	2300      	movs	r3, #0
 80175b0:	4630      	mov	r0, r6
 80175b2:	4639      	mov	r1, r7
 80175b4:	f7e9 fa16 	bl	80009e4 <__aeabi_dcmplt>
 80175b8:	b158      	cbz	r0, 80175d2 <sqrt+0x42>
 80175ba:	f7ff ffbf 	bl	801753c <__errno>
 80175be:	2321      	movs	r3, #33	; 0x21
 80175c0:	6003      	str	r3, [r0, #0]
 80175c2:	2200      	movs	r2, #0
 80175c4:	2300      	movs	r3, #0
 80175c6:	4610      	mov	r0, r2
 80175c8:	4619      	mov	r1, r3
 80175ca:	f7e9 f8c3 	bl	8000754 <__aeabi_ddiv>
 80175ce:	4604      	mov	r4, r0
 80175d0:	460d      	mov	r5, r1
 80175d2:	4620      	mov	r0, r4
 80175d4:	4629      	mov	r1, r5
 80175d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080175d8 <sqrtf>:
 80175d8:	b538      	push	{r3, r4, r5, lr}
 80175da:	4605      	mov	r5, r0
 80175dc:	f000 f8ee 	bl	80177bc <__ieee754_sqrtf>
 80175e0:	4629      	mov	r1, r5
 80175e2:	4604      	mov	r4, r0
 80175e4:	4628      	mov	r0, r5
 80175e6:	f7e9 fd87 	bl	80010f8 <__aeabi_fcmpun>
 80175ea:	b968      	cbnz	r0, 8017608 <sqrtf+0x30>
 80175ec:	2100      	movs	r1, #0
 80175ee:	4628      	mov	r0, r5
 80175f0:	f7e9 fd5a 	bl	80010a8 <__aeabi_fcmplt>
 80175f4:	b140      	cbz	r0, 8017608 <sqrtf+0x30>
 80175f6:	f7ff ffa1 	bl	801753c <__errno>
 80175fa:	2321      	movs	r3, #33	; 0x21
 80175fc:	2100      	movs	r1, #0
 80175fe:	6003      	str	r3, [r0, #0]
 8017600:	4608      	mov	r0, r1
 8017602:	f7e9 fc67 	bl	8000ed4 <__aeabi_fdiv>
 8017606:	4604      	mov	r4, r0
 8017608:	4620      	mov	r0, r4
 801760a:	bd38      	pop	{r3, r4, r5, pc}

0801760c <__ieee754_sqrt>:
 801760c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80177b0 <__ieee754_sqrt+0x1a4>
 8017610:	ea3c 0c01 	bics.w	ip, ip, r1
 8017614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017618:	460a      	mov	r2, r1
 801761a:	460b      	mov	r3, r1
 801761c:	4606      	mov	r6, r0
 801761e:	460d      	mov	r5, r1
 8017620:	4604      	mov	r4, r0
 8017622:	d10e      	bne.n	8017642 <__ieee754_sqrt+0x36>
 8017624:	4602      	mov	r2, r0
 8017626:	f7e8 ff6b 	bl	8000500 <__aeabi_dmul>
 801762a:	4602      	mov	r2, r0
 801762c:	460b      	mov	r3, r1
 801762e:	4630      	mov	r0, r6
 8017630:	4629      	mov	r1, r5
 8017632:	f7e8 fdaf 	bl	8000194 <__adddf3>
 8017636:	4606      	mov	r6, r0
 8017638:	460d      	mov	r5, r1
 801763a:	4630      	mov	r0, r6
 801763c:	4629      	mov	r1, r5
 801763e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017642:	2900      	cmp	r1, #0
 8017644:	dc0d      	bgt.n	8017662 <__ieee754_sqrt+0x56>
 8017646:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801764a:	ea5c 0c00 	orrs.w	ip, ip, r0
 801764e:	d0f4      	beq.n	801763a <__ieee754_sqrt+0x2e>
 8017650:	b139      	cbz	r1, 8017662 <__ieee754_sqrt+0x56>
 8017652:	4602      	mov	r2, r0
 8017654:	f7e8 fd9c 	bl	8000190 <__aeabi_dsub>
 8017658:	4602      	mov	r2, r0
 801765a:	460b      	mov	r3, r1
 801765c:	f7e9 f87a 	bl	8000754 <__aeabi_ddiv>
 8017660:	e7e9      	b.n	8017636 <__ieee754_sqrt+0x2a>
 8017662:	1512      	asrs	r2, r2, #20
 8017664:	f000 8089 	beq.w	801777a <__ieee754_sqrt+0x16e>
 8017668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801766c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8017670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017674:	07d2      	lsls	r2, r2, #31
 8017676:	bf5c      	itt	pl
 8017678:	005b      	lslpl	r3, r3, #1
 801767a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 801767e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017682:	bf58      	it	pl
 8017684:	0064      	lslpl	r4, r4, #1
 8017686:	2500      	movs	r5, #0
 8017688:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801768c:	0062      	lsls	r2, r4, #1
 801768e:	1076      	asrs	r6, r6, #1
 8017690:	2016      	movs	r0, #22
 8017692:	4629      	mov	r1, r5
 8017694:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8017698:	190f      	adds	r7, r1, r4
 801769a:	429f      	cmp	r7, r3
 801769c:	bfde      	ittt	le
 801769e:	1bdb      	suble	r3, r3, r7
 80176a0:	1939      	addle	r1, r7, r4
 80176a2:	192d      	addle	r5, r5, r4
 80176a4:	005b      	lsls	r3, r3, #1
 80176a6:	3801      	subs	r0, #1
 80176a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80176ac:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80176b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80176b4:	d1f0      	bne.n	8017698 <__ieee754_sqrt+0x8c>
 80176b6:	4604      	mov	r4, r0
 80176b8:	2720      	movs	r7, #32
 80176ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80176be:	428b      	cmp	r3, r1
 80176c0:	eb0c 0e00 	add.w	lr, ip, r0
 80176c4:	dc02      	bgt.n	80176cc <__ieee754_sqrt+0xc0>
 80176c6:	d113      	bne.n	80176f0 <__ieee754_sqrt+0xe4>
 80176c8:	4596      	cmp	lr, r2
 80176ca:	d811      	bhi.n	80176f0 <__ieee754_sqrt+0xe4>
 80176cc:	f1be 0f00 	cmp.w	lr, #0
 80176d0:	eb0e 000c 	add.w	r0, lr, ip
 80176d4:	da56      	bge.n	8017784 <__ieee754_sqrt+0x178>
 80176d6:	2800      	cmp	r0, #0
 80176d8:	db54      	blt.n	8017784 <__ieee754_sqrt+0x178>
 80176da:	f101 0801 	add.w	r8, r1, #1
 80176de:	1a5b      	subs	r3, r3, r1
 80176e0:	4596      	cmp	lr, r2
 80176e2:	bf88      	it	hi
 80176e4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80176e8:	eba2 020e 	sub.w	r2, r2, lr
 80176ec:	4464      	add	r4, ip
 80176ee:	4641      	mov	r1, r8
 80176f0:	005b      	lsls	r3, r3, #1
 80176f2:	3f01      	subs	r7, #1
 80176f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80176f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80176fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8017700:	d1dd      	bne.n	80176be <__ieee754_sqrt+0xb2>
 8017702:	4313      	orrs	r3, r2
 8017704:	d01b      	beq.n	801773e <__ieee754_sqrt+0x132>
 8017706:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80177b4 <__ieee754_sqrt+0x1a8>
 801770a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80177b8 <__ieee754_sqrt+0x1ac>
 801770e:	e9da 0100 	ldrd	r0, r1, [sl]
 8017712:	e9db 2300 	ldrd	r2, r3, [fp]
 8017716:	f7e8 fd3b 	bl	8000190 <__aeabi_dsub>
 801771a:	e9da 8900 	ldrd	r8, r9, [sl]
 801771e:	4602      	mov	r2, r0
 8017720:	460b      	mov	r3, r1
 8017722:	4640      	mov	r0, r8
 8017724:	4649      	mov	r1, r9
 8017726:	f7e9 f967 	bl	80009f8 <__aeabi_dcmple>
 801772a:	b140      	cbz	r0, 801773e <__ieee754_sqrt+0x132>
 801772c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8017730:	e9da 0100 	ldrd	r0, r1, [sl]
 8017734:	e9db 2300 	ldrd	r2, r3, [fp]
 8017738:	d126      	bne.n	8017788 <__ieee754_sqrt+0x17c>
 801773a:	3501      	adds	r5, #1
 801773c:	463c      	mov	r4, r7
 801773e:	106b      	asrs	r3, r5, #1
 8017740:	0864      	lsrs	r4, r4, #1
 8017742:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8017746:	07ea      	lsls	r2, r5, #31
 8017748:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801774c:	bf48      	it	mi
 801774e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8017752:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8017756:	4620      	mov	r0, r4
 8017758:	e76d      	b.n	8017636 <__ieee754_sqrt+0x2a>
 801775a:	0ae3      	lsrs	r3, r4, #11
 801775c:	3915      	subs	r1, #21
 801775e:	0564      	lsls	r4, r4, #21
 8017760:	2b00      	cmp	r3, #0
 8017762:	d0fa      	beq.n	801775a <__ieee754_sqrt+0x14e>
 8017764:	02d8      	lsls	r0, r3, #11
 8017766:	d50a      	bpl.n	801777e <__ieee754_sqrt+0x172>
 8017768:	f1c2 0020 	rsb	r0, r2, #32
 801776c:	fa24 f000 	lsr.w	r0, r4, r0
 8017770:	1e55      	subs	r5, r2, #1
 8017772:	4094      	lsls	r4, r2
 8017774:	4303      	orrs	r3, r0
 8017776:	1b4a      	subs	r2, r1, r5
 8017778:	e776      	b.n	8017668 <__ieee754_sqrt+0x5c>
 801777a:	4611      	mov	r1, r2
 801777c:	e7f0      	b.n	8017760 <__ieee754_sqrt+0x154>
 801777e:	005b      	lsls	r3, r3, #1
 8017780:	3201      	adds	r2, #1
 8017782:	e7ef      	b.n	8017764 <__ieee754_sqrt+0x158>
 8017784:	4688      	mov	r8, r1
 8017786:	e7aa      	b.n	80176de <__ieee754_sqrt+0xd2>
 8017788:	f7e8 fd04 	bl	8000194 <__adddf3>
 801778c:	e9da 8900 	ldrd	r8, r9, [sl]
 8017790:	4602      	mov	r2, r0
 8017792:	460b      	mov	r3, r1
 8017794:	4640      	mov	r0, r8
 8017796:	4649      	mov	r1, r9
 8017798:	f7e9 f924 	bl	80009e4 <__aeabi_dcmplt>
 801779c:	b120      	cbz	r0, 80177a8 <__ieee754_sqrt+0x19c>
 801779e:	1ca1      	adds	r1, r4, #2
 80177a0:	bf08      	it	eq
 80177a2:	3501      	addeq	r5, #1
 80177a4:	3402      	adds	r4, #2
 80177a6:	e7ca      	b.n	801773e <__ieee754_sqrt+0x132>
 80177a8:	3401      	adds	r4, #1
 80177aa:	f024 0401 	bic.w	r4, r4, #1
 80177ae:	e7c6      	b.n	801773e <__ieee754_sqrt+0x132>
 80177b0:	7ff00000 	.word	0x7ff00000
 80177b4:	200001d8 	.word	0x200001d8
 80177b8:	200001e0 	.word	0x200001e0

080177bc <__ieee754_sqrtf>:
 80177bc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80177c0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80177c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177c8:	4603      	mov	r3, r0
 80177ca:	4604      	mov	r4, r0
 80177cc:	d30a      	bcc.n	80177e4 <__ieee754_sqrtf+0x28>
 80177ce:	4601      	mov	r1, r0
 80177d0:	f7e9 facc 	bl	8000d6c <__aeabi_fmul>
 80177d4:	4601      	mov	r1, r0
 80177d6:	4620      	mov	r0, r4
 80177d8:	f7e9 f9c0 	bl	8000b5c <__addsf3>
 80177dc:	4604      	mov	r4, r0
 80177de:	4620      	mov	r0, r4
 80177e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177e4:	2a00      	cmp	r2, #0
 80177e6:	d0fa      	beq.n	80177de <__ieee754_sqrtf+0x22>
 80177e8:	2800      	cmp	r0, #0
 80177ea:	da06      	bge.n	80177fa <__ieee754_sqrtf+0x3e>
 80177ec:	4601      	mov	r1, r0
 80177ee:	f7e9 f9b3 	bl	8000b58 <__aeabi_fsub>
 80177f2:	4601      	mov	r1, r0
 80177f4:	f7e9 fb6e 	bl	8000ed4 <__aeabi_fdiv>
 80177f8:	e7f0      	b.n	80177dc <__ieee754_sqrtf+0x20>
 80177fa:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80177fe:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8017802:	d03d      	beq.n	8017880 <__ieee754_sqrtf+0xc4>
 8017804:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801780c:	07ca      	lsls	r2, r1, #31
 801780e:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 8017812:	bf58      	it	pl
 8017814:	005b      	lslpl	r3, r3, #1
 8017816:	2400      	movs	r4, #0
 8017818:	106d      	asrs	r5, r5, #1
 801781a:	005b      	lsls	r3, r3, #1
 801781c:	2019      	movs	r0, #25
 801781e:	4626      	mov	r6, r4
 8017820:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8017824:	1872      	adds	r2, r6, r1
 8017826:	429a      	cmp	r2, r3
 8017828:	bfdd      	ittte	le
 801782a:	1856      	addle	r6, r2, r1
 801782c:	1864      	addle	r4, r4, r1
 801782e:	1a9a      	suble	r2, r3, r2
 8017830:	461a      	movgt	r2, r3
 8017832:	3801      	subs	r0, #1
 8017834:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8017838:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801783c:	d1f2      	bne.n	8017824 <__ieee754_sqrtf+0x68>
 801783e:	b1ba      	cbz	r2, 8017870 <__ieee754_sqrtf+0xb4>
 8017840:	4e14      	ldr	r6, [pc, #80]	; (8017894 <__ieee754_sqrtf+0xd8>)
 8017842:	4f15      	ldr	r7, [pc, #84]	; (8017898 <__ieee754_sqrtf+0xdc>)
 8017844:	6830      	ldr	r0, [r6, #0]
 8017846:	6839      	ldr	r1, [r7, #0]
 8017848:	f8d6 8000 	ldr.w	r8, [r6]
 801784c:	f7e9 f984 	bl	8000b58 <__aeabi_fsub>
 8017850:	4601      	mov	r1, r0
 8017852:	4640      	mov	r0, r8
 8017854:	f7e9 fc32 	bl	80010bc <__aeabi_fcmple>
 8017858:	b150      	cbz	r0, 8017870 <__ieee754_sqrtf+0xb4>
 801785a:	6830      	ldr	r0, [r6, #0]
 801785c:	6839      	ldr	r1, [r7, #0]
 801785e:	6836      	ldr	r6, [r6, #0]
 8017860:	f7e9 f97c 	bl	8000b5c <__addsf3>
 8017864:	4601      	mov	r1, r0
 8017866:	4630      	mov	r0, r6
 8017868:	f7e9 fc1e 	bl	80010a8 <__aeabi_fcmplt>
 801786c:	b168      	cbz	r0, 801788a <__ieee754_sqrtf+0xce>
 801786e:	3402      	adds	r4, #2
 8017870:	1064      	asrs	r4, r4, #1
 8017872:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8017876:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 801787a:	e7b0      	b.n	80177de <__ieee754_sqrtf+0x22>
 801787c:	005b      	lsls	r3, r3, #1
 801787e:	3201      	adds	r2, #1
 8017880:	0218      	lsls	r0, r3, #8
 8017882:	d5fb      	bpl.n	801787c <__ieee754_sqrtf+0xc0>
 8017884:	3a01      	subs	r2, #1
 8017886:	1a89      	subs	r1, r1, r2
 8017888:	e7bc      	b.n	8017804 <__ieee754_sqrtf+0x48>
 801788a:	3401      	adds	r4, #1
 801788c:	f024 0401 	bic.w	r4, r4, #1
 8017890:	e7ee      	b.n	8017870 <__ieee754_sqrtf+0xb4>
 8017892:	bf00      	nop
 8017894:	200001e8 	.word	0x200001e8
 8017898:	200001ec 	.word	0x200001ec
 801789c:	00000000 	.word	0x00000000

080178a0 <floor>:
 80178a0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80178a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178a8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80178ac:	2e13      	cmp	r6, #19
 80178ae:	460b      	mov	r3, r1
 80178b0:	4607      	mov	r7, r0
 80178b2:	460c      	mov	r4, r1
 80178b4:	4605      	mov	r5, r0
 80178b6:	dc32      	bgt.n	801791e <floor+0x7e>
 80178b8:	2e00      	cmp	r6, #0
 80178ba:	da14      	bge.n	80178e6 <floor+0x46>
 80178bc:	a334      	add	r3, pc, #208	; (adr r3, 8017990 <floor+0xf0>)
 80178be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c2:	f7e8 fc67 	bl	8000194 <__adddf3>
 80178c6:	2200      	movs	r2, #0
 80178c8:	2300      	movs	r3, #0
 80178ca:	f7e9 f8a9 	bl	8000a20 <__aeabi_dcmpgt>
 80178ce:	b138      	cbz	r0, 80178e0 <floor+0x40>
 80178d0:	2c00      	cmp	r4, #0
 80178d2:	da56      	bge.n	8017982 <floor+0xe2>
 80178d4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80178d8:	4325      	orrs	r5, r4
 80178da:	d055      	beq.n	8017988 <floor+0xe8>
 80178dc:	4c2e      	ldr	r4, [pc, #184]	; (8017998 <floor+0xf8>)
 80178de:	2500      	movs	r5, #0
 80178e0:	4623      	mov	r3, r4
 80178e2:	462f      	mov	r7, r5
 80178e4:	e025      	b.n	8017932 <floor+0x92>
 80178e6:	4a2d      	ldr	r2, [pc, #180]	; (801799c <floor+0xfc>)
 80178e8:	fa42 f806 	asr.w	r8, r2, r6
 80178ec:	ea01 0208 	and.w	r2, r1, r8
 80178f0:	4302      	orrs	r2, r0
 80178f2:	d01e      	beq.n	8017932 <floor+0x92>
 80178f4:	a326      	add	r3, pc, #152	; (adr r3, 8017990 <floor+0xf0>)
 80178f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178fa:	f7e8 fc4b 	bl	8000194 <__adddf3>
 80178fe:	2200      	movs	r2, #0
 8017900:	2300      	movs	r3, #0
 8017902:	f7e9 f88d 	bl	8000a20 <__aeabi_dcmpgt>
 8017906:	2800      	cmp	r0, #0
 8017908:	d0ea      	beq.n	80178e0 <floor+0x40>
 801790a:	2c00      	cmp	r4, #0
 801790c:	bfbe      	ittt	lt
 801790e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017912:	4133      	asrlt	r3, r6
 8017914:	18e4      	addlt	r4, r4, r3
 8017916:	ea24 0408 	bic.w	r4, r4, r8
 801791a:	2500      	movs	r5, #0
 801791c:	e7e0      	b.n	80178e0 <floor+0x40>
 801791e:	2e33      	cmp	r6, #51	; 0x33
 8017920:	dd0b      	ble.n	801793a <floor+0x9a>
 8017922:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017926:	d104      	bne.n	8017932 <floor+0x92>
 8017928:	4602      	mov	r2, r0
 801792a:	f7e8 fc33 	bl	8000194 <__adddf3>
 801792e:	4607      	mov	r7, r0
 8017930:	460b      	mov	r3, r1
 8017932:	4638      	mov	r0, r7
 8017934:	4619      	mov	r1, r3
 8017936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801793a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801793e:	f04f 38ff 	mov.w	r8, #4294967295
 8017942:	fa28 f802 	lsr.w	r8, r8, r2
 8017946:	ea10 0f08 	tst.w	r0, r8
 801794a:	d0f2      	beq.n	8017932 <floor+0x92>
 801794c:	a310      	add	r3, pc, #64	; (adr r3, 8017990 <floor+0xf0>)
 801794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017952:	f7e8 fc1f 	bl	8000194 <__adddf3>
 8017956:	2200      	movs	r2, #0
 8017958:	2300      	movs	r3, #0
 801795a:	f7e9 f861 	bl	8000a20 <__aeabi_dcmpgt>
 801795e:	2800      	cmp	r0, #0
 8017960:	d0be      	beq.n	80178e0 <floor+0x40>
 8017962:	2c00      	cmp	r4, #0
 8017964:	da0a      	bge.n	801797c <floor+0xdc>
 8017966:	2e14      	cmp	r6, #20
 8017968:	d101      	bne.n	801796e <floor+0xce>
 801796a:	3401      	adds	r4, #1
 801796c:	e006      	b.n	801797c <floor+0xdc>
 801796e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017972:	2301      	movs	r3, #1
 8017974:	40b3      	lsls	r3, r6
 8017976:	441d      	add	r5, r3
 8017978:	42af      	cmp	r7, r5
 801797a:	d8f6      	bhi.n	801796a <floor+0xca>
 801797c:	ea25 0508 	bic.w	r5, r5, r8
 8017980:	e7ae      	b.n	80178e0 <floor+0x40>
 8017982:	2500      	movs	r5, #0
 8017984:	462c      	mov	r4, r5
 8017986:	e7ab      	b.n	80178e0 <floor+0x40>
 8017988:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801798c:	e7a8      	b.n	80178e0 <floor+0x40>
 801798e:	bf00      	nop
 8017990:	8800759c 	.word	0x8800759c
 8017994:	7e37e43c 	.word	0x7e37e43c
 8017998:	bff00000 	.word	0xbff00000
 801799c:	000fffff 	.word	0x000fffff

080179a0 <_init>:
 80179a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179a2:	bf00      	nop
 80179a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179a6:	bc08      	pop	{r3}
 80179a8:	469e      	mov	lr, r3
 80179aa:	4770      	bx	lr

080179ac <_fini>:
 80179ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179ae:	bf00      	nop
 80179b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179b2:	bc08      	pop	{r3}
 80179b4:	469e      	mov	lr, r3
 80179b6:	4770      	bx	lr
